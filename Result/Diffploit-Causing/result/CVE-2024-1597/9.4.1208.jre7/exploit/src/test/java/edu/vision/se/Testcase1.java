package edu.vision.se;

import static org.junit.Assert.assertEquals;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

import org.junit.Before;
import org.junit.Test;

public class Testcase1 {
    private Object transferModeRegistry;

    @Before
    public void setUp() throws Exception {
        Class<?> typeTransferModeRegistry = Class.forName("org.postgresql.core.TypeTransferModeRegistry");
        transferModeRegistry = java.lang.reflect.Proxy.newProxyInstance(
                typeTransferModeRegistry.getClassLoader(),
                new Class<?>[] { typeTransferModeRegistry },
                (proxy, method, args) -> false);
    }

    @Test
    public void mergeOfParameterLists() throws Exception {
        Class<?> SimpleParameterList = Class.forName("org.postgresql.core.v3.SimpleParameterList");
        Constructor<?> constructor = SimpleParameterList.getDeclaredConstructor(int.class,
                Class.forName("org.postgresql.core.TypeTransferModeRegistry"));
        constructor.setAccessible(true);
        Object s1SPL = constructor.newInstance(4, transferModeRegistry);
        Method setIntParameter_method = SimpleParameterList.getDeclaredMethod("setIntParameter", int.class, int.class);
        setIntParameter_method.setAccessible(true);
        setIntParameter_method.invoke(s1SPL, 1, 1);
        setIntParameter_method.invoke(s1SPL, 2, 2);
        setIntParameter_method.invoke(s1SPL, 3, 3);
        setIntParameter_method.invoke(s1SPL, 4, 4);

        Method toString_method = SimpleParameterList.getDeclaredMethod("toString");
        toString_method.setAccessible(true);
        String result = (String) toString_method.invoke(s1SPL);
        validateReturnValue(result);
    }

    public void validateReturnValue(String result) {
        assertEquals("Expected string representation of values does not match outcome.",
                "<[('1'::int4) ,('2'::int4) ,('3'::int4) ,('4'::int4)]>",
                result);
    }
}
