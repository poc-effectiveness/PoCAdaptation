package edu.vision.se;

import org.hibernate.validator.constraints.SafeHtml;
import org.hibernate.validator.constraints.SafeHtml.WhiteListType;
import org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator;
import org.junit.Test;
import org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl;
import static org.junit.Assert.assertFalse;
import org.jsoup.safety.Whitelist;

public class Testcase1 {

    private ConstraintDescriptorImpl descriptorBuilder;

    private SafeHtmlValidator getSafeHtmlValidator(SafeHtml p) {
        SafeHtmlValidator validator = new SafeHtmlValidator();
        validator.initialize(p);
        return validator;
    }

    @Test
    public void testDownlevelRevealedConditionalComment() throws Exception {
        SafeHtml p = new SafeHtml() {
            public Class<?>[] groups() { return new Class[0]; }
            public String message() { return ""; }
            public Class<? extends javax.validation.Payload>[] payload() { return new Class[0]; }
            public WhiteListType whitelistType() { return WhiteListType.BASIC; }
            public String[] additionalTags() { return new String[0]; }
            public SafeHtml.Tag[] additionalTagsWithAttributes() { return new SafeHtml.Tag[0]; }
            public String baseURI() { return ""; }
            public Class<? extends java.lang.annotation.Annotation> annotationType() { return SafeHtml.class; }
        };

        assertFalse(getSafeHtmlValidator(p).isValid("<![if !IE]>\n<SCRIPT>alert{'XSS'};</SCRIPT>\n<![endif]>", null));
    }

    @Test
    public void testDownlevelHiddenConditionalComment() throws Exception {
        SafeHtml p = new SafeHtml() {
            public Class<?>[] groups() { return new Class[0]; }
            public String message() { return ""; }
            public Class<? extends javax.validation.Payload>[] payload() { return new Class[0]; }
            public WhiteListType whitelistType() { return WhiteListType.BASIC; }
            public String[] additionalTags() { return new String[0]; }
            public SafeHtml.Tag[] additionalTagsWithAttributes() { return new SafeHtml.Tag[0]; }
            public String baseURI() { return ""; }
            public Class<? extends java.lang.annotation.Annotation> annotationType() { return SafeHtml.class; }
        };

        assertFalse(getSafeHtmlValidator(p).isValid("<!--[if gte IE 4]>\n<SCRIPT>alert{'XSS'};</SCRIPT>\n<![endif]-->", null));
    }

    @Test
    public void testSimpleComment() throws Exception {
        SafeHtml p = new SafeHtml() {
            public Class<?>[] groups() { return new Class[0]; }
            public String message() { return ""; }
            public Class<? extends javax.validation.Payload>[] payload() { return new Class[0]; }
            public WhiteListType whitelistType() { return WhiteListType.BASIC; }
            public String[] additionalTags() { return new String[0]; }
            public SafeHtml.Tag[] additionalTagsWithAttributes() { return new SafeHtml.Tag[0]; }
            public String baseURI() { return ""; }
            public Class<? extends java.lang.annotation.Annotation> annotationType() { return SafeHtml.class; }
        };

        assertFalse(getSafeHtmlValidator(p).isValid("<!-- Just a comment -->", null));
    }

    @Test
    public void testServerSideIncludesSSI() throws Exception {
        SafeHtml p = new SafeHtml() {
            public Class<?>[] groups() { return new Class[0]; }
            public String message() { return ""; }
            public Class<? extends javax.validation.Payload>[] payload() { return new Class[0]; }
            public WhiteListType whitelistType() { return WhiteListType.BASIC; }
            public String[] additionalTags() { return new String[0]; }
            public SafeHtml.Tag[] additionalTagsWithAttributes() { return new SafeHtml.Tag[0]; }
            public String baseURI() { return ""; }
            public Class<? extends java.lang.annotation.Annotation> annotationType() { return SafeHtml.class; }
        };

        assertFalse(getSafeHtmlValidator(p).isValid("<? echo{'<SCR}'; echo{'IPT>alert{\"XSS\"}</SCRIPT>'}; ?>", null));
    }

    @Test
    public void testPHPScript() throws Exception {
        SafeHtml p = new SafeHtml() {
            public Class<?>[] groups() { return new Class[0]; }
            public String message() { return ""; }
            public Class<? extends javax.validation.Payload>[] payload() { return new Class[0]; }
            public WhiteListType whitelistType() { return WhiteListType.BASIC; }
            public String[] additionalTags() { return new String[0]; }
            public SafeHtml.Tag[] additionalTagsWithAttributes() { return new SafeHtml.Tag[0]; }
            public String baseURI() { return ""; }
            public Class<? extends java.lang.annotation.Annotation> annotationType() { return SafeHtml.class; }
        };

        assertFalse(getSafeHtmlValidator(p).isValid("<? echo{'<SCR}'; echo{'IPT>alert{\"XSS\"}</SCRIPT>'}; ?>", null));
    }
}
