package edu.vision.se;

import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.Unpooled;
import io.netty.channel.*;
import io.netty.channel.Channel;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.http.HttpMessage;
import io.netty.handler.codec.http.HttpRequestDecoder;
import io.netty.util.Attribute;
import io.netty.util.AttributeKey;
import io.netty.util.CharsetUtil;
import org.junit.Test;

import java.net.SocketAddress;

import static org.junit.Assert.assertTrue;

public class Testcase1 {
    @Test(timeout = 60000)
    public void testWhitespace() {
        Channel channel = new AbstractChannel(null, null) {
            @Override
            protected AbstractUnsafe newUnsafe() { return null; }
            @Override
            protected boolean isCompatible(EventLoop loop) { return false; }
            @Override
            protected SocketAddress localAddress0() { return null; }
            @Override
            protected SocketAddress remoteAddress0() { return null; }
            @Override
            protected void doBind(SocketAddress localAddress) throws Exception {}
            @Override
            protected void doDisconnect() throws Exception {}
            @Override
            protected void doClose() throws Exception {}
            @Override
            protected void doBeginRead() throws Exception {}
            @Override
            protected void doWrite(ChannelOutboundBuffer in) throws Exception {}
            @Override
            public ChannelConfig config() { return null; }
            @Override
            public boolean isOpen() { return false; }
            @Override
            public boolean isActive() { return false; }
            @Override
            public ChannelMetadata metadata() { return null; }
            @Override
            protected boolean isFlushPending() { return false; }
        };
        
        String requestStr = "GET /some/path HTTP/1.1\r\n" +
                "Transfer-Encoding : chunked\r\n" +
                "Host: netty.io\n\r\n";
        new HttpRequestDecoder().decode(null, Unpooled.copiedBuffer(requestStr, CharsetUtil.US_ASCII), null);
    }

    public void validateReturnValue(Object msg) {
        HttpMessage request = (HttpMessage) msg;
        assertTrue(request.getDecoderResult().isFailure());
        assertTrue(request.getDecoderResult().cause() instanceof IllegalArgumentException);
    }
}
