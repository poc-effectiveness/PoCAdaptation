diff --git a/pom.xml b/pom.xml
index ce8e29c0a..36918c361 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,11 +4,11 @@
   <parent>
     <groupId>com.fasterxml.jackson</groupId>
     <artifactId>jackson-parent</artifactId>
-    <version>2.7</version>
+    <version>2.8-rc1b</version>
   </parent>
   <groupId>com.fasterxml.jackson.dataformat</groupId>
   <artifactId>jackson-dataformat-xml</artifactId>
-  <version>2.7.5-SNAPSHOT</version>
+  <version>2.8.0.rc1</version>
   <name>Jackson-dataformat-XML</name>
   <packaging>bundle</packaging>
   <description>Data format extension for Jackson (http://jackson.codehaus.org) to offer
@@ -21,16 +21,12 @@ Some data-binding types overridden as well (ObjectMapper sub-classed as XmlMappe
     <connection>scm:git:git@github.com:FasterXML/jackson-dataformat-xml.git</connection>
     <developerConnection>scm:git:git@github.com:FasterXML/jackson-dataformat-xml.git</developerConnection>
     <url>http://github.com/FasterXML/jackson-dataformat-xml</url>    
-    <tag>HEAD</tag>
+    <tag>jackson-dataformat-xml-2.8.0.rc1</tag>
   </scm>
   <properties>
-    <version.jackson.core>2.7.4</version.jackson.core>
+    <version.jackson.core>2.8.0.rc1</version.jackson.core>
     <version.jackson.jaxb>${version.jackson.core}</version.jackson.jaxb>
 
-    <!-- 23-Feb-2016, tatu: Try to keep JDK6 runtime for 2.7 at least -->
-    <javac.src.version>1.6</javac.src.version>
-    <javac.target.version>1.6</javac.target.version>
-
     <packageVersion.dir>com/fasterxml/jackson/dataformat/xml</packageVersion.dir>
     <packageVersion.package>${project.groupId}.xml</packageVersion.package>
 
@@ -86,10 +82,18 @@ Some data-binding types overridden as well (ObjectMapper sub-classed as XmlMappe
           has odd issues. Let's default to Woodstox: caller can upgrade to Aalto
          (needs to block this dep)
       -->
+    <!-- 09-May-2016, tatu: With Jackson 2.8, let's make this compile-dep to make it
+        less likely users accidentally try to use Sjsxp from JDK, which leads to probs
+      -->
     <dependency>
       <groupId>com.fasterxml.woodstox</groupId>
       <artifactId>woodstox-core</artifactId>
       <version>5.0.2</version>
+    </dependency>
+
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
       <scope>test</scope>
     </dependency>
   </dependencies>
diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java
index d81ddda17..a06f16348 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java
@@ -235,12 +235,10 @@ public void writeValue(XMLStreamWriter w0, Object value) throws IOException {
     /**********************************************************
      */
 
-    /**
-     * XML indentation differs from JSON indentation, thereby
-     * need to change default pretty-printer
-     */
+    // 09-May-2016, tatu: Was removed from `jackson-databind` in 2.8; remove from
+    //    here in 2.9.
     @Deprecated // since 2.6
-    @Override
+//    @Override
     protected PrettyPrinter _defaultPrettyPrinter() {
         return new DefaultXmlPrettyPrinter();
     }
diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTypeResolverBuilder.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTypeResolverBuilder.java
index 49521f0a0..b3d77b744 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTypeResolverBuilder.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTypeResolverBuilder.java
@@ -1,5 +1,6 @@
 package com.fasterxml.jackson.dataformat.xml;
 
+import java.io.IOException;
 import java.util.Collection;
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
@@ -126,14 +127,8 @@ public String idFromValue(Object value)
             return encodeXmlClassName(super.idFromValue(value));
         }
 
-        @SuppressWarnings("deprecation")
         @Override
-        public JavaType typeFromId(String id) {
-            return super.typeFromId(decodeXmlClassName(id));
-        }
-
-        @Override
-        public JavaType typeFromId(DatabindContext context, String id) {
+        public JavaType typeFromId(DatabindContext context, String id) throws IOException {
             return super.typeFromId(context, decodeXmlClassName(id));
         }
     }
@@ -152,14 +147,8 @@ public String idFromValue(Object value)
             return encodeXmlClassName(super.idFromValue(value));
         }
 
-        @SuppressWarnings("deprecation")
-        @Override
-        public JavaType typeFromId(String id) {
-            return super.typeFromId(decodeXmlClassName(id));
-        }
-
         @Override
-        public JavaType typeFromId(DatabindContext context, String id) {
+        public JavaType typeFromId(DatabindContext context, String id) throws IOException {
             return super.typeFromId(context, decodeXmlClassName(id));
         }
     }
diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java
index 43948b853..ad64e55fa 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.dataformat.xml.deser;
 
 import java.io.IOException;
+import java.io.Writer;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.Set;
@@ -813,6 +814,17 @@ public boolean hasTextCharacters()
         return false;
     }
 
+    @Override // since 2.8
+    public int getText(Writer writer) throws IOException
+    {
+        String str = getText();
+        if (str == null) {
+            return 0;
+        }
+        writer.write(str);
+        return str.length();
+    }
+    
     /*
     /**********************************************************
     /* Public API, access to token information, binary
diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java
index 17c7c0e12..c32b15e20 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java
@@ -218,23 +218,6 @@ public void initGenerator()  throws IOException
     /**********************************************************
      */
 
-    /**
-     * Standard JSON indenter does not work well with XML, use
-     * default XML indenter instead.
-     *<p>
-     * !!! TODO: same as implementation in core 2.6; override may be
-     * removed from 2.8
-     */
-    @Override
-    public final JsonGenerator useDefaultPrettyPrinter()
-    {
-        // related to [dataformat-xml#136], need to verify:
-        if (_cfgPrettyPrinter != null) {
-            return this;
-        }
-        return setPrettyPrinter(_constructDefaultPrettyPrinter());
-    }
-
     @Override
     protected PrettyPrinter _constructDefaultPrettyPrinter() {
         return new DefaultXmlPrettyPrinter();
@@ -310,6 +293,9 @@ public ToXmlGenerator configure(Feature f, boolean state) {
         return this;
     }
 
+    @Override
+    public boolean canWriteFormattedNumbers() { return true; }
+
     // @since 2.7.5
     public boolean inRoot() {
         return _writeContext.inRoot();
diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/UnwrappingXmlBeanSerializer.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/UnwrappingXmlBeanSerializer.java
index f37e3d71c..d6cf70416 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/UnwrappingXmlBeanSerializer.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/UnwrappingXmlBeanSerializer.java
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.dataformat.xml.ser;
 
 import java.io.IOException;
+import java.util.Set;
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;
@@ -55,7 +56,7 @@ public UnwrappingXmlBeanSerializer(UnwrappingXmlBeanSerializer src, ObjectIdWrit
         _nameTransformer = src._nameTransformer;
     }
 
-    protected UnwrappingXmlBeanSerializer(UnwrappingXmlBeanSerializer src, String[] toIgnore)
+    protected UnwrappingXmlBeanSerializer(UnwrappingXmlBeanSerializer src, Set<String> toIgnore)
     {
         super(src, toIgnore);
         _nameTransformer = src._nameTransformer;
@@ -92,9 +93,8 @@ public BeanSerializerBase withFilterId(Object filterId)
         return new UnwrappingXmlBeanSerializer(this, _objectIdWriter, filterId);
     }
 
-    @Override
-    protected BeanSerializerBase withIgnorals(String[] toIgnore)
-    {
+    @Override // since 2.8
+    protected BeanSerializerBase withIgnorals(Set<String> toIgnore) {
         return new UnwrappingXmlBeanSerializer(this, toIgnore);
     }
 
@@ -103,8 +103,7 @@ protected BeanSerializerBase withIgnorals(String[] toIgnore)
      * so implementation will simply return 'this'.
      */
     @Override
-    protected BeanSerializerBase asArraySerializer()
-    {
+    protected BeanSerializerBase asArraySerializer() {
         return this;
     }
 
diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java
index 90f7cbd58..5d6309995 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java
@@ -1,9 +1,9 @@
 package com.fasterxml.jackson.dataformat.xml.ser;
 
 import java.io.IOException;
+import java.util.Set;
 
 import com.fasterxml.jackson.core.JsonGenerator;
-
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
@@ -39,7 +39,7 @@ public XmlBeanSerializer(XmlBeanSerializerBase src, ObjectIdWriter objectIdWrite
         super(src, objectIdWriter);
     }
 
-    public XmlBeanSerializer(XmlBeanSerializerBase src, String[] toIgnore) {
+    public XmlBeanSerializer(XmlBeanSerializerBase src, Set<String> toIgnore) {
         super(src, toIgnore);
     }
 
@@ -49,7 +49,6 @@ public XmlBeanSerializer(XmlBeanSerializerBase src, String[] toIgnore) {
     /**********************************************************
      */
 
-
     @Override
     public JsonSerializer<Object> unwrappingSerializer(NameTransformer unwrapper) {
         return new UnwrappingXmlBeanSerializer(this, unwrapper);
@@ -66,7 +65,7 @@ public BeanSerializerBase withFilterId(Object filterId) {
     }
 
     @Override
-    protected BeanSerializerBase withIgnorals(String[] toIgnore) {
+    protected BeanSerializerBase withIgnorals(Set<String> toIgnore) {
         return new XmlBeanSerializer(this, toIgnore);
     }
 
diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java
index 3a7532064..8e8b98838 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import java.util.BitSet;
+import java.util.Set;
 
 import javax.xml.namespace.QName;
 
@@ -123,7 +124,7 @@ protected XmlBeanSerializerBase(XmlBeanSerializerBase src, ObjectIdWriter object
         _cdata = src._cdata;
     }
 
-    protected XmlBeanSerializerBase(XmlBeanSerializerBase src, String[] toIgnore)
+    protected XmlBeanSerializerBase(XmlBeanSerializerBase src, Set<String> toIgnore)
     {
         super(src, toIgnore);
         _attributeCount = src._attributeCount;
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java
index cd0f3101a..5ce06ed9e 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java
@@ -10,7 +10,6 @@
 import com.fasterxml.jackson.dataformat.xml.XmlTestBase;
 import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;
 
-
 public class XmlParserTest extends XmlTestBase
 {
     /*
@@ -76,74 +75,74 @@ public void testRoundTripWithSample() throws Exception
         // Former could be worked around; latter less so at this point.
 
         // So, for now, let's just do sort of minimal verification, manually
-        JsonParser jp = _xmlMapper.getFactory().createParser(xml);
+        JsonParser p = _xmlMapper.getFactory().createParser(xml);
         
-        assertToken(JsonToken.START_OBJECT, jp.nextToken()); // main object
-
-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Image'
-        verifyFieldName(jp, "Image");
-        assertToken(JsonToken.START_OBJECT, jp.nextToken()); // 'image' object
-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Width'
-        verifyFieldName(jp, "Width");
-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());
-        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_WIDTH), jp.getText());
-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Height'
-        verifyFieldName(jp, "Height");
-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());
-        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_HEIGHT), jp.getText());
-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Title'
-        verifyFieldName(jp, "Title");
-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());
-        assertEquals(SAMPLE_SPEC_VALUE_TITLE, getAndVerifyText(jp));
-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Thumbnail'
-        verifyFieldName(jp, "Thumbnail");
-        assertToken(JsonToken.START_OBJECT, jp.nextToken()); // 'thumbnail' object
-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Url'
-        verifyFieldName(jp, "Url");
-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());
-        assertEquals(SAMPLE_SPEC_VALUE_TN_URL, getAndVerifyText(jp));
-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Height'
-        verifyFieldName(jp, "Height");
-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());
-        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_HEIGHT), jp.getText());
-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Width'
-        verifyFieldName(jp, "Width");
+        assertToken(JsonToken.START_OBJECT, p.nextToken()); // main object
+
+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Image'
+        verifyFieldName(p, "Image");
+        assertToken(JsonToken.START_OBJECT, p.nextToken()); // 'image' object
+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Width'
+        verifyFieldName(p, "Width");
+        assertToken(JsonToken.VALUE_STRING, p.nextToken());
+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_WIDTH), p.getText());
+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Height'
+        verifyFieldName(p, "Height");
+        assertToken(JsonToken.VALUE_STRING, p.nextToken());
+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_HEIGHT), p.getText());
+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Title'
+        verifyFieldName(p, "Title");
+        assertToken(JsonToken.VALUE_STRING, p.nextToken());
+        assertEquals(SAMPLE_SPEC_VALUE_TITLE, getAndVerifyText(p));
+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Thumbnail'
+        verifyFieldName(p, "Thumbnail");
+        assertToken(JsonToken.START_OBJECT, p.nextToken()); // 'thumbnail' object
+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Url'
+        verifyFieldName(p, "Url");
+        assertToken(JsonToken.VALUE_STRING, p.nextToken());
+        assertEquals(SAMPLE_SPEC_VALUE_TN_URL, getAndVerifyText(p));
+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Height'
+        verifyFieldName(p, "Height");
+        assertToken(JsonToken.VALUE_STRING, p.nextToken());
+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_HEIGHT), p.getText());
+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Width'
+        verifyFieldName(p, "Width");
         // Width value is actually a String in the example
-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());
-        assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, getAndVerifyText(jp));
+        assertToken(JsonToken.VALUE_STRING, p.nextToken());
+        assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, getAndVerifyText(p));
 
-        assertToken(JsonToken.END_OBJECT, jp.nextToken()); // 'thumbnail' object
+        assertToken(JsonToken.END_OBJECT, p.nextToken()); // 'thumbnail' object
 
         // Note: arrays are "eaten"; wrapping is done using BeanPropertyWriter, so:
-        //assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'IDs'
-        //verifyFieldName(jp, "IDs");
-        //assertToken(JsonToken.START_OBJECT, jp.nextToken()); // 'ids' array
-
-        assertToken(JsonToken.FIELD_NAME, jp.nextToken());
-        verifyFieldName(jp, "IDs");
-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());
-        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID1), getAndVerifyText(jp));
-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); 
-        verifyFieldName(jp, "IDs");
-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());
-        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID2), getAndVerifyText(jp));
-        assertToken(JsonToken.FIELD_NAME, jp.nextToken());
-        verifyFieldName(jp, "IDs");
-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());
-        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID3), getAndVerifyText(jp));
-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); 
-        verifyFieldName(jp, "IDs");
-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());
-        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID4), getAndVerifyText(jp));
+        //assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'IDs'
+        //verifyFieldName(p, "IDs");
+        //assertToken(JsonToken.START_OBJECT, p.nextToken()); // 'ids' array
+
+        assertToken(JsonToken.FIELD_NAME, p.nextToken());
+        verifyFieldName(p, "IDs");
+        assertToken(JsonToken.VALUE_STRING, p.nextToken());
+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID1), getAndVerifyText(p));
+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); 
+        verifyFieldName(p, "IDs");
+        assertToken(JsonToken.VALUE_STRING, p.nextToken());
+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID2), getAndVerifyText(p));
+        assertToken(JsonToken.FIELD_NAME, p.nextToken());
+        verifyFieldName(p, "IDs");
+        assertToken(JsonToken.VALUE_STRING, p.nextToken());
+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID3), getAndVerifyText(p));
+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); 
+        verifyFieldName(p, "IDs");
+        assertToken(JsonToken.VALUE_STRING, p.nextToken());
+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID4), getAndVerifyText(p));
 
         // no matching entry for array:
-        //assertToken(JsonToken.END_OBJECT, jp.nextToken()); // 'ids' array
+        //assertToken(JsonToken.END_OBJECT, p.nextToken()); // 'ids' array
 
-        assertToken(JsonToken.END_OBJECT, jp.nextToken()); // 'image' object
+        assertToken(JsonToken.END_OBJECT, p.nextToken()); // 'image' object
 
-        assertToken(JsonToken.END_OBJECT, jp.nextToken()); // main object
+        assertToken(JsonToken.END_OBJECT, p.nextToken()); // main object
         
-        jp.close();
+        p.close();
     }
 
     /**
@@ -202,6 +201,11 @@ public void testForceElementAsArray() throws Exception
         assertEquals("property", xp.getCurrentName());
         assertToken(JsonToken.VALUE_STRING, xp.nextToken());
         assertEquals("123", xp.getText());
+
+        StringWriter w = new StringWriter();
+        assertEquals(3, xp.getText(w));
+        assertEquals("123", w.toString());
+        
         assertTrue(xp.getParsingContext().inObject());
         assertToken(JsonToken.END_OBJECT, xp.nextToken()); // </property>
         assertTrue(xp.getParsingContext().inArray());
@@ -237,9 +241,18 @@ public void testXmlAttributes() throws Exception
 
         assertToken(JsonToken.FIELD_NAME, xp.nextToken()); // <offset>
         assertEquals("offset", xp.getCurrentName());
+
+        StringWriter w = new StringWriter();
+        assertEquals(6, xp.getText(w));
+        assertEquals("offset", w.toString());
+        
         assertToken(JsonToken.VALUE_STRING, xp.nextToken());
         assertEquals("9", xp.getText());
 
+        w = new StringWriter();
+        assertEquals(1, xp.getText(w));
+        assertEquals("9", w.toString());
+        
         assertToken(JsonToken.END_OBJECT, xp.nextToken()); // </data>
         xp.close();
     }
@@ -248,12 +261,12 @@ private String _readXmlWriteJson(String xml) throws IOException
     {
         StringWriter w = new StringWriter();
 
-        JsonParser jp = _xmlFactory.createParser(xml);
+        JsonParser p = _xmlFactory.createParser(xml);
         JsonGenerator jg = _jsonFactory.createGenerator(w);
-        while (jp.nextToken() != null) {
-            jg.copyCurrentEvent(jp);
+        while (p.nextToken() != null) {
+            jg.copyCurrentEvent(p);
         }
-        jp.close();
+        p.close();
         jg.close();
         return w.toString();
     }