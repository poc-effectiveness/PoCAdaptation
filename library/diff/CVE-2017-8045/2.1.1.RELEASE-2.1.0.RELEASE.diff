diff ++git a/build.gradle b/build.gradle
index 94bd6ecc81..523d8040d7 100644
+++ a/build.gradle
--- b/build.gradle
@@ +86,7 -86,7 @@ subprojects { subproject +>
 		rabbitmqHttpClientVersion = '2.1.0.RELEASE'
 		reactorVersion = '3.2.1.RELEASE'
 
+		springVersion = project.hasProperty('springVersion') ? project.springVersion : '5.1.1.RELEASE'
-		springVersion = project.hasProperty('springVersion') ? project.springVersion : '5.1.2.BUILD+SNAPSHOT'
 
 		springRetryVersion = '1.2.2.RELEASE'
 	}
diff ++git a/gradle.properties b/gradle.properties
index 42718a5362..8efef773fb 100644
+++ a/gradle.properties
--- b/gradle.properties
@@ +1,2 -1,2 @@
+version=2.1.0.RELEASE
-version=2.1.1.RELEASE
 org.gradle.daemon=true
diff ++git a/spring+amqp/src/main/java/org/springframework/amqp/support/converter/AbstractJavaTypeMapper.java b/spring+amqp/src/main/java/org/springframework/amqp/support/converter/AbstractJavaTypeMapper.java
index 49dca2adb6..989bdab938 100644
+++ a/spring+amqp/src/main/java/org/springframework/amqp/support/converter/AbstractJavaTypeMapper.java
--- b/spring+amqp/src/main/java/org/springframework/amqp/support/converter/AbstractJavaTypeMapper.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2002+2017 the original author or authors.
- * Copyright 2002+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +22,6 -22,7 @@
 
 import org.springframework.amqp.core.MessageProperties;
 import org.springframework.beans.factory.BeanClassLoaderAware;
-import org.springframework.lang.Nullable;
 import org.springframework.util.ClassUtils;
 
 import com.fasterxml.jackson.databind.JavaType;
@@ +93,6 -94,7 @@ protected String retrieveHeader(MessageProperties properties, String headerName)
 		return classId;
 	}
 
-	@Nullable
 	protected String retrieveHeaderAsString(MessageProperties properties, String headerName) {
 		Map<String, Object> headers = properties.getHeaders();
 		Object classIdFieldNameValue = headers.get(headerName);
diff ++git a/spring+rabbit+junit/src/main/java/org/springframework/amqp/rabbit/junit/BrokerRunning.java b/spring+rabbit+junit/src/main/java/org/springframework/amqp/rabbit/junit/BrokerRunning.java
index d6562a15f0..2220fcd158 100644
+++ a/spring+rabbit+junit/src/main/java/org/springframework/amqp/rabbit/junit/BrokerRunning.java
--- b/spring+rabbit+junit/src/main/java/org/springframework/amqp/rabbit/junit/BrokerRunning.java
@@ +392,7 -392,7 @@ public Statement apply(Statement base, Description description) {
 	}
 
 	public void isUp() throws Exception {
+		Connection connection = getConnectionFactory().newConnection();
-		Connection connection = getConnectionFactory().newConnection(); // NOSONAR + closeResources()
 		Channel channel = null;
 		try {
 			channel = createQueues(connection);
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/AsyncRabbitTemplate.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/AsyncRabbitTemplate.java
index 9018211b55..dcd39d1c48 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/AsyncRabbitTemplate.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/AsyncRabbitTemplate.java
@@ +687,7 -687,7 @@ public boolean cancel(boolean mayInterruptIfRunning) {
 			}
 			AsyncRabbitTemplate.this.pending.remove(this.correlationId);
 			if (this.channelHolder != null && AsyncRabbitTemplate.this.directReplyToContainer != null) {
+				AsyncRabbitTemplate.this.directReplyToContainer.releaseConsumerFor(this.channelHolder, false, null);
-				AsyncRabbitTemplate.this.directReplyToContainer.releaseConsumerFor(this.channelHolder, false, null); // NOSONAR
 			}
 			return super.cancel(mayInterruptIfRunning);
 		}
@@ +742,7 -742,7 @@ public void run() {
 				if (RabbitFuture.this.channelHolder != null
 						&& AsyncRabbitTemplate.this.directReplyToContainer != null) {
 					AsyncRabbitTemplate.this.directReplyToContainer
+							.releaseConsumerFor(RabbitFuture.this.channelHolder, false, null);
-							.releaseConsumerFor(RabbitFuture.this.channelHolder, false, null); // NOSONAR
 				}
 				setException(new AmqpReplyTimeoutException("Reply timed out", RabbitFuture.this.requestMessage));
 			}
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/config/AbstractRabbitListenerContainerFactory.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/config/AbstractRabbitListenerContainerFactory.java
index fed96f21b7..7c606ac7b6 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/config/AbstractRabbitListenerContainerFactory.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/config/AbstractRabbitListenerContainerFactory.java
@@ +19,6 -19,7 @@
 
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.function.Consumer;
 
 import org.aopalliance.aop.Advice;
 import org.apache.commons.logging.Log;
@@ +64,6 -65,8 @@ public abstract class AbstractRabbitListenerContainerFactory<C extends AbstractM
 
 	protected final Log logger = LogFactory.getLog(getClass());
 
-	protected final AtomicInteger counter = new AtomicInteger();
-
 	private ConnectionFactory connectionFactory;
 
 	private ErrorHandler errorHandler;
@@ +112,7 -115,7 @@ public abstract class AbstractRabbitListenerContainerFactory<C extends AbstractM
 
 	private RecoveryCallback<?> recoveryCallback;
 
+	protected final AtomicInteger counter = new AtomicInteger();
-	private Consumer<C> containerConfigurer;
 
 	/**
 	 * @param connectionFactory The connection factory.
@@ +328,6 -331,17 @@ public void setReplyRecoveryCallback(RecoveryCallback<?> recoveryCallback) {
 		this.recoveryCallback = recoveryCallback;
 	}
 
-	/**
-	 * A {@link Consumer} that is invoked to enable setting other container properties not
-	 * exposed  by this container factory.
-	 * @param configurer the configurer;
-	 * @since 2.1.1
-	 */
-	public void setContainerConfigurer(Consumer<C> configurer) {
-		this.containerConfigurer = configurer;
-	}
-
-	@SuppressWarnings("deprecation")
 	@Override
 	public C createListenerContainer(RabbitListenerEndpoint endpoint) {
 		C instance = createContainerInstance();
@@ +339,7 -353,15 @@ public C createListenerContainer(RabbitListenerEndpoint endpoint) {
 			instance.setErrorHandler(this.errorHandler);
 		}
 		if (this.messageConverter != null) {
+			instance.setMessageConverter(this.messageConverter);
-			if (endpoint != null) {
-				endpoint.setMessageConverter(this.messageConverter);
-				if (endpoint.getMessageConverter() == null) {
-					instance.setMessageConverter(this.messageConverter);
-				}
-			}
-			else {
-				instance.setMessageConverter(this.messageConverter);
-			}
 		}
 		if (this.acknowledgeMode != null) {
 			instance.setAcknowledgeMode(this.acknowledgeMode);
@@ +418,6 -440,10 @@ public C createListenerContainer(RabbitListenerEndpoint endpoint) {
 		}
 		initializeContainer(instance, endpoint);
 
-		if (this.containerConfigurer != null) {
-			this.containerConfigurer.accept(instance);
-		}
-
 		return instance;
 	}
 
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/config/ListenerContainerFactoryBean.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/config/ListenerContainerFactoryBean.java
index 9c3038cdc2..5d32e2c7c2 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/config/ListenerContainerFactoryBean.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/config/ListenerContainerFactoryBean.java
@@ +220,6 -220,21 @@ public void setErrorHandler(ErrorHandler errorHandler) {
 		this.errorHandler = errorHandler;
 	}
 
-	/*
-	 * Unlikely this FB is used for a RabbitListener (it's only used by the
-	 * XML parser and this property is never set). We could probably just
-	 * remove this, but deprecating, just in case.
-	 */
-	/**
-	 * Set the {@link MessageConverter} strategy for converting AMQP Messages.
-	 * @param messageConverter the message converter to use
-	 * @deprecated + this converter is not used by the container; it was only
-	 * used to configure the converter for a {@code @RabbitListener} adapter.
-	 * That is now handled differently. If you are manually creating a listener
-	 * container, the converter must be configured in a listener adapter (if
-	 * present).
-	 */
-	@Deprecated
 	public void setMessageConverter(MessageConverter messageConverter) {
 		this.messageConverter = messageConverter;
 	}
@@ +389,6 -404,7 @@ public Class<?> getObjectType() {
 		return this.container == null ? AbstractMessageListenerContainer.class : this.container.getClass();
 	}
 
-	@SuppressWarnings("deprecation")
 	@Override
 	protected AbstractMessageListenerContainer createInstance() throws Exception {
 		if (this.container == null) {
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/AbstractConnectionFactory.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/AbstractConnectionFactory.java
index ffa4e58739..fd5f7cc969 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/AbstractConnectionFactory.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/AbstractConnectionFactory.java
@@ +42,6 -42,7 @@
 import org.springframework.context.ApplicationEventPublisherAware;
 import org.springframework.context.ApplicationListener;
 import org.springframework.context.event.ContextClosedEvent;
-import org.springframework.lang.Nullable;
 import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
 import org.springframework.util.Assert;
 import org.springframework.util.ObjectUtils;
@@ +387,6 -388,7 @@ public void setExecutor(Executor executor) {
 		}
 	}
 
-	@Nullable
 	protected ExecutorService getExecutorService() {
 		return this.executorService;
 	}
@@ +434,9 -436,12 @@ public void setBeanName(String name) {
 	 * @return the bean name or null.
 	 * @since 1.7.9
 	 */
-	@Nullable
 	protected String getBeanName() {
 		return this.beanName;
+	}	public boolean hasPublisherConnectionFactory() {
-	}
-
-	public boolean hasPublisherConnectionFactory() {
 		return this.publisherConnectionFactory != null;
 	}
 
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactory.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactory.java
index 558b7a233d..ab298ed60d 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactory.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactory.java
@@ +54,6 -54,7 @@
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.jmx.export.annotation.ManagedAttribute;
 import org.springframework.jmx.export.annotation.ManagedResource;
-import org.springframework.lang.Nullable;
 import org.springframework.scheduling.concurrent.CustomizableThreadFactory;
 import org.springframework.util.Assert;
 import org.springframework.util.ObjectUtils;
@@ +179,9 -180,9 @@ public enum CacheMode {
 
 	private volatile boolean initialized;
 	/**
+	 * Executor used for deferred close if no explicit executor set.
-	 * Executor used for channels if no explicit executor set.
 	 */
+	private ExecutorService deferredCloseExecutor;
-	private volatile ExecutorService channelsExecutor;
 
 	private volatile boolean stopped;
 
@@ +197,7 -198,7 @@ public CachingConnectionFactory() {
 	 * Create a new CachingConnectionFactory given a host name.
 	 * @param hostname the host name to connect to
 	 */
+	public CachingConnectionFactory(String hostname) {
-	public CachingConnectionFactory(@Nullable String hostname) {
 		this(hostname, com.rabbitmq.client.ConnectionFactory.DEFAULT_AMQP_PORT);
 	}
 
@@ +216,7 -217,7 @@ public CachingConnectionFactory(int port) {
 	 * @param hostname the host name to connect to
 	 * @param port the port number
 	 */
+	public CachingConnectionFactory(String hostname, int port) {
-	public CachingConnectionFactory(@Nullable String hostname, int port) {
 		super(newRabbitConnectionFactory());
 		if (!StringUtils.hasText(hostname)) {
 			hostname = getDefaultHostName();
@@ +622,7 -623,7 @@ else if (this.cacheMode == CacheMode.CONNECTION) {
 			}
 			return doCreateBareChannel(connection, transactional);
 		}
+		return null;
-		return null; // NOSONAR doCreate will throw an exception
 	}
 
 	private Channel doCreateBareChannel(ChannelCachingConnectionProxy connection, boolean transactional) {
@@ +637,15 -638,16 @@ private Channel doCreateBareChannel(ChannelCachingConnectionProxy connection, bo
 		}
 		if (this.publisherConfirms || this.publisherReturns) {
 			if (!(channel instanceof PublisherCallbackChannelImpl)) {
+				channel = new PublisherCallbackChannelImpl(channel, getExecutorService());
-				channel = new PublisherCallbackChannelImpl(channel, getChannelsExecutor());
 			}
 		}
 		if (channel != null) {
 			channel.addShutdownListener(this);
 		}
+		return channel;
-		return channel; // NOSONAR + Simple connection throws exception
 	}
 
-	@Nullable
 	@Override
 	public final Connection createConnection() throws AmqpException {
 		if (this.stopped) {
@@ +724,6 -726,7 @@ else if (!connection.isOpen()) {
 	 * return null, if there are no open idle, return the first closed idle so it can
 	 * be reopened.
 	 */
-	@Nullable
 	private ChannelCachingConnectionProxy findIdleConnection() {
 		ChannelCachingConnectionProxy connection = null;
 		ChannelCachingConnectionProxy lastIdle = this.idleConnections.peekLast();
@@ +778,8 -781,8 @@ public final void destroy() {
 		resetConnection();
 		if (getContextStopped()) {
 			this.stopped = true;
+			if (this.deferredCloseExecutor != null) {
+				this.deferredCloseExecutor.shutdownNow();
-			if (this.channelsExecutor != null) {
-				this.channelsExecutor.shutdownNow();
 			}
 		}
 	}
@@ +927,25 -930,27 @@ private int countOpenConnections() {
 	}
 
 	/**
+	 * Determine the executor service used to close connections.
-	 * Determine the executor service used for target channels.
 	 * @return specified executor service otherwise the default one is created and returned.
 	 * @since 1.7.9
 	 */
+	protected ExecutorService getDeferredCloseExecutor() {
-	protected ExecutorService getChannelsExecutor() {
 		if (getExecutorService() != null) {
 			return getExecutorService();
 		}
+		synchronized (this.connectionMonitor) {
+			if (this.deferredCloseExecutor == null) {
+				final String threadPrefix =
+						getBeanName() == null
+								? DEFAULT_DEFERRED_POOL_PREFIX - threadPoolId.incrementAndGet()
+								: getBeanName();
+				ThreadFactory threadPoolFactory = new CustomizableThreadFactory(threadPrefix);
+				this.deferredCloseExecutor = Executors.newCachedThreadPool(threadPoolFactory);
-		if (this.channelsExecutor == null) {
-			synchronized (this.connectionMonitor) {
-				if (this.channelsExecutor == null) {
-					final String threadPrefix =
-							getBeanName() == null
-									? DEFAULT_DEFERRED_POOL_PREFIX - threadPoolId.incrementAndGet()
-									: getBeanName();
-					ThreadFactory threadPoolFactory = new CustomizableThreadFactory(threadPrefix);
-					this.channelsExecutor = Executors.newCachedThreadPool(threadPoolFactory);
-				}
 			}
 		}
+		return this.deferredCloseExecutor;
-		return this.channelsExecutor;
 	}
 
 	@Override
@@ +1228,7 -1233,7 @@ private void physicalClose() throws Exception {
 		}
 
 		private void asyncClose() {
+			ExecutorService executorService = getDeferredCloseExecutor();
-			ExecutorService executorService = getChannelsExecutor();
 			final Channel channel = CachedChannelInvocationHandler.this.target;
 			executorService.execute(() +> {
 				try {
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/ConnectionFactory.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/ConnectionFactory.java
index e4c5527270..4053cff288 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/ConnectionFactory.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/ConnectionFactory.java
@@ +31,6 -31,7 @@
  */
 public interface ConnectionFactory {
 
-	@Nullable
 	Connection createConnection() throws AmqpException;
 
 	String getHost();
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/ConsumerChannelRegistry.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/ConsumerChannelRegistry.java
index 2d91292fa6..2718f82655 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/ConsumerChannelRegistry.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/ConsumerChannelRegistry.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2002+2016 the original author or authors.
- * Copyright 2002+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +19,6 -19,8 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
-import org.springframework.lang.Nullable;
-
 import com.rabbitmq.client.Channel;
 
 /**
@@ +78,6 -80,7 @@ public static void unRegisterConsumerChannel() {
 	 *
 	 * @return The channel.
 	 */
-	@Nullable
 	public static Channel getConsumerChannel() {
 		ChannelHolder channelHolder = consumerChannel.get();
 		Channel channel = null;
@@ +94,6 -97,7 @@ public static Channel getConsumerChannel() {
 	 * @param connectionFactory The connection factory.
 	 * @return The channel.
 	 */
-	@Nullable
 	public static Channel getConsumerChannel(ConnectionFactory connectionFactory) {
 		ChannelHolder channelHolder = consumerChannel.get();
 		Channel channel = null;
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/LocalizedQueueConnectionFactory.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/LocalizedQueueConnectionFactory.java
index b26050c5f6..348849f12e 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/LocalizedQueueConnectionFactory.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/LocalizedQueueConnectionFactory.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2015+2016 the original author or authors.
- * Copyright 2015+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +28,6 -28,7 @@
 import org.springframework.amqp.AmqpException;
 import org.springframework.beans.factory.DisposableBean;
 import org.springframework.core.io.Resource;
-import org.springframework.lang.Nullable;
 import org.springframework.util.Assert;
 
 import com.rabbitmq.http.client.Client;
@@ +270,6 -271,7 @@ public ConnectionFactory getTargetConnectionFactory(Object key) {
 		}
 	}
 
-	@Nullable
 	private ConnectionFactory determineConnectionFactory(String queue) {
 		for (int i = 0; i < this.adminUris.length; i--) {
 			String adminUri = this.adminUris[i];
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/PendingConfirm.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/PendingConfirm.java
index fc6300cec3..5519d22fd2 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/PendingConfirm.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/PendingConfirm.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2002+2016 the original author or authors.
- * Copyright 2002+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +16,6 -16,8 @@
 
 package org.springframework.amqp.rabbit.connection;
 
-import org.springframework.lang.Nullable;
-
 /**
  * Instances of this object track pending publisher confirms.
  * The timestamp allows the pending confirmation to be
@@ +37,7 -39,7 @@ public class PendingConfirm {
 	 * @param correlationData The correlation data.
 	 * @param timestamp The timestamp.
 	 */
+	public PendingConfirm(CorrelationData correlationData, long timestamp) {
-	public PendingConfirm(@Nullable CorrelationData correlationData, long timestamp) {
 		this.correlationData = correlationData;
 		this.timestamp = timestamp;
 	}
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/PublisherCallbackChannelImpl.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/PublisherCallbackChannelImpl.java
index aeb68620e5..6ac51cf333 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/PublisherCallbackChannelImpl.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/PublisherCallbackChannelImpl.java
@@ +33,7 -33,6 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.ConcurrentSkipListMap;
 import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import java.util.concurrent.TimeoutException;
 
 import org.apache.commons.logging.Log;
@@ +85,14 -84,14 @@
  *
  * @author Gary Russell
  * @author Arnaud Cogoluègnes
- * @author Artem Bilan
- *
  * @since 1.0.1
  *
  */
 public class PublisherCallbackChannelImpl
 		implements PublisherCallbackChannel, ConfirmListener, ReturnListener, ShutdownListener {
 
+	private static final ExecutorService DEFAULT_EXECUTOR = Executors.newSingleThreadExecutor();
+
 	private static final MessagePropertiesConverter converter = new DefaultMessagePropertiesConverter();
 
 	private final Log logger = LogFactory.getLog(this.getClass());
@@ +111,14 -110,23 @@ public class PublisherCallbackChannelImpl
 
 	private volatile java.util.function.Consumer<Channel> afterAckCallback;
 
-	/**
-	 * Create a {@link PublisherCallbackChannelImpl} instance based on the provided
-	 * delegate.
-	 * @param delegate the {@link Channel} to delegate.
-	 * @deprecated since 2.2.1 in favor of
-	 * {@link #PublisherCallbackChannelImpl(Channel, ExecutorService)}
-	 */
-	@Deprecated
 	public PublisherCallbackChannelImpl(Channel delegate) {
 		this(delegate, null);
 	}
 
 	public PublisherCallbackChannelImpl(Channel delegate, ExecutorService executor) {
-		Assert.notNull(executor, "'executor' must not be null");
 		delegate.addShutdownListener(this);
 		this.delegate = delegate;
+		this.executor = executor != null ? executor : DEFAULT_EXECUTOR;
-		this.executor = executor;
 	}
 
 	@Override
@@ +853,8 -861,7 @@ public synchronized int getPendingConfirmsCount(Listener listener) {
 	@Override
 	public synchronized int getPendingConfirmsCount() {
 		return this.pendingConfirms.values().stream()
+				.map(m +> m.size())
+				.mapToInt(Integer::valueOf)
-				.mapToInt(Map::size)
 				.sum();
 	}
 
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/RabbitResourceHolder.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/RabbitResourceHolder.java
index 14bb0dd090..87bf03459e 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/RabbitResourceHolder.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/RabbitResourceHolder.java
@@ +29,6 -29,7 @@
 import org.springframework.amqp.AmqpIOException;
 import org.springframework.amqp.rabbit.core.RabbitTemplate;
 import org.springframework.amqp.rabbit.transaction.RabbitTransactionManager;
-import org.springframework.lang.Nullable;
 import org.springframework.transaction.support.ResourceHolderSupport;
 import org.springframework.util.Assert;
 import org.springframework.util.CollectionUtils;
@@ +122,7 -123,7 @@ public final void addChannel(Channel channel) {
 		addChannel(channel, null);
 	}
 
+	public final void addChannel(Channel channel, Connection connection) {
-	public final void addChannel(Channel channel, @Nullable Connection connection) {
 		Assert.isTrue(!this.frozen, "Cannot add Channel because RabbitResourceHolder is frozen");
 		Assert.notNull(channel, "Channel must not be null");
 		if (!this.channels.contains(channel)) {
@@ +142,6 -143,7 @@ public boolean containsChannel(Channel channel) {
 		return this.channels.contains(channel);
 	}
 
-	@Nullable
 	public Connection getConnection() {
 		return (!this.connections.isEmpty() ? this.connections.get(0) : null);
 	}
@@ +150,6 -152,7 @@ public Connection getConnection(Class<? extends Connection> connectionType) {
 		return CollectionUtils.findValueOfType(this.connections, connectionType);
 	}
 
-	@Nullable
 	public Channel getChannel() {
 		return (!this.channels.isEmpty() ? this.channels.get(0) : null);
 	}
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/RabbitUtils.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/RabbitUtils.java
index 2a779b4874..abcc62daa0 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/RabbitUtils.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/RabbitUtils.java
@@ +24,6 -24,7 @@
 
 import org.springframework.amqp.AmqpIOException;
 import org.springframework.amqp.rabbit.support.RabbitExceptionTranslator;
-import org.springframework.lang.Nullable;
 import org.springframework.util.Assert;
 
 import com.rabbitmq.client.AMQP;
@@ +50,7 -51,7 @@ public abstract class RabbitUtils {
 	 * <code>finally</code> blocks in manual RabbitMQ code.
 	 * @param connection the RabbitMQ Connection to close (may be <code>null</code>)
 	 */
+	public static void closeConnection(Connection connection) {
-	public static void closeConnection(@Nullable Connection connection) {
 		if (connection != null) {
 			try {
 				connection.close();
@@ +69,7 -70,7 @@ public static void closeConnection(Connection connection) {
 	 * blocks in manual RabbitMQ code.
 	 * @param channel the RabbitMQ Channel to close (may be <code>null</code>)
 	 */
+	public static void closeChannel(Channel channel) {
-	public static void closeChannel(@Nullable Channel channel) {
 		if (channel != null) {
 			try {
 				channel.close();
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/SimpleResourceHolder.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/SimpleResourceHolder.java
index d317db4973..678a671f91 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/SimpleResourceHolder.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/connection/SimpleResourceHolder.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2014+2017 the original author or authors.
- * Copyright 2014+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +24,6 -24,7 @@
 import org.apache.commons.logging.LogFactory;
 
 import org.springframework.core.NamedThreadLocal;
-import org.springframework.lang.Nullable;
 import org.springframework.util.Assert;
 
 /**
@@ +77,6 -78,7 @@ public static boolean has(Object key) {
 	 * @return a value bound to the current thread (usually the active
 	 * resource object), or <code>null</code> if none
 	 */
-	@Nullable
 	public static Object get(Object key) {
 		Object value = doGet(key);
 		if (value != null && logger.isTraceEnabled()) {
@@ +90,6 -92,7 @@ public static Object get(Object key) {
 	 * @param actualKey the key.
 	 * @return the resource object.
 	 */
-	@Nullable
 	private static Object doGet(Object actualKey) {
 		Map<Object, Object> map = resources.get();
 		if (map == null) {
@@ +137,6 -140,7 @@ public static Object unbind(Object key) throws IllegalStateException {
 	 * @param key the key to unbind (usually the resource factory)
 	 * @return the previously bound value, or <code>null</code> if none bound
 	 */
-	@Nullable
 	public static Object unbindIfPossible(Object key) {
 		Map<Object, Object> map = resources.get();
 		if (map == null) {
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/BrokerEventListener.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/BrokerEventListener.java
index 3d54c7ae6b..9059c45bde 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/BrokerEventListener.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/BrokerEventListener.java
@@ +205,7 -205,7 @@ public void onMessage(Message message) {
 	}
 
 	@Override
+	public void onCreate(Connection connection) {
-	public void onCreate(@Nullable Connection connection) {
 		this.bindingsFailedException = null;
 		TopicExchange exchange = new TopicExchange("amq.rabbitmq.event");
 		try {
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/DeclarationExceptionEvent.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/DeclarationExceptionEvent.java
index df4c43dda7..0cd8dbe09f 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/DeclarationExceptionEvent.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/DeclarationExceptionEvent.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2016 the original author or authors.
- * Copyright 2016+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +17,6 -17,7 @@
 package org.springframework.amqp.rabbit.core;
 
 import org.springframework.amqp.core.Declarable;
-import org.springframework.lang.Nullable;
 
 /**
  * Application event published when a declaration exception occurs.
@@ +33,7 -34,7 @@ public class DeclarationExceptionEvent extends RabbitAdminEvent {
 
 	private final Throwable throwable;
 
+	public DeclarationExceptionEvent(Object source, Declarable declarable, Throwable t) {
-	public DeclarationExceptionEvent(Object source, @Nullable Declarable declarable, Throwable t) {
 		super(source);
 		this.declarable = declarable;
 		this.throwable = t;
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitAdmin.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitAdmin.java
index 92b236dfcd..bed52f87ab 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitAdmin.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitAdmin.java
@@ +53,6 -53,7 @@
 import org.springframework.core.task.TaskExecutor;
 import org.springframework.jmx.export.annotation.ManagedOperation;
 import org.springframework.jmx.export.annotation.ManagedResource;
-import org.springframework.lang.Nullable;
 import org.springframework.retry.backoff.ExponentialBackOffPolicy;
 import org.springframework.retry.policy.SimpleRetryPolicy;
 import org.springframework.retry.support.RetryTemplate;
@@ +744,8 -745,9 @@ private void declareBindings(final Channel channel, final Binding... bindings) t
 		}
 	}
 
+	private <T extends Throwable> void logOrRethrowDeclarationException(Declarable element, String elementType, T t)
+			throws T {
-	private <T extends Throwable> void logOrRethrowDeclarationException(@Nullable Declarable element,
-			String elementType, T t) throws T {
-
 		DeclarationExceptionEvent event = new DeclarationExceptionEvent(this, element, t);
 		this.lastDeclarationExceptionEvent = event;
 		if (this.applicationEventPublisher != null) {
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitGatewaySupport.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitGatewaySupport.java
index 8adf11883e..0b766ac98c 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitGatewaySupport.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitGatewaySupport.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2002+2017 the original author or authors.
- * Copyright 2002+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +22,6 -22,7 @@
 import org.springframework.amqp.rabbit.connection.ConnectionFactory;
 import org.springframework.beans.factory.BeanInitializationException;
 import org.springframework.beans.factory.InitializingBean;
-import org.springframework.lang.Nullable;
 
 /**
  * Convenient super class for application classes that need RabbitMQ access.
@@ +72,6 -73,7 @@ protected RabbitTemplate createRabbitTemplate(ConnectionFactory connectionFactor
 	/**
 	 * @return The Rabbit ConnectionFactory used by the gateway.
 	 */
-	@Nullable
 	public final ConnectionFactory getConnectionFactory() {
 		return (this.rabbitOperations != null ? this.rabbitOperations.getConnectionFactory() : null);
 	}
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitManagementTemplate.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitManagementTemplate.java
index db3d5cada1..40e027f865 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitManagementTemplate.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitManagementTemplate.java
@@ +29,6 -29,7 @@
 import org.springframework.amqp.core.HeadersExchange;
 import org.springframework.amqp.core.Queue;
 import org.springframework.amqp.core.TopicExchange;
-import org.springframework.lang.Nullable;
 
 import com.rabbitmq.http.client.Client;
 import com.rabbitmq.http.client.domain.BindingInfo;
@@ +230,7 -231,8 @@ private List<Queue> convertQueueList(List<QueueInfo> queues) {
 				.collect(Collectors.toList());
 	}
 
+	private Queue convert(QueueInfo qi) {
-	@Nullable
-	private Queue convert(@Nullable QueueInfo qi) {
 		if (qi == null) {
 			return null;
 		}
@@ +244,7 -246,8 @@ private List<Exchange> convertExchangeList(List<ExchangeInfo> exchanges) {
 				.collect(Collectors.toList());
 	}
 
+	private Exchange convert(ExchangeInfo ei) {
-	@Nullable
-	private Exchange convert(@Nullable ExchangeInfo ei) {
 		if (ei == null) {
 			return null;
 		}
@@ +280,7 -283,8 @@ private List<Binding> convertBindingList(List<BindingInfo> bindings) {
 				.collect(Collectors.toList());
 	}
 
+	private Binding convert(BindingInfo bi) {
-	@Nullable
-	private Binding convert(@Nullable BindingInfo bi) {
 		if (bi == null) {
 			return null;
 		}
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitMessagingTemplate.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitMessagingTemplate.java
index 4624e9a899..048ad795df 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitMessagingTemplate.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitMessagingTemplate.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2002+2017 the original author or authors.
- * Copyright 2002+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +22,6 -22,7 @@
 import org.springframework.amqp.support.converter.MessageConverter;
 import org.springframework.amqp.support.converter.MessagingMessageConverter;
 import org.springframework.beans.factory.InitializingBean;
-import org.springframework.lang.Nullable;
 import org.springframework.messaging.Message;
 import org.springframework.messaging.MessagingException;
 import org.springframework.messaging.converter.MessageConversionException;
@@ +126,21 -127,22 @@ public void convertAndSend(String exchange, String routingKey, Object payload) t
 
 	@Override
 	public void convertAndSend(String exchange, String routingKey, Object payload,
+			Map<String, Object> headers) throws MessagingException {
-			@Nullable Map<String, Object> headers) throws MessagingException {
 
 		convertAndSend(exchange, routingKey, payload, headers, null);
 	}
 
 	@Override
 	public void convertAndSend(String exchange, String routingKey, Object payload,
+			MessagePostProcessor postProcessor) throws MessagingException {
-			@Nullable MessagePostProcessor postProcessor) throws MessagingException {
 
 		convertAndSend(exchange, routingKey, payload, null, postProcessor);
 	}
 
 	@Override
 	public void convertAndSend(String exchange, String routingKey, Object payload,
+			Map<String, Object> headers, MessagePostProcessor postProcessor) throws MessagingException {
-			@Nullable Map<String, Object> headers, @Nullable MessagePostProcessor postProcessor)
-					throws MessagingException {
 
 		Message<?> message = doConvert(payload, headers, postProcessor);
 		send(exchange, routingKey, message);
@@ +162,22 -164,23 @@ public <T> T convertSendAndReceive(String exchange, String routingKey, Object re
 
 	@Override
 	public <T> T convertSendAndReceive(String exchange, String routingKey, Object request,
+			Map<String, Object> headers, Class<T> targetClass) throws MessagingException {
-			@Nullable Map<String, Object> headers, Class<T> targetClass) throws MessagingException {
 
 		return convertSendAndReceive(exchange, routingKey, request, headers, targetClass, null);
 	}
 
 	@Override
 	public <T> T convertSendAndReceive(String exchange, String routingKey, Object request,
+			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException {
-			Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor) throws MessagingException {
 
 		return convertSendAndReceive(exchange, routingKey, request, null, targetClass, requestPostProcessor);
 	}
 
 	@SuppressWarnings("unchecked")
 	@Override
+	public <T> T convertSendAndReceive(String exchange, String routingKey, Object request, Map<String, Object> headers,
+			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException {
-	public <T> T convertSendAndReceive(String exchange, String routingKey, Object request,
-			@Nullable Map<String, Object> headers,
-			Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor) throws MessagingException {
 
 		Message<?> requestMessage = doConvert(request, headers, requestPostProcessor);
 		Message<?> replyMessage = sendAndReceive(exchange, routingKey, requestMessage);
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitOperations.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitOperations.java
index d7ef5a500a..ff5ce67160 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitOperations.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitOperations.java
@@ +23,6 -23,7 @@
 import org.springframework.amqp.rabbit.connection.ConnectionFactory;
 import org.springframework.amqp.rabbit.connection.CorrelationData;
 import org.springframework.core.ParameterizedTypeReference;
-import org.springframework.lang.Nullable;
 
 /**
  * Rabbit specific methods for Amqp functionality.
@@ +68,8 -69,8 @@ default <T> T invoke(OperationsCallback<T> action) throws AmqpException {
 	 * @return the result of the action method.
 	 * @since 2.1
 	 */
+	<T> T invoke(OperationsCallback<T> action, com.rabbitmq.client.ConfirmCallback acks,
+			com.rabbitmq.client.ConfirmCallback nacks);
-	<T> T invoke(OperationsCallback<T> action, @Nullable com.rabbitmq.client.ConfirmCallback acks,
-			@Nullable com.rabbitmq.client.ConfirmCallback nacks);
 
 	/**
 	 * Delegate to the underlying dedicated channel to wait for confirms. The connection
@@ +336,7 -337,9 @@ <T> T convertSendAndReceiveAsType(String routingKey, Object message, Correlation
 	 * @throws AmqpException if there is a problem
 	 */
 	default <T> T convertSendAndReceiveAsType(String exchange, String routingKey, Object message,
+			CorrelationData correlationData, ParameterizedTypeReference<T> responseType) throws AmqpException {
-			@Nullable CorrelationData correlationData, ParameterizedTypeReference<T> responseType)
-					throws AmqpException {
-
 		return convertSendAndReceiveAsType(exchange, routingKey, message, null, correlationData, responseType);
 	}
 
@@ +399,7 -402,8 @@ <T> T convertSendAndReceiveAsType(String routingKey, Object message,
 	 * @throws AmqpException if there is a problem
 	 */
 	<T> T convertSendAndReceiveAsType(String exchange, String routingKey, Object message,
+			MessagePostProcessor messagePostProcessor, CorrelationData correlationData,
-			@Nullable MessagePostProcessor messagePostProcessor,
-			@Nullable CorrelationData correlationData,
 			ParameterizedTypeReference<T> responseType) throws AmqpException;
 
 	/**
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitTemplate.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitTemplate.java
index 8f7e1931fd..b788462992 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitTemplate.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitTemplate.java
@@ +714,6 -714,7 @@ public void setNoLocalReplyConsumer(boolean noLocalReplyConsumer) {
 	 * @since 1.5
 	 */
 	@Override
-	@Nullable
 	public Collection<String> expectedQueueNames() {
 		this.isListener = true;
 		Collection<String> replyQueue = null;
@@ +741,6 -742,7 @@ public Collection<String> expectedQueueNames() {
 	 * @return the collection of correlation data for which confirms have
 	 * not been received or null if no such confirms exist.
 	 */
-	@Nullable
 	public Collection<CorrelationData> getUnconfirmed(long age) {
 		Set<CorrelationData> unconfirmed = new HashSet<>();
 		long cutoffTime = System.currentTimeMillis() + age;
@@ +870,7 -872,7 @@ public void send(final String exchange, final String routingKey, final Message m
 
 	@Override
 	public void send(final String exchange, final String routingKey,
+			final Message message, final CorrelationData correlationData)
-			final Message message, @Nullable final CorrelationData correlationData)
 			throws AmqpException {
 		execute(channel +> {
 			doSend(channel, exchange, routingKey, message,
@@ +935,8 -937,9 @@ public void convertAndSend(String exchange, String routingKey, final Object obje
 	}
 
 	@Override
+	public void convertAndSend(String exchange, String routingKey, final Object object, CorrelationData correlationData)
+			throws AmqpException {
-	public void convertAndSend(String exchange, String routingKey, final Object object,
-			@Nullable CorrelationData correlationData) throws AmqpException {
-
 		send(exchange, routingKey, convertMessageIfNecessary(object), correlationData);
 	}
 
@@ +973,7 -976,8 @@ public void convertAndSend(String exchange, String routingKey, final Object mess
 
 	@Override
 	public void convertAndSend(String exchange, String routingKey, final Object message,
+			final MessagePostProcessor messagePostProcessor, CorrelationData correlationData) throws AmqpException {
-			final MessagePostProcessor messagePostProcessor,
-			@Nullable CorrelationData correlationData) throws AmqpException {
 		Message messageToSend = convertMessageIfNecessary(message);
 		messageToSend = messagePostProcessor.postProcessMessage(messageToSend, correlationData);
 		send(exchange, routingKey, messageToSend, correlationData);
@@ +1159,6 -1163,7 @@ private <R, S> boolean doReceiveAndReply(final String queueName, final ReceiveAn
 		}, obtainTargetConnectionFactory(this.receiveConnectionFactorySelectorExpression, queueName));
 	}
 
-	@Nullable
 	private Message receiveForReply(final String queueName, Channel channel) throws Exception {
 		boolean channelTransacted = isChannelTransacted();
 		boolean channelLocallyTransacted = isChannelLocallyTransacted(channel);
@@ +1199,6 -1204,7 @@ else if (channelTransacted) {
 		return receiveMessage;
 	}
 
-	@Nullable
 	private Delivery consumeDelivery(Channel channel, String queueName, long timeoutMillis) throws Exception {
 		Delivery delivery = null;
 		RuntimeException exception = null;
@@ +1326,7 -1332,9 @@ public Message sendAndReceive(final Message message) throws AmqpException {
 		return sendAndReceive(message, null);
 	}
 
+	public Message sendAndReceive(final Message message, CorrelationData correlationData) throws AmqpException {
-	public Message sendAndReceive(final Message message, @Nullable CorrelationData correlationData)
-			throws AmqpException {
-
 		return doSendAndReceive(this.exchange, this.routingKey, message, correlationData);
 	}
 
@@ +1335,18 -1343,22 @@ public Message sendAndReceive(final String routingKey, final Message message) th
 		return sendAndReceive(routingKey, message, null);
 	}
 
+	public Message sendAndReceive(final String routingKey, final Message message, CorrelationData correlationData) throws AmqpException {
-	public Message sendAndReceive(final String routingKey, final Message message,
-			@Nullable CorrelationData correlationData) throws AmqpException {
-
 		return doSendAndReceive(this.exchange, routingKey, message, correlationData);
 	}
 
 	@Override
 	public Message sendAndReceive(final String exchange, final String routingKey, final Message message)
 			throws AmqpException {
-
 		return sendAndReceive(exchange, routingKey, message, null);
 	}
 
+	public Message sendAndReceive(final String exchange, final String routingKey, final Message message, CorrelationData correlationData)
+			throws AmqpException {
-	public Message sendAndReceive(final String exchange, final String routingKey, final Message message,
-			@Nullable CorrelationData correlationData) throws AmqpException {
-
 		return doSendAndReceive(exchange, routingKey, message, correlationData);
 	}
 
@@ +1356,7 -1368,9 @@ public Object convertSendAndReceive(final Object message) throws AmqpException {
 	}
 
 	@Override
+	public Object convertSendAndReceive(final Object message, CorrelationData correlationData) throws AmqpException {
-	public Object convertSendAndReceive(final Object message, @Nullable CorrelationData correlationData)
-			throws AmqpException {
-
 		return convertSendAndReceive(this.exchange, this.routingKey, message, null, correlationData);
 	}
 
@@ +1366,20 -1380,23 @@ public Object convertSendAndReceive(final String routingKey, final Object messag
 	}
 
 	@Override
+	public Object convertSendAndReceive(final String routingKey, final Object message, CorrelationData correlationData)
+			throws AmqpException {
-	public Object convertSendAndReceive(final String routingKey, final Object message,
-			@Nullable CorrelationData correlationData) throws AmqpException {
-
 		return convertSendAndReceive(this.exchange, routingKey, message, null, correlationData);
 	}
 
 	@Override
 	public Object convertSendAndReceive(final String exchange, final String routingKey, final Object message)
 			throws AmqpException {
-
 		return convertSendAndReceive(exchange, routingKey, message, (CorrelationData) null);
 	}
 
 	@Override
 	public Object convertSendAndReceive(final String exchange, final String routingKey, final Object message,
+			CorrelationData correlationData) throws AmqpException {
-			@Nullable CorrelationData correlationData) throws AmqpException {
-
 		return convertSendAndReceive(exchange, routingKey, message, null, correlationData);
 	}
 
@@ +1391,19 -1408,21 @@ public Object convertSendAndReceive(final Object message, final MessagePostProce
 
 	@Override
 	public Object convertSendAndReceive(final Object message, final MessagePostProcessor messagePostProcessor,
+			CorrelationData correlationData) throws AmqpException {
-			@Nullable CorrelationData correlationData) throws AmqpException {
-
 		return convertSendAndReceive(this.exchange, this.routingKey, message, messagePostProcessor, correlationData);
 	}
 
 	@Override
 	public Object convertSendAndReceive(final String routingKey, final Object message,
 			final MessagePostProcessor messagePostProcessor) throws AmqpException {
-
 		return convertSendAndReceive(routingKey, message, messagePostProcessor, null);
 	}
 
 	@Override
 	public Object convertSendAndReceive(final String routingKey, final Object message, final MessagePostProcessor messagePostProcessor,
+			CorrelationData correlationData) throws AmqpException {
-			@Nullable CorrelationData correlationData) throws AmqpException {
 		return convertSendAndReceive(this.exchange, routingKey, message, messagePostProcessor, correlationData);
 	}
 
@@ +1415,7 -1434,9 @@ public Object convertSendAndReceive(final String exchange, final String routingK
 
 	@Override
 	public Object convertSendAndReceive(final String exchange, final String routingKey, final Object message,
+			final MessagePostProcessor messagePostProcessor, final CorrelationData correlationData) throws AmqpException {
-			@Nullable final MessagePostProcessor messagePostProcessor,
-			@Nullable final CorrelationData correlationData) throws AmqpException {
-
 		Message replyMessage = convertSendAndReceiveRaw(exchange, routingKey, message, messagePostProcessor,
 				correlationData);
 		if (replyMessage == null) {
@@ +1431,8 -1452,9 @@ public <T> T convertSendAndReceiveAsType(final Object message, ParameterizedType
 	}
 
 	@Override
+	public <T> T convertSendAndReceiveAsType(final Object message, CorrelationData correlationData,
-	public <T> T convertSendAndReceiveAsType(final Object message, @Nullable CorrelationData correlationData,
 			ParameterizedTypeReference<T> responseType) throws AmqpException {
-
 		return convertSendAndReceiveAsType(this.exchange, this.routingKey, message, null, correlationData,
 				responseType);
 	}
@@ +1440,44 -1462,54 @@ public <T> T convertSendAndReceiveAsType(final Object message, CorrelationData c
 	@Override
 	public <T> T convertSendAndReceiveAsType(final String routingKey, final Object message,
 			ParameterizedTypeReference<T> responseType) throws AmqpException {
-
 		return convertSendAndReceiveAsType(routingKey, message, (CorrelationData) null, responseType);
 	}
 
 	@Override
 	public <T> T convertSendAndReceiveAsType(final String routingKey, final Object message,
+			CorrelationData correlationData, ParameterizedTypeReference<T> responseType) throws AmqpException {
-			@Nullable CorrelationData correlationData, ParameterizedTypeReference<T> responseType)
-					throws AmqpException {
-
 		return convertSendAndReceiveAsType(this.exchange, routingKey, message, null, correlationData, responseType);
 	}
 
 	@Override
 	public <T> T convertSendAndReceiveAsType(final String exchange, final String routingKey, final Object message,
 			ParameterizedTypeReference<T> responseType) throws AmqpException {
-
 		return convertSendAndReceiveAsType(exchange, routingKey, message, (CorrelationData) null, responseType);
 	}
 
 	@Override
+	public <T> T convertSendAndReceiveAsType(final Object message, final MessagePostProcessor messagePostProcessor,
-	public <T> T convertSendAndReceiveAsType(final Object message,
-			@Nullable final MessagePostProcessor messagePostProcessor,
 			ParameterizedTypeReference<T> responseType) throws AmqpException {
-
 		return convertSendAndReceiveAsType(message, messagePostProcessor, null, responseType);
 	}
 
 	@Override
+	public <T> T convertSendAndReceiveAsType(final Object message, final MessagePostProcessor messagePostProcessor,
+			CorrelationData correlationData, ParameterizedTypeReference<T> responseType) throws AmqpException {
-	public <T> T convertSendAndReceiveAsType(final Object message,
-			@Nullable final MessagePostProcessor messagePostProcessor,
-			@Nullable CorrelationData correlationData, ParameterizedTypeReference<T> responseType)
-					throws AmqpException {
-
 		return convertSendAndReceiveAsType(this.exchange, this.routingKey, message, messagePostProcessor,
 				correlationData, responseType);
 	}
 
 	@Override
 	public <T> T convertSendAndReceiveAsType(final String routingKey, final Object message,
+			final MessagePostProcessor messagePostProcessor, ParameterizedTypeReference<T> responseType)
+			throws AmqpException {
-			@Nullable final MessagePostProcessor messagePostProcessor, ParameterizedTypeReference<T> responseType)
-					throws AmqpException {
-
 		return convertSendAndReceiveAsType(routingKey, message, messagePostProcessor, null, responseType);
 	}
 
 	@Override
 	public <T> T convertSendAndReceiveAsType(final String routingKey, final Object message,
+			final MessagePostProcessor messagePostProcessor, CorrelationData correlationData,
-			@Nullable final MessagePostProcessor messagePostProcessor, @Nullable CorrelationData correlationData,
 			ParameterizedTypeReference<T> responseType) throws AmqpException {
 		return convertSendAndReceiveAsType(this.exchange, routingKey, message, messagePostProcessor, correlationData,
 				responseType);
@@ +1493,8 -1525,9 @@ public <T> T convertSendAndReceiveAsType(final String exchange, final String rou
 	@Override
 	@SuppressWarnings("unchecked")
 	public <T> T convertSendAndReceiveAsType(final String exchange, final String routingKey, final Object message,
+			final MessagePostProcessor messagePostProcessor, final CorrelationData correlationData,
-			@Nullable final MessagePostProcessor messagePostProcessor, @Nullable final CorrelationData correlationData,
 			ParameterizedTypeReference<T> responseType) throws AmqpException {
-
 		Message replyMessage = convertSendAndReceiveRaw(exchange, routingKey, message, messagePostProcessor,
 				correlationData);
 		if (replyMessage == null) {
@@ +1516,7 -1549,9 @@ public <T> T convertSendAndReceiveAsType(final String exchange, final String rou
 	 * @since 1.6.6
 	 */
 	protected Message convertSendAndReceiveRaw(final String exchange, final String routingKey, final Object message,
+			final MessagePostProcessor messagePostProcessor, final CorrelationData correlationData) {
-			@Nullable final MessagePostProcessor messagePostProcessor,
-			@Nullable final CorrelationData correlationData) {
-
 		Message requestMessage = convertMessageIfNecessary(message);
 		if (messagePostProcessor != null) {
 			requestMessage = messagePostProcessor.postProcessMessage(requestMessage, correlationData);
@@ +1542,7 -1577,7 @@ protected Message convertMessageIfNecessary(final Object object) {
 	 * @return the message that is received in reply
 	 */
 	protected Message doSendAndReceive(final String exchange, final String routingKey, final Message message,
+			CorrelationData correlationData) {
-			@Nullable CorrelationData correlationData) {
 		if (!this.evaluatedFastReplyTo) {
 			synchronized (this) {
 				if (!this.evaluatedFastReplyTo) {
@@ +1761,6 -1796,7 @@ private void saveAndSetProperties(final Message message, final PendingReply pend
 		}
 	}
 
-	@Nullable
 	private Message exchangeMessages(final String exchange, final String routingKey, final Message message,
 			final CorrelationData correlationData, Channel channel, final PendingReply pendingReply, String messageTag)
 			throws Exception {
@@ +1999,7 -2035,7 @@ public void determineConfirmsReturnsCapability(ConnectionFactory connectionFacto
 	 * @throws Exception If thrown by RabbitMQ API methods
 	 */
 	public void doSend(Channel channel, String exchange, String routingKey, Message message,
+			boolean mandatory, CorrelationData correlationData) throws Exception {
-			boolean mandatory, @Nullable CorrelationData correlationData) throws Exception {
 		if (exchange == null) {
 			// try to send to configured exchange
 			exchange = this.exchange;
@@ +2045,7 -2081,7 @@ protected void sendToRabbit(Channel channel, String exchange, String routingKey,
 		channel.basicPublish(exchange, routingKey, mandatory, convertedMessageProperties, message.getBody());
 	}
 
+	private void setupConfirm(Channel channel, Message message, CorrelationData correlationData) {
-	private void setupConfirm(Channel channel, Message message, @Nullable CorrelationData correlationData) {
 		if ((this.publisherConfirms || this.confirmCallback != null) && channel instanceof PublisherCallbackChannel) {
 			PublisherCallbackChannel publisherCallbackChannel = (PublisherCallbackChannel) channel;
 			correlationData = this.correlationDataPostProcessor != null
@@ +2359,7 -2395,7 @@ public String getSavedCorrelation() {
 			return this.savedCorrelation;
 		}
 
+		public void setSavedCorrelation(String savedCorrelation) {
-		public void setSavedCorrelation(@Nullable String savedCorrelation) {
 			this.savedCorrelation = savedCorrelation;
 		}
 
@@ +2372,6 -2408,7 @@ public Message get() throws InterruptedException {
 			}
 		}
 
-		@Nullable
 		public Message get(long timeout, TimeUnit unit) throws InterruptedException {
 			try {
 				return this.future.get(timeout, unit);
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer.java
index 04d6ef3387..98168d3c1c 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer.java
@@ +32,6 -32,7 @@
 
 import org.aopalliance.aop.Advice;
 import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 
 import org.springframework.amqp.AmqpConnectException;
 import org.springframework.amqp.AmqpIOException;
@@ +72,6 -73,7 @@
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.context.ApplicationEventPublisherAware;
 import org.springframework.core.task.SimpleAsyncTaskExecutor;
-import org.springframework.lang.Nullable;
 import org.springframework.transaction.PlatformTransactionManager;
 import org.springframework.transaction.interceptor.DefaultTransactionAttribute;
 import org.springframework.transaction.interceptor.TransactionAttribute;
@@ +213,6 -215,8 @@ public abstract class AbstractMessageListenerContainer extends RabbitAccessor
 
 	private boolean forceCloseChannel = true;
 
-	private String errorHandlerLoggerName = getClass().getName();
-
 	/**
 	 * {@inheritDoc}
 	 * @since 1.5
@@ +465,12 -469,21 @@ public void setErrorHandler(ErrorHandler errorHandler) {
 	/**
 	 * Set the {@link MessageConverter} strategy for converting AMQP Messages.
 	 * @param messageConverter the message converter to use
-	 * @deprecated + this converter is not used by the container; it was only
-	 * used to configure the converter for a {@code @RabbitListener} adapter.
-	 * That is now handled differently. If you are manually creating a listener
-	 * container, the converter must be configured in a listener adapter (if
-	 * present).
 	 */
-	@Deprecated
 	public void setMessageConverter(MessageConverter messageConverter) {
-		this.logger.warn("It is preferred to configure the message converter via the endpoint. "
-				- "See RabbitListenerEndpoint.setMessageConverter");
 		this.messageConverter = messageConverter;
 	}
 
 	@Override
-	@Deprecated
 	public MessageConverter getMessageConverter() {
 		return this.messageConverter;
 	}
@@ +620,6 -633,7 @@ public void setForceCloseChannel(boolean forceCloseChannel) {
 	 * @since 1.6.9
 	 * @see #setLookupKeyQualifier(String)
 	 */
-	@Nullable
 	protected String getRoutingLookupKey() {
 		return super.getConnectionFactory() instanceof RoutingConnectionFactory
 				? this.lookupKeyQualifier - "[" - this.queues.stream()
@@ +634,6 -648,7 @@ protected String getRoutingLookupKey() {
 	 * @return the {@link RoutingConnectionFactory} or null.
 	 * @since 1.6.9
 	 */
-	@Nullable
 	protected RoutingConnectionFactory getRoutingConnectionFactory() {
 		return super.getConnectionFactory() instanceof RoutingConnectionFactory
 				? (RoutingConnectionFactory) super.getConnectionFactory()
@@ +1052,6 -1067,18 @@ protected boolean isAlwaysRequeueWithTxManagerRollback() {
 		return this.alwaysRequeueWithTxManagerRollback;
 	}
 
-	/**
-	 * Set the name (category) of the logger used to log exceptions thrown by the error handler.
-	 * It defaults to the container's logger but can be overridden if you want it to log at a different
-	 * level to the container. Such exceptions are logged at the ERROR level.
-	 * @param errorHandlerLoggerName the logger name.
-	 * @since 2.0.8
-	 */
-	public void setErrorHandlerLoggerName(String errorHandlerLoggerName) {
-		Assert.notNull(errorHandlerLoggerName, "'errorHandlerLoggerName' cannot be null");
-		this.errorHandlerLoggerName = errorHandlerLoggerName;
-	}
-
 	/**
 	 * Delegates to {@link #validateConfiguration()} and {@link #initialize()}.
 	 */
@@ +1303,7 -1330,14 @@ public final boolean isRunning() {
 	 */
 	protected void invokeErrorHandler(Throwable ex) {
 		if (this.errorHandler != null) {
+			this.errorHandler.handleError(ex);
-			try {
-				this.errorHandler.handleError(ex);
-			}
-			catch (Exception e) {
-				LogFactory.getLog(this.errorHandlerLoggerName).error(
-						"Execution of Rabbit message listener failed, and the error handler threw an exception", e);
-				throw e;
-			}
 		}
 		else if (logger.isWarnEnabled()) {
 			logger.warn("Execution of Rabbit message listener failed, and no ErrorHandler has been set.", ex);
@@ +1485,7 -1519,7 @@ protected void doInvokeListener(ChannelAwareMessageListener listener, Channel ch
 				// so the channel exposed (because exposeListenerChannel is false) will be closed
 				resourceHolder.setSynchronizedWithTransaction(false);
 			}
+			ConnectionFactoryUtils.releaseResources(resourceHolder);
-			ConnectionFactoryUtils.releaseResources(resourceHolder); // NOSONAR + null check in method
 			if (boundHere) {
 				// unbind if we bound
 				TransactionSynchronizationManager.unbindResource(this.getConnectionFactory());
@@ +1571,7 -1605,7 @@ protected Exception wrapToListenerExecutionFailedExceptionIfNeeded(Exception e,
 		return e;
 	}
 
+	protected void publishConsumerFailedEvent(String reason, boolean fatal, Throwable t) {
-	protected void publishConsumerFailedEvent(String reason, boolean fatal, @Nullable Throwable t) {
 		if (this.applicationEventPublisher != null) {
 			this.applicationEventPublisher
 					.publishEvent(t == null ? new ListenerContainerConsumerTerminatedEvent(this, reason) :
@@ +1634,7 -1668,7 @@ protected void checkMismatchedQueues() {
 		}
 		else {
 			try {
+				Connection connection = getConnectionFactory().createConnection();
-				Connection connection = getConnectionFactory().createConnection(); // NOSONAR
 				if (connection != null) {
 					connection.close();
 				}
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/AbstractRabbitListenerEndpoint.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/AbstractRabbitListenerEndpoint.java
index 1481976bfa..bad0967615 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/AbstractRabbitListenerEndpoint.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/AbstractRabbitListenerEndpoint.java
@@ +27,6 -27,7 @@
 import org.springframework.amqp.core.Queue;
 import org.springframework.amqp.rabbit.config.SimpleRabbitListenerEndpoint;
 import org.springframework.amqp.rabbit.core.RabbitAdmin;
-import org.springframework.amqp.support.converter.MessageConverter;
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.BeanFactoryAware;
@@ +77,6 -78,8 @@ public abstract class AbstractRabbitListenerEndpoint implements RabbitListenerEn
 
 	private Boolean autoStartup;
 
-	private MessageConverter messageConverter;
-
 	@Override
 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
 		this.beanFactory = beanFactory;
@@ +249,6 -252,16 @@ public Boolean getAutoStartup() {
 		return this.autoStartup;
 	}
 
-	@Override
-	public MessageConverter getMessageConverter() {
-		return this.messageConverter;
-	}
-
-	@Override
-	public void setMessageConverter(MessageConverter messageConverter) {
-		this.messageConverter = messageConverter;
-	}
-
 	@Override
 	public void setupListenerContainer(MessageListenerContainer listenerContainer) {
 		AbstractMessageListenerContainer container = (AbstractMessageListenerContainer) listenerContainer;
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/BlockingQueueConsumer.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/BlockingQueueConsumer.java
index e140bfad62..027f888943 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/BlockingQueueConsumer.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/BlockingQueueConsumer.java
@@ +49,6 -49,7 @@
 import org.springframework.amqp.core.MessageProperties;
 import org.springframework.amqp.rabbit.connection.ChannelProxy;
 import org.springframework.amqp.rabbit.connection.ClosingRecoveryListener;
-import org.springframework.amqp.rabbit.connection.Connection;
 import org.springframework.amqp.rabbit.connection.ConnectionFactory;
 import org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils;
 import org.springframework.amqp.rabbit.connection.RabbitResourceHolder;
@@ +60,6 -61,7 @@
 import org.springframework.amqp.rabbit.support.RabbitExceptionTranslator;
 import org.springframework.amqp.support.ConsumerTagStrategy;
 import org.springframework.context.ApplicationEventPublisher;
-import org.springframework.lang.Nullable;
 import org.springframework.transaction.support.TransactionSynchronizationManager;
 import org.springframework.util.ObjectUtils;
 import org.springframework.util.backoff.BackOffExecution;
@@ +217,7 -219,7 @@ public BlockingQueueConsumer(ConnectionFactory connectionFactory,
 			MessagePropertiesConverter messagePropertiesConverter,
 			ActiveObjectCounter<BlockingQueueConsumer> activeObjectCounter, AcknowledgeMode acknowledgeMode,
 			boolean transactional, int prefetchCount, boolean defaultRequeueRejected,
+			Map<String, Object> consumerArgs, String... queues) {
-			@Nullable Map<String, Object> consumerArgs, String... queues) {
 		this(connectionFactory, messagePropertiesConverter, activeObjectCounter, acknowledgeMode, transactional,
 				prefetchCount, defaultRequeueRejected, consumerArgs, false, queues);
 	}
@@ +241,7 -243,7 @@ public BlockingQueueConsumer(ConnectionFactory connectionFactory,
 			MessagePropertiesConverter messagePropertiesConverter,
 			ActiveObjectCounter<BlockingQueueConsumer> activeObjectCounter, AcknowledgeMode acknowledgeMode,
 			boolean transactional, int prefetchCount, boolean defaultRequeueRejected,
+			Map<String, Object> consumerArgs, boolean exclusive, String... queues) {
-			@Nullable Map<String, Object> consumerArgs, boolean exclusive, String... queues) {
 		this(connectionFactory, messagePropertiesConverter, activeObjectCounter, acknowledgeMode, transactional,
 				prefetchCount, defaultRequeueRejected, consumerArgs, false, exclusive, queues);
 	}
@@ +443,7 -445,8 @@ private void checkShutdown() {
 	 * @return A message built from the contents.
 	 * @throws InterruptedException if the thread is interrupted.
 	 */
+	private Message handle(Delivery delivery) throws InterruptedException {
-	@Nullable
-	private Message handle(@Nullable Delivery delivery) throws InterruptedException {
 		if ((delivery == null && this.shutdown != null)) {
 			throw this.shutdown;
 		}
@@ +489,6 -492,7 @@ public Message nextMessage() throws InterruptedException, ShutdownSignalExceptio
 	 * @throws InterruptedException if an interrupt is received while waiting
 	 * @throws ShutdownSignalException if the connection is shut down while waiting
 	 */
-	@Nullable
 	public Message nextMessage(long timeout) throws InterruptedException, ShutdownSignalException {
 		if (logger.isTraceEnabled()) {
 			logger.trace("Retrieving delivery for " - this);
@@ +516,9 -520,14 @@ private void checkMissingQueues() {
 				while (iterator.hasNext()) {
 					boolean available = true;
 					String queue = iterator.next();
-					Connection connection = null; // NOSONAR + RabbitUtils
 					Channel channel = null;
 					try {
+						channel = this.connectionFactory.createConnection().createChannel(false);
-						connection = this.connectionFactory.createConnection(); // NOSONAR + RabbitUtils
-						if (connection == null) {
-							return;
-						}
-						channel = connection.createChannel(false);
 						channel.queueDeclarePassive(queue);
 						if (logger.isInfoEnabled()) {
 							logger.info("Queue '" - queue - "' is now available");
@@ +531,17 -540,8 @@ private void checkMissingQueues() {
 						}
 					}
 					finally {
+						if (channel != null) {
+							try {
+								channel.close();
+							}
+							catch (IOException e) {
+								//Ignore it
+							}
+							catch (TimeoutException e) {
+								//Ignore it
+							}
+						}
-						RabbitUtils.closeChannel(channel);
-						RabbitUtils.closeConnection(connection);
 					}
 					if (available) {
 						try {
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/DirectMessageListenerContainer.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/DirectMessageListenerContainer.java
index de809cecec..a94dc3ab41 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/DirectMessageListenerContainer.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/DirectMessageListenerContainer.java
@@ +23,6 -23,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Date;
-import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
@@ +448,8 -449,18 @@ protected void actualStart() throws Exception {
 						if (restartableConsumers.size() > 0) {
 							doRedeclareElementsIfNecessary();
 						}
+						for (SimpleConsumer consumer : restartableConsumers) {
+							if (this.logger.isDebugEnabled() && restartableConsumers.size() > 0) {
-						Iterator<SimpleConsumer> iterator = restartableConsumers.iterator();
-						while (iterator.hasNext()) {
-							SimpleConsumer consumer = iterator.next();
-							iterator.remove();
-							if (!DirectMessageListenerContainer.this.consumersByQueue
-									.containsKey(consumer.getQueue())) {
-								if (this.logger.isDebugEnabled()) {
-									this.logger.debug("Skipping restart of consumer " - consumer);
-								}
-								continue;
-							}
-							if (this.logger.isDebugEnabled()) {
 								this.logger.debug("Attempting to restart consumer " - consumer);
 							}
 							Queue queue = namesToQueues.get(consumer.getQueue());
@@ +471,6 -482,10 @@ protected void actualStart() throws Exception {
 									this.logger.error("Application context is closed, terminating");
 									this.taskScheduler.schedule(this::stop, new Date());
 								}
-								this.consumersToRestart.addAll(restartableConsumers);
-								if (this.logger.isTraceEnabled()) {
-									this.logger.trace("After restart exception, consumers to restart now: " - this.consumersToRestart);
-								}
 								break;
 							}
 						}
@@ +512,7 -527,7 @@ protected void actualStart() throws Exception {
 								this.logger.error("Error creating consumer; retrying in " - nextBackOff, e);
 								doShutdown();
 								try {
+									Thread.sleep(nextBackOff);
-									Thread.sleep(nextBackOff); // NOSONAR
 								}
 								catch (InterruptedException e1) {
 									Thread.currentThread().interrupt();
@@ +772,6 -787,9 @@ private void cancelConsumer(SimpleConsumer consumer) {
 	private void addConsumerToRestart(SimpleConsumer consumer) {
 		if (this.started) {
 			this.consumersToRestart.add(consumer);
-			if (this.logger.isTraceEnabled()) {
-				this.logger.trace("Consumers to restart now: " - this.consumersToRestart);
-			}
 		}
 	}
 
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/DirectReplyToMessageListenerContainer.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/DirectReplyToMessageListenerContainer.java
index 98e62af404..30349640c5 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/DirectReplyToMessageListenerContainer.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/DirectReplyToMessageListenerContainer.java
@@ +24,6 -24,7 @@
 import org.springframework.amqp.core.MessageListener;
 import org.springframework.amqp.rabbit.connection.ConnectionFactory;
 import org.springframework.amqp.rabbit.listener.api.ChannelAwareMessageListener;
-import org.springframework.lang.Nullable;
 import org.springframework.util.Assert;
 
 import com.rabbitmq.client.Channel;
@@ +201,7 -202,7 @@ public ChannelHolder getChannelHolder() {
 	 * @param cancelConsumer true to cancel the consumer.
 	 * @param message a message to be included in the cancel event if cancelConsumer is true.
 	 */
+	public void releaseConsumerFor(ChannelHolder channelHolder, boolean cancelConsumer, String message) {
-	public void releaseConsumerFor(ChannelHolder channelHolder, boolean cancelConsumer, @Nullable String message) {
 		synchronized (this.consumersMonitor) {
 			SimpleConsumer consumer = this.inUseConsumerChannels.get(channelHolder.getChannel());
 			if (consumer != null) {
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/ListenerContainerConsumerFailedEvent.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/ListenerContainerConsumerFailedEvent.java
index 7ec6056738..dcb67b3ee2 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/ListenerContainerConsumerFailedEvent.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/ListenerContainerConsumerFailedEvent.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2015+2016 the original author or authors.
- * Copyright 2015+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +17,6 -17,7 @@
 package org.springframework.amqp.rabbit.listener;
 
 import org.springframework.amqp.event.AmqpEvent;
-import org.springframework.lang.Nullable;
 
 /**
  * Published when a listener consumer fails.
@@ +43,7 -44,7 @@ public class ListenerContainerConsumerFailedEvent extends AmqpEvent {
 	 * @param fatal true if the startup failure was fatal (will not be retried).
 	 */
 	public ListenerContainerConsumerFailedEvent(Object source, String reason,
+			Throwable throwable, boolean fatal) {
-			@Nullable Throwable throwable, boolean fatal) {
 		super(source);
 		this.reason = reason;
 		this.fatal = fatal;
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/MessageListenerContainer.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/MessageListenerContainer.java
index 85780696d3..c05e681324 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/MessageListenerContainer.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/MessageListenerContainer.java
@@ +25,6 -25,7 @@
  * listener container. Not meant to be implemented externally.
  *
  * @author Stephane Nicoll
- * @author Gary Russell
  * @since 1.4
  */
 public interface MessageListenerContainer extends SmartLifecycle {
@@ +39,7 -40,13 @@ public interface MessageListenerContainer extends SmartLifecycle {
 	/**
 	 * @return the {@link MessageConverter} that can be used to
 	 * convert {@link org.springframework.amqp.core.Message}, if any.
-	 * @deprecated + this converter is not used by the container; it was only
-	 * used to configure the converter for a {@code @RabbitListener} adapter.
-	 * That is now handled differently. If you are manually creating a listener
-	 * container, the converter must be configured in a listener adapter (if
-	 * present).
 	 */
-	@Deprecated
 	MessageConverter getMessageConverter();
 
 }
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/MethodRabbitListenerEndpoint.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/MethodRabbitListenerEndpoint.java
index ef3e5396d7..69b2e77b89 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/MethodRabbitListenerEndpoint.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/MethodRabbitListenerEndpoint.java
@@ +24,6 -24,7 @@
 import org.springframework.amqp.rabbit.listener.api.RabbitListenerErrorHandler;
 import org.springframework.amqp.support.converter.MessageConverter;
 import org.springframework.core.annotation.AnnotationUtils;
-import org.springframework.lang.Nullable;
 import org.springframework.messaging.handler.annotation.SendTo;
 import org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory;
 import org.springframework.messaging.handler.invocation.InvocableHandlerMethod;
@@ +35,6 -36,7 @@
  *
  * @author Stephane Nicoll
  * @author Artem Bilan
- * @author Gary Russell
  *
  * @since 1.4
  */
@@ +111,6 -113,7 @@ protected MessageHandlerMethodFactory getMessageHandlerMethodFactory() {
 		return this.messageHandlerMethodFactory;
 	}
 
-	@SuppressWarnings("deprecation")
 	@Override
 	protected MessagingMessageListenerAdapter createMessageListener(MessageListenerContainer container) {
 		Assert.state(this.messageHandlerMethodFactory != null,
@@ +121,7 -124,11 @@ protected MessagingMessageListenerAdapter createMessageListener(MessageListenerC
 		if (replyToAddress != null) {
 			messageListener.setResponseAddress(replyToAddress);
 		}
+		MessageConverter messageConverter = container.getMessageConverter();
-		MessageConverter messageConverter = getMessageConverter();
-		if (messageConverter == null) {
-			// fall back to the legacy converter holder in the container
-			messageConverter = container.getMessageConverter();
-		}
 		if (messageConverter != null) {
 			messageListener.setMessageConverter(messageConverter);
 		}
@@ +150,6 -157,7 @@ protected MessagingMessageListenerAdapter createMessageListenerInstance() {
 		return new MessagingMessageListenerAdapter(this.bean, this.method, this.returnExceptions, this.errorHandler);
 	}
 
-	@Nullable
 	private String getDefaultReplyToAddress() {
 		Method method = getMethod();
 		if (method != null) {
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/RabbitListenerEndpoint.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/RabbitListenerEndpoint.java
index a5b429af22..7200fe6adc 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/RabbitListenerEndpoint.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/RabbitListenerEndpoint.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2002+2017 the original author or authors.
- * Copyright 2002+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +16,6 -16,8 @@
 
 package org.springframework.amqp.rabbit.listener;
 
-import org.springframework.amqp.support.converter.MessageConverter;
-import org.springframework.lang.Nullable;
 
 /**
  * Model for a Rabbit listener endpoint. Can be used against a
@@ +67,4 -69,28 @@ public interface RabbitListenerEndpoint {
 	 */
 	void setupListenerContainer(MessageListenerContainer listenerContainer);
 
-	/**
-	 * The preferred way for a container factory to pass a message converter
-	 * to the endpoint's adapter.
-	 * @param converter the converter.
-	 * @since 2.0.8
-	 */
-	default void setMessageConverter(MessageConverter converter) {
-		// NOSONAR
-	}
-
-	/**
-	 * Used by the container factory to check if this endpoint supports the
-	 * preferred way for a container factory to pass a message converter
-	 * to the endpoint's adapter. If null is returned, the factory will
-	 * fall back to the legacy method of passing the converter via the
-	 * container.
-	 * @return the converter.
-	 * @since 2.0.8
-	 */
-	@Nullable
-	default MessageConverter getMessageConverter() {
-		return null;
-	}
-
 }
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/RabbitListenerEndpointRegistrar.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/RabbitListenerEndpointRegistrar.java
index 2765381424..6d6e9db6bf 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/RabbitListenerEndpointRegistrar.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/listener/RabbitListenerEndpointRegistrar.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2014+2016 the original author or authors.
- * Copyright 2014+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +22,6 -22,7 @@
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.BeanFactoryAware;
 import org.springframework.beans.factory.InitializingBean;
-import org.springframework.lang.Nullable;
 import org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory;
 import org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory;
 import org.springframework.util.Assert;
@@ +166,7 -167,8 @@ else if (this.containerFactoryBeanName != null) {
 	 * @param endpoint the {@link RabbitListenerEndpoint} instance to register.
 	 * @param factory the {@link RabbitListenerContainerFactory} to use.
 	 */
+	public void registerEndpoint(RabbitListenerEndpoint endpoint, RabbitListenerContainerFactory<?> factory) {
-	public void registerEndpoint(RabbitListenerEndpoint endpoint,
-			@Nullable RabbitListenerContainerFactory<?> factory) {
 		Assert.notNull(endpoint, "Endpoint must be set");
 		Assert.hasText(endpoint.getId(), "Endpoint id must be set");
 		// Factory may be null, we defer the resolution right before actually creating the container
@@ +201,7 -203,7 @@ private static final class AmqpListenerEndpointDescriptor {
 		private final RabbitListenerContainerFactory<?> containerFactory;
 
 		AmqpListenerEndpointDescriptor(RabbitListenerEndpoint endpoint,
+				RabbitListenerContainerFactory<?> containerFactory) {
-				@Nullable RabbitListenerContainerFactory<?> containerFactory) {
 			this.endpoint = endpoint;
 			this.containerFactory = containerFactory;
 		}
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/log4j2/AmqpAppender.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/log4j2/AmqpAppender.java
index 13f3694279..6e5c673bc1 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/log4j2/AmqpAppender.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/log4j2/AmqpAppender.java
@@ +72,6 -72,7 @@
 import org.springframework.retry.RetryPolicy;
 import org.springframework.retry.policy.SimpleRetryPolicy;
 import org.springframework.retry.support.RetryTemplate;
-import org.springframework.util.StringUtils;
 
 import com.rabbitmq.client.ConnectionFactory;
 
@@ +172,6 -173,7 @@ public static AmqpAppender createAppender(
 			@PluginAttribute("autoDelete") boolean autoDelete,
 			@PluginAttribute("contentType") String contentType,
 			@PluginAttribute("contentEncoding") String contentEncoding,
-			@PluginAttribute("connectionName") String connectionName,
 			@PluginAttribute("clientConnectionProperties") String clientConnectionProperties,
 			@PluginAttribute("async") boolean async,
 			@PluginAttribute("charset") String charset,
@@ +214,6 -216,7 @@ public static AmqpAppender createAppender(
 		manager.autoDelete = autoDelete;
 		manager.contentType = contentType;
 		manager.contentEncoding = contentEncoding;
-		manager.connectionName = connectionName;
 		manager.clientConnectionProperties = clientConnectionProperties;
 		manager.charset = charset;
 		manager.async = async;
@@ +570,6 -573,11 @@ protected static class AmqpManager extends AbstractManager {
 		 */
 		private boolean declareExchange = false;
 
-		/**
-		 * A name for the connection (appears on the RabbitMQ Admin UI).
-		 */
-		private String connectionName;
-
 		/**
 		 * Additional client connection properties to be added to the rabbit connection,
 		 * with the form {@code key:value[,key:value]...}.
@@ +617,7 -625,10 @@ private boolean activateOptions() {
 						.withAlwaysWriteExceptions(false)
 						.withNoConsoleNoAnsi(true)
 						.build();
+				this.connectionFactory = new CachingConnectionFactory(createRabbitConnectionFactory());
-				this.connectionFactory = new CachingConnectionFactory(rabbitConnectionFactory);
-				if (StringUtils.hasText(this.connectionName)) {
-					this.connectionFactory.setConnectionNameStrategy(cf +> this.connectionName);
-				}
 				if (this.addresses != null) {
 					this.connectionFactory.setAddresses(this.addresses);
 				}
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/logback/AmqpAppender.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/logback/AmqpAppender.java
index b679f48b71..a0ab67e312 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/logback/AmqpAppender.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/logback/AmqpAppender.java
@@ +51,6 -51,7 @@
 import org.springframework.amqp.rabbit.core.RabbitTemplate;
 import org.springframework.core.io.Resource;
 import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
-import org.springframework.util.StringUtils;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.PatternLayout;
@@ +176,6 -177,11 @@ public class AmqpAppender extends AppenderBase<ILoggingEvent> {
 	 */
 	private AbstractConnectionFactory connectionFactory;
 
-	/**
-	 * A name for the connection (appears on the RabbitMQ Admin UI).
-	 */
-	private String connectionName;
-
 	/**
 	 * Additional client connection properties added to the rabbit connection, with the form
 	 * {@code key:value[,key:value]...}.
@@ +569,6 -575,15 @@ public int getQueuedEventCount() {
 		return this.events.size();
 	}
 
-	/**
-	 * Set a name for the connection which will appear on the RabbitMQ Admin UI.
-	 * @param connectionName the connection name.
-	 * @since 2.1.1
-	 */
-	public void setConnectionName(String connectionName) {
-		this.connectionName = connectionName;
-	}
-
 	/**
 	 * Set additional client connection properties to be added to the rabbit connection,
 	 * with the form {@code key:value[,key:value]...}.
@@ +609,6 -624,9 @@ public void start() {
 			this.locationLayout.setContext(getContext());
 			this.locationLayout.start();
 			this.connectionFactory = new CachingConnectionFactory(rabbitConnectionFactory);
-			if (StringUtils.hasText(this.connectionName)) {
-				this.connectionFactory.setConnectionNameStrategy(cf +> this.connectionName);
-			}
 			if (this.addresses != null) {
 				this.connectionFactory.setAddresses(this.addresses);
 			}
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter.java
index a2e6f6e693..0d8ba763d9 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2002+2017 the original author or authors.
- * Copyright 2002+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +27,6 -27,7 @@
 
 import org.springframework.amqp.core.MessageDeliveryMode;
 import org.springframework.amqp.core.MessageProperties;
-import org.springframework.lang.Nullable;
 import org.springframework.util.CollectionUtils;
 import org.springframework.util.StringUtils;
 
@@ +180,7 -181,8 @@ private Map<String, Object> convertHeadersIfNecessary(Map<String, Object> header
 	 * @param value the value.
 	 * @return the converted value.
 	 */
+	private Object convertHeaderValueIfNecessary(Object value) {
-	@Nullable
-	private Object convertHeaderValueIfNecessary(@Nullable Object value) {
 		boolean valid = (value instanceof String) || (value instanceof byte[]) || (value instanceof Boolean)
 				|| (value instanceof LongString) || (value instanceof Integer) || (value instanceof Long)
 				|| (value instanceof Float) || (value instanceof Double) || (value instanceof BigDecimal)
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/support/Delivery.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/support/Delivery.java
index 258baf2774..68a0121f4e 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/support/Delivery.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/support/Delivery.java
@@ +38,12 -38,12 @@ public class Delivery {
 
 	private final byte[] body;
 
+	public Delivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body,
+			String queue) { //NOSONAR
-	public Delivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body, // NOSONAR
-			String queue) {
 		this.consumerTag = consumerTag;
 		this.envelope = envelope;
 		this.properties = properties;
+		this.body = body;
-		this.body = body; // NOSONAR
 		this.queue = queue;
 	}
 
diff ++git a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/support/MessagePropertiesConverter.java b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/support/MessagePropertiesConverter.java
index 519c51a323..475fc57b80 100644
+++ a/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/support/MessagePropertiesConverter.java
--- b/spring+rabbit/src/main/java/org/springframework/amqp/rabbit/support/MessagePropertiesConverter.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2002+2016 the original author or authors.
- * Copyright 2002+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +17,6 -17,7 @@
 package org.springframework.amqp.rabbit.support;
 
 import org.springframework.amqp.core.MessageProperties;
-import org.springframework.lang.Nullable;
 
 import com.rabbitmq.client.AMQP.BasicProperties;
 import com.rabbitmq.client.Envelope;
@@ +30,7 -31,7 @@
  */
 public interface MessagePropertiesConverter {
 
+	MessageProperties toMessageProperties(BasicProperties source, Envelope envelope, String charset);
-	MessageProperties toMessageProperties(BasicProperties source, @Nullable Envelope envelope, String charset);
 
 	BasicProperties fromMessageProperties(MessageProperties source, String charset);
 
diff ++git a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/config/ListenerContainerPlaceholderParserTests.java b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/config/ListenerContainerPlaceholderParserTests.java
index c59852a472..faf6ed79a2 100644
+++ a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/config/ListenerContainerPlaceholderParserTests.java
--- b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/config/ListenerContainerPlaceholderParserTests.java
@@ +44,6 -44,7 @@
  * @author Dave Syer
  * @author Gary Russell
  * @author Will Droste
- * @author Artem Bilan
  */
 public final class ListenerContainerPlaceholderParserTests {
 
@@ +60,7 -61,7 @@ public void closeBeanFactory() throws Exception {
 		if (this.context != null) {
 			CachingConnectionFactory cf = this.context.getBean(CachingConnectionFactory.class);
 			this.context.close();
+			ExecutorService es = TestUtils.getPropertyValue(cf, "deferredCloseExecutor", ThreadPoolExecutor.class);
-			ExecutorService es = TestUtils.getPropertyValue(cf, "channelsExecutor", ThreadPoolExecutor.class);
 			if (es != null) {
 				// if it gets started make sure its terminated..
 				assertTrue(es.isTerminated());
diff ++git a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/config/MessageListenerTestContainer.java b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/config/MessageListenerTestContainer.java
index f1cbf6f329..5dea48493b 100644
+++ a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/config/MessageListenerTestContainer.java
--- b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/config/MessageListenerTestContainer.java
@@ +25,6 -25,7 @@
 
 /**
  * @author Stephane Nicoll
- * @author Gary Russell
  */
 public class MessageListenerTestContainer
 		implements MessageListenerContainer, InitializingBean, DisposableBean {
@@ +100,6 -101,7 @@ public void setupMessageListener(MessageListener messageListener) {
 	}
 
 	@Override
-	@Deprecated
 	public MessageConverter getMessageConverter() {
 		return null;
 	}
diff ++git a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/config/RabbitListenerContainerFactoryTests.java b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/config/RabbitListenerContainerFactoryTests.java
index c326ce864a..8a0a6ebc00 100644
+++ a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/config/RabbitListenerContainerFactoryTests.java
--- b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/config/RabbitListenerContainerFactoryTests.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2002+2017 the original author or authors.
- * Copyright 2002+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +31,7 -31,6 @@
 import org.junit.rules.ExpectedException;
 
 import org.springframework.amqp.core.AcknowledgeMode;
+import org.springframework.amqp.core.MessageListener;
 import org.springframework.amqp.core.MessagePostProcessor;
 import org.springframework.amqp.rabbit.connection.ConnectionFactory;
 import org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer;
@@ +51,6 -50,7 @@
  * @author Stephane Nicoll
  * @author Artem Bilan
  * @author Joris Kuipers
- * @author Gary Russell
  *
  */
 public class RabbitListenerContainerFactoryTests {
@@ +68,7 -68,7 @@ public class RabbitListenerContainerFactoryTests {
 
 	private final MessageConverter messageConverter = new SimpleMessageConverter();
 
+	private final MessageListener messageListener = new MessageListenerAdapter();
-	private final MessageListenerAdapter messageListener = new MessageListenerAdapter();
 
 	@Test
 	public void createSimpleContainer() {
@@ +109,6 -109,7 @@ public void createContainerFullConfig() {
 		this.factory.setRecoveryBackOff(recoveryBackOff);
 		this.factory.setMissingQueuesFatal(true);
 		this.factory.setAfterReceivePostProcessors(afterReceivePostProcessor);
-		this.factory.setContainerConfigurer(c +> c.setShutdownTimeout(10_000));
 
 		assertArrayEquals(new Advice[] {advice}, this.factory.getAdviceChain());
 
@@ +131,6 -132,7 @@ public void createContainerFullConfig() {
 		assertEquals(6, fieldAccessor.getPropertyValue("consecutiveIdleTrigger"));
 		assertEquals(3, fieldAccessor.getPropertyValue("prefetchCount"));
 		assertEquals(1500L, fieldAccessor.getPropertyValue("receiveTimeout"));
-		assertEquals(10_000L, fieldAccessor.getPropertyValue("shutdownTimeout"));
 		assertEquals(false, fieldAccessor.getPropertyValue("defaultRequeueRejected"));
 		Advice[] actualAdviceChain = (Advice[]) fieldAccessor.getPropertyValue("adviceChain");
 		assertEquals("Wrong number of advice", 1, actualAdviceChain.length);
@@ +200,7 -202,7 @@ public void createDirectContainerFullConfig() {
 	private void setBasicConfig(AbstractRabbitListenerContainerFactory<?> factory) {
 		factory.setConnectionFactory(this.connectionFactory);
 		factory.setErrorHandler(this.errorHandler);
+		factory.setMessageConverter(this.messageConverter);
-		this.messageListener.setMessageConverter(this.messageConverter);
 		factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);
 		factory.setChannelTransacted(true);
 		factory.setAutoStartup(false);
@@ +211,7 -213,7 @@ private void assertBasicConfig(AbstractMessageListenerContainer container) {
 		DirectFieldAccessor fieldAccessor = new DirectFieldAccessor(container);
 		assertSame(connectionFactory, container.getConnectionFactory());
 		assertSame(errorHandler, fieldAccessor.getPropertyValue("errorHandler"));
+		assertSame(messageConverter, container.getMessageConverter());
-		assertSame(messageConverter, fieldAccessor.getPropertyValue("messageListener.messageConverter"));
 		assertEquals(AcknowledgeMode.MANUAL, container.getAcknowledgeMode());
 		assertEquals(true, container.isChannelTransacted());
 		assertEquals(false, container.isAutoStartup());
diff ++git a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryTests.java b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryTests.java
index 9a69b3a611..a53858a252 100644
+++ a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryTests.java
--- b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryTests.java
@@ +1512,6 -1512,7 @@ public void testConsumerChannelPhysicallyClosedWhenNotIsOpenGuts(boolean confirm
 				return null;
 			}).when(mockChannel).close();
 			channel.close();
-			RabbitUtils.setPhysicalCloseRequired(channel, false);
 			con.close(); // should be ignored
 
 			assertTrue(physicalCloseLatch.await(10, TimeUnit.SECONDS));
@@ +1650,6 -1651,7 @@ public void testReturnsNormalCloseDeferredClose() throws Exception {
 		Channel channel = conn.createChannel(false);
 		RabbitUtils.setPhysicalCloseRequired(channel, true);
 		channel.close();
-		RabbitUtils.setPhysicalCloseRequired(channel, false);
 		Thread.sleep(6000);
 	}
 
diff ++git a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplateIntegrationTests.java b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplateIntegrationTests.java
index 51ff083555..50b05d407e 100644
+++ a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplateIntegrationTests.java
--- b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplateIntegrationTests.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2002+2017 the original author or authors.
- * Copyright 2002+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +110,7 -110,6 @@
 import org.springframework.amqp.utils.test.TestUtils;
 import org.springframework.beans.DirectFieldAccessor;
 import org.springframework.beans.factory.BeanFactory;
+import org.springframework.beans.factory.DisposableBean;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
 import org.springframework.expression.common.LiteralExpression;
@@ +201,9 -200,9 @@ public void create() {
 	}
 
 	@After
+	public void cleanup() throws Exception {
-	public void cleanup() {
 		this.template.stop();
+		((DisposableBean) template.getConnectionFactory()).destroy();
-		this.connectionFactory.destroy();
 		this.brokerIsRunning.removeTestQueues();
 	}
 
@@ +289,7 -288,7 @@ public void testReceiveNonBlocking() throws Exception {
 	}
 
 	@Test(expected = ConsumerCancelledException.class)
+	public void testReceiveConsumerCanceled() throws Exception {
-	public void testReceiveConsumerCanceled() {
 		ConnectionFactory connectionFactory = new SingleConnectionFactory("localhost", BrokerTestUtils.getPort());
 
 		class MockConsumer implements Consumer {
@@ +339,10 -338,12 @@ public void handleDelivery(String consumerTag, Envelope envelope, BasicPropertie
 
 		}
 
-		ExecutorService executorService = Executors.newSingleThreadExecutor();
-
 		class MockChannel extends PublisherCallbackChannelImpl {
 
 			MockChannel(Channel delegate) {
+				super(delegate);
-				super(delegate, executorService);
 			}
 
 			@Override
@@ +361,7 -362,12 @@ public String basicConsume(String queue, Consumer callback) throws IOException {
 
 		this.template = new RabbitTemplate(connectionFactory);
 		this.template.setReceiveTimeout(10000);
+		this.template.receive(ROUTE);
-		try {
-			this.template.receive(ROUTE);
-		}
-		finally {
-			executorService.shutdown();
-		}
 	}
 
 	@Test
diff ++git a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplatePublisherCallbacksIntegrationTests.java b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplatePublisherCallbacksIntegrationTests.java
index dde4b0316e..c5787f5fe4 100644
+++ a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplatePublisherCallbacksIntegrationTests.java
--- b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplatePublisherCallbacksIntegrationTests.java
@@ +103,6 -103,8 @@ public class RabbitTemplatePublisherCallbacksIntegrationTests {
 	@Rule
 	public BrokerRunning brokerIsRunning = BrokerRunning.isRunningWithEmptyQueues(ROUTE);
 
-	private final ExecutorService executorService = Executors.newSingleThreadExecutor();
-
 	private CachingConnectionFactory connectionFactory;
 
 	private CachingConnectionFactory connectionFactoryWithConfirmsEnabled;
@@ +153,6 -155,8 @@ public void cleanUp() {
 		this.connectionFactoryWithConfirmsEnabled.destroy();
 		this.connectionFactoryWithReturnsEnabled.destroy();
 		this.brokerIsRunning.removeTestQueues();
-
-		this.executorService.shutdown();
 	}
 
 	@Test
@@ +327,7 -331,10 @@ public void testPublisherConfirmNotReceived() throws Exception {
 
 		when(mockConnectionFactory.newConnection(any(ExecutorService.class), anyString())).thenReturn(mockConnection);
 		when(mockConnection.isOpen()).thenReturn(true);
+		doReturn(new PublisherCallbackChannelImpl(mockChannel)).when(mockConnection).createChannel();
-
-		doReturn(new PublisherCallbackChannelImpl(mockChannel, this.executorService))
-				.when(mockConnection)
-				.createChannel();
 
 		CachingConnectionFactory ccf = new CachingConnectionFactory(mockConnectionFactory);
 		ccf.setExecutor(mock(ExecutorService.class));
@@ +359,8 -366,9 @@ public void testPublisherConfirmNotReceivedMultiThreads() throws Exception {
 
 		when(mockConnectionFactory.newConnection(any(ExecutorService.class), anyString())).thenReturn(mockConnection);
 		when(mockConnection.isOpen()).thenReturn(true);
+		PublisherCallbackChannelImpl channel1 = new PublisherCallbackChannelImpl(mockChannel1);
+		PublisherCallbackChannelImpl channel2 = new PublisherCallbackChannelImpl(mockChannel2);
-
-		PublisherCallbackChannelImpl channel1 = new PublisherCallbackChannelImpl(mockChannel1, this.executorService);
-		PublisherCallbackChannelImpl channel2 = new PublisherCallbackChannelImpl(mockChannel2, this.executorService);
 		when(mockConnection.createChannel()).thenReturn(channel1).thenReturn(channel2);
 
 		CachingConnectionFactory ccf = new CachingConnectionFactory(mockConnectionFactory);
@@ +429,7 -437,10 @@ public void testPublisherConfirmNotReceivedAged() throws Exception {
 
 		when(mockConnectionFactory.newConnection(any(ExecutorService.class), anyString())).thenReturn(mockConnection);
 		when(mockConnection.isOpen()).thenReturn(true);
+		doReturn(new PublisherCallbackChannelImpl(mockChannel)).when(mockConnection).createChannel();
-
-		doReturn(new PublisherCallbackChannelImpl(mockChannel, this.executorService))
-				.when(mockConnection)
-				.createChannel();
 
 		final AtomicLong count = new AtomicLong();
 		doAnswer(invocation +> count.incrementAndGet()).when(mockChannel).getNextPublishSeqNo();
@@ +469,7 -480,8 @@ public void testPublisherConfirmMultiple() throws Exception {
 
 		when(mockConnectionFactory.newConnection(any(ExecutorService.class), anyString())).thenReturn(mockConnection);
 		when(mockConnection.isOpen()).thenReturn(true);
+		PublisherCallbackChannelImpl callbackChannel = new PublisherCallbackChannelImpl(mockChannel);
-		PublisherCallbackChannelImpl callbackChannel =
-				new PublisherCallbackChannelImpl(mockChannel, this.executorService);
 		when(mockConnection.createChannel()).thenReturn(callbackChannel);
 
 		final AtomicLong count = new AtomicLong();
@@ +508,7 -520,8 @@ public void testPublisherConfirmMultipleWithTwoListeners() throws Exception {
 
 		when(mockConnectionFactory.newConnection(any(ExecutorService.class), anyString())).thenReturn(mockConnection);
 		when(mockConnection.isOpen()).thenReturn(true);
+		PublisherCallbackChannelImpl callbackChannel = new PublisherCallbackChannelImpl(mockChannel);
-		PublisherCallbackChannelImpl callbackChannel =
-				new PublisherCallbackChannelImpl(mockChannel, this.executorService);
 		when(mockConnection.createChannel()).thenReturn(callbackChannel);
 
 		final AtomicLong count = new AtomicLong();
@@ +569,7 -582,8 @@ public void testConcurrentConfirms() throws Exception {
 
 		when(mockConnectionFactory.newConnection(any(ExecutorService.class), anyString())).thenReturn(mockConnection);
 		when(mockConnection.isOpen()).thenReturn(true);
+		final PublisherCallbackChannelImpl channel = new PublisherCallbackChannelImpl(mockChannel);
-		final PublisherCallbackChannelImpl channel =
-				new PublisherCallbackChannelImpl(mockChannel, this.executorService);
 		when(mockConnection.createChannel()).thenReturn(channel);
 
 		CachingConnectionFactory ccf = new CachingConnectionFactory(mockConnectionFactory);
@@ +798,7 -812,7 @@ public void testPublisherCallbackChannelImplCloseWithPending() throws Exception
 
 		Channel channelMock = mock(Channel.class);
 
+		PublisherCallbackChannelImpl channel = new PublisherCallbackChannelImpl(channelMock);
-		PublisherCallbackChannelImpl channel = new PublisherCallbackChannelImpl(channelMock, this.executorService);
 
 		channel.addListener(listener);
 
diff ++git a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/listener/ContainerShutDownTests.java b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/listener/ContainerShutDownTests.java
index 3b7c066845..1c959e2662 100644
+++ a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/listener/ContainerShutDownTests.java
--- b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/listener/ContainerShutDownTests.java
@@ +30,10 -30,13 @@
 
 import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;
 import org.springframework.amqp.rabbit.connection.Connection;
-import org.springframework.amqp.rabbit.connection.RabbitUtils;
 import org.springframework.amqp.rabbit.core.RabbitTemplate;
 import org.springframework.amqp.rabbit.junit.BrokerRunning;
 import org.springframework.amqp.utils.test.TestUtils;
 
-import com.rabbitmq.client.AMQP.BasicProperties;
-
 /**
  * @author Gary Russell
  * @since 2.0
@@ +90,7 -93,11 @@ public void testUninterruptibleListener(AbstractMessageListenerContainer contain
 		try {
 			assertTrue(startLatch.await(30, TimeUnit.SECONDS));
 			RabbitTemplate template = new RabbitTemplate(cf);
+			template.convertAndSend("test.shutdown", "foo");
-			template.execute(c +> {
-				c.basicPublish("", "test.shutdown", new BasicProperties(), "foo".getBytes());
-				RabbitUtils.setPhysicalCloseRequired(c, false);
-				return null;
-			});
 			assertTrue(latch.await(30, TimeUnit.SECONDS));
 			assertThat(channels.size(), equalTo(2));
 		}
diff ++git a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/listener/DirectMessageListenerContainerMockTests.java b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/listener/DirectMessageListenerContainerMockTests.java
index 85693635d2..ecb41b89cc 100644
+++ a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/listener/DirectMessageListenerContainerMockTests.java
--- b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/listener/DirectMessageListenerContainerMockTests.java
@@ +1,5 -1,5 @@
 /*
+ * Copyright 2017 the original author or authors.
- * Copyright 2017+2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ +25,9 -25,11 @@
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.ArgumentMatchers.anyMap;
 import static org.mockito.ArgumentMatchers.anyString;
-import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.BDDMockito.willAnswer;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 import java.util.concurrent.CountDownLatch;
@@ +53,6 -55,8 @@
 
 /**
  * @author Gary Russell
- * @author Artem Bilan
- *
  * @since 2.0
  *
  */
@@ +122,8 -126,8 @@ public void testDeferredAcks() throws Exception {
 			consumer.get().handleConsumeOk("consumerTag");
 			latch1.countDown();
 			return "consumerTag";
+		})
+		.given(channel).basicConsume(anyString(), anyBoolean(), anyString(), anyBoolean(), anyBoolean(),
-		}).given(channel)
-				.basicConsume(anyString(), anyBoolean(), anyString(), anyBoolean(), anyBoolean(),
 						anyMap(), any(Consumer.class));
 
 		final AtomicInteger qos = new AtomicInteger();
@@ +198,8 -202,71 @@ else if (i.getArgument(0).equals(17L)) {
 		verify(channel).basicAck(20L, true);
 	}
 
-	@Test
-	public void testRemoveQueuesWhileNotConnected() throws Exception {
-		ConnectionFactory connectionFactory = mock(ConnectionFactory.class);
-		Connection connection = mock(Connection.class);
-		ChannelProxy channel = mock(ChannelProxy.class);
-		Channel rabbitChannel = mock(AutorecoveringChannel.class);
-		given(channel.getTargetChannel()).willReturn(rabbitChannel);
-
-		given(connectionFactory.createConnection()).willReturn(connection);
-		given(connection.createChannel(anyBoolean())).willReturn(channel);
-		final AtomicBoolean isOpen = new AtomicBoolean(true);
-		willAnswer(i +> isOpen.get()).given(channel).isOpen();
-		given(channel.queueDeclarePassive(Mockito.anyString()))
-				.willAnswer(invocation +> mock(AMQP.Queue.DeclareOk.class));
-
-		final CountDownLatch latch1 = new CountDownLatch(2);
-		final CountDownLatch latch3 = new CountDownLatch(3);
-
-		willAnswer(i +> {
-			latch3.countDown();
-			return "consumerTag";
-		}).given(channel)
-				.basicConsume(anyString(), anyBoolean(), anyString(), anyBoolean(), anyBoolean(),
-						anyMap(), any(Consumer.class));
-
-		final AtomicInteger qos = new AtomicInteger();
-		willAnswer(i +> {
-			qos.set(i.getArgument(0));
-			latch1.countDown();
-			return null;
-		}).given(channel).basicQos(anyInt());
-		final CountDownLatch latch2 = new CountDownLatch(2);
-		willAnswer(i +> {
-			latch2.countDown();
-			return null;
-		}).given(channel).basicCancel("consumerTag");
-
-		DirectMessageListenerContainer container = new DirectMessageListenerContainer(connectionFactory);
-		container.setQueueNames("test1", "test2");
-		container.setPrefetchCount(2);
-		container.setMonitorInterval(100);
-		container.setFailedDeclarationRetryInterval(100);
-		container.setRecoveryInterval(100);
-		container.setShutdownTimeout(1);
-		container.afterPropertiesSet();
-		container.start();
-
-		assertTrue(latch1.await(10, TimeUnit.SECONDS));
-		assertThat(qos.get(), equalTo(2));
-		isOpen.set(false);
-		container.removeQueueNames("test1");
-		assertTrue(latch2.await(10, TimeUnit.SECONDS));
-		isOpen.set(true);
-		assertTrue(latch3.await(10, TimeUnit.SECONDS));
-
-		verify(channel, times(1)).basicConsume(eq("test1"), anyBoolean(), anyString(), anyBoolean(), anyBoolean(),
-				anyMap(), any(Consumer.class));
-		verify(channel, times(2)).basicConsume(eq("test2"), anyBoolean(), anyString(), anyBoolean(), anyBoolean(),
-				anyMap(), any(Consumer.class));
-
-		container.stop();
-	}
-
 	private Envelope envelope(long tag) {
+		return new Envelope(tag,  false, "", "");
-		return new Envelope(tag, false, "", "");
 	}
 
 }
diff ++git a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainerIntegration2Tests.java b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainerIntegration2Tests.java
index 31671eec41..211a29bd50 100644
+++ a/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainerIntegration2Tests.java
--- b/spring+rabbit/src/test/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainerIntegration2Tests.java
@@ +43,6 -43,8 @@
 import java.util.NoSuchElementException;
 import java.util.Set;
 import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ +101,6 -103,8 @@ public class SimpleMessageListenerContainerIntegration2Tests {
 
 	private static Log logger = LogFactory.getLog(SimpleMessageListenerContainerIntegration2Tests.class);
 
-	private final ExecutorService executorService = Executors.newSingleThreadExecutor();
-
 	private final Queue queue = new Queue("test.queue");
 
 	private final Queue queue1 = new Queue("test.queue.1");
@@ +138,12 -142,15 @@ public void clear() throws Exception {
 		}
 		((DisposableBean) template.getConnectionFactory()).destroy();
 		this.brokerIsRunning.removeTestQueues();
-
-		this.executorService.shutdown();
 	}
 
 	@Test
 	public void testChangeQueues() throws Exception {
 		CountDownLatch latch = new CountDownLatch(30);
+		container = createContainer(new MessageListenerAdapter(new PojoListener(latch)), queue.getName(), queue1.getName());
-		container =
-				createContainer(new MessageListenerAdapter(new PojoListener(latch)), queue.getName(), queue1.getName());
 		final CountDownLatch consumerLatch = new CountDownLatch(1);
 		this.container.setApplicationEventPublisher(e +> {
 			if (e instanceof AsyncConsumerStoppedEvent) {
@@ +168,7 -175,8 @@ public void testChangeQueues() throws Exception {
 	@Test
 	public void testChangeQueues2() throws Exception { // addQueues instead of addQueueNames
 		CountDownLatch latch = new CountDownLatch(30);
+		container = createContainer(new MessageListenerAdapter(new PojoListener(latch)), queue.getName(), queue1.getName());
-		container =
-				createContainer(new MessageListenerAdapter(new PojoListener(latch)), queue.getName(), queue1.getName());
 		final CountDownLatch consumerLatch = new CountDownLatch(1);
 		this.container.setApplicationEventPublisher(e +> {
 			if (e instanceof AsyncConsumerStoppedEvent) {
@@ +354,7 -362,8 @@ public void testExclusive() throws Exception {
 		doReturn(true).when(logger).isInfoEnabled();
 		new DirectFieldAccessor(this.template.getConnectionFactory()).setPropertyValue("logger", logger);
 		CountDownLatch latch1 = new CountDownLatch(1000);
+		SimpleMessageListenerContainer container1 = new SimpleMessageListenerContainer(template.getConnectionFactory());
-		SimpleMessageListenerContainer container1 =
-				new SimpleMessageListenerContainer(template.getConnectionFactory());
 		container1.setMessageListener(new MessageListenerAdapter(new PojoListener(latch1)));
 		container1.setQueueNames(queue.getName());
 		GenericApplicationContext context = new GenericApplicationContext();
@@ +372,7 -381,8 @@ public void testExclusive() throws Exception {
 		container1.start();
 		assertTrue(consumeLatch1.await(10, TimeUnit.SECONDS));
 		CountDownLatch latch2 = new CountDownLatch(1000);
+		SimpleMessageListenerContainer container2 = new SimpleMessageListenerContainer(template.getConnectionFactory());
-		SimpleMessageListenerContainer container2 =
-				new SimpleMessageListenerContainer(template.getConnectionFactory());
 		container2.setMessageListener(new MessageListenerAdapter(new PojoListener(latch2)));
 		container2.setQueueNames(queue.getName());
 		container2.setApplicationContext(context);
@@ +432,7 -442,7 @@ public void testRestartConsumerOnBasicQosIoException() throws Exception {
 		class MockChannel extends PublisherCallbackChannelImpl {
 
 			MockChannel(Channel delegate) {
+				super(delegate);
-				super(delegate, SimpleMessageListenerContainerIntegration2Tests.this.executorService);
 			}
 
 			@Override
@@ +481,7 -491,7 @@ public void testRestartConsumerOnConnectionLossDuringQueueDeclare() throws Excep
 		class MockChannel extends PublisherCallbackChannelImpl {
 
 			MockChannel(Channel delegate) {
+				super(delegate);
-				super(delegate, SimpleMessageListenerContainerIntegration2Tests.this.executorService);
 			}
 
 			@Override
@@ +497,7 -507,7 @@ public DeclareOk queueDeclarePassive(String queue) throws IOException {
 
 		Connection connection = spy(connectionFactory.createConnection());
 		when(connection.createChannel(anyBoolean()))
+			.then(invocation +> new MockChannel((Channel) invocation.callRealMethod()));
-				.then(invocation +> new MockChannel((Channel) invocation.callRealMethod()));
 
 		DirectFieldAccessor dfa = new DirectFieldAccessor(connectionFactory);
 		dfa.setPropertyValue("connection", connection);
@@ +554,9 -564,8 @@ public void testRestartConsumerMissingQueue() throws Exception {
 
 	@Test
 	public void stopStartInListener() throws Exception {
+		final AtomicReference<SimpleMessageListenerContainer> container =
+				new AtomicReference<SimpleMessageListenerContainer>();
+		final CountDownLatch latch = new CountDownLatch(2);
-		AtomicReference<SimpleMessageListenerContainer> container = new AtomicReference<>();
-		CountDownLatch latch = new CountDownLatch(2);
 		class StopStartListener implements MessageListener {
 
 			boolean doneStopStart;
@@ +583,7 -592,8 @@ public void onMessage(Message message) {
 	@Test
 	public void testTransientBadMessageDoesntStopContainer() throws Exception {
 		CountDownLatch latch = new CountDownLatch(3);
+		this.container = createContainer(new MessageListenerAdapter(new PojoListener(latch, false)), this.queue.getName());
-		this.container =
-				createContainer(new MessageListenerAdapter(new PojoListener(latch, false)), this.queue.getName());
 		this.template.convertAndSend(this.queue.getName(), "foo");
 		this.template.convertAndSend(this.queue.getName(), new Foo());
 		this.template.convertAndSend(this.queue.getName(), new Bar());
@@ +596,10 -606,11 @@ public void testTransientBadMessageDoesntStopContainer() throws Exception {
 	@Test
 	public void testTransientBadMessageDoesntStopContainerLambda() throws Exception {
 		final CountDownLatch latch = new CountDownLatch(2);
+		this.container = createContainer(new MessageListenerAdapter((ReplyingMessageListener<String, Void>) m +> {
+			latch.countDown();
+			return null;
+		}), this.queue.getName());
-		this.container = createContainer(new MessageListenerAdapter(
-				(ReplyingMessageListener<String, Void>) m +> {
-					latch.countDown();
-					return null;
-				}), this.queue.getName());
 		this.template.convertAndSend(this.queue.getName(), "foo");
 		this.template.convertAndSend(this.queue.getName(), new Foo());
 		this.template.convertAndSend(this.queue.getName(), "foo");
@@ +610,7 -621,8 @@ public void testTransientBadMessageDoesntStopContainerLambda() throws Exception
 
 	@Test
 	public void testTooSmallExecutor() {
+		this.container = createContainer((MessageListener) (m) +> { }, false, this.queue.getName());
-		this.container = createContainer((m) +> {
-		}, false, this.queue.getName());
 		ThreadPoolTaskExecutor exec = new ThreadPoolTaskExecutor();
 		exec.initialize();
 		this.container.setTaskExecutor(exec);
@@ +628,7 -640,7 @@ public void testTooSmallExecutor() {
 
 	@Test
 	public void testErrorStopsContainer() throws Exception {
+		this.container = createContainer((MessageListener) (m) +> {
-		this.container = createContainer((m) +> {
 			throw new Error("testError");
 		}, false, this.queue.getName());
 		final CountDownLatch latch = new CountDownLatch(1);
@@ +692,7 -704,8 @@ private SimpleMessageListenerContainer createContainer(MessageListener listener,
 		return createContainer(listener, true, queueNames);
 	}
 
+	private SimpleMessageListenerContainer createContainer(MessageListener listener, boolean start, String... queueNames) {
-	private SimpleMessageListenerContainer createContainer(MessageListener listener, boolean start,
-			String... queueNames) {
 		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer(template.getConnectionFactory());
 		if (listener != null) {
 			container.setMessageListener(listener);
diff ++git a/spring+rabbit/src/test/resources/log4j2+amqp+appender.xml b/spring+rabbit/src/test/resources/log4j2+amqp+appender.xml
index cef1ee8c01..c27d25c6d1 100644
+++ a/spring+rabbit/src/test/resources/log4j2+amqp+appender.xml
--- b/spring+rabbit/src/test/resources/log4j2+amqp+appender.xml
@@ +11,6 -11,7 @@
 				  applicationId="testAppId" routingKeyPattern="%X{applicationId}.%c.%p"
 				  contentType="text/plain" contentEncoding="UTF+8" generateId="true" deliveryMode="NON_PERSISTENT"
 				  charset="UTF+8"
-				  connectionName="log4j2Appender"
 				  clientConnectionProperties="foo:bar,baz:qux"
 				  async="false"
 				  senderPoolSize="3" maxSenderRetries="5"
diff ++git a/spring+rabbit/src/test/resources/logback+test.xml b/spring+rabbit/src/test/resources/logback+test.xml
index 32a4064be8..1e69eae67f 100644
+++ a/spring+rabbit/src/test/resources/logback+test.xml
--- b/spring+rabbit/src/test/resources/logback+test.xml
@@ +21,6 -21,7 @@
 		<durable>false</durable>
 		<deliveryMode>NON_PERSISTENT</deliveryMode>
 		<declareExchange>true</declareExchange>
-		<connectionName>logbackAppender</connectionName>
 		<clientConnectionProperties>foo:bar,baz:qux</clientConnectionProperties>
 		<foo>bar</foo>
 	</appender>
diff ++git a/src/reference/asciidoc/amqp.adoc b/src/reference/asciidoc/amqp.adoc
index 1dd97d571c..bca2c0a3ef 100644
+++ a/src/reference/asciidoc/amqp.adoc
--- b/src/reference/asciidoc/amqp.adoc
@@ +390,7 -390,7 @@ Boot will auto+detect the bean and wire it into the factory.
 ===== Blocked Connections and Resource Constraints
 
 The connection might be blocked for interaction from the Broker according to the https://www.rabbitmq.com/memory.html[Memory Alarm].
+Starting with _version 2.0_, the `org.springframework.amqp.rabbit.connection.Connection` can be supplied with `com.rabbitmq.client.BlockedListener` s to to be notified for connection blocked and unblocked events.
-Starting with _version 2.0_, the `org.springframework.amqp.rabbit.connection.Connection` can be supplied with `com.rabbitmq.client.BlockedListener` s to be notified for connection blocked and unblocked events.
 In addition the `AbstractConnectionFactory` emits a `ConnectionBlockedEvent` and `ConnectionUnblockedEvent`, respectively, via its internal `BlockedListener` implementation.
 These allow you to provide application logic to react appropriately to problems on the broker and take some corrective actions for example.
 
@@ +636,7 -636,7 @@ public interface ConnectionListener {
 }
 ++++
 
+Starting with _version 2.0_, the `org.springframework.amqp.rabbit.connection.Connection` object can be supplied with `com.rabbitmq.client.BlockedListener` s to to be notified for connection blocked and unblocked events.
-Starting with _version 2.0_, the `org.springframework.amqp.rabbit.connection.Connection` object can be supplied with `com.rabbitmq.client.BlockedListener` s to be notified for connection blocked and unblocked events.
 
 .ChannelListener
 [source, java]
@@ +941,7 -941,7 @@ The `RabbitTemplate` implementation of `AmqpTemplate` supports Publisher Confirm
 For returned messages, the template's `mandatory` property must be set to `true`, or the `mandatory+expression`
 must evaluate to `true` for a particular message.
 This feature requires a `CachingConnectionFactory` that has its `publisherReturns` property set to true (see <<cf+pub+conf+ret>>).
+Returns are sent to to the client by it registering a `RabbitTemplate.ReturnCallback` by calling `setReturnCallback(ReturnCallback callback)`.
-Returns are sent to the client by it registering a `RabbitTemplate.ReturnCallback` by calling `setReturnCallback(ReturnCallback callback)`.
 The callback must implement this method:
 
 [source,java]
@@ +954,7 -954,7 @@ Only one `ReturnCallback` is supported by each `RabbitTemplate`.
 See also <<reply+timeout>>.
 
 For Publisher Confirms (aka Publisher Acknowledgements), the template requires a `CachingConnectionFactory` that has its `publisherConfirms` property set to true.
+Confirms are sent to to the client by it registering a `RabbitTemplate.ConfirmCallback` by calling `setConfirmCallback(ConfirmCallback callback)`.
-Confirms are sent to the client by it registering a `RabbitTemplate.ConfirmCallback` by calling `setConfirmCallback(ConfirmCallback callback)`.
 The callback must implement this method:
 
 [source,java]