diff --git a/README.md b/README.md
index b1339825be..38593c4f5b 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 # Hibernate Validator
 
-*Version: 6.0.4.Final - 25-10-2017*
+*Version: 6.0.5.Final - 15-11-2017*
 
 
 ## What is it?
@@ -35,7 +35,7 @@ Logging will delegate any log requests to that provider.
         <dependency>
             <groupId>org.hibernate.validator</groupId>
             <artifactId>hibernate-validator</artifactId>
-            <version>6.0.4.Final</version>
+            <version>6.0.5.Final</version>
         </dependency>
 
   You also need an API and implementation of the Unified Expression Language. These dependencies must be explicitly added in an SE environment.
@@ -54,7 +54,7 @@ extension by adding the following dependency:
         <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator-cdi</artifactId>
-           <version>6.0.4.Final</version>
+           <version>6.0.5.Final</version>
         </dependency>
 
 * _hibernate-validator-annotation-processor-&lt;version&gt;.jar_ is an optional jar which can be integrated with your build
diff --git a/annotation-processor/pom.xml b/annotation-processor/pom.xml
index f105860429..0babf59451 100644
--- a/annotation-processor/pom.xml
+++ b/annotation-processor/pom.xml
@@ -11,7 +11,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-parent</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/annotation-processor/src/main/java/org/hibernate/validator/ap/internal/util/ConstraintHelper.java b/annotation-processor/src/main/java/org/hibernate/validator/ap/internal/util/ConstraintHelper.java
index c1882ab51a..031c771c69 100644
--- a/annotation-processor/src/main/java/org/hibernate/validator/ap/internal/util/ConstraintHelper.java
+++ b/annotation-processor/src/main/java/org/hibernate/validator/ap/internal/util/ConstraintHelper.java
@@ -303,6 +303,7 @@ public ConstraintHelper(Types typeUtils, AnnotationApiHelper annotationApiHelper
 		registerAllowedTypesForBuiltInConstraint( HibernateValidatorTypes.NOT_EMPTY, TYPES_SUPPORTED_BY_SIZE_AND_NOT_EMPTY_ANNOTATIONS );
 		registerAllowedTypesForBuiltInConstraint( HibernateValidatorTypes.SAFE_HTML, CharSequence.class );
 		registerAllowedTypesForBuiltInConstraint( HibernateValidatorTypes.SCRIPT_ASSERT, Object.class );
+		registerAllowedTypesForBuiltInConstraint( HibernateValidatorTypes.UNIQUE_ELEMENTS, Collection.class );
 		registerAllowedTypesForBuiltInConstraint( HibernateValidatorTypes.URL, CharSequence.class );
 
 		registerSupportedTypesUnwrappedByDefault( SupportedForUnwrapTypes.OPTIONAL_INT, Integer.class.getName() );
@@ -551,7 +552,7 @@ public ConstraintCheckResult checkCrossParameterTypes(DeclaredType constraintAnn
 
 		if ( crossParameterValidator != null ) {
 
-			// Cross-parameter contraints must accept Object or Object[] as validated type
+			// Cross-parameter constraints must accept Object or Object[] as validated type
 			final TypeMirror objectMirror = annotationApiHelper.getMirrorForType( Object.class );
 
 			TypeMirror type = determineSupportedType( crossParameterValidator );
diff --git a/annotation-processor/src/main/java/org/hibernate/validator/ap/internal/util/TypeNames.java b/annotation-processor/src/main/java/org/hibernate/validator/ap/internal/util/TypeNames.java
index d26e94bbf9..f6881af552 100644
--- a/annotation-processor/src/main/java/org/hibernate/validator/ap/internal/util/TypeNames.java
+++ b/annotation-processor/src/main/java/org/hibernate/validator/ap/internal/util/TypeNames.java
@@ -80,6 +80,7 @@ public static class HibernateValidatorTypes {
 		public static final String NOT_EMPTY = ORG_HIBERNATE_VALIDATOR_CONSTRAINTS + ".NotEmpty";
 		public static final String SAFE_HTML = ORG_HIBERNATE_VALIDATOR_CONSTRAINTS + ".SafeHtml";
 		public static final String SCRIPT_ASSERT = ORG_HIBERNATE_VALIDATOR_CONSTRAINTS + ".ScriptAssert";
+		public static final String UNIQUE_ELEMENTS = ORG_HIBERNATE_VALIDATOR_CONSTRAINTS + ".UniqueElements";
 		public static final String URL = ORG_HIBERNATE_VALIDATOR_CONSTRAINTS + ".URL";
 		public static final String DURATION_MIN = ORG_HIBERNATE_VALIDATOR_CONSTRAINTS + ".time.DurationMin";
 		public static final String DURATION_MAX = ORG_HIBERNATE_VALIDATOR_CONSTRAINTS + ".time.DurationMax";
diff --git a/annotation-processor/src/test/java/org/hibernate/validator/ap/ConstraintValidationProcessorTest.java b/annotation-processor/src/test/java/org/hibernate/validator/ap/ConstraintValidationProcessorTest.java
index 6eeda13e0b..b66fc7310b 100644
--- a/annotation-processor/src/test/java/org/hibernate/validator/ap/ConstraintValidationProcessorTest.java
+++ b/annotation-processor/src/test/java/org/hibernate/validator/ap/ConstraintValidationProcessorTest.java
@@ -24,6 +24,7 @@
 import org.hibernate.validator.ap.testmodel.ModelWithJava8DateTime;
 import org.hibernate.validator.ap.testmodel.ModelWithJavaMoneyTypes;
 import org.hibernate.validator.ap.testmodel.ModelWithJodaTypes;
+import org.hibernate.validator.ap.testmodel.ModelWithUniqueElementsConstraints;
 import org.hibernate.validator.ap.testmodel.ModelWithoutConstraints;
 import org.hibernate.validator.ap.testmodel.MultipleConstraintsOfSameType;
 import org.hibernate.validator.ap.testmodel.ValidationUsingAtValidAnnotation;
@@ -685,4 +686,21 @@ public void unwrappingConstraints() {
 				new DiagnosticExpectation( Kind.WARNING, 54 )
 		);
 	}
+
+	@Test
+	@TestForIssue(jiraKey = "HV-1466")
+	public void uniqueElementsConstraints() {
+		File[] sourceFiles = new File[] {
+				compilerHelper.getSourceFile( ModelWithUniqueElementsConstraints.class )
+		};
+
+		boolean compilationResult =
+				compilerHelper.compile( new ConstraintValidationProcessor(), diagnostics, false, true, sourceFiles );
+
+		assertFalse( compilationResult );
+		assertThatDiagnosticsMatch(
+				diagnostics,
+				new DiagnosticExpectation( Kind.ERROR, 26 )
+		);
+	}
 }
diff --git a/annotation-processor/src/test/java/org/hibernate/validator/ap/testmodel/ModelWithUniqueElementsConstraints.java b/annotation-processor/src/test/java/org/hibernate/validator/ap/testmodel/ModelWithUniqueElementsConstraints.java
new file mode 100644
index 0000000000..ae0bf13c1f
--- /dev/null
+++ b/annotation-processor/src/test/java/org/hibernate/validator/ap/testmodel/ModelWithUniqueElementsConstraints.java
@@ -0,0 +1,28 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.ap.testmodel;
+
+import java.util.Collection;
+import java.util.List;
+import java.util.Set;
+
+import org.hibernate.validator.constraints.UniqueElements;
+
+public class ModelWithUniqueElementsConstraints {
+
+	@UniqueElements
+	public Collection<String> collection;
+
+	@UniqueElements
+	public List<String> list;
+
+	@UniqueElements
+	public Set<String> set;
+
+	@UniqueElements
+	public String string;
+}
diff --git a/build-config/pom.xml b/build-config/pom.xml
index 029ffadf54..9cf5598c8e 100644
--- a/build-config/pom.xml
+++ b/build-config/pom.xml
@@ -11,7 +11,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-parent</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/cdi/pom.xml b/cdi/pom.xml
index e7a6aaed9c..4f9438afad 100644
--- a/cdi/pom.xml
+++ b/cdi/pom.xml
@@ -11,7 +11,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-parent</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/cdi/src/main/java/org/hibernate/validator/cdi/ValidationExtension.java b/cdi/src/main/java/org/hibernate/validator/cdi/ValidationExtension.java
index 20ad3e44e4..45c5ef63f6 100644
--- a/cdi/src/main/java/org/hibernate/validator/cdi/ValidationExtension.java
+++ b/cdi/src/main/java/org/hibernate/validator/cdi/ValidationExtension.java
@@ -8,6 +8,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.annotation.ElementType;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 import java.util.Collections;
@@ -76,7 +77,7 @@
  */
 public class ValidationExtension implements Extension {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log log = LoggerFactory.make( MethodHandles.lookup() );
 
 	private static final EnumSet<ExecutableType> ALL_EXECUTABLE_TYPES =
 			EnumSet.of( ExecutableType.CONSTRUCTORS, ExecutableType.NON_GETTER_METHODS, ExecutableType.GETTER_METHODS );
diff --git a/changelog.txt b/changelog.txt
index 204de9374c..7887611ae0 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -1,6 +1,30 @@
 Hibernate Validator Changelog
 =============================
 
+6.0.5.Final (15-11-2017)
+-------------------------
+
+** Bug
+    * HV-1520 - engine              - Fix *ProcessedUnit equals() implementations
+    * HV-1516 - validators          - E-mail validator does not allow IDN ascii domain labels
+
+** Improvement
+    * HV-1519 - build               - Fix the jqassistant build
+    * HV-1518 - engine              - Various minor cleanups
+    * HV-1515 - translations        - Add missing strings to the simplified Chinese translation
+    * HV-1514 - performance         - Update the versions used in the benchmarks and make the latest benchmark compatible with BV 1.1
+    * HV-1512 - engine, performance - Improve initialization cost of all logger classes
+    * HV-1511 - engine              - Don't expose AnnotationDescriptor in AnnotationDef
+    * HV-1505 - engine              - Create ConstraintAnnotationDescriptor for typed access to groups() etc.
+    * HV-1497 - engine              - Extend the ConstraintValidator#initialize() contract
+
+** New Feature
+    * HV-1493 - engine              - Support a temporal validation tolerance when applying temporal constraints
+    * HV-1466 - validators          - Add a @UniqueElements constraints
+
+** Task
+    * HV-1513 - engine              - Rename static logger fields from "log" to "LOG"
+
 6.0.4.Final (25-10-2017)
 -------------------------
 
diff --git a/copyright.txt b/copyright.txt
index e960a9ffe0..f0cd07c603 100644
--- a/copyright.txt
+++ b/copyright.txt
@@ -57,9 +57,11 @@ Shane Bryzak
 Shelly McGowan
 Steve Ebersole
 Strong Liu
+Tadhg Pearson
 Tomaz Cerar
 Tommy Johansen
 Victor Rezende dos Santos
 Willi Schönborn
 Xavier Sosnovsky
+Yanming Zhou
 Yoann Rodière
diff --git a/distribution/pom.xml b/distribution/pom.xml
index d4af5a2046..0f59ec7bd7 100644
--- a/distribution/pom.xml
+++ b/distribution/pom.xml
@@ -10,7 +10,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-parent</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/documentation/pom.xml b/documentation/pom.xml
index 75de9c9dac..11c5f45eb2 100644
--- a/documentation/pom.xml
+++ b/documentation/pom.xml
@@ -11,7 +11,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-parent</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/documentation/src/main/asciidoc/ch02.asciidoc b/documentation/src/main/asciidoc/ch02.asciidoc
index 6e0dffe59e..4f45cc6bb7 100644
--- a/documentation/src/main/asciidoc/ch02.asciidoc
+++ b/documentation/src/main/asciidoc/ch02.asciidoc
@@ -716,6 +716,10 @@ In addition, `baseURI` allows to specify the base URI used to resolve relative U
 	Supported data types::: Any type
 	Hibernate metadata impact::: None
 
+`@UniqueElements`:: Checks that the annotated collection only contains unique elements. The equality is determined using the `equals()` method. The default message does not include the list of duplicate elements but you can include it by overriding the message and using the `{duplicates}` message parameter. The list of duplicate elements is also included in the dynamic payload of the constraint violation.
+	Supported data types::: `Collection`
+	Hibernate metadata impact::: None
+
 `@URL(protocol=, host=, port=, regexp=, flags=)`:: Checks if the annotated character sequence is a valid URL according to RFC2396. If any of the optional parameters `protocol`, `host` or `port` are specified, the corresponding URL fragments must match the specified values. The optional parameters `regexp` and `flags` allow to specify an additional regular expression (including regular expression flags) which the URL must match. Per default this constraint used the `java.net.URL` constructor to verify whether a given string represents a valid URL. A regular expression based version is also available - `RegexpURLValidator` - which can be configured via XML (see <<section-mapping-xml-constraints>>) or the programmatic API (see <<section-programmatic-constraint-definition>>).
 	Supported data types::: `CharSequence`
 	Hibernate metadata impact::: None
diff --git a/documentation/src/main/asciidoc/ch06.asciidoc b/documentation/src/main/asciidoc/ch06.asciidoc
index e448831b11..cc6f54d657 100644
--- a/documentation/src/main/asciidoc/ch06.asciidoc
+++ b/documentation/src/main/asciidoc/ch06.asciidoc
@@ -116,8 +116,8 @@ While another name could be used, the Bean Validation specification recommends t
 ==== The constraint validator
 
 Having defined the annotation, you need to create a constraint validator, which is able to validate
-elements with a `@CheckCase` annotation. To do so, implement the interface `ConstraintValidator` as
-shown below:
+elements with a `@CheckCase` annotation. To do so, implement the Bean Validation interface `ConstraintValidator`
+as shown below:
 
 [[example-constraint-validator]]
 .Implementing a constraint validator for the constraint `@CheckCase`
@@ -176,6 +176,40 @@ Only after that the new constraint violation will be created.
 Refer to <<section-custom-property-paths>> to learn how to use the `ConstraintValidatorContext` API to
 control the property path of constraint violations for class-level constraints.
 
+[[constraint-validator-hibernateconstraintvalidator]]
+===== The `HibernateConstraintValidator` extension
+
+Hibernate Validator provides an extension to the `ConstraintValidator` contract: `HibernateConstraintValidator`.
+
+The purpose of this extension is to provide more contextual information to the `initialize()` method
+as, in the current `ConstraintValidator` contract, only the annotation is passed as parameter.
+
+The `initialize()` method of `HibernateConstraintValidator` takes two parameters:
+
+ * The `ConstraintDescriptor` of the constraint at hand.
+   You can get access to the annotation using `ConstraintDescriptor#getAnnotation()`.
+ * The `HibernateConstraintValidatorInitializationContext` which provides useful helpers and contextual
+   information, such as the clock provider or the temporal validation tolerance.
+
+This extension is marked as incubating so it might be subject to change.
+The plan is to standardize it and to include it in Bean Validation in the future.
+
+The example below shows how to base your validators on `HibernateConstraintValidator`:
+
+[[example-constraint-validator-hibernateconstraintvalidator]]
+.Using the `HibernateConstraintValidator` contract
+====
+[source, JAVA, indent=0]
+----
+include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/MyFutureValidator.java[tags=include]
+----
+====
+
+[WARNING]
+====
+You should only implement one of the `initialize()` methods. Be aware that both are called when initializing the validator.
+====
+
 [[validator-customconstraints-errormessage]]
 ==== The error message
 
diff --git a/documentation/src/main/asciidoc/ch09.asciidoc b/documentation/src/main/asciidoc/ch09.asciidoc
index b1f4202f18..71bd211202 100644
--- a/documentation/src/main/asciidoc/ch09.asciidoc
+++ b/documentation/src/main/asciidoc/ch09.asciidoc
@@ -287,7 +287,7 @@ to learn more about this specific implementation.
 ====
 
 [[section-clock-provider]]
-==== `ClockProvider`
+==== `ClockProvider` and temporal validation tolerance
 
 For time related validation (`@Past` and `@Future` constraints for instance), it might be useful to define what is
 considered `now`.
@@ -326,6 +326,36 @@ For instance, this might be useful if you want to replace the default message of
 constraint with a more explicit one.
 ====
 
+When dealing with distributed architectures, you might need some tolerance when applying temporal constraints
+such as `@Past` or `@Future`.
+
+You can set a temporal validation tolerance by bootstrapping your `ValidatorFactory` as below:
+
+[[example-using-temporal-validation-tolerance]]
+.Using temporal validation tolerance
+====
+[source, JAVA, indent=0]
+----
+include::{sourcedir}/org/hibernate/validator/referenceguide/chapter09/BootstrappingTest.java[tags=temporalValidationTolerance]
+----
+====
+
+Alternatively, you can define it in the XML configuration by setting the `hibernate.validator.temporal_validation_tolerance` property
+in your _META-INF/validation.xml_.
+
+The value of this property must be a `long` defining the tolerance in milliseconds.
+
+[NOTE]
+====
+When implementing your own temporal constraints, you might need to have access to the temporal validation tolerance.
+
+It can be obtained by calling the `HibernateConstraintValidatorInitializationContext#getTemporalValidationTolerance()` method.
+
+Note that to get access to this context at initialization, your constraint validator has to implement
+the `HibernateConstraintValidator` contract (see <<constraint-validator-hibernateconstraintvalidator>>).
+This contract is currently marked as incubating: it might be subject to change in the future.
+====
+
 [[section-bootstrapping-valueextractors]]
 ==== Registering ``ValueExtractor``s
 
diff --git a/documentation/src/main/asciidoc/index.asciidoc b/documentation/src/main/asciidoc/index.asciidoc
index 2729272eea..372e1fc27b 100644
--- a/documentation/src/main/asciidoc/index.asciidoc
+++ b/documentation/src/main/asciidoc/index.asciidoc
@@ -7,6 +7,7 @@ Hardy Ferentschik; Gunnar Morling; Guillaume Smet
 :anchor:
 :toc: left
 :toclevels: 3
+:sectnumlevels: 5
 :docinfodir: {docinfodir}
 :docinfo:
 :title-logo-image: image:hibernate_logo_a.png[align=left,pdfwidth=33%]
diff --git a/documentation/src/test/java/org/hibernate/validator/referenceguide/chapter06/MyFuture.java b/documentation/src/test/java/org/hibernate/validator/referenceguide/chapter06/MyFuture.java
new file mode 100644
index 0000000000..63a989afb6
--- /dev/null
+++ b/documentation/src/test/java/org/hibernate/validator/referenceguide/chapter06/MyFuture.java
@@ -0,0 +1,44 @@
+package org.hibernate.validator.referenceguide.chapter06;
+
+import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
+import static java.lang.annotation.ElementType.CONSTRUCTOR;
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.ElementType.TYPE_USE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Repeatable;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import javax.validation.Constraint;
+import javax.validation.Payload;
+
+import org.hibernate.validator.referenceguide.chapter06.MyFuture.List;
+
+@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })
+@Retention(RUNTIME)
+@Repeatable(List.class)
+@Documented
+@Constraint(validatedBy = { })
+public @interface MyFuture {
+
+	String message() default "{org.hibernate.validator.referenceguide.chapter06.MyFuture." +
+			"message}";
+
+	Class<?>[] groups() default { };
+
+	Class<? extends Payload>[] payload() default { };
+
+	boolean orPresent() default false;
+
+	@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })
+	@Retention(RUNTIME)
+	@Documented
+	@interface List {
+
+		MyFuture[] value();
+	}
+}
diff --git a/documentation/src/test/java/org/hibernate/validator/referenceguide/chapter06/MyFutureValidator.java b/documentation/src/test/java/org/hibernate/validator/referenceguide/chapter06/MyFutureValidator.java
new file mode 100644
index 0000000000..b4d1167307
--- /dev/null
+++ b/documentation/src/test/java/org/hibernate/validator/referenceguide/chapter06/MyFutureValidator.java
@@ -0,0 +1,37 @@
+//tag::include[]
+package org.hibernate.validator.referenceguide.chapter06;
+
+//end::include[]
+
+import java.time.Clock;
+import java.time.Instant;
+
+import javax.validation.ConstraintValidatorContext;
+import javax.validation.metadata.ConstraintDescriptor;
+
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidator;
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext;
+
+@SuppressWarnings("unused")
+//tag::include[]
+public class MyFutureValidator implements HibernateConstraintValidator<MyFuture, Instant> {
+
+	private Clock clock;
+
+	private boolean orPresent;
+
+	@Override
+	public void initialize(ConstraintDescriptor<MyFuture> constraintDescriptor,
+			HibernateConstraintValidatorInitializationContext initializationContext) {
+		this.orPresent = constraintDescriptor.getAnnotation().orPresent();
+		this.clock = initializationContext.getClockProvider().getClock();
+	}
+
+	@Override
+	public boolean isValid(Instant instant, ConstraintValidatorContext constraintContext) {
+		//...
+
+		return false;
+	}
+}
+//end::include[]
diff --git a/documentation/src/test/java/org/hibernate/validator/referenceguide/chapter09/BootstrappingTest.java b/documentation/src/test/java/org/hibernate/validator/referenceguide/chapter09/BootstrappingTest.java
index f357d50e9c..1844163625 100644
--- a/documentation/src/test/java/org/hibernate/validator/referenceguide/chapter09/BootstrappingTest.java
+++ b/documentation/src/test/java/org/hibernate/validator/referenceguide/chapter09/BootstrappingTest.java
@@ -1,6 +1,7 @@
 package org.hibernate.validator.referenceguide.chapter09;
 
 import java.io.InputStream;
+import java.time.Duration;
 import java.time.ZoneId;
 import java.time.ZonedDateTime;
 
@@ -108,6 +109,18 @@ public void clockProvider() {
 		//end::clockProvider[]
 	}
 
+	@Test
+	@SuppressWarnings("unused")
+	public void temporalValidationTolerance() {
+		//tag::temporalValidationTolerance[]
+		ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator.class )
+				.configure()
+				.temporalValidationTolerance( Duration.ofMillis( 10 ) )
+				.buildValidatorFactory();
+		Validator validator = validatorFactory.getValidator();
+		//end::temporalValidationTolerance[]
+	}
+
 	@Test
 	@SuppressWarnings("unused")
 	public void valueExtractor() {
diff --git a/engine/pom.xml b/engine/pom.xml
index 547cd0039a..4076e1449e 100644
--- a/engine/pom.xml
+++ b/engine/pom.xml
@@ -11,7 +11,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-parent</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/engine/src/main/java/org/hibernate/validator/HibernateValidatorConfiguration.java b/engine/src/main/java/org/hibernate/validator/HibernateValidatorConfiguration.java
index 3673278497..6431b8e690 100644
--- a/engine/src/main/java/org/hibernate/validator/HibernateValidatorConfiguration.java
+++ b/engine/src/main/java/org/hibernate/validator/HibernateValidatorConfiguration.java
@@ -6,10 +6,15 @@
  */
 package org.hibernate.validator;
 
+import java.time.Duration;
 import java.util.Set;
 
 import javax.validation.Configuration;
 import javax.validation.TraversableResolver;
+import javax.validation.constraints.Future;
+import javax.validation.constraints.FutureOrPresent;
+import javax.validation.constraints.Past;
+import javax.validation.constraints.PastOrPresent;
 import javax.validation.valueextraction.ValueExtractor;
 
 import org.hibernate.validator.cfg.ConstraintMapping;
@@ -86,6 +91,15 @@ public interface HibernateValidatorConfiguration extends Configuration<Hibernate
 	@Incubating
 	String SCRIPT_EVALUATOR_FACTORY_CLASSNAME = "hibernate.validator.script_evaluator_factory";
 
+	/**
+	 * Property for configuring temporal validation tolerance, allowing to set the acceptable margin of error when
+	 * comparing date/time in temporal constraints. In milliseconds.
+	 *
+	 * @since 6.0.5
+	 */
+	@Incubating
+	String TEMPORAL_VALIDATION_TOLERANCE = "hibernate.validator.temporal_validation_tolerance";
+
 	/**
 	 * <p>
 	 * Returns the {@link ResourceBundleLocator} used by the
@@ -264,4 +278,17 @@ public interface HibernateValidatorConfiguration extends Configuration<Hibernate
 	 */
 	@Incubating
 	HibernateValidatorConfiguration scriptEvaluatorFactory(ScriptEvaluatorFactory scriptEvaluatorFactory);
+
+	/**
+	 * Allows to set the acceptable margin of error when comparing date/time in temporal constraints such as
+	 * {@link Past}/{@link PastOrPresent} and {@link Future}/{@link FutureOrPresent}.
+	 *
+	 * @param temporalValidationTolerance the acceptable tolerance
+	 *
+	 * @return {@code this} following the chaining method pattern
+	 *
+	 * @since 6.0.5
+	 */
+	@Incubating
+	HibernateValidatorConfiguration temporalValidationTolerance(Duration temporalValidationTolerance);
 }
diff --git a/engine/src/main/java/org/hibernate/validator/HibernateValidatorContext.java b/engine/src/main/java/org/hibernate/validator/HibernateValidatorContext.java
index 85adcdf576..6ac9a4dea5 100644
--- a/engine/src/main/java/org/hibernate/validator/HibernateValidatorContext.java
+++ b/engine/src/main/java/org/hibernate/validator/HibernateValidatorContext.java
@@ -7,6 +7,8 @@
 
 package org.hibernate.validator;
 
+import java.time.Duration;
+
 import javax.validation.ClockProvider;
 import javax.validation.ConstraintValidatorFactory;
 import javax.validation.MessageInterpolator;
@@ -138,4 +140,17 @@ public interface HibernateValidatorContext extends ValidatorContext {
 	 * @since 6.0.3
 	 */
 	HibernateValidatorContext enableTraversableResolverResultCache(boolean enabled);
+
+	/**
+	 * Define the temporal validation tolerance i.e. the acceptable margin of error
+	 * when comparing date/time in temporal constraints.
+	 *
+	 * @param temporalValidationTolerance the tolerance
+	 *
+	 * @return {@code this} following the chaining method pattern
+	 *
+	 * @since 6.0.5
+	 */
+	@Incubating
+	HibernateValidatorContext temporalValidationTolerance(Duration temporalValidationTolerance);
 }
diff --git a/engine/src/main/java/org/hibernate/validator/HibernateValidatorFactory.java b/engine/src/main/java/org/hibernate/validator/HibernateValidatorFactory.java
index 2668504168..67af4b8715 100644
--- a/engine/src/main/java/org/hibernate/validator/HibernateValidatorFactory.java
+++ b/engine/src/main/java/org/hibernate/validator/HibernateValidatorFactory.java
@@ -7,6 +7,8 @@
 
 package org.hibernate.validator;
 
+import java.time.Duration;
+
 import javax.validation.ValidatorFactory;
 
 import org.hibernate.validator.constraints.ParameterScriptAssert;
@@ -34,6 +36,17 @@ public interface HibernateValidatorFactory extends ValidatorFactory {
 	@Incubating
 	ScriptEvaluatorFactory getScriptEvaluatorFactory();
 
+	/**
+	 * Returns the temporal validation tolerance i.e. the acceptable margin of error when comparing date/time in
+	 * temporal constraints.
+	 *
+	 * @return the tolerance
+	 *
+	 * @since 6.0.5
+	 */
+	@Incubating
+	Duration getTemporalValidationTolerance();
+
 	/**
 	 * Returns a context for validator configuration via options from the
 	 * Bean Validation API as well as specific ones from Hibernate Validator.
diff --git a/engine/src/main/java/org/hibernate/validator/cfg/AnnotationDef.java b/engine/src/main/java/org/hibernate/validator/cfg/AnnotationDef.java
index 1ca88a192f..dcfe5ae898 100644
--- a/engine/src/main/java/org/hibernate/validator/cfg/AnnotationDef.java
+++ b/engine/src/main/java/org/hibernate/validator/cfg/AnnotationDef.java
@@ -7,8 +7,9 @@
 package org.hibernate.validator.cfg;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Array;
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -35,7 +36,7 @@
  */
 public abstract class AnnotationDef<C extends AnnotationDef<C, A>, A extends Annotation> {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	// Note on visibility of members: These members are intentionally made
 	// protected and published by a sub-class for internal use. There aren't
@@ -44,7 +45,7 @@ public abstract class AnnotationDef<C extends AnnotationDef<C, A>, A extends Ann
 	/**
 	 * The annotation descriptor builder.
 	 */
-	protected final AnnotationDescriptor.Builder<A> annotationDescriptorBuilder;
+	private final AnnotationDescriptor.Builder<A> annotationDescriptorBuilder;
 
 	/**
 	 * A map with annotation parameters of this definition which are annotations
@@ -54,7 +55,7 @@ public abstract class AnnotationDef<C extends AnnotationDef<C, A>, A extends Ann
 	 * needed it should be represented via {@link java.util.List} of corresponding
 	 * {@link AnnotationDef}s.
 	 */
-	protected final Map<String, List<AnnotationDef<?, ?>>> annotationsAsParameters;
+	private final Map<String, List<AnnotationDef<?, ?>>> annotationsAsParameters;
 
 	/**
 	 * A map of annotation types that are added to {@link AnnotationDef#annotationsAsParameters}.
@@ -88,7 +89,7 @@ protected C addParameter(String key, Object value) {
 	protected C addAnnotationAsParameter(String key, AnnotationDef<?, ?> value) {
 		annotationsAsParameters.compute( key, ( k, oldValue ) -> {
 			if ( oldValue == null ) {
-				return Arrays.asList( value );
+				return Collections.singletonList( value );
 			}
 			else {
 				List<AnnotationDef<?, ?>> resultingList = CollectionHelper.newArrayList( oldValue );
@@ -100,7 +101,7 @@ protected C addAnnotationAsParameter(String key, AnnotationDef<?, ?> value) {
 		return getThis();
 	}
 
-	protected AnnotationDescriptor<A> createAnnotationDescriptor() {
+	private AnnotationDescriptor<A> createAnnotationDescriptor() {
 		for ( Map.Entry<String, List<AnnotationDef<?, ?>>> annotationAsParameter : annotationsAsParameters.entrySet() ) {
 			annotationDescriptorBuilder.setAttribute(
 					annotationAsParameter.getKey(),
diff --git a/engine/src/main/java/org/hibernate/validator/cfg/ConstraintDef.java b/engine/src/main/java/org/hibernate/validator/cfg/ConstraintDef.java
index 7e8e731abe..d1051048e9 100644
--- a/engine/src/main/java/org/hibernate/validator/cfg/ConstraintDef.java
+++ b/engine/src/main/java/org/hibernate/validator/cfg/ConstraintDef.java
@@ -10,6 +10,8 @@
 
 import javax.validation.Payload;
 
+import org.hibernate.validator.internal.metadata.core.ConstraintHelper;
+
 /**
  * Base class for all constraint definition types. Each sub type represents a
  * single constraint annotation type and allows to add this constraint to a bean
@@ -40,18 +42,18 @@ private C getThis() {
 	}
 
 	public C message(String message) {
-		addParameter( "message", message );
+		addParameter( ConstraintHelper.MESSAGE, message );
 		return getThis();
 	}
 
 	public C groups(Class<?>... groups) {
-		addParameter( "groups", groups );
+		addParameter( ConstraintHelper.GROUPS, groups );
 		return getThis();
 	}
 
 	@SuppressWarnings("unchecked")
 	public C payload(Class<? extends Payload>... payload) {
-		addParameter( "payload", payload );
+		addParameter( ConstraintHelper.PAYLOAD, payload );
 		return getThis();
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/cfg/defs/UniqueElementsDef.java b/engine/src/main/java/org/hibernate/validator/cfg/defs/UniqueElementsDef.java
new file mode 100644
index 0000000000..6bb54dfc33
--- /dev/null
+++ b/engine/src/main/java/org/hibernate/validator/cfg/defs/UniqueElementsDef.java
@@ -0,0 +1,22 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package org.hibernate.validator.cfg.defs;
+
+import org.hibernate.validator.cfg.ConstraintDef;
+import org.hibernate.validator.constraints.UniqueElements;
+
+/**
+ * @author Guillaume Smet
+ * @since 6.0.5
+ */
+public class UniqueElementsDef extends ConstraintDef<UniqueElementsDef, UniqueElements> {
+
+	public UniqueElementsDef() {
+		super( UniqueElements.class );
+	}
+}
diff --git a/engine/src/main/java/org/hibernate/validator/constraints/UniqueElements.java b/engine/src/main/java/org/hibernate/validator/constraints/UniqueElements.java
new file mode 100644
index 0000000000..2a61ec63e3
--- /dev/null
+++ b/engine/src/main/java/org/hibernate/validator/constraints/UniqueElements.java
@@ -0,0 +1,62 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.constraints;
+
+import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
+import static java.lang.annotation.ElementType.CONSTRUCTOR;
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.ElementType.TYPE_USE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Repeatable;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+import java.util.Collection;
+
+import javax.validation.Constraint;
+import javax.validation.Payload;
+
+import org.hibernate.validator.constraints.UniqueElements.List;
+
+/**
+ * Validates that every object in the provided {@link Collection} is unique, i.e. that we can't find 2 equal elements in
+ * the collection.
+ * <p>
+ * For instance, this can be useful with JAX-RS, which always deserializes collections to a list. Thus, duplicates would
+ * implicitly and silently be removed when converting it to a set. This constraint allows you to check for duplicates in
+ * the list and to raise an error instead.
+ *
+ * @author Tadhg Pearson
+ * @since 6.0.5
+ */
+@Documented
+@Constraint(validatedBy = { })
+@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })
+@Retention(RUNTIME)
+@Repeatable(List.class)
+public @interface UniqueElements {
+
+	String message() default "{org.hibernate.validator.constraints.UniqueElements.message}";
+
+	Class<?>[] groups() default {};
+
+	Class<? extends Payload>[] payload() default {};
+
+	/**
+	 * Defines several {@code @UniqueElements} annotations on the same element.
+	 */
+	@Target({ TYPE })
+	@Retention(RUNTIME)
+	@Documented
+	public @interface List {
+		UniqueElements[] value();
+	}
+}
diff --git a/engine/src/main/java/org/hibernate/validator/constraintvalidation/HibernateConstraintValidator.java b/engine/src/main/java/org/hibernate/validator/constraintvalidation/HibernateConstraintValidator.java
new file mode 100644
index 0000000000..4bbe852064
--- /dev/null
+++ b/engine/src/main/java/org/hibernate/validator/constraintvalidation/HibernateConstraintValidator.java
@@ -0,0 +1,41 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.constraintvalidation;
+
+import java.lang.annotation.Annotation;
+
+import javax.validation.ConstraintValidator;
+import javax.validation.ConstraintValidatorContext;
+import javax.validation.ConstraintValidatorFactory;
+import javax.validation.metadata.ConstraintDescriptor;
+
+import org.hibernate.validator.Incubating;
+
+/**
+ * Hibernate Validator specific extension to the {@link ConstraintValidator} contract.
+ *
+ * @author Marko Bekhta
+ * @since 6.0.5
+ */
+@Incubating
+public interface HibernateConstraintValidator<A extends Annotation, T> extends ConstraintValidator<A, T> {
+
+	/**
+	 * Initializes the validator in preparation for {@link #isValid(Object, ConstraintValidatorContext)} calls.
+	 * It is an alternative to {@link #initialize(Annotation)} method. Should be used if any additional information
+	 * except annotation is needed to initialize a validator.
+	 * Note, when using {@link HibernateConstraintValidator} user should only override one of the methods, either
+	 * {@link #initialize(ConstraintDescriptor, HibernateConstraintValidatorInitializationContext)} or {@link #initialize(Annotation)}.
+	 * Both methods will be called during initialization, starting with
+	 * {@link #initialize(ConstraintDescriptor, HibernateConstraintValidatorInitializationContext)}.
+	 *
+	 * @param constraintDescriptor a constraint descriptor for a given constraint declaration
+	 * @param initializationContext an initialization context for a current {@link ConstraintValidatorFactory}
+	 */
+	default void initialize(ConstraintDescriptor<A> constraintDescriptor, HibernateConstraintValidatorInitializationContext initializationContext) {
+	}
+}
diff --git a/engine/src/main/java/org/hibernate/validator/constraintvalidation/HibernateConstraintValidatorContext.java b/engine/src/main/java/org/hibernate/validator/constraintvalidation/HibernateConstraintValidatorContext.java
index dcb9869977..405fab4fbf 100644
--- a/engine/src/main/java/org/hibernate/validator/constraintvalidation/HibernateConstraintValidatorContext.java
+++ b/engine/src/main/java/org/hibernate/validator/constraintvalidation/HibernateConstraintValidatorContext.java
@@ -8,11 +8,6 @@
 
 import javax.validation.ConstraintValidatorContext;
 
-import org.hibernate.validator.Incubating;
-import org.hibernate.validator.spi.scripting.ScriptEvaluator;
-import org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory;
-import org.hibernate.validator.spi.scripting.ScriptEvaluatorNotFoundException;
-
 /**
  * A custom {@link ConstraintValidatorContext} which allows to set additional message parameters for
  * interpolation.
@@ -112,19 +107,4 @@ public interface HibernateConstraintValidatorContext extends ConstraintValidator
 	 */
 	HibernateConstraintValidatorContext withDynamicPayload(Object payload);
 
-	/**
-	 * Returns a {@link ScriptEvaluator} created based on the {@link ScriptEvaluatorFactory}
-	 * passed at bootstrap.
-	 *
-	 * @param languageName the name of the scripting language
-	 *
-	 * @return a script executor for the given language. Never null.
-	 *
-	 * @throws ScriptEvaluatorNotFoundException in case no {@link ScriptEvaluator} was
-	 * found for a given {@code languageName}
-	 *
-	 * @since 6.0.3
-	 */
-	@Incubating
-	ScriptEvaluator getScriptEvaluatorForLanguage(String languageName);
 }
diff --git a/engine/src/main/java/org/hibernate/validator/constraintvalidation/HibernateConstraintValidatorInitializationContext.java b/engine/src/main/java/org/hibernate/validator/constraintvalidation/HibernateConstraintValidatorInitializationContext.java
new file mode 100644
index 0000000000..0d73ad9671
--- /dev/null
+++ b/engine/src/main/java/org/hibernate/validator/constraintvalidation/HibernateConstraintValidatorInitializationContext.java
@@ -0,0 +1,58 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.constraintvalidation;
+
+import java.time.Clock;
+import java.time.Duration;
+
+import javax.validation.ClockProvider;
+
+import org.hibernate.validator.Incubating;
+import org.hibernate.validator.spi.scripting.ScriptEvaluator;
+import org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory;
+import org.hibernate.validator.spi.scripting.ScriptEvaluatorNotFoundException;
+
+/**
+ * Provides contextual data and operations when initializing a constraint validator.
+ *
+ * @author Marko Bekhta
+ * @since 6.0.5
+ */
+@Incubating
+public interface HibernateConstraintValidatorInitializationContext {
+
+	/**
+	 * Returns a {@link ScriptEvaluator} created by the {@link ScriptEvaluatorFactory}
+	 * passed at bootstrap.
+	 *
+	 * @param languageName the name of the scripting language
+	 *
+	 * @return a script evaluator for the given language. Never null.
+	 *
+	 * @throws ScriptEvaluatorNotFoundException in case no {@link ScriptEvaluator} was
+	 * found for a given {@code languageName}
+	 */
+	ScriptEvaluator getScriptEvaluatorForLanguage(String languageName);
+
+	/**
+	 * Returns the provider for obtaining the current time in the form of a {@link Clock}, e.g. when validating the
+	 * {@code Future} and {@code Past} constraints.
+	 *
+	 * @return the provider for obtaining the current time, never {@code null}. If no specific provider has been
+	 * configured during bootstrap, a default implementation using the current system time and the current default time
+	 * zone as returned by {@link Clock#systemDefaultZone()} will be returned.
+	 */
+	ClockProvider getClockProvider();
+
+	/**
+	 * Returns the temporal validation tolerance i.e. the acceptable margin of error when comparing date/time in
+	 * temporal constraints.
+	 *
+	 * @return the tolerance
+	 */
+	Duration getTemporalValidationTolerance();
+}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/CascadableConstraintMappingContextImplBase.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/CascadableConstraintMappingContextImplBase.java
index 11087289f5..323ee74c7a 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/CascadableConstraintMappingContextImplBase.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/CascadableConstraintMappingContextImplBase.java
@@ -8,6 +8,7 @@
 
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashMap;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
@@ -41,7 +42,7 @@
 abstract class CascadableConstraintMappingContextImplBase<C extends Cascadable<C>>
 		extends ConstraintMappingContextImplBase implements Cascadable<C> {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final Type configuredType;
 	protected boolean isCascading;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ConfiguredConstraint.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ConfiguredConstraint.java
index 999c99e7ca..8f338757fe 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ConfiguredConstraint.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ConfiguredConstraint.java
@@ -8,17 +8,28 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.annotation.ElementType;
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Executable;
 import java.lang.reflect.Field;
 import java.lang.reflect.Member;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 
+import javax.validation.ValidationException;
+
+import org.hibernate.validator.cfg.AnnotationDef;
 import org.hibernate.validator.cfg.ConstraintDef;
 import org.hibernate.validator.internal.metadata.location.ConstraintLocation;
 import org.hibernate.validator.internal.util.ExecutableHelper;
 import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
+import org.hibernate.validator.internal.util.logging.Log;
+import org.hibernate.validator.internal.util.logging.LoggerFactory;
+import org.hibernate.validator.internal.util.privilegedactions.GetDeclaredMethodHandle;
 
 /**
  * Represents a programmatically configured constraint and meta-data
@@ -28,12 +39,17 @@
  */
 class ConfiguredConstraint<A extends Annotation> {
 
-	private final ConstraintDefAccessor<A> constraint;
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
+
+	private static final MethodHandle CREATE_ANNOTATION_DESCRIPTOR_METHOD_HANDLE =
+			run( GetDeclaredMethodHandle.andMakeAccessible( MethodHandles.lookup(), AnnotationDef.class, "createAnnotationDescriptor" ) );
+
+	private final ConstraintDef<?, A> constraint;
 	private final ConstraintLocation location;
 	private final ElementType elementType;
 
 	private ConfiguredConstraint(ConstraintDef<?, A> constraint, ConstraintLocation location, ElementType elementType) {
-		this.constraint = new ConstraintDefAccessor<>( constraint );
+		this.constraint = constraint;
 		this.location = location;
 		this.elementType = elementType;
 	}
@@ -93,8 +109,17 @@ public ConstraintLocation getLocation() {
 		return location;
 	}
 
-	public AnnotationDescriptor<A> createAnnotationDescriptor() {
-		return constraint.createAnnotationDescriptor();
+	public ConstraintAnnotationDescriptor<A> createAnnotationDescriptor() {
+		try {
+			AnnotationDescriptor<A> annotationDescriptor = (AnnotationDescriptor<A>) CREATE_ANNOTATION_DESCRIPTOR_METHOD_HANDLE.invoke( constraint );
+			return new ConstraintAnnotationDescriptor<>( annotationDescriptor );
+		}
+		catch (Throwable e) {
+			if ( e instanceof ValidationException ) {
+				throw (ValidationException) e;
+			}
+			throw LOG.getUnableToCreateAnnotationDescriptor( constraint.getClass(), e );
+		}
 	}
 
 	@Override
@@ -102,23 +127,16 @@ public String toString() {
 		return constraint.toString();
 	}
 
-	/**
-	 * Provides access to the members of a {@link ConstraintDef}.
-	 */
-	private static class ConstraintDefAccessor<A extends Annotation>
-			extends ConstraintDef<ConstraintDefAccessor<A>, A> {
-
-		private ConstraintDefAccessor(ConstraintDef<?, A> original) {
-			super( original );
-		}
-
-		@Override
-		protected AnnotationDescriptor<A> createAnnotationDescriptor() {
-			return super.createAnnotationDescriptor();
-		}
-	}
-
 	public ElementType getElementType() {
 		return elementType;
 	}
+
+	/**
+	 * Runs the given privileged action, using a privileged block if required.
+	 * <b>NOTE:</b> This must never be changed into a publicly available method to avoid execution of arbitrary
+	 * privileged actions within HV's protection domain.
+	 */
+	private static <V> V run(PrivilegedAction<V> action) {
+		return System.getSecurityManager() != null ? AccessController.doPrivileged( action ) : action.run();
+	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ContainerElementConstraintMappingContextImpl.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ContainerElementConstraintMappingContextImpl.java
index 3867f9d2ce..ca7d0f7514 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ContainerElementConstraintMappingContextImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ContainerElementConstraintMappingContextImpl.java
@@ -8,6 +8,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.annotation.ElementType;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
@@ -52,7 +53,7 @@
  */
 public class ContainerElementConstraintMappingContextImpl extends CascadableConstraintMappingContextImplBase<ContainerElementConstraintMappingContext> implements ContainerElementConstraintMappingContext {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final TypeConstraintMappingContextImpl<?> typeContext;
 	private final ContainerElementTarget parentContainerElementTarget;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/DefaultConstraintMapping.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/DefaultConstraintMapping.java
index 97b25abddc..46cd84af48 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/DefaultConstraintMapping.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/DefaultConstraintMapping.java
@@ -10,6 +10,7 @@
 import static org.hibernate.validator.internal.util.logging.Messages.MESSAGES;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.util.Set;
 
 import javax.validation.Constraint;
@@ -37,7 +38,7 @@
  */
 public class DefaultConstraintMapping implements ConstraintMapping {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final AnnotationProcessingOptionsImpl annotationProcessingOptions;
 	private final Set<Class<?>> configuredTypes;
@@ -58,7 +59,7 @@ public final <C> TypeConstraintMappingContext<C> type(Class<C> type) {
 		Contracts.assertNotNull( type, MESSAGES.beanTypeMustNotBeNull() );
 
 		if ( configuredTypes.contains( type ) ) {
-			throw log.getBeanClassHasAlreadyBeConfiguredViaProgrammaticApiException( type );
+			throw LOG.getBeanClassHasAlreadyBeConfiguredViaProgrammaticApiException( type );
 		}
 
 		TypeConstraintMappingContextImpl<C> typeContext = new TypeConstraintMappingContextImpl<>( this, type );
@@ -104,7 +105,7 @@ public <A extends Annotation> ConstraintDefinitionContext<A> constraintDefinitio
 
 		if ( definedConstraints.contains( annotationClass ) ) {
 			// Fail fast for easy-to-detect definition conflicts; other conflicts are handled in ValidatorFactoryImpl
-			throw log.getConstraintHasAlreadyBeenConfiguredViaProgrammaticApiException( annotationClass );
+			throw LOG.getConstraintHasAlreadyBeenConfiguredViaProgrammaticApiException( annotationClass );
 		}
 
 		ConstraintDefinitionContextImpl<A> constraintContext = new ConstraintDefinitionContextImpl<>( this, annotationClass );
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ExecutableConstraintMappingContextImpl.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ExecutableConstraintMappingContextImpl.java
index 2782238218..3f2f6d3523 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ExecutableConstraintMappingContextImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/ExecutableConstraintMappingContextImpl.java
@@ -8,6 +8,7 @@
 
 import static org.hibernate.validator.internal.util.CollectionHelper.newArrayList;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Executable;
 import java.util.Collections;
 import java.util.List;
@@ -37,7 +38,7 @@
  */
 abstract class ExecutableConstraintMappingContextImpl {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	protected final TypeConstraintMappingContextImpl<?> typeContext;
 	protected final Executable executable;
@@ -53,13 +54,13 @@ protected ExecutableConstraintMappingContextImpl(TypeConstraintMappingContextImp
 
 	public ParameterConstraintMappingContext parameter(int index) {
 		if ( index < 0 || index >= executable.getParameterTypes().length ) {
-			throw log.getInvalidExecutableParameterIndexException( executable, index );
+			throw LOG.getInvalidExecutableParameterIndexException( executable, index );
 		}
 
 		ParameterConstraintMappingContextImpl context = parameterContexts[index];
 
 		if ( context != null ) {
-			throw log.getParameterHasAlreadyBeConfiguredViaProgrammaticApiException(
+			throw LOG.getParameterHasAlreadyBeConfiguredViaProgrammaticApiException(
 					typeContext.getBeanClass(),
 					executable,
 					index
@@ -73,7 +74,7 @@ public ParameterConstraintMappingContext parameter(int index) {
 
 	public CrossParameterConstraintMappingContext crossParameter() {
 		if ( crossParameterContext != null ) {
-			throw log.getCrossParameterElementHasAlreadyBeConfiguredViaProgrammaticApiException(
+			throw LOG.getCrossParameterElementHasAlreadyBeConfiguredViaProgrammaticApiException(
 					typeContext.getBeanClass(),
 					executable
 			);
@@ -85,7 +86,7 @@ public CrossParameterConstraintMappingContext crossParameter() {
 
 	public ReturnValueConstraintMappingContext returnValue() {
 		if ( returnValueContext != null ) {
-			throw log.getReturnValueHasAlreadyBeConfiguredViaProgrammaticApiException(
+			throw LOG.getReturnValueHasAlreadyBeConfiguredViaProgrammaticApiException(
 					typeContext.getBeanClass(),
 					executable
 			);
diff --git a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/TypeConstraintMappingContextImpl.java b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/TypeConstraintMappingContextImpl.java
index 54d8219029..96fba896ba 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/cfg/context/TypeConstraintMappingContextImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/cfg/context/TypeConstraintMappingContextImpl.java
@@ -10,6 +10,7 @@
 import static org.hibernate.validator.internal.util.logging.Messages.MESSAGES;
 
 import java.lang.annotation.ElementType;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Member;
 import java.lang.reflect.Method;
@@ -56,7 +57,7 @@
 public final class TypeConstraintMappingContextImpl<C> extends ConstraintMappingContextImplBase
 		implements TypeConstraintMappingContext<C> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final Class<C> beanClass;
 
@@ -114,11 +115,11 @@ public PropertyConstraintMappingContext property(String property, ElementType el
 		);
 
 		if ( member == null || member.getDeclaringClass() != beanClass ) {
-			throw log.getUnableToFindPropertyWithAccessException( beanClass, property, elementType );
+			throw LOG.getUnableToFindPropertyWithAccessException( beanClass, property, elementType );
 		}
 
 		if ( configuredMembers.contains( member ) ) {
-			throw log.getPropertyHasAlreadyBeConfiguredViaProgrammaticApiException( beanClass, property );
+			throw LOG.getPropertyHasAlreadyBeConfiguredViaProgrammaticApiException( beanClass, property );
 		}
 
 		PropertyConstraintMappingContextImpl context = new PropertyConstraintMappingContextImpl(
@@ -138,11 +139,11 @@ public MethodConstraintMappingContext method(String name, Class<?>... parameterT
 		Method method = run( GetDeclaredMethod.action( beanClass, name, parameterTypes ) );
 
 		if ( method == null || method.getDeclaringClass() != beanClass ) {
-			throw log.getBeanDoesNotContainMethodException( beanClass, name, Arrays.asList( parameterTypes ) );
+			throw LOG.getBeanDoesNotContainMethodException( beanClass, name, Arrays.asList( parameterTypes ) );
 		}
 
 		if ( configuredMembers.contains( method ) ) {
-			throw log.getMethodHasAlreadyBeConfiguredViaProgrammaticApiException(
+			throw LOG.getMethodHasAlreadyBeConfiguredViaProgrammaticApiException(
 					beanClass,
 					ExecutableHelper.getExecutableAsString( name, parameterTypes )
 			);
@@ -160,14 +161,14 @@ public ConstructorConstraintMappingContext constructor(Class<?>... parameterType
 		Constructor<C> constructor = run( GetDeclaredConstructor.action( beanClass, parameterTypes ) );
 
 		if ( constructor == null || constructor.getDeclaringClass() != beanClass ) {
-			throw log.getBeanDoesNotContainConstructorException(
+			throw LOG.getBeanDoesNotContainConstructorException(
 					beanClass,
 					Arrays.asList( parameterTypes )
 			);
 		}
 
 		if ( configuredMembers.contains( constructor ) ) {
-			throw log.getConstructorHasAlreadyBeConfiguredViaProgrammaticApiException(
+			throw LOG.getConstructorHasAlreadyBeConfiguredViaProgrammaticApiException(
 					beanClass,
 					ExecutableHelper.getExecutableAsString( beanClass.getSimpleName(), parameterTypes )
 			);
@@ -251,11 +252,11 @@ private Member getMember(Class<?> clazz, String property, ElementType elementTyp
 		Contracts.assertNotNull( clazz, MESSAGES.classCannotBeNull() );
 
 		if ( property == null || property.length() == 0 ) {
-			throw log.getPropertyNameCannotBeNullOrEmptyException();
+			throw LOG.getPropertyNameCannotBeNullOrEmptyException();
 		}
 
 		if ( !( ElementType.FIELD.equals( elementType ) || ElementType.METHOD.equals( elementType ) ) ) {
-			throw log.getElementTypeHasToBeFieldOrMethodException();
+			throw LOG.getElementTypeHasToBeFieldOrMethodException();
 		}
 
 		Member member = null;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DecimalMaxValidatorForCharSequence.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DecimalMaxValidatorForCharSequence.java
index 2d39a50c94..fec9eaf271 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DecimalMaxValidatorForCharSequence.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DecimalMaxValidatorForCharSequence.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv;
 
+import java.lang.invoke.MethodHandles;
 import java.math.BigDecimal;
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
@@ -22,7 +23,7 @@
  */
 public class DecimalMaxValidatorForCharSequence implements ConstraintValidator<DecimalMax, CharSequence> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private BigDecimal maxValue;
 	private boolean inclusive;
@@ -33,7 +34,7 @@ public void initialize(DecimalMax maxValue) {
 			this.maxValue = new BigDecimal( maxValue.value() );
 		}
 		catch (NumberFormatException nfe) {
-			throw log.getInvalidBigDecimalFormatException( maxValue.value(), nfe );
+			throw LOG.getInvalidBigDecimalFormatException( maxValue.value(), nfe );
 		}
 		this.inclusive = maxValue.inclusive();
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DecimalMinValidatorForCharSequence.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DecimalMinValidatorForCharSequence.java
index cce98a9773..d8e189ffad 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DecimalMinValidatorForCharSequence.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DecimalMinValidatorForCharSequence.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv;
 
+import java.lang.invoke.MethodHandles;
 import java.math.BigDecimal;
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
@@ -22,7 +23,7 @@
  */
 public class DecimalMinValidatorForCharSequence implements ConstraintValidator<DecimalMin, CharSequence> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private BigDecimal minValue;
 	private boolean inclusive;
@@ -33,7 +34,7 @@ public void initialize(DecimalMin minValue) {
 			this.minValue = new BigDecimal( minValue.value() );
 		}
 		catch (NumberFormatException nfe) {
-			throw log.getInvalidBigDecimalFormatException( minValue.value(), nfe );
+			throw LOG.getInvalidBigDecimalFormatException( minValue.value(), nfe );
 		}
 		this.inclusive = minValue.inclusive();
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DigitsValidatorForCharSequence.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DigitsValidatorForCharSequence.java
index 4f32c41470..25624698d7 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DigitsValidatorForCharSequence.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DigitsValidatorForCharSequence.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv;
 
+import java.lang.invoke.MethodHandles;
 import java.math.BigDecimal;
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
@@ -23,7 +24,7 @@
  */
 public class DigitsValidatorForCharSequence implements ConstraintValidator<Digits, CharSequence> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private int maxIntegerLength;
 	private int maxFractionLength;
@@ -66,10 +67,10 @@ private BigDecimal getBigDecimalValue(CharSequence charSequence) {
 
 	private void validateParameters() {
 		if ( maxIntegerLength < 0 ) {
-			throw log.getInvalidLengthForIntegerPartException();
+			throw LOG.getInvalidLengthForIntegerPartException();
 		}
 		if ( maxFractionLength < 0 ) {
-			throw log.getInvalidLengthForFractionPartException();
+			throw LOG.getInvalidLengthForFractionPartException();
 		}
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DigitsValidatorForNumber.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DigitsValidatorForNumber.java
index 6977c6cc06..82ff7f0f1e 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DigitsValidatorForNumber.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/DigitsValidatorForNumber.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv;
 
+import java.lang.invoke.MethodHandles;
 import java.math.BigDecimal;
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
@@ -23,7 +24,7 @@
  */
 public class DigitsValidatorForNumber implements ConstraintValidator<Digits, Number> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private int maxIntegerLength;
 	private int maxFractionLength;
@@ -58,10 +59,10 @@ public boolean isValid(Number num, ConstraintValidatorContext constraintValidato
 
 	private void validateParameters() {
 		if ( maxIntegerLength < 0 ) {
-			throw log.getInvalidLengthForIntegerPartException();
+			throw LOG.getInvalidLengthForIntegerPartException();
 		}
 		if ( maxFractionLength < 0 ) {
-			throw log.getInvalidLengthForFractionPartException();
+			throw LOG.getInvalidLengthForFractionPartException();
 		}
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/EmailValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/EmailValidator.java
index a4d4716ee0..8a400c7736 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/EmailValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/EmailValidator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv;
 
+import java.lang.invoke.MethodHandles;
 import java.util.regex.Matcher;
 import java.util.regex.PatternSyntaxException;
 
@@ -24,7 +25,7 @@
  */
 public class EmailValidator extends AbstractEmailValidator<Email> {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private java.util.regex.Pattern pattern;
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/PatternValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/PatternValidator.java
index 04cb22e824..0cff20b61f 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/PatternValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/PatternValidator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv;
 
+import java.lang.invoke.MethodHandles;
 import java.util.regex.Matcher;
 import java.util.regex.PatternSyntaxException;
 import javax.validation.ConstraintValidator;
@@ -22,7 +23,7 @@
  */
 public class PatternValidator implements ConstraintValidator<Pattern, CharSequence> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private java.util.regex.Pattern pattern;
 	private String escapedRegexp;
@@ -39,7 +40,7 @@ public void initialize(Pattern parameters) {
 			pattern = java.util.regex.Pattern.compile( parameters.regexp(), intFlag );
 		}
 		catch (PatternSyntaxException e) {
-			throw log.getInvalidRegularExpressionException( e );
+			throw LOG.getInvalidRegularExpressionException( e );
 		}
 
 		escapedRegexp = InterpolationHelper.escapeMessageParameter( parameters.regexp() );
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/money/DecimalMaxValidatorForMonetaryAmount.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/money/DecimalMaxValidatorForMonetaryAmount.java
index ae03def596..7e177ce485 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/money/DecimalMaxValidatorForMonetaryAmount.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/money/DecimalMaxValidatorForMonetaryAmount.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.money;
 
+import java.lang.invoke.MethodHandles;
 import java.math.BigDecimal;
 import javax.money.MonetaryAmount;
 import javax.validation.ConstraintValidator;
@@ -24,7 +25,7 @@
  */
 public class DecimalMaxValidatorForMonetaryAmount implements ConstraintValidator<DecimalMax, MonetaryAmount> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private BigDecimal maxValue;
 	private boolean inclusive;
@@ -35,7 +36,7 @@ public void initialize(DecimalMax maxValue) {
 			this.maxValue = new BigDecimal( maxValue.value() );
 		}
 		catch (NumberFormatException nfe) {
-			throw log.getInvalidBigDecimalFormatException( maxValue.value(), nfe );
+			throw LOG.getInvalidBigDecimalFormatException( maxValue.value(), nfe );
 		}
 		this.inclusive = maxValue.inclusive();
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/money/DecimalMinValidatorForMonetaryAmount.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/money/DecimalMinValidatorForMonetaryAmount.java
index 6ca435381a..e144ac83bf 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/money/DecimalMinValidatorForMonetaryAmount.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/money/DecimalMinValidatorForMonetaryAmount.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.money;
 
+import java.lang.invoke.MethodHandles;
 import java.math.BigDecimal;
 import javax.money.MonetaryAmount;
 import javax.validation.ConstraintValidator;
@@ -24,7 +25,7 @@
  */
 public class DecimalMinValidatorForMonetaryAmount implements ConstraintValidator<DecimalMin, MonetaryAmount> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private BigDecimal minValue;
 	private boolean inclusive;
@@ -35,7 +36,7 @@ public void initialize(DecimalMin minValue) {
 			this.minValue = new BigDecimal( minValue.value() );
 		}
 		catch (NumberFormatException nfe) {
-			throw log.getInvalidBigDecimalFormatException( minValue.value(), nfe );
+			throw LOG.getInvalidBigDecimalFormatException( minValue.value(), nfe );
 		}
 		this.inclusive = minValue.inclusive();
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/number/bound/decimal/AbstractDecimalMaxValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/number/bound/decimal/AbstractDecimalMaxValidator.java
index 942487d0ca..fdfe098091 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/number/bound/decimal/AbstractDecimalMaxValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/number/bound/decimal/AbstractDecimalMaxValidator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal;
 
+import java.lang.invoke.MethodHandles;
 import java.math.BigDecimal;
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
@@ -24,7 +25,7 @@
  */
 public abstract class AbstractDecimalMaxValidator<T> implements ConstraintValidator<DecimalMax, T> {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	protected BigDecimal maxValue;
 	private boolean inclusive;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/number/bound/decimal/AbstractDecimalMinValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/number/bound/decimal/AbstractDecimalMinValidator.java
index f1601306c7..d58094984a 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/number/bound/decimal/AbstractDecimalMinValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/number/bound/decimal/AbstractDecimalMinValidator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal;
 
+import java.lang.invoke.MethodHandles;
 import java.math.BigDecimal;
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
@@ -24,7 +25,7 @@
  */
 public abstract class AbstractDecimalMinValidator<T> implements ConstraintValidator<DecimalMin, T> {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	protected BigDecimal minValue;
 	private boolean inclusive;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForArray.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForArray.java
index 3f3c5af1aa..eb41754574 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForArray.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForArray.java
@@ -6,6 +6,8 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.size;
 
+import java.lang.invoke.MethodHandles;
+
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
 import javax.validation.constraints.Size;
@@ -20,7 +22,7 @@
  */
 public class SizeValidatorForArray implements ConstraintValidator<Size, Object[]> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private int min;
 	private int max;
@@ -52,13 +54,13 @@ public boolean isValid(Object[] array, ConstraintValidatorContext constraintVali
 
 	private void validateParameters() {
 		if ( min < 0 ) {
-			throw log.getMinCannotBeNegativeException();
+			throw LOG.getMinCannotBeNegativeException();
 		}
 		if ( max < 0 ) {
-			throw log.getMaxCannotBeNegativeException();
+			throw LOG.getMaxCannotBeNegativeException();
 		}
 		if ( max < min ) {
-			throw log.getLengthCannotBeNegativeException();
+			throw LOG.getLengthCannotBeNegativeException();
 		}
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForArraysOfPrimitives.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForArraysOfPrimitives.java
index 24941de8c0..60eb83f5a5 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForArraysOfPrimitives.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForArraysOfPrimitives.java
@@ -6,6 +6,8 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.size;
 
+import java.lang.invoke.MethodHandles;
+
 import javax.validation.constraints.Size;
 
 import org.hibernate.validator.internal.util.logging.Log;
@@ -18,7 +20,7 @@
  */
 public abstract class SizeValidatorForArraysOfPrimitives {
 
-	private  static final Log log = LoggerFactory.make();
+	private  static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	protected int min;
 	protected int max;
@@ -31,13 +33,13 @@ public void initialize(Size parameters) {
 
 	private void validateParameters() {
 		if ( min < 0 ) {
-			throw log.getMinCannotBeNegativeException();
+			throw LOG.getMinCannotBeNegativeException();
 		}
 		if ( max < 0 ) {
-			throw log.getMaxCannotBeNegativeException();
+			throw LOG.getMaxCannotBeNegativeException();
 		}
 		if ( max < min ) {
-			throw log.getLengthCannotBeNegativeException();
+			throw LOG.getLengthCannotBeNegativeException();
 		}
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForCharSequence.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForCharSequence.java
index 954b2c8d0b..e741650713 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForCharSequence.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForCharSequence.java
@@ -6,6 +6,8 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.size;
 
+import java.lang.invoke.MethodHandles;
+
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
 import javax.validation.constraints.Size;
@@ -22,7 +24,7 @@
  */
 public class SizeValidatorForCharSequence implements ConstraintValidator<Size, CharSequence> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private int min;
 	private int max;
@@ -54,13 +56,13 @@ public boolean isValid(CharSequence charSequence, ConstraintValidatorContext con
 
 	private void validateParameters() {
 		if ( min < 0 ) {
-			throw log.getMinCannotBeNegativeException();
+			throw LOG.getMinCannotBeNegativeException();
 		}
 		if ( max < 0 ) {
-			throw log.getMaxCannotBeNegativeException();
+			throw LOG.getMaxCannotBeNegativeException();
 		}
 		if ( max < min ) {
-			throw log.getLengthCannotBeNegativeException();
+			throw LOG.getLengthCannotBeNegativeException();
 		}
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForCollection.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForCollection.java
index cc7c2d7029..8103b361cd 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForCollection.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForCollection.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.size;
 
+import java.lang.invoke.MethodHandles;
 import java.util.Collection;
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
@@ -21,7 +22,7 @@
  */
 public class SizeValidatorForCollection implements ConstraintValidator<Size, Collection<?>> {
 
-	private  static final Log log = LoggerFactory.make();
+	private  static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private int min;
 	private int max;
@@ -54,13 +55,13 @@ public boolean isValid(Collection<?> collection, ConstraintValidatorContext cons
 
 	private void validateParameters() {
 		if ( min < 0 ) {
-			throw log.getMinCannotBeNegativeException();
+			throw LOG.getMinCannotBeNegativeException();
 		}
 		if ( max < 0 ) {
-			throw log.getMaxCannotBeNegativeException();
+			throw LOG.getMaxCannotBeNegativeException();
 		}
 		if ( max < min ) {
-			throw log.getLengthCannotBeNegativeException();
+			throw LOG.getLengthCannotBeNegativeException();
 		}
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForMap.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForMap.java
index aac0fc7350..135bcf6e8b 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForMap.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/size/SizeValidatorForMap.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.size;
 
+import java.lang.invoke.MethodHandles;
 import java.util.Map;
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
@@ -21,7 +22,7 @@
  */
 public class SizeValidatorForMap implements ConstraintValidator<Size, Map<?, ?>> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private int min;
 	private int max;
@@ -54,13 +55,13 @@ public boolean isValid(Map<?, ?> map, ConstraintValidatorContext constraintValid
 
 	private void validateParameters() {
 		if ( min < 0 ) {
-			throw log.getMaxCannotBeNegativeException();
+			throw LOG.getMaxCannotBeNegativeException();
 		}
 		if ( max < 0 ) {
-			throw log.getMaxCannotBeNegativeException();
+			throw LOG.getMaxCannotBeNegativeException();
 		}
 		if ( max < min ) {
-			throw log.getLengthCannotBeNegativeException();
+			throw LOG.getLengthCannotBeNegativeException();
 		}
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/AbstractEpochBasedTimeValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/AbstractEpochBasedTimeValidator.java
index ae6d2dd150..77bfb004e2 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/AbstractEpochBasedTimeValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/AbstractEpochBasedTimeValidator.java
@@ -7,12 +7,16 @@
 package org.hibernate.validator.internal.constraintvalidators.bv.time;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.time.Clock;
+import java.time.Duration;
 
 import javax.validation.ClockProvider;
-import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
+import javax.validation.metadata.ConstraintDescriptor;
 
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidator;
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 
@@ -22,32 +26,42 @@
  * @author Alaa Nassef
  * @author Guillaume Smet
  */
-public abstract class AbstractEpochBasedTimeValidator<C extends Annotation, T> implements ConstraintValidator<C, T> {
+public abstract class AbstractEpochBasedTimeValidator<C extends Annotation, T> implements HibernateConstraintValidator<C, T> {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
-	@Override
-	public boolean isValid(T value, ConstraintValidatorContext context) {
-		// null values are valid
-		if ( value == null ) {
-			return true;
-		}
-
-		Clock reference;
+	protected Clock referenceClock;
 
+	@Override
+	public void initialize(ConstraintDescriptor<C> constraintDescriptor, HibernateConstraintValidatorInitializationContext initializationContext) {
 		try {
-			ClockProvider clockProvider = context.getClockProvider();
-			reference = clockProvider.getClock();
+			this.referenceClock  = Clock.offset(
+					initializationContext.getClockProvider().getClock(),
+					getEffectiveTemporalValidationTolerance( initializationContext.getTemporalValidationTolerance() )
+			);
 		}
 		catch (Exception e) {
 			throw LOG.getUnableToGetCurrentTimeFromClockProvider( e );
 		}
+	}
 
-		int result = Long.compare( getEpochMillis( value, reference ), reference.millis() );
+	@Override
+	public boolean isValid(T value, ConstraintValidatorContext context) {
+		// null values are valid
+		if ( value == null ) {
+			return true;
+		}
+
+		int result = Long.compare( getEpochMillis( value, referenceClock ), referenceClock.millis() );
 
 		return isValid( result );
 	}
 
+	/**
+	 * Returns the temporal validation tolerance to apply.
+	 */
+	protected abstract Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance);
+
 	/**
 	 * Returns the millisecond based instant measured from Epoch. In the case of partials requiring a time reference, we
 	 * use the {@link Clock} provided by the {@link ClockProvider}.
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/AbstractInstantBasedTimeValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/AbstractInstantBasedTimeValidator.java
index fe2ba382b4..1a4addbfd9 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/AbstractInstantBasedTimeValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/AbstractInstantBasedTimeValidator.java
@@ -7,13 +7,16 @@
 package org.hibernate.validator.internal.constraintvalidators.bv.time;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.time.Clock;
+import java.time.Duration;
 import java.time.Instant;
 
-import javax.validation.ClockProvider;
-import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
+import javax.validation.metadata.ConstraintDescriptor;
 
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidator;
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 
@@ -23,32 +26,42 @@
  * @author Alaa Nassef
  * @author Guillaume Smet
  */
-public abstract class AbstractInstantBasedTimeValidator<C extends Annotation, T> implements ConstraintValidator<C, T> {
+public abstract class AbstractInstantBasedTimeValidator<C extends Annotation, T> implements HibernateConstraintValidator<C, T> {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
-	@Override
-	public boolean isValid(T value, ConstraintValidatorContext context) {
-		// null values are valid
-		if ( value == null ) {
-			return true;
-		}
-
-		Clock reference;
+	protected Clock referenceClock;
 
+	@Override
+	public void initialize(ConstraintDescriptor<C> constraintDescriptor, HibernateConstraintValidatorInitializationContext initializationContext) {
 		try {
-			ClockProvider clockProvider = context.getClockProvider();
-			reference = clockProvider.getClock();
+			this.referenceClock  = Clock.offset(
+					initializationContext.getClockProvider().getClock(),
+					getEffectiveTemporalValidationTolerance( initializationContext.getTemporalValidationTolerance() )
+			);
 		}
 		catch (Exception e) {
 			throw LOG.getUnableToGetCurrentTimeFromClockProvider( e );
 		}
+	}
 
-		int result = getInstant( value ).compareTo( reference.instant() );
+	@Override
+	public boolean isValid(T value, ConstraintValidatorContext context) {
+		// null values are valid
+		if ( value == null ) {
+			return true;
+		}
+
+		int result = getInstant( value ).compareTo( referenceClock.instant() );
 
 		return isValid( result );
 	}
 
+	/**
+	 * Returns the temporal validation tolerance to apply.
+	 */
+	protected abstract Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance);
+
 	/**
 	 * Returns the {@link Instant} measured from Epoch.
 	 */
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/AbstractJavaTimeValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/AbstractJavaTimeValidator.java
index f9eaa16afa..9d1c3de214 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/AbstractJavaTimeValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/AbstractJavaTimeValidator.java
@@ -7,13 +7,17 @@
 package org.hibernate.validator.internal.constraintvalidators.bv.time;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.time.Clock;
+import java.time.Duration;
 import java.time.temporal.TemporalAccessor;
 
 import javax.validation.ClockProvider;
-import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
+import javax.validation.metadata.ConstraintDescriptor;
 
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidator;
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 
@@ -23,32 +27,43 @@
  * @author Alaa Nassef
  * @author Guillaume Smet
  */
-public abstract class AbstractJavaTimeValidator<C extends Annotation, T extends TemporalAccessor & Comparable<? super T>> implements ConstraintValidator<C, T> {
+public abstract class AbstractJavaTimeValidator<C extends Annotation, T extends TemporalAccessor & Comparable<? super T>>
+		implements HibernateConstraintValidator<C, T> {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
-	@Override
-	public boolean isValid(T value, ConstraintValidatorContext context) {
-		// null values are valid
-		if ( value == null ) {
-			return true;
-		}
-
-		Clock reference;
+	protected Clock referenceClock;
 
+	@Override
+	public void initialize(ConstraintDescriptor<C> constraintDescriptor, HibernateConstraintValidatorInitializationContext initializationContext) {
 		try {
-			ClockProvider clockProvider = context.getClockProvider();
-			reference = clockProvider.getClock();
+			this.referenceClock  = Clock.offset(
+					initializationContext.getClockProvider().getClock(),
+					getEffectiveTemporalValidationTolerance( initializationContext.getTemporalValidationTolerance() )
+			);
 		}
 		catch (Exception e) {
 			throw LOG.getUnableToGetCurrentTimeFromClockProvider( e );
 		}
+	}
 
-		int result = value.compareTo( getReferenceValue( reference ) );
+	@Override
+	public boolean isValid(T value, ConstraintValidatorContext context) {
+		// null values are valid
+		if ( value == null ) {
+			return true;
+		}
+
+		int result = value.compareTo( getReferenceValue( referenceClock ) );
 
 		return isValid( result );
 	}
 
+	/**
+	 * Returns the temporal validation tolerance to apply.
+	 */
+	protected abstract Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance);
+
 	/**
 	 * Returns an object of the validated type corresponding to the current time reference as provided by the
 	 * {@link ClockProvider}.
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/future/AbstractFutureEpochBasedValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/future/AbstractFutureEpochBasedValidator.java
index 32e2245bf6..f3319262ed 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/future/AbstractFutureEpochBasedValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/future/AbstractFutureEpochBasedValidator.java
@@ -6,6 +6,8 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.time.future;
 
+import java.time.Duration;
+
 import javax.validation.constraints.Future;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.time.AbstractEpochBasedTimeValidator;
@@ -23,4 +25,8 @@ protected boolean isValid(int result) {
 		return result > 0;
 	}
 
+	@Override
+	protected Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance) {
+		return absoluteTemporalValidationTolerance.negated();
+	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/future/AbstractFutureInstantBasedValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/future/AbstractFutureInstantBasedValidator.java
index f58ee8ec6e..587b2d02ad 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/future/AbstractFutureInstantBasedValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/future/AbstractFutureInstantBasedValidator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.time.future;
 
+import java.time.Duration;
 import java.time.Instant;
 
 import javax.validation.constraints.Future;
@@ -25,4 +26,8 @@ protected boolean isValid(int result) {
 		return result > 0;
 	}
 
+	@Override
+	protected Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance) {
+		return absoluteTemporalValidationTolerance.negated();
+	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/future/AbstractFutureJavaTimeValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/future/AbstractFutureJavaTimeValidator.java
index 934283c0ad..f2777b1212 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/future/AbstractFutureJavaTimeValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/future/AbstractFutureJavaTimeValidator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.time.future;
 
+import java.time.Duration;
 import java.time.temporal.TemporalAccessor;
 
 import javax.validation.constraints.Future;
@@ -25,4 +26,8 @@ protected boolean isValid(int result) {
 		return result > 0;
 	}
 
+	@Override
+	protected Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance) {
+		return absoluteTemporalValidationTolerance.negated();
+	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/futureorpresent/AbstractFutureOrPresentEpochBasedValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/futureorpresent/AbstractFutureOrPresentEpochBasedValidator.java
index 5647e79de1..df78d7ed0a 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/futureorpresent/AbstractFutureOrPresentEpochBasedValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/futureorpresent/AbstractFutureOrPresentEpochBasedValidator.java
@@ -6,6 +6,8 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent;
 
+import java.time.Duration;
+
 import javax.validation.constraints.FutureOrPresent;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.time.AbstractEpochBasedTimeValidator;
@@ -23,4 +25,8 @@ protected boolean isValid(int result) {
 		return result >= 0;
 	}
 
+	@Override
+	protected Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance) {
+		return absoluteTemporalValidationTolerance.negated();
+	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/futureorpresent/AbstractFutureOrPresentInstantBasedValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/futureorpresent/AbstractFutureOrPresentInstantBasedValidator.java
index 43518a33b4..37c6d875bc 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/futureorpresent/AbstractFutureOrPresentInstantBasedValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/futureorpresent/AbstractFutureOrPresentInstantBasedValidator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent;
 
+import java.time.Duration;
 import java.time.Instant;
 
 import javax.validation.constraints.FutureOrPresent;
@@ -25,4 +26,8 @@ protected boolean isValid(int result) {
 		return result >= 0;
 	}
 
+	@Override
+	protected Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance) {
+		return absoluteTemporalValidationTolerance.negated();
+	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/futureorpresent/AbstractFutureOrPresentJavaTimeValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/futureorpresent/AbstractFutureOrPresentJavaTimeValidator.java
index 41cc64ff5b..1a080ffd09 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/futureorpresent/AbstractFutureOrPresentJavaTimeValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/futureorpresent/AbstractFutureOrPresentJavaTimeValidator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent;
 
+import java.time.Duration;
 import java.time.temporal.TemporalAccessor;
 
 import javax.validation.constraints.FutureOrPresent;
@@ -25,4 +26,8 @@ protected boolean isValid(int result) {
 		return result >= 0;
 	}
 
+	@Override
+	protected Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance) {
+		return absoluteTemporalValidationTolerance.negated();
+	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/past/AbstractPastEpochBasedValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/past/AbstractPastEpochBasedValidator.java
index f7f0a4451c..4f75486235 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/past/AbstractPastEpochBasedValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/past/AbstractPastEpochBasedValidator.java
@@ -6,6 +6,8 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.time.past;
 
+import java.time.Duration;
+
 import javax.validation.constraints.Past;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.time.AbstractEpochBasedTimeValidator;
@@ -23,4 +25,8 @@ protected boolean isValid(int result) {
 		return result < 0;
 	}
 
+	@Override
+	protected Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance) {
+		return absoluteTemporalValidationTolerance;
+	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/past/AbstractPastInstantBasedValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/past/AbstractPastInstantBasedValidator.java
index f58488ee1b..e421dced63 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/past/AbstractPastInstantBasedValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/past/AbstractPastInstantBasedValidator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.time.past;
 
+import java.time.Duration;
 import java.time.Instant;
 
 import javax.validation.constraints.Past;
@@ -25,4 +26,8 @@ protected boolean isValid(int result) {
 		return result < 0;
 	}
 
+	@Override
+	protected Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance) {
+		return absoluteTemporalValidationTolerance;
+	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/past/AbstractPastJavaTimeValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/past/AbstractPastJavaTimeValidator.java
index 5c96721aab..f60cb6452b 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/past/AbstractPastJavaTimeValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/past/AbstractPastJavaTimeValidator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.time.past;
 
+import java.time.Duration;
 import java.time.temporal.TemporalAccessor;
 
 import javax.validation.constraints.Past;
@@ -25,4 +26,8 @@ protected boolean isValid(int result) {
 		return result < 0;
 	}
 
+	@Override
+	protected Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance) {
+		return absoluteTemporalValidationTolerance;
+	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/pastorpresent/AbstractPastOrPresentEpochBasedValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/pastorpresent/AbstractPastOrPresentEpochBasedValidator.java
index 729545403f..b4c0e001a6 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/pastorpresent/AbstractPastOrPresentEpochBasedValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/pastorpresent/AbstractPastOrPresentEpochBasedValidator.java
@@ -6,6 +6,8 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent;
 
+import java.time.Duration;
+
 import javax.validation.constraints.PastOrPresent;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.time.AbstractEpochBasedTimeValidator;
@@ -23,4 +25,8 @@ protected boolean isValid(int result) {
 		return result <= 0;
 	}
 
+	@Override
+	protected Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance) {
+		return absoluteTemporalValidationTolerance;
+	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/pastorpresent/AbstractPastOrPresentInstantBasedValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/pastorpresent/AbstractPastOrPresentInstantBasedValidator.java
index cbfaed456b..dc1f4c8d04 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/pastorpresent/AbstractPastOrPresentInstantBasedValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/pastorpresent/AbstractPastOrPresentInstantBasedValidator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent;
 
+import java.time.Duration;
 import java.time.Instant;
 
 import javax.validation.constraints.PastOrPresent;
@@ -25,4 +26,8 @@ protected boolean isValid(int result) {
 		return result <= 0;
 	}
 
+	@Override
+	protected Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance) {
+		return absoluteTemporalValidationTolerance;
+	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/pastorpresent/AbstractPastOrPresentJavaTimeValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/pastorpresent/AbstractPastOrPresentJavaTimeValidator.java
index cd4d689bed..4359df9471 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/pastorpresent/AbstractPastOrPresentJavaTimeValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/bv/time/pastorpresent/AbstractPastOrPresentJavaTimeValidator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent;
 
+import java.time.Duration;
 import java.time.temporal.TemporalAccessor;
 
 import javax.validation.constraints.PastOrPresent;
@@ -26,4 +27,8 @@ protected boolean isValid(int result) {
 		return result <= 0;
 	}
 
+	@Override
+	protected Duration getEffectiveTemporalValidationTolerance(Duration absoluteTemporalValidationTolerance) {
+		return absoluteTemporalValidationTolerance;
+	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/AbstractScriptAssertValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/AbstractScriptAssertValidator.java
index 2c0bc6613b..f4af49c14e 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/AbstractScriptAssertValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/AbstractScriptAssertValidator.java
@@ -7,11 +7,11 @@
 package org.hibernate.validator.internal.constraintvalidators.hv;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 
-import javax.validation.ConstraintValidator;
-import javax.validation.ConstraintValidatorContext;
-
-import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorContext;
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidator;
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext;
+import org.hibernate.validator.internal.engine.messageinterpolation.util.InterpolationHelper;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 import org.hibernate.validator.spi.scripting.ScriptEvaluator;
@@ -20,33 +20,26 @@
 /**
  * @author Marko Bekhta
  */
-public abstract class AbstractScriptAssertValidator<A extends Annotation, T> implements ConstraintValidator<A, T> {
+public abstract class AbstractScriptAssertValidator<A extends Annotation, T> implements HibernateConstraintValidator<A, T> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	protected String languageName;
 	protected String script;
 	protected String escapedScript;
-	protected volatile ScriptAssertContext scriptAssertContext;
+	protected ScriptAssertContext scriptAssertContext;
+
+	protected void initialize(String languageName, String script, HibernateConstraintValidatorInitializationContext initializationContext) {
+		this.script = script;
+		this.languageName = languageName;
+		this.escapedScript = InterpolationHelper.escapeMessageParameter( script );
 
-	protected ScriptAssertContext getScriptAssertContext(ConstraintValidatorContext constraintValidatorContext) {
-		if ( scriptAssertContext == null ) {
-			synchronized ( this ) {
-				if ( scriptAssertContext == null ) {
-					ScriptEvaluator scriptEvaluator = null;
-					if ( constraintValidatorContext instanceof HibernateConstraintValidatorContext ) {
-						try {
-							scriptEvaluator = constraintValidatorContext.unwrap( HibernateConstraintValidatorContext.class )
-									.getScriptEvaluatorForLanguage( languageName );
-						}
-						catch (ScriptEvaluatorNotFoundException e) {
-							throw log.getCreationOfScriptExecutorFailedException( languageName, e );
-						}
-					}
-					scriptAssertContext = new ScriptAssertContext( script, scriptEvaluator );
-				}
-			}
+		try {
+			ScriptEvaluator scriptEvaluator = initializationContext.getScriptEvaluatorForLanguage( languageName );
+			scriptAssertContext = new ScriptAssertContext( script, scriptEvaluator );
+		}
+		catch (ScriptEvaluatorNotFoundException e) {
+			throw LOG.getCreationOfScriptExecutorFailedException( languageName, e );
 		}
-		return scriptAssertContext;
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/CodePointLengthValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/CodePointLengthValidator.java
index 61a6e9bf07..038bd5ac03 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/CodePointLengthValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/CodePointLengthValidator.java
@@ -10,6 +10,8 @@
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 
+import java.lang.invoke.MethodHandles;
+
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
 
@@ -21,7 +23,7 @@
  */
 public class CodePointLengthValidator implements ConstraintValidator<CodePointLength, CharSequence> {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private int min;
 	private int max;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/LengthValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/LengthValidator.java
index a89ae6d772..87979bac32 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/LengthValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/LengthValidator.java
@@ -6,6 +6,8 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.hv;
 
+import java.lang.invoke.MethodHandles;
+
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
 
@@ -21,7 +23,7 @@
  */
 public class LengthValidator implements ConstraintValidator<Length, CharSequence> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private int min;
 	private int max;
@@ -44,13 +46,13 @@ public boolean isValid(CharSequence value, ConstraintValidatorContext constraint
 
 	private void validateParameters() {
 		if ( min < 0 ) {
-			throw log.getMinCannotBeNegativeException();
+			throw LOG.getMinCannotBeNegativeException();
 		}
 		if ( max < 0 ) {
-			throw log.getMaxCannotBeNegativeException();
+			throw LOG.getMaxCannotBeNegativeException();
 		}
 		if ( max < min ) {
-			throw log.getLengthCannotBeNegativeException();
+			throw LOG.getLengthCannotBeNegativeException();
 		}
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/Mod10CheckValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/Mod10CheckValidator.java
index b7dc178c8f..25c66dc1b5 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/Mod10CheckValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/Mod10CheckValidator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.hv;
 
+import java.lang.invoke.MethodHandles;
 import java.util.List;
 import javax.validation.ConstraintValidator;
 
@@ -27,7 +28,7 @@
 public class Mod10CheckValidator extends ModCheckBase
 		implements ConstraintValidator<Mod10Check, CharSequence> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	/**
 	 * Multiplier to be used by odd digits on Mod10 algorithm
@@ -51,10 +52,10 @@ public void initialize(Mod10Check constraintAnnotation) {
 		this.weight = constraintAnnotation.weight();
 
 		if ( this.multiplier < 0 ) {
-			throw log.getMultiplierCannotBeNegativeException( this.multiplier );
+			throw LOG.getMultiplierCannotBeNegativeException( this.multiplier );
 		}
 		if ( this.weight < 0 ) {
-			throw log.getWeightCannotBeNegativeException( this.weight );
+			throw LOG.getWeightCannotBeNegativeException( this.weight );
 		}
 	}
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/Mod11CheckValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/Mod11CheckValidator.java
index 3ad8b01f79..f58d9f22fc 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/Mod11CheckValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/Mod11CheckValidator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.hv;
 
+import java.lang.invoke.MethodHandles;
 import java.util.Collections;
 import java.util.List;
 import javax.validation.ConstraintValidator;
@@ -28,7 +29,7 @@
 public class Mod11CheckValidator extends ModCheckBase
 		implements ConstraintValidator<Mod11Check, CharSequence> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private boolean reverseOrder;
 
@@ -95,11 +96,11 @@ public void initialize(
 		this.customWeights = customWeights;
 
 		if ( !Character.isLetterOrDigit( this.treatCheck10As ) ) {
-			throw log.getTreatCheckAsIsNotADigitNorALetterException( this.treatCheck10As );
+			throw LOG.getTreatCheckAsIsNotADigitNorALetterException( this.treatCheck10As );
 		}
 
 		if ( !Character.isLetterOrDigit( this.treatCheck11As ) ) {
-			throw log.getTreatCheckAsIsNotADigitNorALetterException( this.treatCheck11As );
+			throw LOG.getTreatCheckAsIsNotADigitNorALetterException( this.treatCheck11As );
 		}
 	}
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ModCheckBase.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ModCheckBase.java
index 9ed3f798fc..db3c654513 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ModCheckBase.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ModCheckBase.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.constraintvalidators.hv;
 
+import java.lang.invoke.MethodHandles;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.regex.Pattern;
@@ -25,7 +26,7 @@
  */
 public abstract class ModCheckBase {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private static final Pattern NUMBERS_ONLY_REGEXP = Pattern.compile( "[^0-9]" );
 
@@ -101,7 +102,7 @@ protected int extractDigit(char value) throws NumberFormatException {
 			return Character.digit( value, DEC_RADIX );
 		}
 		else {
-			throw log.getCharacterIsNotADigitException( value );
+			throw LOG.getCharacterIsNotADigitException( value );
 		}
 	}
 
@@ -125,19 +126,19 @@ private List<Integer> extractDigits(final String value) throws NumberFormatExcep
 
 	private boolean validateOptions() {
 		if ( this.startIndex < 0 ) {
-			throw log.getStartIndexCannotBeNegativeException( this.startIndex );
+			throw LOG.getStartIndexCannotBeNegativeException( this.startIndex );
 		}
 
 		if ( this.endIndex < 0 ) {
-			throw log.getEndIndexCannotBeNegativeException( this.endIndex );
+			throw LOG.getEndIndexCannotBeNegativeException( this.endIndex );
 		}
 
 		if ( this.startIndex > this.endIndex ) {
-			throw log.getInvalidRangeException( this.startIndex, this.endIndex );
+			throw LOG.getInvalidRangeException( this.startIndex, this.endIndex );
 		}
 
 		if ( this.checkDigitIndex > 0 && this.startIndex <= this.checkDigitIndex && this.endIndex > this.checkDigitIndex ) {
-			throw log.getInvalidCheckDigitException( this.startIndex, this.endIndex );
+			throw LOG.getInvalidCheckDigitException( this.startIndex, this.endIndex );
 		}
 
 		return true;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ParameterScriptAssertValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ParameterScriptAssertValidator.java
index 0d969e02b6..8bcf798283 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ParameterScriptAssertValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ParameterScriptAssertValidator.java
@@ -15,11 +15,12 @@
 import javax.validation.ConstraintValidatorContext;
 import javax.validation.constraintvalidation.SupportedValidationTarget;
 import javax.validation.constraintvalidation.ValidationTarget;
+import javax.validation.metadata.ConstraintDescriptor;
 
 import org.hibernate.validator.constraints.ParameterScriptAssert;
 import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorContext;
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext;
 import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorContextImpl;
-import org.hibernate.validator.internal.engine.messageinterpolation.util.InterpolationHelper;
 import org.hibernate.validator.internal.util.Contracts;
 
 /**
@@ -33,11 +34,10 @@
 public class ParameterScriptAssertValidator extends AbstractScriptAssertValidator<ParameterScriptAssert, Object[]> {
 
 	@Override
-	public void initialize(ParameterScriptAssert constraintAnnotation) {
+	public void initialize(ConstraintDescriptor<ParameterScriptAssert> constraintDescriptor, HibernateConstraintValidatorInitializationContext initializationContext) {
+		ParameterScriptAssert constraintAnnotation = constraintDescriptor.getAnnotation();
 		validateParameters( constraintAnnotation );
-		this.languageName = constraintAnnotation.lang();
-		this.script = constraintAnnotation.script();
-		this.escapedScript = InterpolationHelper.escapeMessageParameter( constraintAnnotation.script() );
+		initialize( constraintAnnotation.lang(), constraintAnnotation.script(), initializationContext );
 	}
 
 	@Override
@@ -51,7 +51,7 @@ public boolean isValid(Object[] arguments, ConstraintValidatorContext constraint
 
 		Map<String, Object> bindings = getBindings( arguments, parameterNames );
 
-		return getScriptAssertContext( constraintValidatorContext ).evaluateScriptAssertExpression( bindings );
+		return scriptAssertContext.evaluateScriptAssertExpression( bindings );
 	}
 
 	private Map<String, Object> getBindings(Object[] arguments, List<String> parameterNames) {
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ScriptAssertContext.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ScriptAssertContext.java
index cf625e2a7e..d1883615ff 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ScriptAssertContext.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ScriptAssertContext.java
@@ -8,6 +8,7 @@
 
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashMap;
 
+import java.lang.invoke.MethodHandles;
 import java.util.Map;
 
 import org.hibernate.validator.internal.util.logging.Log;
@@ -24,7 +25,7 @@
  */
 class ScriptAssertContext {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final String script;
 	private final ScriptEvaluator scriptEvaluator;
@@ -48,7 +49,7 @@ public boolean evaluateScriptAssertExpression(Map<String, Object> bindings) {
 			result = scriptEvaluator.evaluate( script, bindings );
 		}
 		catch (ScriptEvaluationException e) {
-			throw log.getErrorDuringScriptExecutionException( script, e );
+			throw LOG.getErrorDuringScriptExecutionException( script, e );
 		}
 
 		return handleResult( result );
@@ -56,11 +57,11 @@ public boolean evaluateScriptAssertExpression(Map<String, Object> bindings) {
 
 	private boolean handleResult(Object evaluationResult) {
 		if ( evaluationResult == null ) {
-			throw log.getScriptMustReturnTrueOrFalseException( script );
+			throw LOG.getScriptMustReturnTrueOrFalseException( script );
 		}
 
 		if ( !( evaluationResult instanceof Boolean ) ) {
-			throw log.getScriptMustReturnTrueOrFalseException(
+			throw LOG.getScriptMustReturnTrueOrFalseException(
 					script,
 					evaluationResult,
 					evaluationResult.getClass().getCanonicalName()
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ScriptAssertValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ScriptAssertValidator.java
index 57918893a9..321a12df9b 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ScriptAssertValidator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/ScriptAssertValidator.java
@@ -9,10 +9,11 @@
 import static org.hibernate.validator.internal.util.logging.Messages.MESSAGES;
 
 import javax.validation.ConstraintValidatorContext;
+import javax.validation.metadata.ConstraintDescriptor;
 
 import org.hibernate.validator.constraints.ScriptAssert;
 import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorContext;
-import org.hibernate.validator.internal.engine.messageinterpolation.util.InterpolationHelper;
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext;
 import org.hibernate.validator.internal.util.Contracts;
 
 /**
@@ -23,7 +24,6 @@
  * @author Kevin Pollet &lt;kevin.pollet@serli.com&gt; (C) 2011 SERLI
  * @author Marko Bekhta
  * @author Guillaume Smet
- * @author Marko Bekhta
  */
 public class ScriptAssertValidator extends AbstractScriptAssertValidator<ScriptAssert, Object> {
 
@@ -32,15 +32,14 @@ public class ScriptAssertValidator extends AbstractScriptAssertValidator<ScriptA
 	private String message;
 
 	@Override
-	public void initialize(ScriptAssert constraintAnnotation) {
+	public void initialize(ConstraintDescriptor<ScriptAssert> constraintDescriptor, HibernateConstraintValidatorInitializationContext initializationContext) {
+		ScriptAssert constraintAnnotation = constraintDescriptor.getAnnotation();
 		validateParameters( constraintAnnotation );
+		initialize( constraintAnnotation.lang(), constraintAnnotation.script(), initializationContext );
 
 		this.alias = constraintAnnotation.alias();
 		this.reportOn = constraintAnnotation.reportOn();
 		this.message = constraintAnnotation.message();
-		this.languageName = constraintAnnotation.lang();
-		this.script = constraintAnnotation.script();
-		this.escapedScript = InterpolationHelper.escapeMessageParameter( constraintAnnotation.script() );
 	}
 
 	@Override
@@ -49,7 +48,7 @@ public boolean isValid(Object value, ConstraintValidatorContext constraintValida
 			constraintValidatorContext.unwrap( HibernateConstraintValidatorContext.class ).addMessageParameter( "script", escapedScript );
 		}
 
-		boolean validationResult = getScriptAssertContext( constraintValidatorContext ).evaluateScriptAssertExpression( value, alias );
+		boolean validationResult = scriptAssertContext.evaluateScriptAssertExpression( value, alias );
 
 		if ( !validationResult && !reportOn.isEmpty() ) {
 			constraintValidatorContext.disableDefaultConstraintViolation();
diff --git a/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/UniqueElementsValidator.java b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/UniqueElementsValidator.java
new file mode 100644
index 0000000000..2e8a8cfb33
--- /dev/null
+++ b/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/UniqueElementsValidator.java
@@ -0,0 +1,66 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.internal.constraintvalidators.hv;
+
+import static java.util.stream.Collectors.toList;
+
+import java.util.Collection;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import javax.validation.ConstraintValidator;
+import javax.validation.ConstraintValidatorContext;
+
+import org.hibernate.validator.constraints.UniqueElements;
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorContext;
+import org.hibernate.validator.internal.util.CollectionHelper;
+
+/**
+ * Validates that the provided collection only contains unique elements, i.e. that we can't find 2 equal elements in the
+ * collection.
+ * <p>
+ * Uniqueness is defined by the {@code equals()} method of the objects being compared.
+ *
+ * @author Tadhg Pearson
+ * @author Guillaume Smet
+ */
+public class UniqueElementsValidator implements ConstraintValidator<UniqueElements, Collection<?>> {
+
+	/**
+	 * @param collection the collection to validate
+	 * @param constraintValidatorContext context in which the constraint is evaluated
+	 *
+	 * @return true if the input collection is null or does not contain duplicate elements
+	 */
+	@Override
+	public boolean isValid(Collection<?> collection, ConstraintValidatorContext constraintValidatorContext) {
+		if ( collection == null || collection.size() < 2 ) {
+			return true;
+		}
+
+		List<Object> duplicates = findDuplicates( collection );
+
+		if ( duplicates.isEmpty() ) {
+			return true;
+		}
+
+		if ( constraintValidatorContext instanceof HibernateConstraintValidatorContext ) {
+			constraintValidatorContext.unwrap( HibernateConstraintValidatorContext.class )
+					.addMessageParameter( "duplicates", duplicates.stream().map( String::valueOf ).collect( Collectors.joining( ", " ) ) )
+					.withDynamicPayload( CollectionHelper.toImmutableList( duplicates ) );
+		}
+
+		return false;
+	}
+
+	private List<Object> findDuplicates(Collection<?> collection) {
+		Set<Object> uniqueElements = CollectionHelper.newHashSet( collection.size() );
+		return collection.stream().filter( o -> !uniqueElements.add( o ) )
+				.collect( toList() );
+	}
+}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/ConfigurationImpl.java b/engine/src/main/java/org/hibernate/validator/internal/engine/ConfigurationImpl.java
index 27c6dea855..e0e97fc117 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/ConfigurationImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/ConfigurationImpl.java
@@ -12,8 +12,10 @@
 import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.lang.invoke.MethodHandles;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
+import java.time.Duration;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -69,7 +71,7 @@ public class ConfigurationImpl implements HibernateValidatorConfiguration, Confi
 		Version.touch();
 	}
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final ResourceBundleLocator defaultResourceBundleLocator;
 
@@ -99,6 +101,7 @@ public class ConfigurationImpl implements HibernateValidatorConfiguration, Confi
 	private final MethodValidationConfiguration.Builder methodValidationConfigurationBuilder = new MethodValidationConfiguration.Builder();
 	private boolean traversableResolverResultCacheEnabled = true;
 	private ScriptEvaluatorFactory scriptEvaluatorFactory;
+	private Duration temporalValidationTolerance;
 
 	public ConfigurationImpl(BootstrapState state) {
 		this();
@@ -113,7 +116,7 @@ public ConfigurationImpl(BootstrapState state) {
 	public ConfigurationImpl(ValidationProvider<?> provider) {
 		this();
 		if ( provider == null ) {
-			throw log.getInconsistentConfigurationException();
+			throw LOG.getInconsistentConfigurationException();
 		}
 		this.providerResolver = null;
 		validationBootstrapParameters.setProvider( provider );
@@ -139,9 +142,9 @@ public final HibernateValidatorConfiguration ignoreXmlConfiguration() {
 
 	@Override
 	public final ConfigurationImpl messageInterpolator(MessageInterpolator interpolator) {
-		if ( log.isDebugEnabled() ) {
+		if ( LOG.isDebugEnabled() ) {
 			if ( interpolator != null ) {
-				log.debug( "Setting custom MessageInterpolator of type " + interpolator.getClass().getName() );
+				LOG.debug( "Setting custom MessageInterpolator of type " + interpolator.getClass().getName() );
 			}
 		}
 		this.validationBootstrapParameters.setMessageInterpolator( interpolator );
@@ -150,9 +153,9 @@ public final ConfigurationImpl messageInterpolator(MessageInterpolator interpola
 
 	@Override
 	public final ConfigurationImpl traversableResolver(TraversableResolver resolver) {
-		if ( log.isDebugEnabled() ) {
+		if ( LOG.isDebugEnabled() ) {
 			if ( resolver != null ) {
-				log.debug( "Setting custom TraversableResolver of type " + resolver.getClass().getName() );
+				LOG.debug( "Setting custom TraversableResolver of type " + resolver.getClass().getName() );
 			}
 		}
 		this.validationBootstrapParameters.setTraversableResolver( resolver );
@@ -171,9 +174,9 @@ public final boolean isTraversableResolverResultCacheEnabled() {
 
 	@Override
 	public final ConfigurationImpl constraintValidatorFactory(ConstraintValidatorFactory constraintValidatorFactory) {
-		if ( log.isDebugEnabled() ) {
+		if ( LOG.isDebugEnabled() ) {
 			if ( constraintValidatorFactory != null ) {
-				log.debug(
+				LOG.debug(
 						"Setting custom ConstraintValidatorFactory of type " + constraintValidatorFactory.getClass()
 								.getName()
 				);
@@ -185,9 +188,9 @@ public final ConfigurationImpl constraintValidatorFactory(ConstraintValidatorFac
 
 	@Override
 	public HibernateValidatorConfiguration parameterNameProvider(ParameterNameProvider parameterNameProvider) {
-		if ( log.isDebugEnabled() ) {
+		if ( LOG.isDebugEnabled() ) {
 			if ( parameterNameProvider != null ) {
-				log.debug(
+				LOG.debug(
 						"Setting custom ParameterNameProvider of type " + parameterNameProvider.getClass()
 								.getName()
 				);
@@ -199,9 +202,9 @@ public HibernateValidatorConfiguration parameterNameProvider(ParameterNameProvid
 
 	@Override
 	public HibernateValidatorConfiguration clockProvider(ClockProvider clockProvider) {
-		if ( log.isDebugEnabled() ) {
+		if ( LOG.isDebugEnabled() ) {
 			if ( clockProvider != null ) {
-				log.debug( "Setting custom ClockProvider of type " + clockProvider.getClass().getName() );
+				LOG.debug( "Setting custom ClockProvider of type " + clockProvider.getClass().getName() );
 			}
 		}
 		this.validationBootstrapParameters.setClockProvider( clockProvider );
@@ -216,11 +219,11 @@ public HibernateValidatorConfiguration addValueExtractor(ValueExtractor<?> extra
 		ValueExtractorDescriptor previous = valueExtractorDescriptors.put( descriptor.getKey(), descriptor );
 
 		if ( previous != null ) {
-			throw log.getValueExtractorForTypeAndTypeUseAlreadyPresentException( extractor, previous.getValueExtractor() );
+			throw LOG.getValueExtractorForTypeAndTypeUseAlreadyPresentException( extractor, previous.getValueExtractor() );
 		}
 
-		if ( log.isDebugEnabled() ) {
-			log.debug( "Adding value extractor " + extractor );
+		if ( LOG.isDebugEnabled() ) {
+			LOG.debug( "Adding value extractor " + extractor );
 		}
 
 		return this;
@@ -274,6 +277,14 @@ public HibernateValidatorConfiguration scriptEvaluatorFactory(ScriptEvaluatorFac
 		return this;
 	}
 
+	@Override
+	public HibernateValidatorConfiguration temporalValidationTolerance(Duration temporalValidationTolerance) {
+		Contracts.assertNotNull( temporalValidationTolerance, MESSAGES.parameterMustNotBeNull( "temporalValidationTolerance" ) );
+
+		this.temporalValidationTolerance = temporalValidationTolerance.abs();
+		return this;
+	}
+
 	public boolean isAllowParallelMethodsDefineParameterConstraints() {
 		return this.methodValidationConfigurationBuilder.isAllowParallelMethodsDefineParameterConstraints();
 	}
@@ -335,7 +346,7 @@ public final ValidatorFactory buildValidatorFactory() {
 						}
 					}
 					if ( factory == null ) {
-						throw log.getUnableToFindProviderException( providerClass );
+						throw LOG.getUnableToFindProviderException( providerClass );
 					}
 				}
 				else {
@@ -352,7 +363,7 @@ public final ValidatorFactory buildValidatorFactory() {
 					in.close();
 				}
 				catch (IOException io) {
-					log.unableToCloseInputStream();
+					LOG.unableToCloseInputStream();
 				}
 			}
 		}
@@ -422,6 +433,10 @@ public ScriptEvaluatorFactory getScriptEvaluatorFactory() {
 		return scriptEvaluatorFactory;
 	}
 
+	public Duration getTemporalValidationTolerance() {
+		return temporalValidationTolerance;
+	}
+
 	@Override
 	public Set<ValueExtractor<?>> getValueExtractors() {
 		return validationBootstrapParameters.getValueExtractorDescriptors()
@@ -492,7 +507,7 @@ private boolean isSpecificProvider() {
 	 */
 	private void parseValidationXml() {
 		if ( ignoreXmlConfiguration ) {
-			log.ignoringXmlConfiguration();
+			LOG.ignoringXmlConfiguration();
 
 			if ( validationBootstrapParameters.getTraversableResolver() == null ) {
 				validationBootstrapParameters.setTraversableResolver( defaultTraversableResolver );
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/ConstraintViolationImpl.java b/engine/src/main/java/org/hibernate/validator/internal/engine/ConstraintViolationImpl.java
index f466ac624b..ed1ff020c0 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/ConstraintViolationImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/ConstraintViolationImpl.java
@@ -8,6 +8,7 @@
 
 import java.io.Serializable;
 import java.lang.annotation.ElementType;
+import java.lang.invoke.MethodHandles;
 import java.util.Map;
 
 import javax.validation.ConstraintViolation;
@@ -24,7 +25,8 @@
  * @author Hardy Ferentschik
  */
 public class ConstraintViolationImpl<T> implements HibernateConstraintViolation<T>, Serializable {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 	private static final long serialVersionUID = -4970067626703103139L;
 
 	private final String interpolatedMessage;
@@ -230,7 +232,7 @@ public <C> C unwrap(Class<C> type) {
 		if ( type.isAssignableFrom( HibernateConstraintViolation.class ) ) {
 			return type.cast( this );
 		}
-		throw log.getTypeNotSupportedForUnwrappingException( type );
+		throw LOG.getTypeNotSupportedForUnwrappingException( type );
 	}
 
 	@Override
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/MessageInterpolatorContext.java b/engine/src/main/java/org/hibernate/validator/internal/engine/MessageInterpolatorContext.java
index f39d23d30e..d27cd59295 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/MessageInterpolatorContext.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/MessageInterpolatorContext.java
@@ -8,6 +8,7 @@
 
 import static org.hibernate.validator.internal.util.CollectionHelper.toImmutableMap;
 
+import java.lang.invoke.MethodHandles;
 import java.util.Map;
 
 import javax.validation.metadata.ConstraintDescriptor;
@@ -27,7 +28,7 @@
  */
 public class MessageInterpolatorContext implements HibernateMessageInterpolatorContext {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final ConstraintDescriptor<?> constraintDescriptor;
 	private final Object validatedValue;
@@ -80,7 +81,7 @@ public <T> T unwrap(Class<T> type) {
 		if ( type.isAssignableFrom( HibernateMessageInterpolatorContext.class ) ) {
 			return type.cast( this );
 		}
-		throw log.getTypeNotSupportedForUnwrappingException( type );
+		throw LOG.getTypeNotSupportedForUnwrappingException( type );
 	}
 
 	@Override
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/ValidationContext.java b/engine/src/main/java/org/hibernate/validator/internal/engine/ValidationContext.java
index 78b671c982..6c582bb1d9 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/ValidationContext.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/ValidationContext.java
@@ -8,6 +8,7 @@
 
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashSet;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Executable;
 import java.util.HashSet;
 import java.util.IdentityHashMap;
@@ -27,6 +28,7 @@
 import javax.validation.ValidationException;
 import javax.validation.metadata.ConstraintDescriptor;
 
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext;
 import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorContextImpl;
 import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager;
 import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintViolationCreationContext;
@@ -37,7 +39,6 @@
 import org.hibernate.validator.internal.util.ExecutableParameterNameProvider;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
-import org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory;
 
 /**
  * Context object keeping track of all required data for a validation call.
@@ -52,7 +53,7 @@
  */
 public class ValidationContext<T> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	/**
 	 * Caches and manages life cycle of constraint validator instances.
@@ -130,14 +131,14 @@ public class ValidationContext<T> {
 	private final ClockProvider clockProvider;
 
 	/**
-	 * Script evaluator factory which should be used in this context.
+	 * Whether or not validation should fail on the first constraint violation.
 	 */
-	private final ScriptEvaluatorFactory scriptEvaluatorFactory;
+	private final boolean failFast;
 
 	/**
-	 * Whether or not validation should fail on the first constraint violation.
+	 * The constraint validator initialization context.
 	 */
-	private final boolean failFast;
+	private final HibernateConstraintValidatorInitializationContext constraintValidatorInitializationContext;
 
 	/**
 	 * The name of the validated (leaf) property in case of a validateProperty()/validateValue() call.
@@ -150,7 +151,7 @@ private ValidationContext(ConstraintValidatorManager constraintValidatorManager,
 			TraversableResolver traversableResolver,
 			ExecutableParameterNameProvider parameterNameProvider,
 			ClockProvider clockProvider,
-			ScriptEvaluatorFactory scriptEvaluatorFactory,
+			HibernateConstraintValidatorInitializationContext constraintValidatorInitializationContext,
 			boolean failFast,
 			T rootBean,
 			Class<T> rootBeanClass,
@@ -164,7 +165,7 @@ private ValidationContext(ConstraintValidatorManager constraintValidatorManager,
 		this.traversableResolver = traversableResolver;
 		this.parameterNameProvider = parameterNameProvider;
 		this.clockProvider = clockProvider;
-		this.scriptEvaluatorFactory = scriptEvaluatorFactory;
+		this.constraintValidatorInitializationContext = constraintValidatorInitializationContext;
 		this.failFast = failFast;
 
 		this.rootBean = rootBean;
@@ -186,7 +187,7 @@ public static ValidationContextBuilder getValidationContextBuilder(
 			ConstraintValidatorFactory constraintValidatorFactory,
 			TraversableResolver traversableResolver,
 			ClockProvider clockProvider,
-			ScriptEvaluatorFactory scriptEvaluatorFactory,
+			HibernateConstraintValidatorInitializationContext constraintValidatorInitializationContext,
 			boolean failFast) {
 
 		return new ValidationContextBuilder(
@@ -196,7 +197,7 @@ public static ValidationContextBuilder getValidationContextBuilder(
 				constraintValidatorFactory,
 				traversableResolver,
 				clockProvider,
-				scriptEvaluatorFactory,
+				constraintValidatorInitializationContext,
 				failFast
 		);
 	}
@@ -248,8 +249,8 @@ public ClockProvider getClockProvider() {
 		return clockProvider;
 	}
 
-	public ScriptEvaluatorFactory getScriptEvaluatorFactory() {
-		return scriptEvaluatorFactory;
+	public HibernateConstraintValidatorInitializationContext getConstraintValidatorInitializationContext() {
+		return constraintValidatorInitializationContext;
 	}
 
 	public Set<ConstraintViolation<T>> createConstraintViolations(ValueContext<?, ?> localContext,
@@ -401,7 +402,7 @@ private String interpolate(String messageTemplate,
 			throw ve;
 		}
 		catch (Exception e) {
-			throw log.getExceptionOccurredDuringMessageInterpolationException( e );
+			throw LOG.getExceptionOccurredDuringMessageInterpolationException( e );
 		}
 	}
 
@@ -462,7 +463,7 @@ public static class ValidationContextBuilder {
 		private final ConstraintValidatorFactory constraintValidatorFactory;
 		private final TraversableResolver traversableResolver;
 		private final ClockProvider clockProvider;
-		private final ScriptEvaluatorFactory scriptEvaluatorFactory;
+		private final HibernateConstraintValidatorInitializationContext constraintValidatorInitializationContext;
 		private final boolean failFast;
 
 		private ValidationContextBuilder(
@@ -472,7 +473,7 @@ private ValidationContextBuilder(
 				ConstraintValidatorFactory constraintValidatorFactory,
 				TraversableResolver traversableResolver,
 				ClockProvider clockProvider,
-				ScriptEvaluatorFactory scriptEvaluatorFactory,
+				HibernateConstraintValidatorInitializationContext constraintValidatorInitializationContext,
 				boolean failFast) {
 			this.beanMetaDataManager = beanMetaDataManager;
 			this.constraintValidatorManager = constraintValidatorManager;
@@ -480,7 +481,7 @@ private ValidationContextBuilder(
 			this.constraintValidatorFactory = constraintValidatorFactory;
 			this.traversableResolver = traversableResolver;
 			this.clockProvider = clockProvider;
-			this.scriptEvaluatorFactory = scriptEvaluatorFactory;
+			this.constraintValidatorInitializationContext = constraintValidatorInitializationContext;
 			this.failFast = failFast;
 		}
 
@@ -494,7 +495,7 @@ public <T> ValidationContext<T> forValidate(T rootBean) {
 					traversableResolver,
 					null, //parameter name provider
 					clockProvider,
-					scriptEvaluatorFactory,
+					constraintValidatorInitializationContext,
 					failFast,
 					rootBean,
 					rootBeanClass,
@@ -515,7 +516,7 @@ public <T> ValidationContext<T> forValidateProperty(T rootBean) {
 					traversableResolver,
 					null, //parameter name provider
 					clockProvider,
-					scriptEvaluatorFactory,
+					constraintValidatorInitializationContext,
 					failFast,
 					rootBean,
 					rootBeanClass,
@@ -534,7 +535,7 @@ public <T> ValidationContext<T> forValidateValue(Class<T> rootBeanClass) {
 					traversableResolver,
 					null, //parameter name provider
 					clockProvider,
-					scriptEvaluatorFactory,
+					constraintValidatorInitializationContext,
 					failFast,
 					null,
 					rootBeanClass, //root bean
@@ -559,7 +560,7 @@ public <T> ValidationContext<T> forValidateParameters(
 					traversableResolver,
 					parameterNameProvider,
 					clockProvider,
-					scriptEvaluatorFactory,
+					constraintValidatorInitializationContext,
 					failFast,
 					rootBean,
 					rootBeanClass,
@@ -583,7 +584,7 @@ public <T> ValidationContext<T> forValidateReturnValue(
 					traversableResolver,
 					null, //parameter name provider
 					clockProvider,
-					scriptEvaluatorFactory,
+					constraintValidatorInitializationContext,
 					failFast,
 					rootBean,
 					rootBeanClass,
@@ -613,7 +614,7 @@ public boolean equals(Object o) {
 			if ( this == o ) {
 				return true;
 			}
-			if ( o == null || getClass() != BeanGroupProcessedUnit.class ) {
+			if ( o == null || o.getClass() != BeanGroupProcessedUnit.class ) {
 				return false;
 			}
 
@@ -661,7 +662,7 @@ public boolean equals(Object o) {
 			if ( this == o ) {
 				return true;
 			}
-			if ( o == null || getClass() != BeanPathMetaConstraintProcessedUnit.class ) {
+			if ( o == null || o.getClass() != BeanPathMetaConstraintProcessedUnit.class ) {
 				return false;
 			}
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorContextImpl.java b/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorContextImpl.java
index 394e62f1dd..bbd184dec2 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorContextImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorContextImpl.java
@@ -6,6 +6,8 @@
  */
 package org.hibernate.validator.internal.engine;
 
+import java.lang.invoke.MethodHandles;
+import java.time.Duration;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -34,7 +36,7 @@
  */
 public class ValidatorContextImpl implements HibernateValidatorContext {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final ValidatorFactoryImpl validatorFactory;
 
@@ -44,6 +46,7 @@ public class ValidatorContextImpl implements HibernateValidatorContext {
 	private ExecutableParameterNameProvider parameterNameProvider;
 	private ClockProvider clockProvider;
 	private ScriptEvaluatorFactory scriptEvaluatorFactory;
+	private Duration temporalValidationTolerance;
 	private boolean failFast;
 	private boolean traversableResolverResultCacheEnabled;
 	private final ValueExtractorManager valueExtractorManager;
@@ -58,6 +61,7 @@ public ValidatorContextImpl(ValidatorFactoryImpl validatorFactory) {
 		this.parameterNameProvider = validatorFactory.getExecutableParameterNameProvider();
 		this.clockProvider = validatorFactory.getClockProvider();
 		this.scriptEvaluatorFactory = validatorFactory.getScriptEvaluatorFactory();
+		this.temporalValidationTolerance = validatorFactory.getTemporalValidationTolerance();
 		this.failFast = validatorFactory.isFailFast();
 		this.traversableResolverResultCacheEnabled = validatorFactory.isTraversableResolverResultCacheEnabled();
 		this.methodValidationConfigurationBuilder = new MethodValidationConfiguration.Builder( validatorFactory.getMethodValidationConfiguration() );
@@ -162,6 +166,12 @@ public HibernateValidatorContext enableTraversableResolverResultCache(boolean en
 		return this;
 	}
 
+	@Override
+	public HibernateValidatorContext temporalValidationTolerance(Duration temporalValidationTolerance) {
+		this.temporalValidationTolerance = temporalValidationTolerance == null ? Duration.ZERO : temporalValidationTolerance.abs();
+		return this;
+	}
+
 	@Override
 	public Validator getValidator() {
 		return validatorFactory.createValidator(
@@ -172,6 +182,7 @@ public Validator getValidator() {
 				clockProvider,
 				scriptEvaluatorFactory,
 				failFast,
+				temporalValidationTolerance,
 				valueExtractorDescriptors.isEmpty() ? valueExtractorManager : new ValueExtractorManager( valueExtractorManager, valueExtractorDescriptors ),
 				methodValidationConfigurationBuilder.build(),
 				traversableResolverResultCacheEnabled
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorFactoryImpl.java b/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorFactoryImpl.java
index 702b36e263..71e28920f5 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorFactoryImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorFactoryImpl.java
@@ -10,8 +10,10 @@
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashSet;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
+import java.time.Duration;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -70,7 +72,7 @@
  */
 public class ValidatorFactoryImpl implements HibernateValidatorFactory {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	/**
 	 * The default message interpolator for this factory.
@@ -92,6 +94,12 @@ public class ValidatorFactoryImpl implements HibernateValidatorFactory {
 	 */
 	private final ClockProvider clockProvider;
 
+	/**
+	 * Defines the temporal validation tolerance i.e. the allowed margin of error when comparing date/time in temporal
+	 * constraints.
+	 */
+	private final Duration temporalValidationTolerance;
+
 	/**
 	 * Used to get the {@code ScriptEvaluatorFactory} when validating {@code @ScriptAssert} and
 	 * {@code @ParameterScriptAssert} constraints.
@@ -258,6 +266,8 @@ public ValidatorFactoryImpl(ConfigurationState configurationState) {
 
 		this.scriptEvaluatorFactory = getScriptEvaluatorFactory( configurationState, properties, externalClassLoader );
 
+		this.temporalValidationTolerance = getTemporalValidationTolerance( configurationState, properties );
+
 		if ( LOG.isDebugEnabled() ) {
 			logValidatorFactoryScopedConfiguration( configurationState, this.scriptEvaluatorFactory.getClass() );
 		}
@@ -310,6 +320,7 @@ public Validator getValidator() {
 				clockProvider,
 				scriptEvaluatorFactory,
 				failFast,
+				temporalValidationTolerance,
 				valueExtractorManager,
 				methodValidationConfiguration,
 				traversableResolverResultCacheEnabled
@@ -350,6 +361,11 @@ public ScriptEvaluatorFactory getScriptEvaluatorFactory() {
 		return scriptEvaluatorFactory;
 	}
 
+	@Override
+	public Duration getTemporalValidationTolerance() {
+		return temporalValidationTolerance;
+	}
+
 	public boolean isFailFast() {
 		return failFast;
 	}
@@ -397,6 +413,7 @@ Validator createValidator(ConstraintValidatorFactory constraintValidatorFactory,
 			ClockProvider clockProvider,
 			ScriptEvaluatorFactory scriptEvaluatorFactory,
 			boolean failFast,
+			Duration temporalValidationTolerance,
 			ValueExtractorManager valueExtractorManager,
 			MethodValidationConfiguration methodValidationConfiguration,
 			boolean traversableResolverResultCacheEnabled) {
@@ -429,7 +446,8 @@ Validator createValidator(ConstraintValidatorFactory constraintValidatorFactory,
 				constraintValidatorManager,
 				validationOrderGenerator,
 				failFast,
-				traversableResolverResultCacheEnabled
+				traversableResolverResultCacheEnabled,
+				temporalValidationTolerance
 		);
 	}
 
@@ -534,6 +552,30 @@ private static ScriptEvaluatorFactory getScriptEvaluatorFactory(ConfigurationSta
 		return new DefaultScriptEvaluatorFactory( externalClassLoader );
 	}
 
+	private Duration getTemporalValidationTolerance(ConfigurationState configurationState, Map<String, String> properties) {
+		if ( configurationState instanceof ConfigurationImpl ) {
+			ConfigurationImpl hibernateSpecificConfig = (ConfigurationImpl) configurationState;
+			if ( hibernateSpecificConfig.getTemporalValidationTolerance() != null ) {
+				LOG.logTemporalValidationTolerance( hibernateSpecificConfig.getTemporalValidationTolerance() );
+				return hibernateSpecificConfig.getTemporalValidationTolerance();
+			}
+		}
+		String temporalValidationToleranceProperty = properties.get( HibernateValidatorConfiguration.TEMPORAL_VALIDATION_TOLERANCE );
+		if ( temporalValidationToleranceProperty != null ) {
+			try {
+				Duration tolerance = Duration.ofMillis( Long.parseLong( temporalValidationToleranceProperty ) ).abs();
+				LOG.logTemporalValidationTolerance( tolerance );
+				return tolerance;
+			}
+			catch (Exception e) {
+				throw LOG.getUnableToParseTemporalValidationToleranceException( temporalValidationToleranceProperty, e );
+			}
+		}
+
+		LOG.logTemporalValidationTolerance( Duration.ZERO );
+		return Duration.ZERO;
+	}
+
 	private static void registerCustomConstraintValidators(Set<DefaultConstraintMapping> constraintMappings,
 			ConstraintHelper constraintHelper) {
 		Set<Class<?>> definedConstraints = newHashSet();
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorImpl.java b/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorImpl.java
index 289253c9ec..84cf248acb 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/ValidatorImpl.java
@@ -10,9 +10,11 @@
 import static org.hibernate.validator.internal.util.logging.Messages.MESSAGES;
 
 import java.lang.annotation.ElementType;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Executable;
 import java.lang.reflect.Method;
+import java.time.Duration;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
@@ -36,8 +38,10 @@
 import javax.validation.metadata.BeanDescriptor;
 import javax.validation.valueextraction.ValueExtractor;
 
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext;
 import org.hibernate.validator.internal.engine.ValidationContext.ValidationContextBuilder;
 import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager;
+import org.hibernate.validator.internal.engine.constraintvalidation.HibernateConstraintValidatorInitializationContextImpl;
 import org.hibernate.validator.internal.engine.groups.Group;
 import org.hibernate.validator.internal.engine.groups.GroupWithInheritance;
 import org.hibernate.validator.internal.engine.groups.Sequence;
@@ -84,7 +88,7 @@
  */
 public class ValidatorImpl implements Validator, ExecutableValidator {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	/**
 	 * The default group array used in case any of the validate methods is called without a group.
@@ -133,12 +137,6 @@ public class ValidatorImpl implements Validator, ExecutableValidator {
 	 */
 	private final ClockProvider clockProvider;
 
-	/**
-	 * Used to get the {@code ScriptEvaluatorFactory} when validating {@code @ScriptAssert} and
-	 * {@code @ParameterScriptAssert} constraints.
-	 */
-	private final ScriptEvaluatorFactory scriptEvaluatorFactory;
-
 	/**
 	 * Indicates if validation has to be stopped on first constraint violation.
 	 */
@@ -151,6 +149,12 @@ public class ValidatorImpl implements Validator, ExecutableValidator {
 
 	private final ValueExtractorManager valueExtractorManager;
 
+	/**
+	 * The constraint initialization context is stored at this level to prevent creating a new instance each time we
+	 * initialize a new constraint validator as, for now, it only contains Validator scoped objects.
+	 */
+	private final HibernateConstraintValidatorInitializationContext constraintValidatorInitializationContext;
+
 	public ValidatorImpl(ConstraintValidatorFactory constraintValidatorFactory,
 			MessageInterpolator messageInterpolator,
 			TraversableResolver traversableResolver,
@@ -162,19 +166,21 @@ public ValidatorImpl(ConstraintValidatorFactory constraintValidatorFactory,
 			ConstraintValidatorManager constraintValidatorManager,
 			ValidationOrderGenerator validationOrderGenerator,
 			boolean failFast,
-			boolean traversableResolverResultCacheEnabled) {
+			boolean traversableResolverResultCacheEnabled,
+			Duration temporalValidationTolerance) {
 		this.constraintValidatorFactory = constraintValidatorFactory;
 		this.messageInterpolator = messageInterpolator;
 		this.traversableResolver = traversableResolver;
 		this.beanMetaDataManager = beanMetaDataManager;
 		this.parameterNameProvider = parameterNameProvider;
 		this.clockProvider = clockProvider;
-		this.scriptEvaluatorFactory = scriptEvaluatorFactory;
 		this.valueExtractorManager = valueExtractorManager;
 		this.constraintValidatorManager = constraintValidatorManager;
 		this.validationOrderGenerator = validationOrderGenerator;
 		this.failFast = failFast;
 		this.traversableResolverResultCacheEnabled = traversableResolverResultCacheEnabled;
+		this.constraintValidatorInitializationContext = new HibernateConstraintValidatorInitializationContextImpl( scriptEvaluatorFactory, clockProvider,
+				temporalValidationTolerance );
 	}
 
 	@Override
@@ -215,7 +221,7 @@ public final <T> Set<ConstraintViolation<T>> validateProperty(T object, String p
 		ValueContext<?, Object> valueContext = getValueContextForPropertyValidation( validationContext, propertyPath );
 
 		if ( valueContext.getCurrentBean() == null ) {
-			throw log.getUnableToReachPropertyToValidateException( validationContext.getRootBean(), propertyPath );
+			throw LOG.getUnableToReachPropertyToValidateException( validationContext.getRootBean(), propertyPath );
 		}
 
 		ValidationOrder validationOrder = determineGroupValidationOrder( groups );
@@ -333,7 +339,7 @@ public final <T> T unwrap(Class<T> type) {
 			return type.cast( this );
 		}
 
-		throw log.getTypeNotSupportedForUnwrappingException( type );
+		throw LOG.getTypeNotSupportedForUnwrappingException( type );
 	}
 
 	@Override
@@ -349,14 +355,14 @@ private ValidationContextBuilder getValidationContextBuilder() {
 				constraintValidatorFactory,
 				TraversableResolvers.wrapWithCachingForSingleValidation( traversableResolver, traversableResolverResultCacheEnabled ),
 				clockProvider,
-				scriptEvaluatorFactory,
+				constraintValidatorInitializationContext,
 				failFast
 		);
 	}
 
 	private void sanityCheckPropertyPath(String propertyName) {
 		if ( propertyName == null || propertyName.length() == 0 ) {
-			throw log.getInvalidPropertyPathException();
+			throw LOG.getInvalidPropertyPathException();
 		}
 	}
 
@@ -556,14 +562,9 @@ private boolean validateMetaConstraint(ValidationContext<?> validationContext, V
 		boolean success = true;
 
 		if ( isValidationRequired( validationContext, valueContext, metaConstraint ) ) {
-			Object valueToValidate = null;
 
 			if ( parent != null ) {
-				valueToValidate = valueContext.getValue( parent, metaConstraint.getLocation() );
-				valueContext.setCurrentValidatedValue( valueToValidate );
-			}
-			else {
-				valueToValidate = valueContext.getCurrentValidatedValue();
+				valueContext.setCurrentValidatedValue( valueContext.getValue( parent, metaConstraint.getLocation() ) );
 			}
 
 			success = metaConstraint.validateConstraint( validationContext, valueContext );
@@ -654,7 +655,7 @@ private void validateCascadedContainerElementsForCurrentGroup(Object value, Vali
 			);
 
 			if ( extractor == null ) {
-				throw log.getNoValueExtractorFoundForTypeException( cascadingMetaData.getEnclosingType(), cascadingMetaData.getTypeParameter(), value.getClass() );
+				throw LOG.getNoValueExtractorFoundForTypeException( cascadingMetaData.getEnclosingType(), cascadingMetaData.getTypeParameter(), value.getClass() );
 			}
 
 			CascadingValueReceiver receiver = new CascadingValueReceiver( validationContext, valueContext, cascadingMetaData );
@@ -855,7 +856,7 @@ private <T> void validateParametersInContext(ValidationContext<T> validationCont
 		ExecutableMetaData executableMetaData = executableMetaDataOptional.get();
 
 		if ( parameterValues.length != executableMetaData.getParameterTypes().length ) {
-			throw log.getInvalidParameterCountForExecutableException(
+			throw LOG.getInvalidParameterCountForExecutableException(
 					ExecutableHelper.getExecutableAsString(
 							executableMetaData.getType().toString() + "#" + executableMetaData.getName(),
 							executableMetaData.getParameterTypes()
@@ -996,7 +997,7 @@ private <T> void validateParametersForSingleGroup(ValidationContext<T> validatio
 						TypeHelper.getErasedType( parameterMetaData.getType() ),
 						valueType
 				) ) {
-					throw log.getParameterTypesDoNotMatchException(
+					throw LOG.getParameterTypesDoNotMatchException(
 							valueType,
 							parameterMetaData.getType(),
 							i,
@@ -1194,13 +1195,13 @@ private <V> ValueContext<?, V> getValueContextForPropertyValidation(ValidationCo
 			// if the property is not the leaf property, we set up the context for the next iteration
 			if ( propertyPathIter.hasNext() ) {
 				if ( !propertyMetaData.isCascading() ) {
-					throw log.getInvalidPropertyPathException( validationContext.getRootBeanClass(), propertyPath.asString() );
+					throw LOG.getInvalidPropertyPathException( validationContext.getRootBeanClass(), propertyPath.asString() );
 				}
 
 				// TODO which cascadable???
 				value = getCascadableValue( validationContext, value, propertyMetaData.getCascadables().iterator().next() );
 				if ( value == null ) {
-					throw log.getUnableToReachPropertyToValidateException( validationContext.getRootBean(), propertyPath );
+					throw LOG.getUnableToReachPropertyToValidateException( validationContext.getRootBean(), propertyPath );
 				}
 				clazz = value.getClass();
 
@@ -1216,11 +1217,11 @@ else if ( propertyPathNode.getKey() != null ) {
 						value = ReflectionHelper.getMappedValue( value, propertyPathNode.getKey() );
 					}
 					else {
-						throw log.getPropertyPathMustProvideIndexOrMapKeyException();
+						throw LOG.getPropertyPathMustProvideIndexOrMapKeyException();
 					}
 
 					if ( value == null ) {
-						throw log.getUnableToReachPropertyToValidateException( validationContext.getRootBean(), propertyPath );
+						throw LOG.getUnableToReachPropertyToValidateException( validationContext.getRootBean(), propertyPath );
 					}
 
 					clazz = value.getClass();
@@ -1235,7 +1236,7 @@ else if ( propertyPathNode.getKey() != null ) {
 
 		if ( propertyMetaData == null ) {
 			// should only happen if the property path is empty, which should never happen
-			throw log.getInvalidPropertyPathException( clazz, propertyPath.asString() );
+			throw LOG.getInvalidPropertyPathException( clazz, propertyPath.asString() );
 		}
 
 		validationContext.setValidatedProperty( propertyMetaData.getName() );
@@ -1288,7 +1289,7 @@ private <V> ValueContext<?, V> getValueContextForValueValidation(ValidationConte
 
 		if ( propertyMetaData == null ) {
 			// should only happen if the property path is empty, which should never happen
-			throw log.getInvalidPropertyPathException( clazz, propertyPath.asString() );
+			throw LOG.getInvalidPropertyPathException( clazz, propertyPath.asString() );
 		}
 
 		validationContext.setValidatedProperty( propertyMetaData.getName() );
@@ -1340,7 +1341,7 @@ private boolean isReachable(ValidationContext<?> validationContext, Object trave
 			);
 		}
 		catch (RuntimeException e) {
-			throw log.getErrorDuringCallOfTraversableResolverIsReachableException( e );
+			throw LOG.getErrorDuringCallOfTraversableResolverIsReachableException( e );
 		}
 	}
 
@@ -1376,7 +1377,7 @@ private boolean isCascadeRequired(ValidationContext<?> validationContext, Object
 			);
 		}
 		catch (RuntimeException e) {
-			throw log.getErrorDuringCallOfTraversableResolverIsCascadableException( e );
+			throw LOG.getErrorDuringCallOfTraversableResolverIsCascadableException( e );
 		}
 	}
 
@@ -1402,7 +1403,7 @@ private boolean shouldFailFast(ValidationContext<?> validationContext) {
 
 	private PropertyMetaData getBeanPropertyMetaData(BeanMetaData<?> beanMetaData, Path.Node propertyNode ) {
 		if ( !ElementKind.PROPERTY.equals( propertyNode.getKind() ) ) {
-			throw log.getInvalidPropertyPathException( beanMetaData.getBeanClass(), propertyNode.getName() );
+			throw LOG.getInvalidPropertyPathException( beanMetaData.getBeanClass(), propertyNode.getName() );
 		}
 
 		return beanMetaData.getMetaDataFor( propertyNode.getName() );
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ClassBasedValidatorDescriptor.java b/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ClassBasedValidatorDescriptor.java
index 43a8f243e2..ab1bc49ece 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ClassBasedValidatorDescriptor.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ClassBasedValidatorDescriptor.java
@@ -7,6 +7,7 @@
 package org.hibernate.validator.internal.engine.constraintvalidation;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.EnumSet;
@@ -28,7 +29,7 @@
 class ClassBasedValidatorDescriptor<A extends Annotation> implements ConstraintValidatorDescriptor<A> {
 
 	private static final long serialVersionUID = -8207687559460098548L;
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final Class<? extends ConstraintValidator<A, ?>> validatorClass;
 	private final Type validatedType;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ConstraintTree.java b/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ConstraintTree.java
index ec70f098a3..7e51ce670a 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ConstraintTree.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ConstraintTree.java
@@ -13,6 +13,7 @@
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashSet;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Type;
 import java.util.Collections;
 import java.util.List;
@@ -21,7 +22,6 @@
 
 import javax.validation.ConstraintDeclarationException;
 import javax.validation.ConstraintValidator;
-import javax.validation.ConstraintValidatorFactory;
 import javax.validation.ConstraintViolation;
 import javax.validation.ValidationException;
 
@@ -46,7 +46,7 @@
  */
 public class ConstraintTree<A extends Annotation> {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	@Immutable
 	private final List<ConstraintTree<?>> children;
@@ -60,7 +60,7 @@ public class ConstraintTree<A extends Annotation> {
 
 	/**
 	 * Either the initialized constraint validator for the default constraint validator factory or
-	 * {@link #DUMMY_CONSTRAINT_VALIDATOR}.
+	 * {@link ConstraintValidatorManager#DUMMY_CONSTRAINT_VALIDATOR}.
 	 */
 	private volatile ConstraintValidator<A, ?> constraintValidatorForDefaultConstraintValidatorFactory;
 
@@ -118,7 +118,6 @@ private <T> void validateConstraints(ValidationContext<T> validationContext,
 			ConstraintValidatorContextImpl constraintValidatorContext = new ConstraintValidatorContextImpl(
 					validationContext.getParameterNames(),
 					validationContext.getClockProvider(),
-					validationContext.getScriptEvaluatorFactory(),
 					valueContext.getPropertyPath(),
 					descriptor
 			);
@@ -183,8 +182,7 @@ private ValidationException getExceptionForNullValidator(Type validatedValueType
 				synchronized ( this ) {
 					validator = constraintValidatorForDefaultConstraintValidatorFactory;
 					if ( validator == null ) {
-						validator = getInitializedConstraintValidator( validationContext.getConstraintValidatorManager(),
-								validationContext.getConstraintValidatorFactory() );
+						validator = getInitializedConstraintValidator( validationContext );
 						constraintValidatorForDefaultConstraintValidatorFactory = validator;
 					}
 				}
@@ -195,8 +193,7 @@ private ValidationException getExceptionForNullValidator(Type validatedValueType
 			// factory. Creating a lot of CHM for that cache might not be a good idea and we prefer being conservative
 			// for now. Note that we have the ConstraintValidatorManager cache that mitigates the situation.
 			// If you come up with a use case where it makes sense, please reach out to us.
-			validator = getInitializedConstraintValidator( validationContext.getConstraintValidatorManager(),
-					validationContext.getConstraintValidatorFactory() );
+			validator = getInitializedConstraintValidator( validationContext );
 		}
 
 		if ( validator == DUMMY_CONSTRAINT_VALIDATOR ) {
@@ -207,12 +204,13 @@ private ValidationException getExceptionForNullValidator(Type validatedValueType
 	}
 
 	@SuppressWarnings("unchecked")
-	private ConstraintValidator<A, ?> getInitializedConstraintValidator(ConstraintValidatorManager constraintValidatorManager,
-			ConstraintValidatorFactory constraintValidatorFactory) {
-		ConstraintValidator<A, ?> validator = constraintValidatorManager.getInitializedValidator(
+	private ConstraintValidator<A, ?> getInitializedConstraintValidator(ValidationContext<?> validationContext) {
+		ConstraintValidator<A, ?> validator = validationContext.getConstraintValidatorManager().getInitializedValidator(
 				validatedValueType,
 				descriptor,
-				constraintValidatorFactory );
+				validationContext.getConstraintValidatorFactory(),
+				validationContext.getConstraintValidatorInitializationContext()
+		);
 
 		if ( validator != null ) {
 			return validator;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ConstraintValidatorContextImpl.java b/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ConstraintValidatorContextImpl.java
index bb58f76076..d8bc276463 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ConstraintValidatorContextImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ConstraintValidatorContextImpl.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.engine.constraintvalidation;
 
+import java.lang.invoke.MethodHandles;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -32,8 +33,6 @@
 import org.hibernate.validator.internal.util.Contracts;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
-import org.hibernate.validator.spi.scripting.ScriptEvaluator;
-import org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory;
 
 /**
  * @author Hardy Ferentschik
@@ -42,24 +41,22 @@
  */
 public class ConstraintValidatorContextImpl implements HibernateConstraintValidatorContext {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private Map<String, Object> messageParameters;
 	private Map<String, Object> expressionVariables;
 	private final List<String> methodParameterNames;
 	private final ClockProvider clockProvider;
-	private final ScriptEvaluatorFactory scriptEvaluatorFactory;
 	private final PathImpl basePath;
 	private final ConstraintDescriptor<?> constraintDescriptor;
 	private List<ConstraintViolationCreationContext> constraintViolationCreationContexts;
 	private boolean defaultDisabled;
 	private Object dynamicPayload;
 
-	public ConstraintValidatorContextImpl(List<String> methodParameterNames, ClockProvider clockProvider, ScriptEvaluatorFactory scriptEvaluatorFactory,
+	public ConstraintValidatorContextImpl(List<String> methodParameterNames, ClockProvider clockProvider,
 			PathImpl propertyPath, ConstraintDescriptor<?> constraintDescriptor) {
 		this.methodParameterNames = methodParameterNames;
 		this.clockProvider = clockProvider;
-		this.scriptEvaluatorFactory = scriptEvaluatorFactory;
 		this.basePath = propertyPath;
 		this.constraintDescriptor = constraintDescriptor;
 	}
@@ -89,7 +86,7 @@ public <T> T unwrap(Class<T> type) {
 		if ( type.isAssignableFrom( HibernateConstraintValidatorContext.class ) ) {
 			return type.cast( this );
 		}
-		throw log.getTypeNotSupportedForUnwrappingException( type );
+		throw LOG.getTypeNotSupportedForUnwrappingException( type );
 	}
 
 	@Override
@@ -127,11 +124,6 @@ public HibernateConstraintValidatorContext withDynamicPayload(Object violationCo
 		return this;
 	}
 
-	@Override
-	public ScriptEvaluator getScriptEvaluatorForLanguage(String languageName) {
-		return scriptEvaluatorFactory.getScriptEvaluatorByLanguageName( languageName );
-	}
-
 	public final ConstraintDescriptor<?> getConstraintDescriptor() {
 		return constraintDescriptor;
 	}
@@ -139,7 +131,7 @@ public final ConstraintDescriptor<?> getConstraintDescriptor() {
 	public final List<ConstraintViolationCreationContext> getConstraintViolationCreationContexts() {
 		if ( defaultDisabled ) {
 			if ( constraintViolationCreationContexts == null || constraintViolationCreationContexts.size() == 0 ) {
-				throw log.getAtLeastOneCustomMessageMustBeCreatedException();
+				throw LOG.getAtLeastOneCustomMessageMustBeCreatedException();
 			}
 
 			return CollectionHelper.toImmutableList( constraintViolationCreationContexts );
@@ -230,7 +222,7 @@ public LeafNodeBuilderCustomizableContext addBeanNode() {
 		@Override
 		public NodeBuilderDefinedContext addParameterNode(int index) {
 			if ( propertyPath.getLeafNode().getKind() != ElementKind.CROSS_PARAMETER ) {
-				throw log.getParameterNodeAddedForNonCrossParameterConstraintException( propertyPath );
+				throw LOG.getParameterNodeAddedForNonCrossParameterConstraintException( propertyPath );
 			}
 
 			dropLeafNodeIfRequired();
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ConstraintValidatorManager.java b/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ConstraintValidatorManager.java
index 9679f57701..4ff4fab0bd 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ConstraintValidatorManager.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ConstraintValidatorManager.java
@@ -9,6 +9,7 @@
 import static org.hibernate.validator.internal.util.CollectionHelper.newArrayList;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -17,16 +18,19 @@
 import java.util.Map.Entry;
 import java.util.concurrent.ConcurrentHashMap;
 
+import javax.validation.ConstraintDeclarationException;
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
 import javax.validation.ConstraintValidatorFactory;
 import javax.validation.constraints.Null;
 import javax.validation.metadata.ConstraintDescriptor;
 
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidator;
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext;
 import org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl;
 import org.hibernate.validator.internal.util.Contracts;
 import org.hibernate.validator.internal.util.TypeHelper;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 
@@ -36,7 +40,8 @@
  * @author Hardy Ferentschik
  */
 public class ConstraintValidatorManager {
-	private static final Log LOG = LoggerFactory.make();
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	/**
 	 * Dummy {@code ConstraintValidator} used as placeholder for the case that for a given context there exists
@@ -89,17 +94,21 @@ public ConstraintValidatorManager(ConstraintValidatorFactory constraintValidator
 	 * @param validatedValueType the type of the value to be validated. Cannot be {@code null}.
 	 * @param descriptor the constraint descriptor for which to get an initialized constraint validator. Cannot be {@code null}
 	 * @param constraintValidatorFactory constraint factory used to instantiate the constraint validator. Cannot be {@code null}.
+	 * @param initializationContext context used on constraint validator initialization
 	 * @param <A> the annotation type
 	 *
 	 * @return an initialized constraint validator for the given type and annotation of the value to be validated.
 	 * {@code null} is returned if no matching constraint validator could be found.
 	 */
-	public <A extends Annotation> ConstraintValidator<A, ?> getInitializedValidator(Type validatedValueType,
+	public <A extends Annotation> ConstraintValidator<A, ?> getInitializedValidator(
+			Type validatedValueType,
 			ConstraintDescriptorImpl<A> descriptor,
-			ConstraintValidatorFactory constraintValidatorFactory) {
+			ConstraintValidatorFactory constraintValidatorFactory,
+			HibernateConstraintValidatorInitializationContext initializationContext) {
 		Contracts.assertNotNull( validatedValueType );
 		Contracts.assertNotNull( descriptor );
 		Contracts.assertNotNull( constraintValidatorFactory );
+		Contracts.assertNotNull( initializationContext );
 
 		CacheKey key = new CacheKey( descriptor.getAnnotationDescriptor(), validatedValueType, constraintValidatorFactory );
 
@@ -107,7 +116,7 @@ public ConstraintValidatorManager(ConstraintValidatorFactory constraintValidator
 		ConstraintValidator<A, ?> constraintValidator = (ConstraintValidator<A, ?>) constraintValidatorCache.get( key );
 
 		if ( constraintValidator == null ) {
-			constraintValidator = createAndInitializeValidator( validatedValueType, descriptor, constraintValidatorFactory );
+			constraintValidator = createAndInitializeValidator( validatedValueType, descriptor, constraintValidatorFactory, initializationContext );
 			constraintValidator = cacheValidator( key, constraintValidator );
 		}
 		else {
@@ -137,9 +146,11 @@ public ConstraintValidatorManager(ConstraintValidatorFactory constraintValidator
 	}
 
 	@SuppressWarnings("unchecked")
-	private <A extends Annotation> ConstraintValidator<A, ?> createAndInitializeValidator(Type validatedValueType,
+	private <A extends Annotation> ConstraintValidator<A, ?> createAndInitializeValidator(
+			Type validatedValueType,
 			ConstraintDescriptorImpl<A> descriptor,
-			ConstraintValidatorFactory constraintValidatorFactory) {
+			ConstraintValidatorFactory constraintValidatorFactory,
+			HibernateConstraintValidatorInitializationContext initializationContext) {
 
 		ConstraintValidatorDescriptor<A> validatorDescriptor = findMatchingValidatorDescriptor( descriptor, validatedValueType );
 		ConstraintValidator<A, ?> constraintValidator;
@@ -149,7 +160,7 @@ public ConstraintValidatorManager(ConstraintValidatorFactory constraintValidator
 		}
 		else {
 			constraintValidator = validatorDescriptor.newInstance( constraintValidatorFactory );
-			initializeValidator( descriptor, constraintValidator );
+			initializeValidator( descriptor, constraintValidator, initializationContext );
 		}
 
 		return constraintValidator;
@@ -221,11 +232,20 @@ private <A extends Annotation> List<Type> findSuitableValidatorTypes(Type type,
 		return determinedSuitableTypes;
 	}
 
-	private <A extends Annotation> void initializeValidator(ConstraintDescriptor<A> descriptor, ConstraintValidator<A, ?> constraintValidator) {
+	private <A extends Annotation> void initializeValidator(
+			ConstraintDescriptor<A> descriptor,
+			ConstraintValidator<A, ?> constraintValidator,
+			HibernateConstraintValidatorInitializationContext initializationContext) {
 		try {
+			if ( constraintValidator instanceof HibernateConstraintValidator ) {
+				( (HibernateConstraintValidator<A, ?>) constraintValidator ).initialize( descriptor, initializationContext );
+			}
 			constraintValidator.initialize( descriptor.getAnnotation() );
 		}
 		catch (RuntimeException e) {
+			if ( e instanceof ConstraintDeclarationException ) {
+				throw e;
+			}
 			throw LOG.getUnableToInitializeConstraintValidatorException( constraintValidator.getClass(), e );
 		}
 	}
@@ -258,12 +278,12 @@ else if ( TypeHelper.isAssignable( assignableTypes.get( i ), type ) ) {
 	}
 
 	private static final class CacheKey {
-		private final AnnotationDescriptor<?> annotationDescriptor;
+		private final ConstraintAnnotationDescriptor<?> annotationDescriptor;
 		private final Type validatedType;
 		private final ConstraintValidatorFactory constraintValidatorFactory;
 		private final int hashCode;
 
-		private CacheKey(AnnotationDescriptor<?> annotationDescriptor, Type validatorType, ConstraintValidatorFactory constraintValidatorFactory) {
+		private CacheKey(ConstraintAnnotationDescriptor<?> annotationDescriptor, Type validatorType, ConstraintValidatorFactory constraintValidatorFactory) {
 			this.annotationDescriptor = annotationDescriptor;
 			this.validatedType = validatorType;
 			this.constraintValidatorFactory = constraintValidatorFactory;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/HibernateConstraintValidatorInitializationContextImpl.java b/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/HibernateConstraintValidatorInitializationContextImpl.java
new file mode 100644
index 0000000000..d240c4d3e2
--- /dev/null
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/HibernateConstraintValidatorInitializationContextImpl.java
@@ -0,0 +1,49 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.internal.engine.constraintvalidation;
+
+import java.time.Duration;
+
+import javax.validation.ClockProvider;
+
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext;
+import org.hibernate.validator.spi.scripting.ScriptEvaluator;
+import org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory;
+
+/**
+ * @author Marko Bekhta
+ */
+public class HibernateConstraintValidatorInitializationContextImpl implements HibernateConstraintValidatorInitializationContext {
+
+	private final ScriptEvaluatorFactory scriptEvaluatorFactory;
+
+	private final ClockProvider clockProvider;
+
+	private final Duration temporalValidationTolerance;
+
+	public HibernateConstraintValidatorInitializationContextImpl(ScriptEvaluatorFactory scriptEvaluatorFactory, ClockProvider clockProvider,
+			Duration temporalValidationTolerance) {
+		this.scriptEvaluatorFactory = scriptEvaluatorFactory;
+		this.clockProvider = clockProvider;
+		this.temporalValidationTolerance = temporalValidationTolerance;
+	}
+
+	@Override
+	public ScriptEvaluator getScriptEvaluatorForLanguage(String languageName) {
+		return scriptEvaluatorFactory.getScriptEvaluatorByLanguageName( languageName );
+	}
+
+	@Override
+	public ClockProvider getClockProvider() {
+		return clockProvider;
+	}
+
+	@Override
+	public Duration getTemporalValidationTolerance() {
+		return temporalValidationTolerance;
+	}
+}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/groups/DefaultValidationOrder.java b/engine/src/main/java/org/hibernate/validator/internal/engine/groups/DefaultValidationOrder.java
index fbc8779593..56566e0028 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/groups/DefaultValidationOrder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/groups/DefaultValidationOrder.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.engine.groups;
 
+import java.lang.invoke.MethodHandles;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
@@ -25,7 +26,8 @@
  * @author Guillaume Smet
  */
 public final class DefaultValidationOrder implements ValidationOrder {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	/**
 	 * The list of single groups to be used this validation.
@@ -126,7 +128,7 @@ private void ensureDefaultGroupSequenceIsExpandable(List<Group> groupList, List<
 				// since we basically have two groups
 				continue;
 			}
-			throw log.getUnableToExpandDefaultGroupListException( defaultGroupList, groupList );
+			throw LOG.getUnableToExpandDefaultGroupListException( defaultGroupList, groupList );
 		}
 	}
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/groups/Sequence.java b/engine/src/main/java/org/hibernate/validator/internal/engine/groups/Sequence.java
index 704b1863f2..93f7308250 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/groups/Sequence.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/groups/Sequence.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.engine.groups;
 
+import java.lang.invoke.MethodHandles;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashSet;
@@ -31,7 +32,7 @@ public class Sequence implements Iterable<GroupWithInheritance> {
 	 */
 	public static Sequence DEFAULT = new Sequence();
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final Class<?> sequence;
 	private List<Group> groups;
@@ -131,7 +132,7 @@ public String toString() {
 	private void addInheritedGroups(Group group, Set<Group> expandedGroups) {
 		for ( Class<?> inheritedGroup : group.getDefiningClass().getInterfaces() ) {
 			if ( isGroupSequence( inheritedGroup ) ) {
-				throw log.getSequenceDefinitionsNotAllowedException();
+				throw LOG.getSequenceDefinitionsNotAllowedException();
 			}
 			Group g = new Group( inheritedGroup );
 			expandedGroups.add( g );
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/groups/ValidationOrderGenerator.java b/engine/src/main/java/org/hibernate/validator/internal/engine/groups/ValidationOrderGenerator.java
index d42ce32e74..dbd430f208 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/groups/ValidationOrderGenerator.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/groups/ValidationOrderGenerator.java
@@ -6,9 +6,10 @@
  */
 package org.hibernate.validator.internal.engine.groups;
 
+import java.lang.invoke.MethodHandles;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -27,7 +28,7 @@
  */
 public class ValidationOrderGenerator {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final ConcurrentMap<Class<?>, Sequence> resolvedSequences = new ConcurrentHashMap<Class<?>, Sequence>();
 
@@ -47,7 +48,7 @@ public ValidationOrder getValidationOrder(Class<?> group, boolean expand) {
 		}
 
 		if ( expand ) {
-			return getValidationOrder( Arrays.<Class<?>>asList( group ) );
+			return getValidationOrder( Collections.<Class<?>>singletonList( group ) );
 		}
 		else {
 			DefaultValidationOrder validationOrder = new DefaultValidationOrder();
@@ -65,7 +66,7 @@ public ValidationOrder getValidationOrder(Class<?> group, boolean expand) {
 	 */
 	public ValidationOrder getValidationOrder(Collection<Class<?>> groups) {
 		if ( groups == null || groups.size() == 0 ) {
-			throw log.getAtLeastOneGroupHasToBeSpecifiedException();
+			throw LOG.getAtLeastOneGroupHasToBeSpecifiedException();
 		}
 
 		// HV-621 - if we deal with the Default group we return the default ValidationOrder. No need to
@@ -76,7 +77,7 @@ public ValidationOrder getValidationOrder(Collection<Class<?>> groups) {
 
 		for ( Class<?> clazz : groups ) {
 			if ( !clazz.isInterface() ) {
-				throw log.getGroupHasToBeAnInterfaceException( clazz );
+				throw LOG.getGroupHasToBeAnInterfaceException( clazz );
 			}
 		}
 
@@ -100,7 +101,7 @@ else if ( isGroupSequence( clazz ) ) {
 
 	public ValidationOrder getDefaultValidationOrder(Class<?> clazz, List<Class<?>> defaultGroupSequence) {
 		DefaultValidationOrder validationOrder = new DefaultValidationOrder();
-		insertSequence( clazz, defaultGroupSequence.toArray( new Class<?>[0] ), false, validationOrder );
+		insertSequence( clazz, defaultGroupSequence.toArray( new Class<?>[defaultGroupSequence.size()] ), false, validationOrder );
 		return validationOrder;
 	}
 
@@ -142,7 +143,7 @@ private void insertSequence(Class<?> sequenceClass, Class<?>[] sequenceElements,
 
 	private Sequence resolveSequence(Class<?> sequenceClass, Class<?>[] sequenceElements, List<Class<?>> processedSequences) {
 		if ( processedSequences.contains( sequenceClass ) ) {
-			throw log.getCyclicDependencyInGroupsDefinitionException();
+			throw LOG.getCyclicDependencyInGroupsDefinitionException();
 		}
 		else {
 			processedSequences.add( sequenceClass );
@@ -166,7 +167,7 @@ private void addGroups(List<Group> resolvedGroupSequence, List<Group> groups) {
 		for ( Group tmpGroup : groups ) {
 			if ( resolvedGroupSequence.contains( tmpGroup ) && resolvedGroupSequence.indexOf( tmpGroup ) < resolvedGroupSequence
 					.size() - 1 ) {
-				throw log.getUnableToExpandGroupSequenceException();
+				throw LOG.getUnableToExpandGroupSequenceException();
 			}
 			resolvedGroupSequence.add( tmpGroup );
 		}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/ElTermResolver.java b/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/ElTermResolver.java
index 7946c1e3e7..e063390e80 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/ElTermResolver.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/ElTermResolver.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.engine.messageinterpolation;
 
+import java.lang.invoke.MethodHandles;
 import java.util.Locale;
 import java.util.Map;
 
@@ -28,7 +29,8 @@
  * @author Adam Stawicki
  */
 public class ElTermResolver implements TermResolver {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	/**
 	 * Name under which the currently validate value is bound to the EL context.
@@ -65,13 +67,13 @@ public String interpolate(MessageInterpolator.Context context, String expression
 			resolvedExpression = (String) valueExpression.getValue( elContext );
 		}
 		catch (PropertyNotFoundException pnfe) {
-			log.unknownPropertyInExpressionLanguage( expression, pnfe );
+			LOG.unknownPropertyInExpressionLanguage( expression, pnfe );
 		}
 		catch (ELException e) {
-			log.errorInExpressionLanguage( expression, e );
+			LOG.errorInExpressionLanguage( expression, e );
 		}
 		catch (Exception e) {
-			log.evaluatingExpressionLanguageExpressionCausedException( expression, e );
+			LOG.evaluatingExpressionLanguageExpressionCausedException( expression, e );
 		}
 
 		return resolvedExpression;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/parser/ELState.java b/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/parser/ELState.java
index 2d961a0097..9460fae057 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/parser/ELState.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/parser/ELState.java
@@ -8,6 +8,8 @@
 
 import static org.hibernate.validator.internal.engine.messageinterpolation.util.InterpolationHelper.EL_DESIGNATOR;
 
+import java.lang.invoke.MethodHandles;
+
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 
@@ -15,7 +17,8 @@
  * @author Hardy Ferentschik
  */
 public class ELState implements ParserState {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	@Override
 	public void terminate(TokenCollector tokenCollector) throws MessageDescriptorFormatException {
@@ -44,7 +47,7 @@ public void handleBeginTerm(char character, TokenCollector tokenCollector) throw
 
 	@Override
 	public void handleEndTerm(char character, TokenCollector tokenCollector) throws MessageDescriptorFormatException {
-		throw log.getNonTerminatedParameterException(
+		throw LOG.getNonTerminatedParameterException(
 				tokenCollector.getOriginalMessageDescriptor(),
 				character
 		);
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/parser/InterpolationTermState.java b/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/parser/InterpolationTermState.java
index 963e92a2d8..9b00c35948 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/parser/InterpolationTermState.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/parser/InterpolationTermState.java
@@ -8,6 +8,8 @@
 
 import static org.hibernate.validator.internal.engine.messageinterpolation.util.InterpolationHelper.BEGIN_TERM;
 
+import java.lang.invoke.MethodHandles;
+
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 
@@ -15,11 +17,12 @@
  * @author Hardy Ferentschik
  */
 public class InterpolationTermState implements ParserState {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	@Override
 	public void terminate(TokenCollector tokenCollector) throws MessageDescriptorFormatException {
-		throw log.getNonTerminatedParameterException(
+		throw LOG.getNonTerminatedParameterException(
 				tokenCollector.getOriginalMessageDescriptor(),
 				BEGIN_TERM
 		);
@@ -33,7 +36,7 @@ public void handleNonMetaCharacter(char character, TokenCollector tokenCollector
 
 	@Override
 	public void handleBeginTerm(char character, TokenCollector tokenCollector) throws MessageDescriptorFormatException {
-		throw log.getNestedParameterException( tokenCollector.getOriginalMessageDescriptor() );
+		throw LOG.getNestedParameterException( tokenCollector.getOriginalMessageDescriptor() );
 	}
 
 	@Override
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/parser/MessageState.java b/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/parser/MessageState.java
index 37cd23503c..a8b1de63fd 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/parser/MessageState.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/parser/MessageState.java
@@ -6,6 +6,8 @@
  */
 package org.hibernate.validator.internal.engine.messageinterpolation.parser;
 
+import java.lang.invoke.MethodHandles;
+
 import org.hibernate.validator.internal.engine.messageinterpolation.InterpolationTermType;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
@@ -14,7 +16,8 @@
  * @author Hardy Ferentschik
  */
 public class MessageState implements ParserState {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	@Override
 	public void terminate(TokenCollector tokenCollector) throws MessageDescriptorFormatException {
@@ -40,7 +43,7 @@ public void handleBeginTerm(char character, TokenCollector tokenCollector) throw
 
 	@Override
 	public void handleEndTerm(char character, TokenCollector tokenCollector) throws MessageDescriptorFormatException {
-		throw log.getNonTerminatedParameterException(
+		throw LOG.getNonTerminatedParameterException(
 				tokenCollector.getOriginalMessageDescriptor(),
 				character
 		);
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/path/NodeImpl.java b/engine/src/main/java/org/hibernate/validator/internal/engine/path/NodeImpl.java
index 8a93b9f7fa..0585f4c284 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/path/NodeImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/path/NodeImpl.java
@@ -7,6 +7,7 @@
 package org.hibernate.validator.internal.engine.path;
 
 import java.io.Serializable;
+import java.lang.invoke.MethodHandles;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -40,7 +41,7 @@ public class NodeImpl
 	private static final long serialVersionUID = 2075466571633860499L;
 	private static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[]{};
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private static final String INDEX_OPEN = "[";
 	private static final String INDEX_CLOSE = "]";
@@ -352,7 +353,7 @@ public <T extends Path.Node> T as(Class<T> nodeType) {
 			return nodeType.cast( this );
 		}
 
-		throw log.getUnableToNarrowNodeTypeException( this.getClass(), kind, nodeType );
+		throw LOG.getUnableToNarrowNodeTypeException( this.getClass(), kind, nodeType );
 	}
 
 	@Override
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/path/PathImpl.java b/engine/src/main/java/org/hibernate/validator/internal/engine/path/PathImpl.java
index ba941bc721..0a7bd6bb8c 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/path/PathImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/path/PathImpl.java
@@ -9,6 +9,7 @@
 import static org.hibernate.validator.internal.util.logging.Messages.MESSAGES;
 
 import java.io.Serializable;
+import java.lang.invoke.MethodHandles;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
@@ -33,7 +34,7 @@
  */
 public final class PathImpl implements Path, Serializable {
 	private static final long serialVersionUID = 7564511574909882392L;
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private static final String PROPERTY_PATH_SEPARATOR = ".";
 
@@ -389,7 +390,7 @@ private static PathImpl parseProperty(String propertyName) {
 
 				String value = matcher.group( PROPERTY_NAME_GROUP );
 				if ( !isValidJavaIdentifier( value ) ) {
-					throw log.getInvalidJavaIdentifierException( value );
+					throw LOG.getInvalidJavaIdentifierException( value );
 				}
 
 				// create the node
@@ -416,7 +417,7 @@ private static PathImpl parseProperty(String propertyName) {
 				tmp = matcher.group( REMAINING_STRING_GROUP );
 			}
 			else {
-				throw log.getUnableToParsePropertyPathException( propertyName );
+				throw LOG.getUnableToParsePropertyPathException( propertyName );
 			}
 		} while ( tmp != null );
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/resolver/JPATraversableResolver.java b/engine/src/main/java/org/hibernate/validator/internal/engine/resolver/JPATraversableResolver.java
index 147c0eddfc..b1d401ea9a 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/resolver/JPATraversableResolver.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/resolver/JPATraversableResolver.java
@@ -7,6 +7,8 @@
 package org.hibernate.validator.internal.engine.resolver;
 
 import java.lang.annotation.ElementType;
+import java.lang.invoke.MethodHandles;
+
 import javax.persistence.Persistence;
 import javax.validation.Path;
 import javax.validation.TraversableResolver;
@@ -24,7 +26,8 @@
  * @author Emmanuel Bernard
  */
 class JPATraversableResolver implements TraversableResolver {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	@Override
 	public final boolean isReachable(Object traversableObject,
@@ -32,8 +35,8 @@ public final boolean isReachable(Object traversableObject,
 									 Class<?> rootBeanType,
 									 Path pathToTraversableObject,
 									 ElementType elementType) {
-		if ( log.isTraceEnabled() ) {
-			log.tracef(
+		if ( LOG.isTraceEnabled() ) {
+			LOG.tracef(
 					"Calling isReachable on object %s with node name %s.",
 					traversableObject,
 					traversableProperty.getName()
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/resolver/TraversableResolvers.java b/engine/src/main/java/org/hibernate/validator/internal/engine/resolver/TraversableResolvers.java
index 95dafebb8a..f1392120bd 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/resolver/TraversableResolvers.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/resolver/TraversableResolvers.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.engine.resolver;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Method;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
@@ -22,7 +23,7 @@
 
 public class TraversableResolvers {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	/**
 	 * Class to load to check whether JPA is on the classpath.
@@ -56,7 +57,7 @@ public static TraversableResolver getDefault() {
 			persistenceClass = run( LoadClass.action( PERSISTENCE_CLASS_NAME, TraversableResolvers.class.getClassLoader() ) );
 		}
 		catch (ValidationException e) {
-			log.debugf(
+			LOG.debugf(
 					"Cannot find %s on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.",
 					PERSISTENCE_CLASS_NAME
 			);
@@ -66,7 +67,7 @@ public static TraversableResolver getDefault() {
 		// check whether Persistence contains getPersistenceUtil
 		Method persistenceUtilGetter = run( GetMethod.action( persistenceClass, PERSISTENCE_UTIL_METHOD ) );
 		if ( persistenceUtilGetter == null ) {
-			log.debugf(
+			LOG.debugf(
 					"Found %s on classpath, but no method '%s'. Assuming JPA 1 environment. All properties will per default be traversable.",
 					PERSISTENCE_CLASS_NAME,
 					PERSISTENCE_UTIL_METHOD
@@ -81,7 +82,7 @@ public static TraversableResolver getDefault() {
 			ReflectionHelper.getValue( persistenceUtilGetter, persistence );
 		}
 		catch (Exception e) {
-			log.debugf(
+			LOG.debugf(
 					"Unable to invoke %s.%s. Inconsistent JPA environment. All properties will per default be traversable.",
 					PERSISTENCE_CLASS_NAME,
 					PERSISTENCE_UTIL_METHOD
@@ -89,7 +90,7 @@ public static TraversableResolver getDefault() {
 			return getTraverseAllTraversableResolver();
 		}
 
-		log.debugf(
+		LOG.debugf(
 				"Found %s on classpath containing '%s'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver",
 				PERSISTENCE_CLASS_NAME,
 				PERSISTENCE_UTIL_METHOD
@@ -99,13 +100,13 @@ public static TraversableResolver getDefault() {
 			@SuppressWarnings("unchecked")
 			Class<? extends TraversableResolver> jpaAwareResolverClass = (Class<? extends TraversableResolver>)
 					run( LoadClass.action( JPA_AWARE_TRAVERSABLE_RESOLVER_CLASS_NAME, TraversableResolvers.class.getClassLoader() ) );
-			log.debugf(
+			LOG.debugf(
 					"Instantiated JPA aware TraversableResolver of type %s.", JPA_AWARE_TRAVERSABLE_RESOLVER_CLASS_NAME
 			);
 			return run( NewInstance.action( jpaAwareResolverClass, "" ) );
 		}
 		catch (ValidationException e) {
-			log.debugf(
+			LOG.debugf(
 					"Unable to load or instantiate JPA aware resolver %s. All properties will per default be traversable.",
 					JPA_AWARE_TRAVERSABLE_RESOLVER_CLASS_NAME
 			);
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/scripting/DefaultScriptEvaluatorFactory.java b/engine/src/main/java/org/hibernate/validator/internal/engine/scripting/DefaultScriptEvaluatorFactory.java
index fe3662d954..b117f12bd5 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/scripting/DefaultScriptEvaluatorFactory.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/scripting/DefaultScriptEvaluatorFactory.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.engine.scripting;
 
+import java.lang.invoke.MethodHandles;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 
@@ -31,7 +32,7 @@
  */
 public class DefaultScriptEvaluatorFactory extends AbstractCachingScriptEvaluatorFactory {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private ClassLoader classLoader;
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/valueextraction/ValueExtractorDescriptor.java b/engine/src/main/java/org/hibernate/validator/internal/engine/valueextraction/ValueExtractorDescriptor.java
index 79dd4c486f..d83a7c3b73 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/valueextraction/ValueExtractorDescriptor.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/valueextraction/ValueExtractorDescriptor.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.engine.valueextraction;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.AnnotatedArrayType;
 import java.lang.reflect.AnnotatedParameterizedType;
 import java.lang.reflect.AnnotatedType;
@@ -34,7 +35,7 @@
  */
 public class ValueExtractorDescriptor {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup()  );
 
 	private final Key key;
 	private final ValueExtractor<?> valueExtractor;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/valueextraction/ValueExtractorHelper.java b/engine/src/main/java/org/hibernate/validator/internal/engine/valueextraction/ValueExtractorHelper.java
index 5a5a8683c7..bb01ba223e 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/valueextraction/ValueExtractorHelper.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/valueextraction/ValueExtractorHelper.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.engine.valueextraction;
 
+import java.lang.invoke.MethodHandles;
 import java.util.Set;
 import java.util.stream.Collectors;
 
@@ -22,7 +23,7 @@
  */
 public class ValueExtractorHelper {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private ValueExtractorHelper() {
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/engine/valueextraction/ValueExtractorManager.java b/engine/src/main/java/org/hibernate/validator/internal/engine/valueextraction/ValueExtractorManager.java
index 8750ef4538..8c1e0ac4e1 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/engine/valueextraction/ValueExtractorManager.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/engine/valueextraction/ValueExtractorManager.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.engine.valueextraction;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
 import java.security.AccessController;
@@ -39,7 +40,7 @@
  */
 public class ValueExtractorManager {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	@Immutable
 	public static final Set<ValueExtractorDescriptor> SPEC_DEFINED_EXTRACTORS;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/BeanMetaDataImpl.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/BeanMetaDataImpl.java
index 503343cc93..eb31c549e9 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/BeanMetaDataImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/BeanMetaDataImpl.java
@@ -10,6 +10,7 @@
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashSet;
 
 import java.lang.annotation.ElementType;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Executable;
 import java.lang.reflect.Member;
 import java.lang.reflect.Modifier;
@@ -70,7 +71,7 @@
  */
 public final class BeanMetaDataImpl<T> implements BeanMetaData<T> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	/**
 	 * Represents the "sequence" of just Default.class.
@@ -289,7 +290,7 @@ public PropertyMetaData getMetaDataFor(String propertyName) {
 		PropertyMetaData propertyMetaData = propertyMetaDataMap.get( propertyName );
 
 		if ( propertyMetaData == null ) {
-			throw log.getPropertyNotDefinedByValidatedTypeException( beanClass, propertyName );
+			throw LOG.getPropertyNotDefinedByValidatedTypeException( beanClass, propertyName );
 		}
 
 		return propertyMetaData;
@@ -317,7 +318,7 @@ public Optional<ExecutableMetaData> getMetaDataFor(Executable executable) {
 
 		if ( executableMetaData == null ) {
 			// there is no executable metadata - specified object and method do not match
-			throw log.getMethodOrConstructorNotDefinedByValidatedTypeException(
+			throw LOG.getMethodOrConstructorNotDefinedByValidatedTypeException(
 					beanClass,
 					executable
 			);
@@ -430,7 +431,7 @@ private static Map<String, ConstructorDescriptor> getConstrainedConstructorsAsDe
 
 	private static <T> DefaultGroupSequenceContext<T> getDefaultGroupSequenceData(Class<?> beanClass, List<Class<?>> defaultGroupSequence, DefaultGroupSequenceProvider<? super T> defaultGroupSequenceProvider, ValidationOrderGenerator validationOrderGenerator) {
 		if ( defaultGroupSequence != null && defaultGroupSequenceProvider != null ) {
-			throw log.getInvalidDefaultGroupSequenceDefinitionException();
+			throw LOG.getInvalidDefaultGroupSequenceDefinitionException();
 		}
 
 		DefaultGroupSequenceContext<T> context = new DefaultGroupSequenceContext<>();
@@ -497,7 +498,7 @@ private static List<Class<?>> getValidDefaultGroupSequence(Class<?> beanClass, L
 					groupSequenceContainsDefault = true;
 				}
 				else if ( group.getName().equals( Default.class.getName() ) ) {
-					throw log.getNoDefaultGroupInGroupSequenceException();
+					throw LOG.getNoDefaultGroupInGroupSequenceException();
 				}
 				else {
 					validDefaultGroupSequence.add( group );
@@ -505,10 +506,10 @@ else if ( group.getName().equals( Default.class.getName() ) ) {
 			}
 		}
 		if ( !groupSequenceContainsDefault ) {
-			throw log.getBeanClassMustBePartOfRedefinedDefaultGroupSequenceException( beanClass );
+			throw LOG.getBeanClassMustBePartOfRedefinedDefaultGroupSequenceException( beanClass );
 		}
-		if ( log.isTraceEnabled() ) {
-			log.tracef(
+		if ( LOG.isTraceEnabled() ) {
+			LOG.tracef(
 					"Members of the default group sequence for bean %s are: %s.",
 					beanClass.getName(),
 					validDefaultGroupSequence
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/CascadingMetaDataBuilder.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/CascadingMetaDataBuilder.java
index a1b176361d..df577763ec 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/CascadingMetaDataBuilder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/CascadingMetaDataBuilder.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.metadata.aggregated;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
 import java.util.Collections;
@@ -40,7 +41,7 @@
  */
 public class CascadingMetaDataBuilder {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private static final CascadingMetaDataBuilder NON_CASCADING =
 			new CascadingMetaDataBuilder( null, null, null, null, false, Collections.emptyMap(), Collections.emptyMap() );
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/ContainerCascadingMetaData.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/ContainerCascadingMetaData.java
index b072c37280..3f827e2834 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/ContainerCascadingMetaData.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/ContainerCascadingMetaData.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.metadata.aggregated;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
 import java.util.Collections;
@@ -33,8 +34,7 @@
  */
 public class ContainerCascadingMetaData implements CascadingMetaData {
 
-
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	/**
 	 * The enclosing type that defines this type parameter.
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/NonContainerCascadingMetaData.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/NonContainerCascadingMetaData.java
index 3a2d32fd67..172c06c11d 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/NonContainerCascadingMetaData.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/NonContainerCascadingMetaData.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.metadata.aggregated;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.TypeVariable;
 import java.util.Collections;
 import java.util.List;
@@ -29,7 +30,7 @@
  */
 public class NonContainerCascadingMetaData implements CascadingMetaData {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private static final NonContainerCascadingMetaData NON_CASCADING = new NonContainerCascadingMetaData( false,
 			GroupConversionHelper.EMPTY );
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/MethodConfigurationRule.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/MethodConfigurationRule.java
index 5d72f107ce..c7d1831283 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/MethodConfigurationRule.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/MethodConfigurationRule.java
@@ -6,6 +6,8 @@
  */
 package org.hibernate.validator.internal.metadata.aggregated.rule;
 
+import java.lang.invoke.MethodHandles;
+
 import org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
@@ -17,7 +19,7 @@
  */
 public abstract class MethodConfigurationRule {
 
-	protected static final Log log = LoggerFactory.make();
+	protected static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	/**
 	 * Applies this rule. Invoked for each pair of methods collected by a given
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/OverridingMethodMustNotAlterParameterConstraints.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/OverridingMethodMustNotAlterParameterConstraints.java
index a1a78f8139..2e402c25bb 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/OverridingMethodMustNotAlterParameterConstraints.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/OverridingMethodMustNotAlterParameterConstraints.java
@@ -21,7 +21,7 @@ public void apply(ConstrainedExecutable method, ConstrainedExecutable otherMetho
 		if ( isDefinedOnSubType( method, otherMethod ) &&
 				otherMethod.hasParameterConstraints() &&
 				!method.isEquallyParameterConstrained( otherMethod ) ) {
-			throw log.getParameterConfigurationAlteredInSubTypeException(
+			throw LOG.getParameterConfigurationAlteredInSubTypeException(
 					method.getExecutable(),
 					otherMethod.getExecutable()
 			);
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/ParallelMethodsMustNotDefineGroupConversionForCascadedReturnValue.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/ParallelMethodsMustNotDefineGroupConversionForCascadedReturnValue.java
index d58e5b32ba..4546d1278e 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/ParallelMethodsMustNotDefineGroupConversionForCascadedReturnValue.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/ParallelMethodsMustNotDefineGroupConversionForCascadedReturnValue.java
@@ -24,7 +24,7 @@ public void apply(ConstrainedExecutable method, ConstrainedExecutable otherMetho
 				otherMethod.getCascadingMetaDataBuilder().hasGroupConversionsOnAnnotatedObjectOrContainerElements();
 
 		if ( isDefinedOnParallelType( method, otherMethod ) && isCascaded && hasGroupConversions ) {
-			throw log.getMethodsFromParallelTypesMustNotDefineGroupConversionsForCascadedReturnValueException(
+			throw LOG.getMethodsFromParallelTypesMustNotDefineGroupConversionsForCascadedReturnValueException(
 					method.getExecutable(),
 					otherMethod.getExecutable()
 			);
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/ParallelMethodsMustNotDefineParameterConstraints.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/ParallelMethodsMustNotDefineParameterConstraints.java
index 40431a3bee..2023e3ab2d 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/ParallelMethodsMustNotDefineParameterConstraints.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/ParallelMethodsMustNotDefineParameterConstraints.java
@@ -20,7 +20,7 @@ public class ParallelMethodsMustNotDefineParameterConstraints extends MethodConf
 	public void apply(ConstrainedExecutable method, ConstrainedExecutable otherMethod) {
 		if ( isDefinedOnParallelType( method, otherMethod ) &&
 				( method.hasParameterConstraints() || otherMethod.hasParameterConstraints() ) ) {
-			throw log.getParameterConstraintsDefinedInMethodsFromParallelTypesException(
+			throw LOG.getParameterConstraintsDefinedInMethodsFromParallelTypesException(
 					method.getExecutable(),
 					otherMethod.getExecutable()
 			);
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/ReturnValueMayOnlyBeMarkedOnceAsCascadedPerHierarchyLine.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/ReturnValueMayOnlyBeMarkedOnceAsCascadedPerHierarchyLine.java
index a30ce63153..7bac3875e9 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/ReturnValueMayOnlyBeMarkedOnceAsCascadedPerHierarchyLine.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/ReturnValueMayOnlyBeMarkedOnceAsCascadedPerHierarchyLine.java
@@ -21,7 +21,7 @@ public void apply(ConstrainedExecutable method, ConstrainedExecutable otherMetho
 		if ( method.getCascadingMetaDataBuilder().isMarkedForCascadingOnAnnotatedObjectOrContainerElements() &&
 				otherMethod.getCascadingMetaDataBuilder().isMarkedForCascadingOnAnnotatedObjectOrContainerElements() &&
 				( isDefinedOnSubType( method, otherMethod ) || isDefinedOnSubType( otherMethod, method ) ) ) {
-			throw log.getMethodReturnValueMustNotBeMarkedMoreThanOnceForCascadedValidationException(
+			throw LOG.getMethodReturnValueMustNotBeMarkedMoreThanOnceForCascadedValidationException(
 					method.getExecutable(),
 					otherMethod.getExecutable()
 			);
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/VoidMethodsMustNotBeReturnValueConstrained.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/VoidMethodsMustNotBeReturnValueConstrained.java
index f6e1553da6..3344bd0515 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/VoidMethodsMustNotBeReturnValueConstrained.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/aggregated/rule/VoidMethodsMustNotBeReturnValueConstrained.java
@@ -24,7 +24,7 @@ public void apply(ConstrainedExecutable executable, ConstrainedExecutable otherE
 				( (Method) executable.getExecutable() ).getReturnType() == void.class &&
 				( !executable.getConstraints().isEmpty()
 						|| executable.getCascadingMetaDataBuilder().isMarkedForCascadingOnAnnotatedObjectOrContainerElements() ) ) {
-			throw log.getVoidMethodsMustNotBeConstrainedException( executable.getExecutable() );
+			throw LOG.getVoidMethodsMustNotBeConstrainedException( executable.getExecutable() );
 		}
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/core/AnnotationProcessingOptionsImpl.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/core/AnnotationProcessingOptionsImpl.java
index bfbb2b5211..11bc7d6ccf 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/core/AnnotationProcessingOptionsImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/core/AnnotationProcessingOptionsImpl.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.metadata.core;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Member;
 import java.util.Map;
 
@@ -23,7 +24,7 @@
  */
 public class AnnotationProcessingOptionsImpl implements AnnotationProcessingOptions {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	/**
 	 * Keeps track whether the 'ignore-annotations' flag is set on bean level in the xml configuration. If 'ignore-annotations'
@@ -107,8 +108,8 @@ public boolean areClassLevelConstraintsIgnoredFor(Class<?> clazz) {
 		else {
 			ignoreAnnotation = areAllConstraintAnnotationsIgnoredFor( clazz );
 		}
-		if ( log.isDebugEnabled() && ignoreAnnotation ) {
-			log.debugf( "Class level annotation are getting ignored for %s.", clazz.getName() );
+		if ( LOG.isDebugEnabled() && ignoreAnnotation ) {
+			LOG.debugf( "Class level annotation are getting ignored for %s.", clazz.getName() );
 		}
 		return ignoreAnnotation;
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/core/ConstraintHelper.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/core/ConstraintHelper.java
index b6dc3ac7e7..beceb8b01e 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/core/ConstraintHelper.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/core/ConstraintHelper.java
@@ -9,6 +9,7 @@
 import static org.hibernate.validator.internal.util.logging.Messages.MESSAGES;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Method;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
@@ -65,6 +66,7 @@
 import org.hibernate.validator.constraints.SafeHtml;
 import org.hibernate.validator.constraints.ScriptAssert;
 import org.hibernate.validator.constraints.URL;
+import org.hibernate.validator.constraints.UniqueElements;
 import org.hibernate.validator.constraints.br.CNPJ;
 import org.hibernate.validator.constraints.br.CPF;
 import org.hibernate.validator.constraints.pl.NIP;
@@ -261,6 +263,7 @@
 import org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator;
 import org.hibernate.validator.internal.constraintvalidators.hv.ScriptAssertValidator;
 import org.hibernate.validator.internal.constraintvalidators.hv.URLValidator;
+import org.hibernate.validator.internal.constraintvalidators.hv.UniqueElementsValidator;
 import org.hibernate.validator.internal.constraintvalidators.hv.br.CNPJValidator;
 import org.hibernate.validator.internal.constraintvalidators.hv.br.CPFValidator;
 import org.hibernate.validator.internal.constraintvalidators.hv.pl.NIPValidator;
@@ -293,9 +296,9 @@ public class ConstraintHelper {
 	public static final String MESSAGE = "message";
 	public static final String VALIDATION_APPLIES_TO = "validationAppliesTo";
 
-	private static final List<String> SUPPORTED_VALID_METHODS = Arrays.asList( VALIDATION_APPLIES_TO );
+	private static final List<String> SUPPORTED_VALID_METHODS = Collections.singletonList( VALIDATION_APPLIES_TO );
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 	private static final String JODA_TIME_CLASS_NAME = "org.joda.time.ReadableInstant";
 	private static final String JAVA_MONEY_CLASS_NAME = "javax.money.MonetaryAmount";
 
@@ -666,6 +669,7 @@ public ConstraintHelper() {
 		putConstraint( tmpConstraints, ParameterScriptAssert.class, ParameterScriptAssertValidator.class );
 		putConstraint( tmpConstraints, SafeHtml.class, SafeHtmlValidator.class );
 		putConstraint( tmpConstraints, ScriptAssert.class, ScriptAssertValidator.class );
+		putConstraint( tmpConstraints, UniqueElements.class, UniqueElementsValidator.class );
 		putConstraint( tmpConstraints, URL.class, URLValidator.class );
 
 		this.builtinConstraints = Collections.unmodifiableMap( tmpConstraints );
@@ -861,7 +865,7 @@ private void assertNoParameterStartsWithValid(Class<? extends Annotation> annota
 		final Method[] methods = run( GetDeclaredMethods.action( annotationType ) );
 		for ( Method m : methods ) {
 			if ( m.getName().startsWith( "valid" ) && !SUPPORTED_VALID_METHODS.contains( m.getName() ) ) {
-				throw log.getConstraintParametersCannotStartWithValidException();
+				throw LOG.getConstraintParametersCannotStartWithValidException();
 			}
 		}
 	}
@@ -870,15 +874,15 @@ private void assertPayloadParameterExists(Class<? extends Annotation> annotation
 		try {
 			final Method method = run( GetMethod.action( annotationType, PAYLOAD ) );
 			if ( method == null ) {
-				throw log.getConstraintWithoutMandatoryParameterException( PAYLOAD, annotationType.getName() );
+				throw LOG.getConstraintWithoutMandatoryParameterException( PAYLOAD, annotationType.getName() );
 			}
 			Class<?>[] defaultPayload = (Class<?>[]) method.getDefaultValue();
 			if ( defaultPayload.length != 0 ) {
-				throw log.getWrongDefaultValueForPayloadParameterException( annotationType.getName() );
+				throw LOG.getWrongDefaultValueForPayloadParameterException( annotationType.getName() );
 			}
 		}
 		catch (ClassCastException e) {
-			throw log.getWrongTypeForPayloadParameterException( annotationType.getName(), e );
+			throw LOG.getWrongTypeForPayloadParameterException( annotationType.getName(), e );
 		}
 	}
 
@@ -886,25 +890,25 @@ private void assertGroupsParameterExists(Class<? extends Annotation> annotationT
 		try {
 			final Method method = run( GetMethod.action( annotationType, GROUPS ) );
 			if ( method == null ) {
-				throw log.getConstraintWithoutMandatoryParameterException( GROUPS, annotationType.getName() );
+				throw LOG.getConstraintWithoutMandatoryParameterException( GROUPS, annotationType.getName() );
 			}
 			Class<?>[] defaultGroups = (Class<?>[]) method.getDefaultValue();
 			if ( defaultGroups.length != 0 ) {
-				throw log.getWrongDefaultValueForGroupsParameterException( annotationType.getName() );
+				throw LOG.getWrongDefaultValueForGroupsParameterException( annotationType.getName() );
 			}
 		}
 		catch (ClassCastException e) {
-			throw log.getWrongTypeForGroupsParameterException( annotationType.getName(), e );
+			throw LOG.getWrongTypeForGroupsParameterException( annotationType.getName(), e );
 		}
 	}
 
 	private void assertMessageParameterExists(Class<? extends Annotation> annotationType) {
 		final Method method = run( GetMethod.action( annotationType, MESSAGE ) );
 		if ( method == null ) {
-			throw log.getConstraintWithoutMandatoryParameterException( MESSAGE, annotationType.getName() );
+			throw LOG.getConstraintWithoutMandatoryParameterException( MESSAGE, annotationType.getName() );
 		}
 		if ( method.getReturnType() != String.class ) {
-			throw log.getWrongTypeForMessageParameterException( annotationType.getName() );
+			throw LOG.getWrongTypeForMessageParameterException( annotationType.getName() );
 		}
 	}
 
@@ -921,20 +925,20 @@ private void assertValidationAppliesToParameterSetUpCorrectly(Class<? extends An
 
 		if ( hasGenericValidators && hasCrossParameterValidator ) {
 			if ( method == null ) {
-				throw log.getGenericAndCrossParameterConstraintDoesNotDefineValidationAppliesToParameterException(
+				throw LOG.getGenericAndCrossParameterConstraintDoesNotDefineValidationAppliesToParameterException(
 						annotationType
 				);
 			}
 			if ( method.getReturnType() != ConstraintTarget.class ) {
-				throw log.getValidationAppliesToParameterMustHaveReturnTypeConstraintTargetException( annotationType );
+				throw LOG.getValidationAppliesToParameterMustHaveReturnTypeConstraintTargetException( annotationType );
 			}
 			ConstraintTarget defaultValue = (ConstraintTarget) method.getDefaultValue();
 			if ( defaultValue != ConstraintTarget.IMPLICIT ) {
-				throw log.getValidationAppliesToParameterMustHaveDefaultValueImplicitException( annotationType );
+				throw LOG.getValidationAppliesToParameterMustHaveDefaultValueImplicitException( annotationType );
 			}
 		}
 		else if ( method != null ) {
-			throw log.getValidationAppliesToParameterMustNotBeDefinedForNonGenericAndCrossParameterConstraintException(
+			throw LOG.getValidationAppliesToParameterMustNotBeDefinedForNonGenericAndCrossParameterConstraintException(
 					annotationType
 			);
 		}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/core/MetaConstraints.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/core/MetaConstraints.java
index 61972b4afa..e54bea676f 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/core/MetaConstraints.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/core/MetaConstraints.java
@@ -7,6 +7,7 @@
 package org.hibernate.validator.internal.metadata.core;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
 import java.util.ArrayList;
@@ -42,7 +43,7 @@
  */
 public class MetaConstraints {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private MetaConstraints() {
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/descriptor/ConstraintDescriptorImpl.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/descriptor/ConstraintDescriptorImpl.java
index 16afdbe9e2..094c6e54b2 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/descriptor/ConstraintDescriptorImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/descriptor/ConstraintDescriptorImpl.java
@@ -16,6 +16,7 @@
 import java.lang.annotation.Repeatable;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Executable;
 import java.lang.reflect.Field;
@@ -50,7 +51,7 @@
 import org.hibernate.validator.internal.metadata.core.ConstraintOrigin;
 import org.hibernate.validator.internal.util.CollectionHelper;
 import org.hibernate.validator.internal.util.StringHelper;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 import org.hibernate.validator.internal.util.privilegedactions.GetAnnotationAttributes;
@@ -70,7 +71,7 @@
 public class ConstraintDescriptorImpl<T extends Annotation> implements ConstraintDescriptor<T>, Serializable {
 
 	private static final long serialVersionUID = -2563102960314069246L;
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 	private static final int OVERRIDES_PARAMETER_DEFAULT_INDEX = -1;
 
 	/**
@@ -89,7 +90,7 @@ public class ConstraintDescriptorImpl<T extends Annotation> implements Constrain
 	/**
 	 * The annotation descriptor - accessing the annotation information has a cost so we do it only once.
 	 */
-	private final AnnotationDescriptor<T> annotationDescriptor;
+	private final ConstraintAnnotationDescriptor<T> annotationDescriptor;
 
 	/**
 	 * The set of classes implementing the validation for this constraint. See also
@@ -164,7 +165,7 @@ public class ConstraintDescriptorImpl<T extends Annotation> implements Constrain
 
 	public ConstraintDescriptorImpl(ConstraintHelper constraintHelper,
 			Member member,
-			AnnotationDescriptor<T> annotationDescriptor,
+			ConstraintAnnotationDescriptor<T> annotationDescriptor,
 			ElementType type,
 			Class<?> implicitGroup,
 			ConstraintOrigin definedOn,
@@ -227,20 +228,20 @@ public ConstraintDescriptorImpl(ConstraintHelper constraintHelper,
 
 	public ConstraintDescriptorImpl(ConstraintHelper constraintHelper,
 			Member member,
-			AnnotationDescriptor<T> annotationDescriptor,
+			ConstraintAnnotationDescriptor<T> annotationDescriptor,
 			ElementType type) {
 		this( constraintHelper, member, annotationDescriptor, type, null, ConstraintOrigin.DEFINED_LOCALLY, null );
 	}
 
 	public ConstraintDescriptorImpl(ConstraintHelper constraintHelper,
 			Member member,
-			AnnotationDescriptor<T> annotationDescriptor,
+			ConstraintAnnotationDescriptor<T> annotationDescriptor,
 			ElementType type,
 			ConstraintType constraintType) {
 		this( constraintHelper, member, annotationDescriptor, type, null, ConstraintOrigin.DEFINED_LOCALLY, constraintType );
 	}
 
-	public AnnotationDescriptor<T> getAnnotationDescriptor() {
+	public ConstraintAnnotationDescriptor<T> getAnnotationDescriptor() {
 		return annotationDescriptor;
 	}
 
@@ -255,7 +256,7 @@ public Class<T> getAnnotationType() {
 
 	@Override
 	public String getMessageTemplate() {
-		return (String) getAttributes().get( ConstraintHelper.MESSAGE );
+		return annotationDescriptor.getMessage();
 	}
 
 	@Override
@@ -493,8 +494,8 @@ private static ValidateUnwrappedValue determineValueUnwrapping(Set<Class<? exten
 		return ValidateUnwrappedValue.DEFAULT;
 	}
 
-	private static ConstraintTarget determineValidationAppliesTo(AnnotationDescriptor<?> annotationDescriptor) {
-		return annotationDescriptor.getAttribute( ConstraintHelper.VALIDATION_APPLIES_TO, ConstraintTarget.class );
+	private static ConstraintTarget determineValidationAppliesTo(ConstraintAnnotationDescriptor<?> annotationDescriptor) {
+		return annotationDescriptor.getValidationAppliesTo();
 	}
 
 	private void validateCrossParameterConstraintType(Member member, boolean hasCrossParameterValidator) {
@@ -566,10 +567,10 @@ private boolean isExecutable(ElementType elementType) {
 	}
 
 	@SuppressWarnings("unchecked")
-	private static Set<Class<? extends Payload>> buildPayloadSet(AnnotationDescriptor<?> annotationDescriptor) {
+	private static Set<Class<? extends Payload>> buildPayloadSet(ConstraintAnnotationDescriptor<?> annotationDescriptor) {
 		Set<Class<? extends Payload>> payloadSet = newHashSet();
 
-		Class<Payload>[] payloadFromAnnotation = annotationDescriptor.getAttribute( ConstraintHelper.PAYLOAD, Class[].class );
+		Class<? extends Payload>[] payloadFromAnnotation = annotationDescriptor.getPayload();
 
 		if ( payloadFromAnnotation != null ) {
 			payloadSet.addAll( Arrays.asList( payloadFromAnnotation ) );
@@ -577,9 +578,9 @@ private static Set<Class<? extends Payload>> buildPayloadSet(AnnotationDescripto
 		return CollectionHelper.toImmutableSet( payloadSet );
 	}
 
-	private static Set<Class<?>> buildGroupSet(AnnotationDescriptor<?> annotationDescriptor, Class<?> implicitGroup) {
+	private static Set<Class<?>> buildGroupSet(ConstraintAnnotationDescriptor<?> annotationDescriptor, Class<?> implicitGroup) {
 		Set<Class<?>> groupSet = newHashSet();
-		final Class<?>[] groupsFromAnnotation = annotationDescriptor.getMandatoryAttribute( ConstraintHelper.GROUPS, Class[].class );
+		final Class<?>[] groupsFromAnnotation = annotationDescriptor.getGroups();
 		if ( groupsFromAnnotation.length == 0 ) {
 			groupSet.add( Default.class );
 		}
@@ -736,7 +737,7 @@ private <U extends Annotation> ConstraintDescriptorImpl<U> createComposingConstr
 		final Class<U> annotationType = (Class<U>) constraintAnnotation.annotationType();
 
 		// use a annotation proxy
-		AnnotationDescriptor.Builder<U> annotationDescriptorBuilder = new AnnotationDescriptor.Builder<>(
+		ConstraintAnnotationDescriptor.Builder<U> annotationDescriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>(
 				annotationType, run( GetAnnotationAttributes.action( constraintAnnotation ) )
 		);
 
@@ -753,8 +754,8 @@ annotationType, run( GetAnnotationAttributes.action( constraintAnnotation ) )
 		}
 
 		//propagate inherited attributes to composing constraints
-		annotationDescriptorBuilder.setAttribute( ConstraintHelper.GROUPS, groups.toArray( new Class<?>[groups.size()] ) );
-		annotationDescriptorBuilder.setAttribute( ConstraintHelper.PAYLOAD, payloads.toArray( new Class<?>[payloads.size()] ) );
+		annotationDescriptorBuilder.setGroups( groups.toArray( new Class<?>[groups.size()] ) );
+		annotationDescriptorBuilder.setPayload( payloads.toArray( new Class<?>[payloads.size()] ) );
 		if ( annotationDescriptorBuilder.hasAttribute( ConstraintHelper.VALIDATION_APPLIES_TO ) ) {
 			ConstraintTarget validationAppliesTo = getValidationAppliesTo();
 
@@ -796,7 +797,7 @@ public CompositionType getCompositionType() {
 	/**
 	 * A wrapper class to keep track for which composing constraints (class and index) a given attribute override applies to.
 	 */
-	private class ClassIndexWrapper {
+	private static class ClassIndexWrapper {
 		final Class<?> clazz;
 		final int index;
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/descriptor/ElementDescriptorImpl.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/descriptor/ElementDescriptorImpl.java
index 71f9750998..d80a1972f2 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/descriptor/ElementDescriptorImpl.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/descriptor/ElementDescriptorImpl.java
@@ -7,13 +7,13 @@
 package org.hibernate.validator.internal.metadata.descriptor;
 
 import static org.hibernate.validator.internal.util.CollectionHelper.newArrayList;
-import static org.hibernate.validator.internal.util.CollectionHelper.newHashSet;
 
 import java.io.Serializable;
 import java.lang.annotation.ElementType;
 import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.EnumSet;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -84,23 +84,18 @@ public final ConstraintFinder findConstraints() {
 
 	private class ConstraintFinderImpl implements ConstraintFinder {
 		private List<Class<?>> groups;
-		private final Set<ConstraintOrigin> definedInSet;
-		private final Set<ElementType> elementTypes;
+		private final EnumSet<ConstraintOrigin> definedInSet;
+		private final EnumSet<ElementType> elementTypes;
 
 		ConstraintFinderImpl() {
-			elementTypes = new HashSet<ElementType>();
-			elementTypes.add( ElementType.TYPE );
-			elementTypes.add( ElementType.METHOD );
-			elementTypes.add( ElementType.CONSTRUCTOR );
-			elementTypes.add( ElementType.FIELD );
-			elementTypes.add( ElementType.TYPE_USE );
-
-			//for a bean descriptor there will be no parameter constraints, so we can safely add this element type here
-			elementTypes.add( ElementType.PARAMETER );
-
-			definedInSet = newHashSet();
-			definedInSet.add( ConstraintOrigin.DEFINED_LOCALLY );
-			definedInSet.add( ConstraintOrigin.DEFINED_IN_HIERARCHY );
+			elementTypes = EnumSet.of(
+					ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR,
+					ElementType.FIELD, ElementType.TYPE_USE ,
+					//for a bean descriptor there will be no parameter constraints, so we can safely add this element type here
+					ElementType.PARAMETER
+			);
+
+			definedInSet = EnumSet.allOf( ConstraintOrigin.class );
 			groups = Collections.emptyList();
 		}
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/provider/AnnotationMetaDataProvider.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/provider/AnnotationMetaDataProvider.java
index ca158b04b0..1b387b8e13 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/provider/AnnotationMetaDataProvider.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/provider/AnnotationMetaDataProvider.java
@@ -13,6 +13,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.annotation.ElementType;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.AccessibleObject;
 import java.lang.reflect.AnnotatedArrayType;
 import java.lang.reflect.AnnotatedElement;
@@ -66,7 +67,7 @@
 import org.hibernate.validator.internal.util.ExecutableHelper;
 import org.hibernate.validator.internal.util.ReflectionHelper;
 import org.hibernate.validator.internal.util.TypeResolutionHelper;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 import org.hibernate.validator.internal.util.privilegedactions.GetDeclaredConstructors;
@@ -84,7 +85,10 @@
  * @author Guillaume Smet
  */
 public class AnnotationMetaDataProvider implements MetaDataProvider {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
+
+	private static final Annotation[] EMPTY_PARAMETER_ANNOTATIONS = new Annotation[0];
 
 	private final ConstraintHelper constraintHelper;
 	private final TypeResolutionHelper typeResolutionHelper;
@@ -184,7 +188,7 @@ private <T> DefaultGroupSequenceProvider<? super T> newGroupSequenceProviderClas
 			}
 		}
 
-		throw log.getWrongDefaultGroupSequenceProviderTypeException( beanClass );
+		throw LOG.getWrongDefaultGroupSequenceProviderTypeException( beanClass );
 	}
 
 	private Set<MetaConstraint<?>> getClassLevelConstraints(Class<?> clazz) {
@@ -364,7 +368,6 @@ private Set<MetaConstraint<?>> convertToMetaConstraints(List<ConstraintDescripto
 	 * executable.
 	 *
 	 * @param executable The executable of interest.
-	 * @param parameters The parameters of the executable.
 	 *
 	 * @return A list with parameter meta data for the given executable.
 	 */
@@ -384,8 +387,8 @@ private List<ConstrainedParameter> getParameterMetaData(Executable executable) {
 				parameterAnnotations = parameter.getAnnotations();
 			}
 			catch (ArrayIndexOutOfBoundsException ex) {
-				log.warn( MESSAGES.constraintOnConstructorOfNonStaticInnerClass(), ex );
-				parameterAnnotations = new Annotation[0];
+				LOG.warn( MESSAGES.constraintOnConstructorOfNonStaticInnerClass(), ex );
+				parameterAnnotations = EMPTY_PARAMETER_ANNOTATIONS;
 			}
 
 			Set<MetaConstraint<?>> parameterConstraints = newHashSet();
@@ -530,7 +533,7 @@ private Map<Class<?>, Class<?>> getGroupConversions(ConvertGroup groupConversion
 		if ( groupConversionList != null ) {
 			for ( ConvertGroup conversion : groupConversionList.value() ) {
 				if ( groupConversions.containsKey( conversion.from() ) ) {
-					throw log.getMultipleGroupConversionsForSameSourceException(
+					throw LOG.getMultipleGroupConversionsForSameSourceException(
 							conversion.from(),
 							CollectionHelper.<Class<?>>asSet(
 									groupConversions.get( conversion.from() ),
@@ -552,7 +555,7 @@ private <A extends Annotation> ConstraintDescriptorImpl<A> buildConstraintDescri
 		return new ConstraintDescriptorImpl<>(
 				constraintHelper,
 				member,
-				new AnnotationDescriptor<>( annotation ),
+				new ConstraintAnnotationDescriptor<>( annotation ),
 				type
 		);
 	}
@@ -601,7 +604,7 @@ private CascadingMetaDataBuilder findCascadingMetaData(Executable executable, Pa
 					parameter, containerElementTypesCascadingMetaData );
 		}
 		catch (ArrayIndexOutOfBoundsException ex) {
-			log.warn( MESSAGES.constraintOnConstructorOfNonStaticInnerClass(), ex );
+			LOG.warn( MESSAGES.constraintOnConstructorOfNonStaticInnerClass(), ex );
 			return CascadingMetaDataBuilder.nonCascading();
 		}
 	}
@@ -713,7 +716,7 @@ protected Set<MetaConstraint<?>> findTypeAnnotationConstraintsForExecutableParam
 			);
 		}
 		catch (ArrayIndexOutOfBoundsException ex) {
-			log.warn( MESSAGES.constraintOnConstructorOfNonStaticInnerClass(), ex );
+			LOG.warn( MESSAGES.constraintOnConstructorOfNonStaticInnerClass(), ex );
 			return Collections.emptySet();
 		}
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/provider/ProgrammaticMetaDataProvider.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/provider/ProgrammaticMetaDataProvider.java
index b0cc48a07a..f9f293de31 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/provider/ProgrammaticMetaDataProvider.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/provider/ProgrammaticMetaDataProvider.java
@@ -8,6 +8,7 @@
 
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashSet;
 
+import java.lang.invoke.MethodHandles;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
@@ -32,7 +33,7 @@
  */
 public class ProgrammaticMetaDataProvider implements MetaDataProvider {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	// cached against the fqcn of a class. not a class instance itself (HV-479)
 	@Immutable
diff --git a/engine/src/main/java/org/hibernate/validator/internal/metadata/raw/ConstrainedExecutable.java b/engine/src/main/java/org/hibernate/validator/internal/metadata/raw/ConstrainedExecutable.java
index e285f174d2..8069e49cd3 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/metadata/raw/ConstrainedExecutable.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/metadata/raw/ConstrainedExecutable.java
@@ -9,6 +9,7 @@
 import static org.hibernate.validator.internal.util.CollectionHelper.newArrayList;
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashSet;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Executable;
 import java.util.Collections;
@@ -37,7 +38,7 @@
  */
 public class ConstrainedExecutable extends AbstractConstrainedElement {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final Executable executable;
 
@@ -114,7 +115,7 @@ public ConstrainedExecutable(
 		this.executable = executable;
 
 		if ( parameterMetaData.size() != executable.getParameterTypes().length ) {
-			throw log.getInvalidLengthOfParameterMetaDataListException(
+			throw LOG.getInvalidLengthOfParameterMetaDataListException(
 					executable,
 					executable.getParameterTypes().length,
 					parameterMetaData.size()
@@ -140,7 +141,7 @@ public ConstrainedExecutable(
 	 */
 	public ConstrainedParameter getParameterMetaData(int parameterIndex) {
 		if ( parameterIndex < 0 || parameterIndex > parameterMetaData.size() - 1 ) {
-			throw log.getInvalidExecutableParameterIndexException(
+			throw LOG.getInvalidExecutableParameterIndexException(
 					executable,
 					parameterIndex
 			);
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/Contracts.java b/engine/src/main/java/org/hibernate/validator/internal/util/Contracts.java
index af14fee575..a5867276a9 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/Contracts.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/Contracts.java
@@ -8,6 +8,7 @@
 
 import static org.hibernate.validator.internal.util.logging.Messages.MESSAGES;
 
+import java.lang.invoke.MethodHandles;
 import java.util.Collection;
 
 import org.hibernate.validator.internal.util.logging.Log;
@@ -20,7 +21,7 @@
  */
 public final class Contracts {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private Contracts() {
 	}
@@ -40,7 +41,7 @@ public static void assertNotNull(Object o) {
 	 */
 	public static void assertNotNull(Object o, String message) {
 		if ( o == null ) {
-			throw log.getIllegalArgumentException( message );
+			throw LOG.getIllegalArgumentException( message );
 		}
 	}
 
@@ -56,37 +57,37 @@ public static void assertNotNull(Object o, String message) {
 	 */
 	public static void assertValueNotNull(Object o, String name) {
 		if ( o == null ) {
-			throw log.getIllegalArgumentException( MESSAGES.mustNotBeNull( name ) );
+			throw LOG.getIllegalArgumentException( MESSAGES.mustNotBeNull( name ) );
 		}
 	}
 
 	public static void assertTrue(boolean condition, String message) {
 		if ( !condition ) {
-			throw log.getIllegalArgumentException( message );
+			throw LOG.getIllegalArgumentException( message );
 		}
 	}
 
 	public static void assertTrue(boolean condition, String message, Object... messageParameters) {
 		if ( !condition ) {
-			throw log.getIllegalArgumentException( String.format( message, messageParameters ) );
+			throw LOG.getIllegalArgumentException( String.format( message, messageParameters ) );
 		}
 	}
 
 	public static void assertNotEmpty(String s, String message) {
 		if ( s.length() == 0 ) {
-			throw log.getIllegalArgumentException( message );
+			throw LOG.getIllegalArgumentException( message );
 		}
 	}
 
 	public static void assertNotEmpty(Collection<?> collection, String message) {
 		if ( collection.size() == 0 ) {
-			throw log.getIllegalArgumentException( message );
+			throw LOG.getIllegalArgumentException( message );
 		}
 	}
 
 	public static void assertNotEmpty(Collection<?> collection, String message, Object... messageParameters) {
 		if ( collection.size() == 0 ) {
-			throw log.getIllegalArgumentException( String.format( message, messageParameters ) );
+			throw LOG.getIllegalArgumentException( String.format( message, messageParameters ) );
 		}
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/DomainNameUtil.java b/engine/src/main/java/org/hibernate/validator/internal/util/DomainNameUtil.java
index 0257d01a8b..73b6f65f76 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/DomainNameUtil.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/DomainNameUtil.java
@@ -14,6 +14,7 @@
 
 /**
  * @author Marko Bekhta
+ * @author Guillaume Smet
  */
 public final class DomainNameUtil {
 
@@ -24,8 +25,7 @@ public final class DomainNameUtil {
 	private static final int MAX_DOMAIN_PART_LENGTH = 255;
 
 	private static final String DOMAIN_CHARS_WITHOUT_DASH = "[a-z\u0080-\uFFFF0-9!#$%&'*+/=?^_`{|}~]";
-	private static final String DOMAIN_LABEL = "(" + DOMAIN_CHARS_WITHOUT_DASH + "-?)*" + DOMAIN_CHARS_WITHOUT_DASH + "+";
-
+	private static final String DOMAIN_LABEL = "(" + DOMAIN_CHARS_WITHOUT_DASH + "-*)*" + DOMAIN_CHARS_WITHOUT_DASH + "+";
 	private static final String DOMAIN = DOMAIN_LABEL + "+(\\." + DOMAIN_LABEL + "+)*";
 
 	private static final String IP_DOMAIN = "[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}";
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/ExecutableHelper.java b/engine/src/main/java/org/hibernate/validator/internal/util/ExecutableHelper.java
index b18d51d0fa..ce83775ef2 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/ExecutableHelper.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/ExecutableHelper.java
@@ -7,6 +7,7 @@
 package org.hibernate.validator.internal.util;
 
 import java.lang.annotation.ElementType;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Executable;
 import java.lang.reflect.Method;
@@ -36,7 +37,8 @@
  * @author Kevin Pollet &lt;kevin.pollet@serli.com&gt; (C) 2011 SERLI
  */
 public final class ExecutableHelper {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 	private final TypeResolver typeResolver;
 
 	public ExecutableHelper(TypeResolutionHelper typeResolutionHelper) {
@@ -177,7 +179,7 @@ private boolean instanceMethodParametersResolveToSameTypes(Method subTypeMethod,
 		// Putting this in as a safe guard for HV-861. In case the issue occurs again we will have some
 		// better information
 		catch (ArrayIndexOutOfBoundsException e) {
-			log.debug(
+			LOG.debug(
 					"Error in ExecutableHelper#instanceMethodParametersResolveToSameTypes comparing "
 							+ subTypeMethod
 							+ " with "
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/ReflectionHelper.java b/engine/src/main/java/org/hibernate/validator/internal/util/ReflectionHelper.java
index ef9a643b66..f964a54d6a 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/ReflectionHelper.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/ReflectionHelper.java
@@ -8,6 +8,7 @@
 
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashMap;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Executable;
 import java.lang.reflect.Field;
@@ -46,7 +47,7 @@ public final class ReflectionHelper {
 			PROPERTY_ACCESSOR_PREFIX_HAS
 	};
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private static final Map<Class<?>, Class<?>> PRIMITIVE_TO_WRAPPER_TYPES;
 
@@ -195,7 +196,7 @@ else if ( member instanceof Constructor<?> ) {
 		}
 		//TODO HV-571 change log method name
 		else {
-			throw log.getMemberIsNeitherAFieldNorAMethodException( member );
+			throw LOG.getMemberIsNeitherAFieldNorAMethodException( member );
 		}
 		if ( type instanceof TypeVariable ) {
 			type = TypeHelper.getErasedType( type );
@@ -232,7 +233,7 @@ public static Object getValue(Field field, Object object) {
 			return field.get( object );
 		}
 		catch (IllegalAccessException e) {
-			throw log.getUnableToAccessMemberException( field.getName(), e );
+			throw LOG.getUnableToAccessMemberException( field.getName(), e );
 		}
 	}
 
@@ -241,7 +242,7 @@ public static Object getValue(Method method, Object object) {
 			return method.invoke( object );
 		}
 		catch (IllegalAccessException | InvocationTargetException e) {
-			throw log.getUnableToAccessMemberException( method.getName(), e );
+			throw LOG.getUnableToAccessMemberException( method.getName(), e );
 		}
 	}
 
@@ -305,7 +306,7 @@ public static Class<?> getClassFromType(Type type) {
 		if ( type instanceof GenericArrayType ) {
 			return Object[].class;
 		}
-		throw log.getUnableToConvertTypeToClassException( type );
+		throw LOG.getUnableToConvertTypeToClassException( type );
 	}
 
 	/**
@@ -437,7 +438,7 @@ private static Class<?> internalBoxedType(Class<?> primitiveType) {
 		Class<?> wrapperType = PRIMITIVE_TO_WRAPPER_TYPES.get( primitiveType );
 
 		if ( wrapperType == null ) {
-			throw log.getHasToBeAPrimitiveTypeException( primitiveType.getClass() );
+			throw LOG.getHasToBeAPrimitiveTypeException( primitiveType.getClass() );
 		}
 
 		return wrapperType;
@@ -483,7 +484,7 @@ public static Class<?> unBoxedType(Class<?> type) {
 		Class<?> wrapperType = WRAPPER_TO_PRIMITIVE_TYPES.get( type );
 
 		if ( wrapperType == null ) {
-			throw log.getHasToBeABoxedTypeException( type.getClass() );
+			throw LOG.getHasToBeABoxedTypeException( type.getClass() );
 		}
 
 		return wrapperType;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/TypeHelper.java b/engine/src/main/java/org/hibernate/validator/internal/util/TypeHelper.java
index 464f8a723a..6fdeba8418 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/TypeHelper.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/TypeHelper.java
@@ -22,6 +22,7 @@
 
 import java.io.Serializable;
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Array;
 import java.lang.reflect.GenericArrayType;
 import java.lang.reflect.MalformedParameterizedTypeException;
@@ -49,9 +50,10 @@
  * @author Hardy Ferentschik
  */
 public final class TypeHelper {
+
 	private static final Map<Class<?>, Set<Class<?>>> SUBTYPES_BY_PRIMITIVE;
 	private static final int VALIDATOR_TYPE_INDEX = 1;
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	static {
 		Map<Class<?>, Set<Class<?>>> subtypesByPrimitive = newHashMap();
@@ -315,7 +317,7 @@ public static <A extends Annotation> Map<Type, ConstraintValidatorDescriptor<A>>
 			ConstraintValidatorDescriptor<A> previous = validatorsTypes.put( type, validator );
 
 			if ( previous != null ) {
-				throw log.getMultipleValidatorsForSameTypeException( annotationType, type, previous.getValidatorClass(), validator.getValidatorClass() );
+				throw LOG.getMultipleValidatorsForSameTypeException( annotationType, type, previous.getValidatorClass(), validator.getValidatorClass() );
 			}
 		}
 
@@ -329,7 +331,7 @@ public static Type extractType(Class<? extends ConstraintValidator<?, ?>> valida
 		//we now have all bind from a type to its resolution at one level
 		Type validatorType = ( (ParameterizedType) constraintValidatorType ).getActualTypeArguments()[VALIDATOR_TYPE_INDEX];
 		if ( validatorType == null ) {
-			throw log.getNullIsAnInvalidTypeForAConstraintValidatorException();
+			throw LOG.getNullIsAnInvalidTypeForAConstraintValidatorException();
 		}
 		else if ( validatorType instanceof GenericArrayType ) {
 			validatorType = TypeHelper.getArrayType( TypeHelper.getComponentType( validatorType ) );
@@ -604,7 +606,7 @@ private static <T> ParameterizedType parameterizeClassCapture(Class<T> type, Map
 			Type actualTypeArgument = actualTypeArgumentsByParameter.get( typeParameter );
 
 			if ( actualTypeArgument == null ) {
-				throw log.getMissingActualTypeArgumentForTypeParameterException( typeParameter );
+				throw LOG.getMissingActualTypeArgumentForTypeParameterException( typeParameter );
 			}
 
 			actualTypeArguments[i] = actualTypeArgument;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/TypeVariables.java b/engine/src/main/java/org/hibernate/validator/internal/util/TypeVariables.java
index f4601677c2..6530ae9d61 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/TypeVariables.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/TypeVariables.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.util;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.GenericArrayType;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
@@ -23,7 +24,7 @@
  */
 public class TypeVariables {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private TypeVariables() {
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/Version.java b/engine/src/main/java/org/hibernate/validator/internal/util/Version.java
index 602e844207..2f830895f5 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/Version.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/Version.java
@@ -6,7 +6,8 @@
  */
 package org.hibernate.validator.internal.util;
 
-import org.hibernate.validator.internal.util.logging.Log;
+import java.lang.invoke.MethodHandles;
+
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 
 /**
@@ -15,10 +16,9 @@
  */
 public final class Version {
 
-	private static Log LOG = LoggerFactory.make();
-
 	static {
-		LOG.version( getVersionString() );
+		LoggerFactory.make( MethodHandles.lookup() )
+			.version( getVersionString() );
 	}
 
 	public static String getVersionString() {
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/annotation/AnnotationDescriptor.java b/engine/src/main/java/org/hibernate/validator/internal/util/annotation/AnnotationDescriptor.java
index 2cd5411fc5..029804b764 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/annotation/AnnotationDescriptor.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/annotation/AnnotationDescriptor.java
@@ -10,6 +10,7 @@
 
 import java.io.Serializable;
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Method;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
@@ -44,7 +45,7 @@
  */
 public class AnnotationDescriptor<A extends Annotation> implements Serializable {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final Class<A> type;
 
@@ -62,6 +63,13 @@ public AnnotationDescriptor(A annotation) {
 		this.hashCode = buildHashCode();
 	}
 
+	public AnnotationDescriptor(AnnotationDescriptor<A> descriptor) {
+		this.type = descriptor.type;
+		this.attributes = descriptor.attributes;
+		this.hashCode = descriptor.hashCode;
+		this.annotation = descriptor.annotation;
+	}
+
 	private AnnotationDescriptor(Class<A> annotationType, Map<String, Object> attributes) {
 		this.type = annotationType;
 		this.attributes = CollectionHelper.toImmutableMap( attributes );
@@ -120,7 +128,7 @@ public boolean equals(Object obj) {
 		if ( this == obj ) {
 			return true;
 		}
-		if ( obj == null || obj.getClass() != AnnotationDescriptor.class ) {
+		if ( obj == null || !( obj instanceof AnnotationDescriptor ) ) {
 			return false;
 		}
 
@@ -190,20 +198,16 @@ private int buildHashCode() {
 
 			int nameHashCode = member.getKey().hashCode();
 
-			int valueHashCode =
-					!value.getClass().isArray() ? value.hashCode() :
-							value.getClass() == boolean[].class ? Arrays.hashCode( (boolean[]) value ) :
-									value.getClass() == byte[].class ? Arrays.hashCode( (byte[]) value ) :
-											value.getClass() == char[].class ? Arrays.hashCode( (char[]) value ) :
-													value.getClass() == double[].class ? Arrays.hashCode( (double[]) value ) :
-															value.getClass() == float[].class ? Arrays.hashCode( (float[]) value ) :
-																	value.getClass() == int[].class ? Arrays.hashCode( (int[]) value ) :
-																			value.getClass() == long[].class ? Arrays.hashCode(
-																					(long[]) value
-																			) :
-																					value.getClass() == short[].class ? Arrays
-																							.hashCode( (short[]) value ) :
-																							Arrays.hashCode( (Object[]) value );
+			int valueHashCode = !value.getClass().isArray() ? value.hashCode()
+					: value.getClass() == boolean[].class ? Arrays.hashCode( (boolean[]) value )
+					: value.getClass() == byte[].class ? Arrays.hashCode( (byte[]) value )
+					: value.getClass() == char[].class ? Arrays.hashCode( (char[]) value )
+					: value.getClass() == double[].class ? Arrays.hashCode( (double[]) value )
+					: value.getClass() == float[].class ? Arrays.hashCode( (float[]) value )
+					: value.getClass() == int[].class ? Arrays.hashCode( (int[]) value )
+					: value.getClass() == long[].class ? Arrays.hashCode( (long[]) value )
+					: value.getClass() == short[].class ? Arrays.hashCode( (short[]) value )
+					: Arrays.hashCode( (Object[]) value );
 
 			hashCode += 127 * nameHashCode ^ valueHashCode;
 		}
@@ -212,35 +216,16 @@ private int buildHashCode() {
 	}
 
 	private boolean areEqual(Object o1, Object o2) {
-		return
-				!o1.getClass().isArray() ? o1.equals( o2 ) :
-						o1.getClass() == boolean[].class ? Arrays.equals( (boolean[]) o1, (boolean[]) o2 ) :
-								o1.getClass() == byte[].class ? Arrays.equals( (byte[]) o1, (byte[]) o2 ) :
-										o1.getClass() == char[].class ? Arrays.equals( (char[]) o1, (char[]) o2 ) :
-												o1.getClass() == double[].class ? Arrays.equals(
-														(double[]) o1,
-														(double[]) o2
-												) :
-														o1.getClass() == float[].class ? Arrays.equals(
-																(float[]) o1,
-																(float[]) o2
-														) :
-																o1.getClass() == int[].class ? Arrays.equals(
-																		(int[]) o1,
-																		(int[]) o2
-																) :
-																		o1.getClass() == long[].class ? Arrays.equals(
-																				(long[]) o1,
-																				(long[]) o2
-																		) :
-																				o1.getClass() == short[].class ? Arrays.equals(
-																						(short[]) o1,
-																						(short[]) o2
-																				) :
-																						Arrays.equals(
-																								(Object[]) o1,
-																								(Object[]) o2
-																						);
+		return !o1.getClass().isArray() ? o1.equals( o2 )
+				: o1.getClass() == boolean[].class ? Arrays.equals( (boolean[]) o1, (boolean[]) o2 )
+				: o1.getClass() == byte[].class ? Arrays.equals( (byte[]) o1, (byte[]) o2 )
+				: o1.getClass() == char[].class ? Arrays.equals( (char[]) o1, (char[]) o2 )
+				: o1.getClass() == double[].class ? Arrays.equals( (double[]) o1, (double[]) o2 )
+				: o1.getClass() == float[].class ? Arrays.equals( (float[]) o1, (float[]) o2 )
+				: o1.getClass() == int[].class ? Arrays.equals( (int[]) o1, (int[]) o2 )
+				: o1.getClass() == long[].class ? Arrays.equals( (long[]) o1, (long[]) o2 )
+				: o1.getClass() == short[].class ? Arrays.equals( (short[]) o1, (short[]) o2 )
+				: Arrays.equals( (Object[]) o1, (Object[]) o2 );
 	}
 
 	public static class Builder<S extends Annotation> {
@@ -278,7 +263,7 @@ public Class<S> getType() {
 		}
 
 		public AnnotationDescriptor<S> build() {
-			return new AnnotationDescriptor<S>( type, getAnnotationAttributes() );
+			return new AnnotationDescriptor<>( type, getAnnotationAttributes() );
 		}
 
 		private Map<String, Object> getAnnotationAttributes() {
@@ -339,7 +324,6 @@ private SortedSet<String> getRegisteredAttributesInAlphabeticalOrder() {
 
 	/**
 	 * Runs the given privileged action, using a privileged block if required.
-	 * <p>
 	 * <b>NOTE:</b> This must never be changed into a publicly available method to avoid execution of arbitrary
 	 * privileged actions within HV's protection domain.
 	 */
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/annotation/AnnotationProxy.java b/engine/src/main/java/org/hibernate/validator/internal/util/annotation/AnnotationProxy.java
index beabc5ff42..87a5fd2289 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/annotation/AnnotationProxy.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/annotation/AnnotationProxy.java
@@ -124,34 +124,16 @@ public String toString() {
 
 	private boolean areEqual(Object o1, Object o2) {
 		return
-				!o1.getClass().isArray() ? o1.equals( o2 ) :
-						o1.getClass() == boolean[].class ? Arrays.equals( (boolean[]) o1, (boolean[]) o2 ) :
-								o1.getClass() == byte[].class ? Arrays.equals( (byte[]) o1, (byte[]) o2 ) :
-										o1.getClass() == char[].class ? Arrays.equals( (char[]) o1, (char[]) o2 ) :
-												o1.getClass() == double[].class ? Arrays.equals(
-														(double[]) o1,
-														(double[]) o2
-												) :
-														o1.getClass() == float[].class ? Arrays.equals(
-																(float[]) o1,
-																(float[]) o2
-														) :
-																o1.getClass() == int[].class ? Arrays.equals(
-																		(int[]) o1,
-																		(int[]) o2
-																) :
-																		o1.getClass() == long[].class ? Arrays.equals(
-																				(long[]) o1,
-																				(long[]) o2
-																		) :
-																				o1.getClass() == short[].class ? Arrays.equals(
-																						(short[]) o1,
-																						(short[]) o2
-																				) :
-																						Arrays.equals(
-																								(Object[]) o1,
-																								(Object[]) o2
-																						);
+				!o1.getClass().isArray() ? o1.equals( o2 )
+						: o1.getClass() == boolean[].class ? Arrays.equals( (boolean[]) o1, (boolean[]) o2 )
+						: o1.getClass() == byte[].class ? Arrays.equals( (byte[]) o1, (byte[]) o2 )
+						: o1.getClass() == char[].class ? Arrays.equals( (char[]) o1, (char[]) o2 )
+						: o1.getClass() == double[].class ? Arrays.equals( (double[]) o1, (double[]) o2 )
+						: o1.getClass() == float[].class ? Arrays.equals( (float[]) o1, (float[]) o2 )
+						: o1.getClass() == int[].class ? Arrays.equals( (int[]) o1, (int[]) o2 )
+						: o1.getClass() == long[].class ? Arrays.equals( (long[]) o1, (long[]) o2 )
+						: o1.getClass() == short[].class ? Arrays.equals( (short[]) o1, (short[]) o2 )
+						: Arrays.equals( (Object[]) o1, (Object[]) o2 );
 	}
 
 	private Map<String, Object> getAnnotationAttributes(Annotation annotation) {
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/annotation/ConstraintAnnotationDescriptor.java b/engine/src/main/java/org/hibernate/validator/internal/util/annotation/ConstraintAnnotationDescriptor.java
new file mode 100644
index 0000000000..e534dfcc47
--- /dev/null
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/annotation/ConstraintAnnotationDescriptor.java
@@ -0,0 +1,86 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.internal.util.annotation;
+
+import java.lang.annotation.Annotation;
+import java.util.Map;
+
+import javax.validation.ConstraintTarget;
+import javax.validation.Payload;
+
+import org.hibernate.validator.internal.metadata.core.ConstraintHelper;
+
+/**
+ * @author Marko Bekhta
+ */
+public class ConstraintAnnotationDescriptor<A extends Annotation> extends AnnotationDescriptor<A> {
+
+	public ConstraintAnnotationDescriptor(A annotation) {
+		super( annotation );
+	}
+
+	public ConstraintAnnotationDescriptor(AnnotationDescriptor<A> descriptor) {
+		super( descriptor );
+	}
+
+	public String getMessage() {
+		return getMandatoryAttribute( ConstraintHelper.MESSAGE, String.class );
+	}
+
+	public Class<?>[] getGroups() {
+		return getMandatoryAttribute( ConstraintHelper.GROUPS, Class[].class );
+	}
+
+	@SuppressWarnings("unchecked")
+	public Class<? extends Payload>[] getPayload() {
+		return getMandatoryAttribute( ConstraintHelper.PAYLOAD, Class[].class );
+	}
+
+	public ConstraintTarget getValidationAppliesTo() {
+		return getAttribute( ConstraintHelper.VALIDATION_APPLIES_TO, ConstraintTarget.class );
+	}
+
+	public static class Builder<S extends Annotation> extends AnnotationDescriptor.Builder<S> {
+
+		public Builder(Class<S> type) {
+			super( type );
+		}
+
+		public Builder(Class<S> type, Map<String, Object> attributes) {
+			super( type, attributes );
+		}
+
+		public Builder(S annotation) {
+			super( annotation );
+		}
+
+		public Builder<S> setMessage(String message) {
+			setAttribute( ConstraintHelper.MESSAGE, message );
+			return this;
+		}
+
+		public Builder<S> setGroups(Class<?>[] groups) {
+			setAttribute( ConstraintHelper.GROUPS, groups );
+			return this;
+		}
+
+		public Builder<S> setPayload(Class<?>[] payload) {
+			setAttribute( ConstraintHelper.PAYLOAD, payload );
+			return this;
+		}
+
+		public Builder<S> setValidationAppliesTo(ConstraintTarget validationAppliesTo) {
+			setAttribute( ConstraintHelper.VALIDATION_APPLIES_TO, validationAppliesTo );
+			return this;
+		}
+
+		@Override
+		public ConstraintAnnotationDescriptor<S> build() {
+			return new ConstraintAnnotationDescriptor<>( super.build() );
+		}
+	}
+}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/logging/Log.java b/engine/src/main/java/org/hibernate/validator/internal/util/logging/Log.java
index d9c41c88a4..196275c9b6 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/logging/Log.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/logging/Log.java
@@ -12,12 +12,14 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.annotation.ElementType;
+import java.lang.invoke.MethodHandles.Lookup;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Executable;
 import java.lang.reflect.Member;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
+import java.time.Duration;
 import java.util.Collection;
 import java.util.List;
 import java.util.Set;
@@ -49,7 +51,9 @@
 import org.hibernate.validator.internal.util.logging.formatter.ClassObjectFormatter;
 import org.hibernate.validator.internal.util.logging.formatter.CollectionOfClassesObjectFormatter;
 import org.hibernate.validator.internal.util.logging.formatter.CollectionOfObjectsToStringFormatter;
+import org.hibernate.validator.internal.util.logging.formatter.DurationFormatter;
 import org.hibernate.validator.internal.util.logging.formatter.ExecutableFormatter;
+import org.hibernate.validator.internal.util.logging.formatter.ObjectArrayFormatter;
 import org.hibernate.validator.internal.util.logging.formatter.TypeFormatter;
 import org.hibernate.validator.internal.xml.ContainerElementTypePath;
 import org.hibernate.validator.spi.scripting.ScriptEvaluationException;
@@ -816,4 +820,21 @@ ConstraintDeclarationException getNoValueExtractorFoundForTypeException(@FormatW
 	@LogMessage(level = DEBUG)
 	@Message(id = 234, value = "Using %1$s as ValidatorFactory-scoped %2$s.")
 	void logValidatorFactoryScopedConfiguration(@FormatWith(ClassObjectFormatter.class) Class<?> configuredClass, String configuredElement);
+
+	@Message(id = 235, value = "Unable to create an annotation descriptor for %1$s.")
+	ValidationException getUnableToCreateAnnotationDescriptor(@FormatWith(ClassObjectFormatter.class) Class<?> configuredClass, @Cause Throwable e);
+
+	@Message(id = 236, value = "Unable to find the method required to create the constraint annotation descriptor.")
+	ValidationException getUnableToFindAnnotationDefDeclaredMethods(@Cause Exception e);
+
+	@Message(id = 237, value = "Unable to access method %3$s of class %2$s with parameters %4$s using lookup %1$s.")
+	ValidationException getUnableToAccessMethodException(Lookup lookup, @FormatWith(ClassObjectFormatter.class) Class<?> clazz, String methodName,
+			@FormatWith(ObjectArrayFormatter.class) Object[] parameterTypes, @Cause Throwable e);
+
+	@LogMessage(level = INFO)
+	@Message(id = 238, value = "Temporal validation tolerance set to %1$s.")
+	void logTemporalValidationTolerance(@FormatWith(DurationFormatter.class) Duration tolerance);
+
+	@Message(id = 239, value = "Unable to parse the temporal validation tolerance property %s. It should be a duration represented in milliseconds.")
+	ValidationException getUnableToParseTemporalValidationToleranceException(String toleranceProperty, @Cause Exception e);
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/logging/LoggerFactory.java b/engine/src/main/java/org/hibernate/validator/internal/util/logging/LoggerFactory.java
index 7b6e92cbeb..69fed58fb5 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/logging/LoggerFactory.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/logging/LoggerFactory.java
@@ -6,17 +6,20 @@
  */
 package org.hibernate.validator.internal.util.logging;
 
+import java.lang.invoke.MethodHandles.Lookup;
+
 import org.jboss.logging.Logger;
 
 /**
  * @author Hardy Ferentschik
  * @author Kevin Pollet &lt;kevin.pollet@serli.com&gt; (C) 2012 SERLI
+ * @author Sanne Grinovero
  */
 public final class LoggerFactory {
-	public static Log make() {
-		Throwable t = new Throwable();
-		StackTraceElement directCaller = t.getStackTrace()[1];
-		return Logger.getMessageLogger( Log.class, directCaller.getClassName() );
+
+	public static Log make(final Lookup creationContext) {
+		final String className = creationContext.lookupClass().getName();
+		return Logger.getMessageLogger( Log.class, className );
 	}
 
 	// private constructor to avoid instantiation
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/logging/formatter/DurationFormatter.java b/engine/src/main/java/org/hibernate/validator/internal/util/logging/formatter/DurationFormatter.java
new file mode 100644
index 0000000000..499f9aa90e
--- /dev/null
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/logging/formatter/DurationFormatter.java
@@ -0,0 +1,61 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.internal.util.logging.formatter;
+
+import java.time.Duration;
+
+/**
+ * Used with JBoss Logging to display durations in log messages.
+ *
+ * @author Marko Bekhta
+ * @author Guillaume Smet
+ */
+public class DurationFormatter {
+
+	private final String stringRepresentation;
+
+	public DurationFormatter(Duration duration) {
+		if ( Duration.ZERO.equals( duration ) ) {
+			this.stringRepresentation = "0";
+		}
+		else {
+			long seconds = duration.getSeconds();
+			long days = seconds / ( 24 * 3_600 );
+			long hours = seconds / 3_600 % 24;
+			long minutes = seconds / 60 % 60;
+			int millis = duration.getNano() / 1_000_000;
+			int nanos = duration.getNano() % 1_000_000;
+
+			StringBuilder formattedDuration = new StringBuilder();
+			appendTimeUnit( formattedDuration, days, "days", "day" );
+			appendTimeUnit( formattedDuration, hours, "hours", "hour" );
+			appendTimeUnit( formattedDuration, minutes, "minutes", "minute" );
+			appendTimeUnit( formattedDuration, seconds % 60, "seconds", "second" );
+			appendTimeUnit( formattedDuration, millis, "milliseconds", "millisecond" );
+			appendTimeUnit( formattedDuration, nanos, "nanoseconds", "nanosecond" );
+
+			this.stringRepresentation = formattedDuration.toString();
+		}
+	}
+
+	private void appendTimeUnit(StringBuilder sb, long number, String pluralLabel, String singularLabel) {
+		if ( number == 0 ) {
+			return;
+		}
+		if ( sb.length() > 0 ) {
+			sb.append( " " );
+		}
+		sb.append( number )
+				.append( " " )
+				.append( number == 1 ? singularLabel : pluralLabel );
+	}
+
+	@Override
+	public String toString() {
+		return stringRepresentation;
+	}
+}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/logging/formatter/ObjectArrayFormatter.java b/engine/src/main/java/org/hibernate/validator/internal/util/logging/formatter/ObjectArrayFormatter.java
new file mode 100644
index 0000000000..984d9e7509
--- /dev/null
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/logging/formatter/ObjectArrayFormatter.java
@@ -0,0 +1,28 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.internal.util.logging.formatter;
+
+import java.util.Arrays;
+
+/**
+ * Used with JBoss Logging to display arrays of objects in log messages.
+ *
+ * @author Guillaume Smet
+ */
+public class ObjectArrayFormatter {
+
+	private final String stringRepresentation;
+
+	public ObjectArrayFormatter(Object[] array) {
+		this.stringRepresentation = Arrays.toString( array );
+	}
+
+	@Override
+	public String toString() {
+		return stringRepresentation;
+	}
+}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/ConstructorInstance.java b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/ConstructorInstance.java
index b09ae6609a..24849921cb 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/ConstructorInstance.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/ConstructorInstance.java
@@ -8,6 +8,7 @@
 
 package org.hibernate.validator.internal.util.privilegedactions;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.security.PrivilegedAction;
@@ -23,7 +24,7 @@
  */
 public final class ConstructorInstance<T> implements PrivilegedAction<T> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final Constructor<T> constructor;
 	private final Object[] initArgs;
@@ -43,7 +44,7 @@ public T run() {
 			return constructor.newInstance( initArgs );
 		}
 		catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
-			throw log.getUnableToInstantiateException( constructor.getDeclaringClass(), e );
+			throw LOG.getUnableToInstantiateException( constructor.getDeclaringClass(), e );
 		}
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/GetAnnotationAttribute.java b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/GetAnnotationAttribute.java
index 8c75887f4f..1bbd5a7a12 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/GetAnnotationAttribute.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/GetAnnotationAttribute.java
@@ -7,6 +7,7 @@
 package org.hibernate.validator.internal.util.privilegedactions;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.security.PrivilegedAction;
@@ -20,7 +21,7 @@
  */
 public final class GetAnnotationAttribute<T> implements PrivilegedAction<T> {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final Annotation annotation;
 	private final String attributeName;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/GetAnnotationAttributes.java b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/GetAnnotationAttributes.java
index b299e2ed25..2d7dcddd83 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/GetAnnotationAttributes.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/GetAnnotationAttributes.java
@@ -9,6 +9,7 @@
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashMap;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.security.PrivilegedAction;
@@ -23,7 +24,7 @@
  */
 public final class GetAnnotationAttributes implements PrivilegedAction<Map<String, Object>> {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final Annotation annotation;
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/GetDeclaredMethodHandle.java b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/GetDeclaredMethodHandle.java
new file mode 100644
index 0000000000..10440893f4
--- /dev/null
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/GetDeclaredMethodHandle.java
@@ -0,0 +1,70 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.internal.util.privilegedactions;
+
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
+import java.lang.invoke.MethodHandles.Lookup;
+import java.lang.reflect.Method;
+import java.security.PrivilegedAction;
+
+import org.hibernate.validator.internal.util.logging.Log;
+import org.hibernate.validator.internal.util.logging.LoggerFactory;
+
+/**
+ * Returns the declared method with the specified name and parameter types in the form of a {@link MethodHandle} or
+ * {@code null} if it does not exist or cannot be accessed.
+ *
+ * @author Guillaume Smet
+ */
+public final class GetDeclaredMethodHandle implements PrivilegedAction<MethodHandle> {
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
+
+	private final Lookup lookup;
+	private final Class<?> clazz;
+	private final String methodName;
+	private final Class<?>[] parameterTypes;
+	private final boolean makeAccessible;
+
+	public static GetDeclaredMethodHandle action(Lookup lookup, Class<?> clazz, String methodName, Class<?>... parameterTypes) {
+		return new GetDeclaredMethodHandle( lookup, clazz, methodName, false, parameterTypes );
+	}
+
+	/**
+	 * Before using this method on arbitrary classes, you need to check the {@code HibernateValidatorPermission.ACCESS_PRIVATE_MEMBERS}
+	 * permission against the security manager.
+	 */
+	public static GetDeclaredMethodHandle andMakeAccessible(Lookup lookup, Class<?> clazz, String methodName, Class<?>... parameterTypes) {
+		return new GetDeclaredMethodHandle( lookup, clazz, methodName, true, parameterTypes );
+	}
+
+	private GetDeclaredMethodHandle(Lookup lookup, Class<?> clazz, String methodName, boolean makeAccessible, Class<?>... parameterTypes) {
+		this.lookup = lookup;
+		this.clazz = clazz;
+		this.methodName = methodName;
+		this.parameterTypes = parameterTypes;
+		this.makeAccessible = makeAccessible;
+	}
+
+	@Override
+	public MethodHandle run() {
+		try {
+			Method method = clazz.getDeclaredMethod( methodName, parameterTypes );
+			if ( makeAccessible ) {
+				method.setAccessible( true );
+			}
+			return lookup.unreflect( method );
+		}
+		catch (NoSuchMethodException e) {
+			return null;
+		}
+		catch (IllegalAccessException e) {
+			throw LOG.getUnableToAccessMethodException( lookup, clazz, methodName, parameterTypes, e );
+		}
+	}
+}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/LoadClass.java b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/LoadClass.java
index 9e544f2301..da33182ca3 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/LoadClass.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/LoadClass.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.util.privilegedactions;
 
+import java.lang.invoke.MethodHandles;
 import java.security.PrivilegedAction;
 
 import org.hibernate.validator.HibernateValidator;
@@ -28,7 +29,7 @@
  */
 public final class LoadClass implements PrivilegedAction<Class<?>> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private static final String HIBERNATE_VALIDATOR_CLASS_NAME = "org.hibernate.validator";
 
@@ -85,15 +86,15 @@ private Class<?> loadClassInValidatorNameSpace() {
 					return Class.forName( className, false, contextClassLoader );
 				}
 				catch (ClassNotFoundException e) {
-					throw log.getUnableToLoadClassException( className, contextClassLoader, e );
+					throw LOG.getUnableToLoadClassException( className, contextClassLoader, e );
 				}
 			}
 			else {
-				throw log.getUnableToLoadClassException( className, loader, exception );
+				throw LOG.getUnableToLoadClassException( className, loader, exception );
 			}
 		}
 		else {
-			throw log.getUnableToLoadClassException( className, loader, exception );
+			throw LOG.getUnableToLoadClassException( className, loader, exception );
 		}
 	}
 
@@ -129,11 +130,11 @@ private Class<?> loadNonValidatorClass() {
 				return Class.forName( className, true, loader );
 			}
 			catch (ClassNotFoundException e) {
-				throw log.getUnableToLoadClassException( className, loader, e );
+				throw LOG.getUnableToLoadClassException( className, loader, e );
 			}
 		}
 		else {
-			throw log.getUnableToLoadClassException( className, classLoader, exception );
+			throw LOG.getUnableToLoadClassException( className, classLoader, exception );
 		}
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/NewInstance.java b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/NewInstance.java
index 9ad8be6c5f..92404467a9 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/NewInstance.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/NewInstance.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.util.privilegedactions;
 
+import java.lang.invoke.MethodHandles;
 import java.security.PrivilegedAction;
 
 import org.hibernate.validator.internal.util.logging.Log;
@@ -19,7 +20,7 @@
  */
 public final class NewInstance<T> implements PrivilegedAction<T> {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final Class<T> clazz;
 	private final String message;
@@ -39,13 +40,13 @@ public T run() {
 			return clazz.newInstance();
 		}
 		catch (InstantiationException e) {
-			throw log.getUnableToInstantiateException( message, clazz, e );
+			throw LOG.getUnableToInstantiateException( message, clazz, e );
 		}
 		catch (IllegalAccessException e) {
-			throw log.getUnableToInstantiateException( clazz, e );
+			throw LOG.getUnableToInstantiateException( clazz, e );
 		}
 		catch (RuntimeException e) {
-			throw log.getUnableToInstantiateException( clazz, e );
+			throw LOG.getUnableToInstantiateException( clazz, e );
 		}
 	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedExecutableBuilder.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedExecutableBuilder.java
index d85e7f6554..382abe3206 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedExecutableBuilder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedExecutableBuilder.java
@@ -9,6 +9,7 @@
 import static org.hibernate.validator.internal.util.CollectionHelper.newArrayList;
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashSet;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Executable;
 import java.lang.reflect.Method;
@@ -53,7 +54,7 @@
  */
 class ConstrainedExecutableBuilder {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final ClassLoadingHelper classLoadingHelper;
 	private final MetaConstraintBuilder metaConstraintBuilder;
@@ -98,7 +99,7 @@ Set<ConstrainedExecutable> buildMethodConstrainedExecutable(List<MethodType> met
 			);
 
 			if ( method == null ) {
-				throw log.getBeanDoesNotContainMethodException(
+				throw LOG.getBeanDoesNotContainMethodException(
 						beanClass,
 						methodName,
 						parameterTypes
@@ -106,7 +107,7 @@ Set<ConstrainedExecutable> buildMethodConstrainedExecutable(List<MethodType> met
 			}
 
 			if ( alreadyProcessedMethods.contains( method ) ) {
-				throw log.getMethodIsDefinedTwiceInMappingXmlForBeanException( method, beanClass );
+				throw LOG.getMethodIsDefinedTwiceInMappingXmlForBeanException( method, beanClass );
 			}
 			else {
 				alreadyProcessedMethods.add( method );
@@ -154,13 +155,13 @@ Set<ConstrainedExecutable> buildConstructorConstrainedExecutable(List<Constructo
 			);
 
 			if ( constructor == null ) {
-				throw log.getBeanDoesNotContainConstructorException(
+				throw LOG.getBeanDoesNotContainConstructorException(
 						beanClass,
 						constructorParameterTypes
 				);
 			}
 			if ( alreadyProcessedConstructors.contains( constructor ) ) {
-				throw log.getConstructorIsDefinedTwiceInMappingXmlForBeanException(
+				throw LOG.getConstructorIsDefinedTwiceInMappingXmlForBeanException(
 						constructor,
 						beanClass
 				);
@@ -313,7 +314,7 @@ private List<Class<?>> createParameterTypes(List<ParameterType> parameterList,
 				parameterTypes.add( parameterClass );
 			}
 			catch (ValidationException e) {
-				throw log.getInvalidParameterTypeException( type, beanClass );
+				throw LOG.getInvalidParameterTypeException( type, beanClass );
 			}
 		}
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedFieldBuilder.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedFieldBuilder.java
index 16428d06a6..f36ed6e054 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedFieldBuilder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedFieldBuilder.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.xml;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
@@ -38,7 +39,7 @@
  * @author Guillaume Smet
  */
 class ConstrainedFieldBuilder {
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final GroupConversionBuilder groupConversionBuilder;
 	private final MetaConstraintBuilder metaConstraintBuilder;
@@ -112,7 +113,7 @@ private CascadingMetaDataBuilder getCascadingMetaDataForField(Map<TypeVariable<?
 
 	private static Field findField(Class<?> beanClass, String fieldName, List<String> alreadyProcessedFieldNames) {
 		if ( alreadyProcessedFieldNames.contains( fieldName ) ) {
-			throw log.getIsDefinedTwiceInMappingXmlForBeanException( fieldName, beanClass );
+			throw LOG.getIsDefinedTwiceInMappingXmlForBeanException( fieldName, beanClass );
 		}
 		else {
 			alreadyProcessedFieldNames.add( fieldName );
@@ -120,7 +121,7 @@ private static Field findField(Class<?> beanClass, String fieldName, List<String
 
 		final Field field = run( GetDeclaredField.action( beanClass, fieldName ) );
 		if ( field == null ) {
-			throw log.getBeanDoesNotContainTheFieldException( beanClass, fieldName );
+			throw LOG.getBeanDoesNotContainTheFieldException( beanClass, fieldName );
 		}
 		return field;
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedGetterBuilder.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedGetterBuilder.java
index a01e6e24e9..f78c94f4e2 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedGetterBuilder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ConstrainedGetterBuilder.java
@@ -9,6 +9,7 @@
 import static org.hibernate.validator.internal.util.CollectionHelper.newArrayList;
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashSet;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
@@ -41,7 +42,8 @@
  * @author Guillaume Smet
  */
 class ConstrainedGetterBuilder {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final GroupConversionBuilder groupConversionBuilder;
 	private final MetaConstraintBuilder metaConstraintBuilder;
@@ -118,7 +120,7 @@ private CascadingMetaDataBuilder getCascadingMetaDataForGetter(Map<TypeVariable<
 
 	private static Method findGetter(Class<?> beanClass, String getterName, List<String> alreadyProcessedGetterNames) {
 		if ( alreadyProcessedGetterNames.contains( getterName ) ) {
-			throw log.getIsDefinedTwiceInMappingXmlForBeanException( getterName, beanClass );
+			throw LOG.getIsDefinedTwiceInMappingXmlForBeanException( getterName, beanClass );
 		}
 		else {
 			alreadyProcessedGetterNames.add( getterName );
@@ -126,7 +128,7 @@ private static Method findGetter(Class<?> beanClass, String getterName, List<Str
 
 		final Method method = run( GetMethodFromPropertyName.action( beanClass, getterName ) );
 		if ( method == null ) {
-			throw log.getBeanDoesNotContainThePropertyException( beanClass, getterName );
+			throw LOG.getBeanDoesNotContainThePropertyException( beanClass, getterName );
 		}
 
 		return method;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ContainerElementTypeConfigurationBuilder.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ContainerElementTypeConfigurationBuilder.java
index 80060abbf9..521fbfd3c7 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ContainerElementTypeConfigurationBuilder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ContainerElementTypeConfigurationBuilder.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.internal.xml;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
@@ -34,7 +35,7 @@
  */
 class ContainerElementTypeConfigurationBuilder {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final ConstraintLocation rootConstraintLocation;
 
@@ -163,7 +164,7 @@ private Type getContainerElementType(Type enclosingType, Integer typeArgumentInd
 		return containerElementType;
 	}
 
-	class ContainerElementTypeConfiguration {
+	static class ContainerElementTypeConfiguration {
 
 		private final Set<MetaConstraint<?>> metaConstraints;
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/GroupConversionBuilder.java b/engine/src/main/java/org/hibernate/validator/internal/xml/GroupConversionBuilder.java
index 4a38aeab90..6077edc763 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/GroupConversionBuilder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/GroupConversionBuilder.java
@@ -8,6 +8,7 @@
 
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashMap;
 
+import java.lang.invoke.MethodHandles;
 import java.util.List;
 import java.util.Map;
 
@@ -25,7 +26,7 @@
  */
 class GroupConversionBuilder {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final ClassLoadingHelper classLoadingHelper;
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/MappingXmlParser.java b/engine/src/main/java/org/hibernate/validator/internal/xml/MappingXmlParser.java
index e97442c80b..271b879b53 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/MappingXmlParser.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/MappingXmlParser.java
@@ -12,6 +12,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 import java.security.PrivilegedExceptionAction;
@@ -62,7 +63,7 @@
  */
 public class MappingXmlParser {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final Set<Class<?>> processedClasses = newHashSet();
 	private final ConstraintHelper constraintHelper;
@@ -169,7 +170,7 @@ public final void parse(Set<InputStream> mappingStreams) {
 			}
 		}
 		catch (JAXBException | SAXException | IOException | XMLStreamException e) {
-			throw log.getErrorParsingMappingFileException( e );
+			throw LOG.getErrorParsingMappingFileException( e );
 		}
 	}
 
@@ -289,7 +290,7 @@ private void parseConstraintDefinitions(List<ConstraintDefinitionType> constrain
 		for ( ConstraintDefinitionType constraintDefinition : constraintDefinitionList ) {
 			String annotationClassName = constraintDefinition.getAnnotation();
 			if ( alreadyProcessedConstraintDefinitions.contains( annotationClassName ) ) {
-				throw log.getOverridingConstraintDefinitionsInMultipleMappingFilesException( annotationClassName );
+				throw LOG.getOverridingConstraintDefinitionsInMultipleMappingFilesException( annotationClassName );
 			}
 			else {
 				alreadyProcessedConstraintDefinitions.add( annotationClassName );
@@ -297,7 +298,7 @@ private void parseConstraintDefinitions(List<ConstraintDefinitionType> constrain
 
 			Class<?> clazz = classLoadingHelper.loadClass( annotationClassName, defaultPackage );
 			if ( !clazz.isAnnotation() ) {
-				throw log.getIsNotAnAnnotationException( clazz );
+				throw LOG.getIsNotAnAnnotationException( clazz );
 			}
 			Class<? extends Annotation> annotationClass = (Class<? extends Annotation>) clazz;
 
@@ -315,7 +316,7 @@ private <A extends Annotation> void addValidatorDefinitions(Class<A> annotationC
 					.loadClass( validatorClassName, defaultPackage );
 
 			if ( !ConstraintValidator.class.isAssignableFrom( validatorClass ) ) {
-				throw log.getIsNotAConstraintValidatorClassException( validatorClass );
+				throw LOG.getIsNotAConstraintValidatorClassException( validatorClass );
 			}
 
 			constraintValidatorDescriptors.add( ConstraintValidatorDescriptor.forClass( validatorClass ) );
@@ -329,7 +330,7 @@ private <A extends Annotation> void addValidatorDefinitions(Class<A> annotationC
 
 	private void checkClassHasNotBeenProcessed(Set<Class<?>> processedClasses, Class<?> beanClass) {
 		if ( processedClasses.contains( beanClass ) ) {
-			throw log.getBeanClassHasAlreadyBeConfiguredInXmlException( beanClass );
+			throw LOG.getBeanClassHasAlreadyBeConfiguredInXmlException( beanClass );
 		}
 	}
 
@@ -351,7 +352,7 @@ private void addConstrainedElements(Class<?> beanClass, Set<? extends Constraine
 
 			for ( ConstrainedElement constrainedElement : newConstrainedElements ) {
 				if ( existingConstrainedElements.contains( constrainedElement ) ) {
-						throw log.getConstrainedElementConfiguredMultipleTimesException(
+						throw LOG.getConstrainedElementConfiguredMultipleTimesException(
 								constrainedElement.toString()
 						);
 				}
@@ -381,7 +382,7 @@ private ConstraintMappingsType getValidationConfig(XMLEventReader xmlEventReader
 			constraintMappings = root.getValue();
 		}
 		catch (Exception e) {
-			throw log.getErrorParsingMappingFileException( e );
+			throw LOG.getErrorParsingMappingFileException( e );
 		}
 		return constraintMappings;
 	}
@@ -390,7 +391,7 @@ private String getSchemaResourceName(String schemaVersion) {
 		String schemaResource = SCHEMAS_BY_VERSION.get( schemaVersion );
 
 		if ( schemaResource == null ) {
-			throw log.getUnsupportedSchemaVersionException( "constraint mapping file", schemaVersion );
+			throw LOG.getUnsupportedSchemaVersionException( "constraint mapping file", schemaVersion );
 		}
 
 		return schemaResource;
@@ -420,7 +421,7 @@ private <T> T run(PrivilegedExceptionAction<T> action) throws JAXBException {
 			throw e;
 		}
 		catch (Exception e) {
-			throw log.getErrorParsingMappingFileException( e );
+			throw LOG.getErrorParsingMappingFileException( e );
 		}
 	}
 
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/MetaConstraintBuilder.java b/engine/src/main/java/org/hibernate/validator/internal/xml/MetaConstraintBuilder.java
index 7a6c8cc2d3..7851214f3b 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/MetaConstraintBuilder.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/MetaConstraintBuilder.java
@@ -10,6 +10,7 @@
 
 import java.io.Serializable;
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Array;
 import java.lang.reflect.Method;
 import java.security.AccessController;
@@ -30,6 +31,7 @@
 import org.hibernate.validator.internal.metadata.location.ConstraintLocation;
 import org.hibernate.validator.internal.util.TypeResolutionHelper;
 import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 import org.hibernate.validator.internal.util.privilegedactions.GetMethod;
@@ -45,13 +47,11 @@
  * @author Hardy Ferentschik
  */
 class MetaConstraintBuilder {
-	private static final Log log = LoggerFactory.make();
 
-	private static final Pattern IS_ONLY_WHITESPACE = Pattern.compile( "\\s*" );
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
-	private static final String MESSAGE_PARAM = "message";
-	private static final String GROUPS_PARAM = "groups";
-	private static final String PAYLOAD_PARAM = "payload";
+	private static final Pattern IS_ONLY_WHITESPACE = Pattern.compile( "\\s*" );
+	private static final Class[] EMPTY_CLASSES_ARRAY = new Class[0];
 
 	private final ClassLoadingHelper classLoadingHelper;
 	private final ConstraintHelper constraintHelper;
@@ -77,15 +77,15 @@ <A extends Annotation> MetaConstraint<A> buildMetaConstraint(ConstraintLocation
 			annotationClass = (Class<A>) classLoadingHelper.loadClass( constraint.getAnnotation(), defaultPackage );
 		}
 		catch (ValidationException e) {
-			throw log.getUnableToLoadConstraintAnnotationClassException( constraint.getAnnotation(), e );
+			throw LOG.getUnableToLoadConstraintAnnotationClassException( constraint.getAnnotation(), e );
 		}
-		AnnotationDescriptor.Builder<A> annotationDescriptorBuilder = new AnnotationDescriptor.Builder<>( annotationClass );
+		ConstraintAnnotationDescriptor.Builder<A> annotationDescriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( annotationClass );
 
 		if ( constraint.getMessage() != null ) {
-			annotationDescriptorBuilder.setAttribute( MESSAGE_PARAM, constraint.getMessage() );
+			annotationDescriptorBuilder.setMessage( constraint.getMessage() );
 		}
-		annotationDescriptorBuilder.setAttribute( GROUPS_PARAM, getGroups( constraint.getGroups(), defaultPackage ) );
-		annotationDescriptorBuilder.setAttribute( PAYLOAD_PARAM, getPayload( constraint.getPayload(), defaultPackage ) );
+		annotationDescriptorBuilder.setGroups( getGroups( constraint.getGroups(), defaultPackage ) )
+				.setPayload( getPayload( constraint.getPayload(), defaultPackage ) );
 
 		for ( ElementType elementType : constraint.getElement() ) {
 			String name = elementType.getName();
@@ -95,12 +95,12 @@ <A extends Annotation> MetaConstraint<A> buildMetaConstraint(ConstraintLocation
 			annotationDescriptorBuilder.setAttribute( name, elementValue );
 		}
 
-		AnnotationDescriptor<A> annotationDescriptor;
+		ConstraintAnnotationDescriptor<A> annotationDescriptor;
 		try {
 			annotationDescriptor = annotationDescriptorBuilder.build();
 		}
 		catch (RuntimeException e) {
-			throw log.getUnableToCreateAnnotationForConfiguredConstraintException( e );
+			throw LOG.getUnableToCreateAnnotationForConfiguredConstraintException( e );
 		}
 
 		// we set initially ConstraintOrigin.DEFINED_LOCALLY for all xml configured constraints
@@ -124,15 +124,15 @@ private <A extends Annotation> Annotation buildAnnotation(AnnotationType annotat
 	}
 
 	private static void checkNameIsValid(String name) {
-		if ( MESSAGE_PARAM.equals( name ) || GROUPS_PARAM.equals( name ) ) {
-			throw log.getReservedParameterNamesException( MESSAGE_PARAM, GROUPS_PARAM, PAYLOAD_PARAM );
+		if ( ConstraintHelper.MESSAGE.equals( name ) || ConstraintHelper.GROUPS.equals( name ) ) {
+			throw LOG.getReservedParameterNamesException( ConstraintHelper.MESSAGE, ConstraintHelper.GROUPS, ConstraintHelper.PAYLOAD );
 		}
 	}
 
 	private static <A extends Annotation> Class<?> getAnnotationParameterType(Class<A> annotationClass, String name) {
 		Method m = run( GetMethod.action( annotationClass, name ) );
 		if ( m == null ) {
-			throw log.getAnnotationDoesNotContainAParameterException( annotationClass, name );
+			throw LOG.getAnnotationDoesNotContainAParameterException( annotationClass, name );
 		}
 		return m.getReturnType();
 	}
@@ -147,11 +147,11 @@ private Object getElementValue(ElementType elementType, Class<?> returnType, Str
 					return "";
 				}
 				else {
-					throw log.getEmptyElementOnlySupportedWhenCharSequenceIsExpectedExpection();
+					throw LOG.getEmptyElementOnlySupportedWhenCharSequenceIsExpectedExpection();
 				}
 			}
 			else if ( elementType.getContent().size() > 1 ) {
-				throw log.getAttemptToSpecifyAnArrayWhereSingleValueIsExpectedException();
+				throw LOG.getAttemptToSpecifyAnArrayWhereSingleValueIsExpectedException();
 			}
 			return getSingleValue( elementType.getContent().get( 0 ), returnType, defaultPackage );
 		}
@@ -196,11 +196,11 @@ else if ( serializable instanceof JAXBElement && ( (JAXBElement<?>) serializable
 				returnValue = buildAnnotation( annotationType, annotationClass, defaultPackage );
 			}
 			catch (ClassCastException e) {
-				throw log.getUnexpectedParameterValueException( e );
+				throw LOG.getUnexpectedParameterValueException( e );
 			}
 		}
 		else {
-			throw log.getUnexpectedParameterValueException();
+			throw LOG.getUnexpectedParameterValueException();
 		}
 		return returnValue;
 
@@ -213,7 +213,7 @@ private Object convertStringToReturnType(Class<?> returnType, String value, Stri
 				returnValue = Byte.parseByte( value );
 			}
 			catch (NumberFormatException e) {
-				throw log.getInvalidNumberFormatException( "byte", e );
+				throw LOG.getInvalidNumberFormatException( "byte", e );
 			}
 		}
 		else if ( returnType == short.class ) {
@@ -221,7 +221,7 @@ else if ( returnType == short.class ) {
 				returnValue = Short.parseShort( value );
 			}
 			catch (NumberFormatException e) {
-				throw log.getInvalidNumberFormatException( "short", e );
+				throw LOG.getInvalidNumberFormatException( "short", e );
 			}
 		}
 		else if ( returnType == int.class ) {
@@ -229,7 +229,7 @@ else if ( returnType == int.class ) {
 				returnValue = Integer.parseInt( value );
 			}
 			catch (NumberFormatException e) {
-				throw log.getInvalidNumberFormatException( "int", e );
+				throw LOG.getInvalidNumberFormatException( "int", e );
 			}
 		}
 		else if ( returnType == long.class ) {
@@ -237,7 +237,7 @@ else if ( returnType == long.class ) {
 				returnValue = Long.parseLong( value );
 			}
 			catch (NumberFormatException e) {
-				throw log.getInvalidNumberFormatException( "long", e );
+				throw LOG.getInvalidNumberFormatException( "long", e );
 			}
 		}
 		else if ( returnType == float.class ) {
@@ -245,7 +245,7 @@ else if ( returnType == float.class ) {
 				returnValue = Float.parseFloat( value );
 			}
 			catch (NumberFormatException e) {
-				throw log.getInvalidNumberFormatException( "float", e );
+				throw LOG.getInvalidNumberFormatException( "float", e );
 			}
 		}
 		else if ( returnType == double.class ) {
@@ -253,7 +253,7 @@ else if ( returnType == double.class ) {
 				returnValue = Double.parseDouble( value );
 			}
 			catch (NumberFormatException e) {
-				throw log.getInvalidNumberFormatException( "double", e );
+				throw LOG.getInvalidNumberFormatException( "double", e );
 			}
 		}
 		else if ( returnType == boolean.class ) {
@@ -261,7 +261,7 @@ else if ( returnType == boolean.class ) {
 		}
 		else if ( returnType == char.class ) {
 			if ( value.length() != 1 ) {
-				throw log.getInvalidCharValueException( value );
+				throw LOG.getInvalidCharValueException( value );
 			}
 			returnValue = value.charAt( 0 );
 		}
@@ -278,7 +278,7 @@ else if ( returnType == Class.class ) {
 				returnValue = Enum.valueOf( enumClass, value );
 			}
 			catch (ClassCastException e) {
-				throw log.getInvalidReturnTypeException( returnType, e );
+				throw LOG.getInvalidReturnTypeException( returnType, e );
 			}
 		}
 		return returnValue;
@@ -286,7 +286,7 @@ else if ( returnType == Class.class ) {
 
 	private Class<?>[] getGroups(GroupsType groupsType, String defaultPackage) {
 		if ( groupsType == null ) {
-			return new Class[] { };
+			return EMPTY_CLASSES_ARRAY;
 		}
 
 		List<Class<?>> groupList = newArrayList();
@@ -299,14 +299,14 @@ private Class<?>[] getGroups(GroupsType groupsType, String defaultPackage) {
 	@SuppressWarnings("unchecked")
 	private Class<? extends Payload>[] getPayload(PayloadType payloadType, String defaultPackage) {
 		if ( payloadType == null ) {
-			return new Class[] { };
+			return EMPTY_CLASSES_ARRAY;
 		}
 
 		List<Class<? extends Payload>> payloadList = newArrayList();
 		for ( String groupClass : payloadType.getValue() ) {
 			Class<?> payload = classLoadingHelper.loadClass( groupClass, defaultPackage );
 			if ( !Payload.class.isAssignableFrom( payload ) ) {
-				throw log.getWrongPayloadClassException( payload );
+				throw LOG.getWrongPayloadClassException( payload );
 			}
 			else {
 				payloadList.add( (Class<? extends Payload>) payload );
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ResourceLoaderHelper.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ResourceLoaderHelper.java
index 1f1b753cb3..db36ca736a 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ResourceLoaderHelper.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ResourceLoaderHelper.java
@@ -8,6 +8,7 @@
 
 import java.io.BufferedInputStream;
 import java.io.InputStream;
+import java.lang.invoke.MethodHandles;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 
@@ -21,7 +22,8 @@
  * @author Hardy Ferentschik
  */
 final class ResourceLoaderHelper {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private ResourceLoaderHelper() {
 		// Not allowed
@@ -48,20 +50,20 @@ static InputStream getResettableInputStreamForPath(String path, ClassLoader exte
 		InputStream inputStream = null;
 
 		if ( externalClassLoader != null ) {
-			log.debug( "Trying to load " + path + " via user class loader" );
+			LOG.debug( "Trying to load " + path + " via user class loader" );
 			inputStream = externalClassLoader.getResourceAsStream( inputPath );
 		}
 
 		if ( inputStream == null ) {
 			ClassLoader loader = run( GetClassLoader.fromContext() );
 			if ( loader != null ) {
-				log.debug( "Trying to load " + path + " via TCCL" );
+				LOG.debug( "Trying to load " + path + " via TCCL" );
 				inputStream = loader.getResourceAsStream( inputPath );
 			}
 		}
 
 		if ( inputStream == null ) {
-			log.debug( "Trying to load " + path + " via Hibernate Validator's class loader" );
+			LOG.debug( "Trying to load " + path + " via Hibernate Validator's class loader" );
 			ClassLoader loader = ResourceLoaderHelper.class.getClassLoader();
 			inputStream = loader.getResourceAsStream( inputPath );
 		}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationBootstrapParameters.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationBootstrapParameters.java
index e6b5296461..4460711659 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationBootstrapParameters.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationBootstrapParameters.java
@@ -7,6 +7,7 @@
 package org.hibernate.validator.internal.xml;
 
 import java.io.InputStream;
+import java.lang.invoke.MethodHandles;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 import java.util.HashMap;
@@ -36,7 +37,8 @@
  * @author Hardy Ferentschik
  */
 public class ValidationBootstrapParameters {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private ConstraintValidatorFactory constraintValidatorFactory;
 	private MessageInterpolator messageInterpolator;
@@ -155,10 +157,10 @@ private void setProviderClass(String providerFqcn, ClassLoader externalClassLoad
 				providerClass = (Class<? extends ValidationProvider<?>>) run(
 						LoadClass.action( providerFqcn, externalClassLoader )
 				);
-				log.usingValidationProvider( providerClass );
+				LOG.usingValidationProvider( providerClass );
 			}
 			catch (Exception e) {
-				throw log.getUnableToInstantiateValidationProviderClassException( providerFqcn, e );
+				throw LOG.getUnableToInstantiateValidationProviderClassException( providerFqcn, e );
 			}
 		}
 	}
@@ -171,10 +173,10 @@ private void setMessageInterpolator(String messageInterpolatorFqcn, ClassLoader
 						LoadClass.action( messageInterpolatorFqcn, externalClassLoader )
 				);
 				messageInterpolator = run( NewInstance.action( messageInterpolatorClass, "message interpolator" ) );
-				log.usingMessageInterpolator( messageInterpolatorClass );
+				LOG.usingMessageInterpolator( messageInterpolatorClass );
 			}
 			catch (ValidationException e) {
-				throw log.getUnableToInstantiateMessageInterpolatorClassException( messageInterpolatorFqcn, e );
+				throw LOG.getUnableToInstantiateMessageInterpolatorClassException( messageInterpolatorFqcn, e );
 			}
 		}
 	}
@@ -187,10 +189,10 @@ private void setTraversableResolver(String traversableResolverFqcn, ClassLoader
 						LoadClass.action( traversableResolverFqcn, externalClassLoader )
 				);
 				traversableResolver = run( NewInstance.action( clazz, "traversable resolver" ) );
-				log.usingTraversableResolver( clazz );
+				LOG.usingTraversableResolver( clazz );
 			}
 			catch (ValidationException e) {
-				throw log.getUnableToInstantiateTraversableResolverClassException( traversableResolverFqcn, e );
+				throw LOG.getUnableToInstantiateTraversableResolverClassException( traversableResolverFqcn, e );
 			}
 		}
 	}
@@ -203,10 +205,10 @@ private void setConstraintValidatorFactory(String constraintValidatorFactoryFqcn
 						LoadClass.action( constraintValidatorFactoryFqcn, externalClassLoader )
 				);
 				constraintValidatorFactory = run( NewInstance.action( clazz, "constraint validator factory class" ) );
-				log.usingConstraintValidatorFactory( clazz );
+				LOG.usingConstraintValidatorFactory( clazz );
 			}
 			catch (ValidationException e) {
-				throw log.getUnableToInstantiateConstraintValidatorFactoryClassException( constraintValidatorFactoryFqcn, e );
+				throw LOG.getUnableToInstantiateConstraintValidatorFactoryClassException( constraintValidatorFactoryFqcn, e );
 			}
 		}
 	}
@@ -219,10 +221,10 @@ private void setParameterNameProvider(String parameterNameProviderFqcn, ClassLoa
 						LoadClass.action( parameterNameProviderFqcn, externalClassLoader )
 				);
 				parameterNameProvider = run( NewInstance.action( clazz, "parameter name provider class" ) );
-				log.usingParameterNameProvider( clazz );
+				LOG.usingParameterNameProvider( clazz );
 			}
 			catch (ValidationException e) {
-				throw log.getUnableToInstantiateParameterNameProviderClassException( parameterNameProviderFqcn, e );
+				throw LOG.getUnableToInstantiateParameterNameProviderClassException( parameterNameProviderFqcn, e );
 			}
 		}
 	}
@@ -235,10 +237,10 @@ private void setClockProvider(String clockProviderFqcn, ClassLoader externalClas
 						LoadClass.action( clockProviderFqcn, externalClassLoader )
 				);
 				clockProvider = run( NewInstance.action( clazz, "clock provider class" ) );
-				log.usingClockProvider( clazz );
+				LOG.usingClockProvider( clazz );
 			}
 			catch (ValidationException e) {
-				throw log.getUnableToInstantiateClockProviderClassException( clockProviderFqcn, e );
+				throw LOG.getUnableToInstantiateClockProviderClassException( clockProviderFqcn, e );
 			}
 		}
 	}
@@ -255,7 +257,7 @@ private void setValueExtractors(Set<String> valueExtractorFqcns, ClassLoader ext
 				valueExtractor = run( NewInstance.action( clazz, "value extractor class" ) );
 			}
 			catch (ValidationException e) {
-				throw log.getUnableToInstantiateValueExtractorClassException( valueExtractorFqcn, e );
+				throw LOG.getUnableToInstantiateValueExtractorClassException( valueExtractorFqcn, e );
 			}
 
 
@@ -263,20 +265,20 @@ private void setValueExtractors(Set<String> valueExtractorFqcns, ClassLoader ext
 			ValueExtractorDescriptor previous = valueExtractorDescriptors.put( descriptor.getKey(), descriptor );
 
 			if ( previous != null ) {
-				throw log.getValueExtractorForTypeAndTypeUseAlreadyPresentException( valueExtractor, previous.getValueExtractor() );
+				throw LOG.getValueExtractorForTypeAndTypeUseAlreadyPresentException( valueExtractor, previous.getValueExtractor() );
 			}
 
-			log.addingValueExtractor( (Class<? extends ValueExtractor<?>>) valueExtractor.getClass() );
+			LOG.addingValueExtractor( (Class<? extends ValueExtractor<?>>) valueExtractor.getClass() );
 		}
 	}
 
 	private void setMappingStreams(Set<String> mappingFileNames, ClassLoader externalClassLoader) {
 		for ( String mappingFileName : mappingFileNames ) {
-			log.debugf( "Trying to open input stream for %s.", mappingFileName );
+			LOG.debugf( "Trying to open input stream for %s.", mappingFileName );
 
 			InputStream in = ResourceLoaderHelper.getResettableInputStreamForPath( mappingFileName, externalClassLoader );
 			if ( in == null ) {
-				throw log.getUnableToOpenInputStreamForMappingFileException( mappingFileName );
+				throw LOG.getUnableToOpenInputStreamForMappingFileException( mappingFileName );
 			}
 			mappings.add( in );
 		}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationXmlParser.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationXmlParser.java
index 701664fe0a..8d7dd550b0 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationXmlParser.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationXmlParser.java
@@ -8,6 +8,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.lang.invoke.MethodHandles;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 import java.security.PrivilegedExceptionAction;
@@ -53,7 +54,7 @@
  */
 public class ValidationXmlParser {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private static final String VALIDATION_XML_FILE = "META-INF/validation.xml";
 	private static final Map<String, String> SCHEMAS_BY_VERSION = Collections.unmodifiableMap( getSchemasByVersion() );
@@ -120,7 +121,7 @@ public final BootstrapConfiguration parseValidationXml() {
 			return createBootstrapConfiguration( validationConfig );
 		}
 		catch (XMLStreamException | IOException | SAXException e) {
-			throw log.getUnableToParseValidationXmlFileException( VALIDATION_XML_FILE, e );
+			throw LOG.getUnableToParseValidationXmlFileException( VALIDATION_XML_FILE, e );
 		}
 		finally {
 			run( SetContextClassLoader.action( previousTccl ) );
@@ -129,14 +130,14 @@ public final BootstrapConfiguration parseValidationXml() {
 	}
 
 	private InputStream getValidationXmlInputStream() {
-		log.debugf( "Trying to load %s for XML based Validator configuration.", VALIDATION_XML_FILE );
+		LOG.debugf( "Trying to load %s for XML based Validator configuration.", VALIDATION_XML_FILE );
 		InputStream inputStream = ResourceLoaderHelper.getResettableInputStreamForPath( VALIDATION_XML_FILE, externalClassLoader );
 
 		if ( inputStream != null ) {
 			return inputStream;
 		}
 		else {
-			log.debugf( "No %s found. Using annotation based configuration only.", VALIDATION_XML_FILE );
+			LOG.debugf( "No %s found. Using annotation based configuration only.", VALIDATION_XML_FILE );
 			return null;
 		}
 	}
@@ -145,14 +146,14 @@ private Schema getSchema(XmlParserHelper xmlParserHelper, String schemaVersion)
 		String schemaResource = SCHEMAS_BY_VERSION.get( schemaVersion );
 
 		if ( schemaResource == null ) {
-			throw log.getUnsupportedSchemaVersionException( VALIDATION_XML_FILE, schemaVersion );
+			throw LOG.getUnsupportedSchemaVersionException( VALIDATION_XML_FILE, schemaVersion );
 		}
 
 		return xmlParserHelper.getSchema( schemaResource );
 	}
 
 	private ValidationConfigType unmarshal(XMLEventReader xmlEventReader) {
-		log.parsingXMLFile( VALIDATION_XML_FILE );
+		LOG.parsingXMLFile( VALIDATION_XML_FILE );
 
 		try {
 			// JAXBContext#newInstance() requires several permissions internally and doesn't use any privileged blocks
@@ -166,7 +167,7 @@ private ValidationConfigType unmarshal(XMLEventReader xmlEventReader) {
 			return root.getValue();
 		}
 		catch (Exception e) {
-			throw log.getUnableToParseValidationXmlFileException( VALIDATION_XML_FILE, e );
+			throw LOG.getUnableToParseValidationXmlFileException( VALIDATION_XML_FILE, e );
 		}
 	}
 
@@ -175,15 +176,15 @@ private void closeStream(InputStream inputStream) {
 			inputStream.close();
 		}
 		catch (IOException io) {
-			log.unableToCloseXMLFileInputStream( VALIDATION_XML_FILE );
+			LOG.unableToCloseXMLFileInputStream( VALIDATION_XML_FILE );
 		}
 	}
 
 	private BootstrapConfiguration createBootstrapConfiguration(ValidationConfigType config) {
 		Map<String, String> properties = new HashMap<>();
 		for ( PropertyType property : config.getProperty() ) {
-			if ( log.isDebugEnabled() ) {
-				log.debugf(
+			if ( LOG.isDebugEnabled() ) {
+				LOG.debugf(
 						"Found property '%s' with value '%s' in validation.xml.",
 						property.getName(),
 						property.getValue()
@@ -225,7 +226,7 @@ private Set<String> getValueExtractorClassNames(ValidationConfigType config) {
 		Set<String> valueExtractorClassNames = CollectionHelper.newHashSet( config.getValueExtractor().size() );
 		for ( String className : config.getValueExtractor() ) {
 			if ( !valueExtractorClassNames.add( className ) ) {
-				throw log.getDuplicateDefinitionsOfValueExtractorException( className );
+				throw LOG.getDuplicateDefinitionsOfValueExtractorException( className );
 			}
 		}
 		return valueExtractorClassNames;
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/XmlParserHelper.java b/engine/src/main/java/org/hibernate/validator/internal/xml/XmlParserHelper.java
index 97171772e4..a2001c4c03 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/XmlParserHelper.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/XmlParserHelper.java
@@ -9,6 +9,7 @@
 import static org.hibernate.validator.internal.util.logging.Messages.MESSAGES;
 
 import java.io.InputStream;
+import java.lang.invoke.MethodHandles;
 import java.net.URL;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
@@ -45,7 +46,7 @@
  */
 public class XmlParserHelper {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	/**
 	 * The expected number of XML schemas managed by this class. Used to set the
@@ -98,7 +99,7 @@ public String getSchemaVersion(String resourceName, XMLEventReader xmlEventReade
 			return getVersionValue( rootElement );
 		}
 		catch (XMLStreamException e) {
-			throw log.getUnableToDetermineSchemaVersionException( resourceName, e );
+			throw LOG.getUnableToDetermineSchemaVersionException( resourceName, e );
 		}
 	}
 
@@ -111,7 +112,7 @@ public synchronized XMLEventReader createXmlEventReader(String resourceName, Inp
 			);
 		}
 		catch (Exception e) {
-			throw log.getUnableToCreateXMLEventReader( resourceName, e );
+			throw LOG.getUnableToCreateXMLEventReader( resourceName, e );
 		}
 	}
 
@@ -170,7 +171,7 @@ private Schema loadSchema(String schemaResource) {
 			schema = run( NewSchema.action( sf, schemaUrl ) );
 		}
 		catch (Exception e) {
-			log.unableToCreateSchema( schemaResource, e.getMessage() );
+			LOG.unableToCreateSchema( schemaResource, e.getMessage() );
 		}
 		return schema;
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/messageinterpolation/AbstractMessageInterpolator.java b/engine/src/main/java/org/hibernate/validator/messageinterpolation/AbstractMessageInterpolator.java
index 5ae55bc8d5..c3af149c09 100644
--- a/engine/src/main/java/org/hibernate/validator/messageinterpolation/AbstractMessageInterpolator.java
+++ b/engine/src/main/java/org/hibernate/validator/messageinterpolation/AbstractMessageInterpolator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.messageinterpolation;
 
+import java.lang.invoke.MethodHandles;
 import java.util.EnumSet;
 import java.util.List;
 import java.util.Locale;
@@ -42,7 +43,8 @@
  * @since 5.2
  */
 public abstract class AbstractMessageInterpolator implements MessageInterpolator {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	/**
 	 * The default initial capacity for this cache.
@@ -217,7 +219,7 @@ public String interpolate(String message, Context context) {
 			interpolatedMessage = interpolateMessage( message, context, defaultLocale );
 		}
 		catch (MessageDescriptorFormatException e) {
-			log.warn( e.getMessage() );
+			LOG.warn( e.getMessage() );
 		}
 		return interpolatedMessage;
 	}
@@ -229,7 +231,7 @@ public String interpolate(String message, Context context, Locale locale) {
 			interpolatedMessage = interpolateMessage( message, context, locale );
 		}
 		catch (ValidationException e) {
-			log.warn( e.getMessage() );
+			LOG.warn( e.getMessage() );
 		}
 		return interpolatedMessage;
 	}
diff --git a/engine/src/main/java/org/hibernate/validator/messageinterpolation/ParameterMessageInterpolator.java b/engine/src/main/java/org/hibernate/validator/messageinterpolation/ParameterMessageInterpolator.java
index 6daeefd02a..dad9705907 100644
--- a/engine/src/main/java/org/hibernate/validator/messageinterpolation/ParameterMessageInterpolator.java
+++ b/engine/src/main/java/org/hibernate/validator/messageinterpolation/ParameterMessageInterpolator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.messageinterpolation;
 
+import java.lang.invoke.MethodHandles;
 import java.util.Locale;
 
 import org.hibernate.validator.internal.engine.messageinterpolation.InterpolationTerm;
@@ -22,7 +23,7 @@
  */
 public class ParameterMessageInterpolator extends AbstractMessageInterpolator {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	@Override
 	public String interpolate(Context context, Locale locale, String term) {
diff --git a/engine/src/main/java/org/hibernate/validator/messageinterpolation/ResourceBundleMessageInterpolator.java b/engine/src/main/java/org/hibernate/validator/messageinterpolation/ResourceBundleMessageInterpolator.java
index e1679162d6..856f3f12bf 100644
--- a/engine/src/main/java/org/hibernate/validator/messageinterpolation/ResourceBundleMessageInterpolator.java
+++ b/engine/src/main/java/org/hibernate/validator/messageinterpolation/ResourceBundleMessageInterpolator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.messageinterpolation;
 
+import java.lang.invoke.MethodHandles;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 import java.util.Locale;
@@ -32,7 +33,7 @@
  */
 public class ResourceBundleMessageInterpolator extends AbstractMessageInterpolator {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final ExpressionFactory expressionFactory;
 
diff --git a/engine/src/main/java/org/hibernate/validator/spi/scripting/ScriptEngineScriptEvaluator.java b/engine/src/main/java/org/hibernate/validator/spi/scripting/ScriptEngineScriptEvaluator.java
index c218f51f29..f858c494d9 100644
--- a/engine/src/main/java/org/hibernate/validator/spi/scripting/ScriptEngineScriptEvaluator.java
+++ b/engine/src/main/java/org/hibernate/validator/spi/scripting/ScriptEngineScriptEvaluator.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.validator.spi.scripting;
 
+import java.lang.invoke.MethodHandles;
 import java.util.Map;
 
 import javax.script.ScriptEngine;
@@ -25,7 +26,7 @@
 @Incubating
 public class ScriptEngineScriptEvaluator implements ScriptEvaluator {
 
-	private static final Log LOG = LoggerFactory.make();
+	private static final Log LOG = LoggerFactory.make( MethodHandles.lookup() );
 
 	private final ScriptEngine engine;
 
diff --git a/engine/src/main/resources/org/hibernate/validator/ValidationMessages.properties b/engine/src/main/resources/org/hibernate/validator/ValidationMessages.properties
index 555a2658ca..47ff74ad7a 100644
--- a/engine/src/main/resources/org/hibernate/validator/ValidationMessages.properties
+++ b/engine/src/main/resources/org/hibernate/validator/ValidationMessages.properties
@@ -37,6 +37,7 @@ org.hibernate.validator.constraints.ParametersScriptAssert.message  = script exp
 org.hibernate.validator.constraints.Range.message                   = must be between {min} and {max}
 org.hibernate.validator.constraints.SafeHtml.message                = may have unsafe html content
 org.hibernate.validator.constraints.ScriptAssert.message            = script expression "{script}" didn't evaluate to true
+org.hibernate.validator.constraints.UniqueElements.message          = must only contain unique elements
 org.hibernate.validator.constraints.URL.message                     = must be a valid URL
 
 org.hibernate.validator.constraints.br.CNPJ.message                 = invalid Brazilian corporate taxpayer registry number (CNPJ)
diff --git a/engine/src/main/resources/org/hibernate/validator/ValidationMessages_de.properties b/engine/src/main/resources/org/hibernate/validator/ValidationMessages_de.properties
index 0257e09e89..c802fec1a1 100644
--- a/engine/src/main/resources/org/hibernate/validator/ValidationMessages_de.properties
+++ b/engine/src/main/resources/org/hibernate/validator/ValidationMessages_de.properties
@@ -33,6 +33,7 @@ org.hibernate.validator.constraints.ParametersScriptAssert.message = Skriptausdr
 org.hibernate.validator.constraints.Range.message            = muss zwischen {min} und {max} liegen
 org.hibernate.validator.constraints.SafeHtml.message         = k\u00F6nnte unsicheren HTML-Inhalt haben
 org.hibernate.validator.constraints.ScriptAssert.message     = Skriptausdruck "{script}" gab nicht true zur\u00FCck
+org.hibernate.validator.constraints.UniqueElements.message   = darf keine Duplikate enthalten
 org.hibernate.validator.constraints.URL.message              = muss eine g\u00FCltige URL sein
 
 org.hibernate.validator.constraints.time.DurationMax.message        = muss k\u00FCrzer${inclusive == true ? ' oder gleich' : ' als'}${days == 0 ? '' : days == 1 ? ' 1 Tag' : ' ' += days += ' Tage'}${hours == 0 ? '' : hours == 1 ? ' 1 Stunde' : ' ' += hours += ' Stunden'}${minutes == 0 ? '' : minutes == 1 ? ' 1 Minute' : ' ' += minutes += ' Minuten'}${seconds == 0 ? '' : seconds == 1 ? ' 1 Sekunde' : ' ' += seconds += ' Sekunden'}${millis == 0 ? '' : millis == 1 ? ' 1 Millisekunde' : ' ' += millis += ' Millisekunden'}${nanos == 0 ? '' : nanos == 1 ? ' 1 Nanosekunde' : ' ' += nanos += ' Nanosekunden'} sein
diff --git a/engine/src/main/resources/org/hibernate/validator/ValidationMessages_fr.properties b/engine/src/main/resources/org/hibernate/validator/ValidationMessages_fr.properties
index 4174e77d5f..7d9dbee9e1 100644
--- a/engine/src/main/resources/org/hibernate/validator/ValidationMessages_fr.properties
+++ b/engine/src/main/resources/org/hibernate/validator/ValidationMessages_fr.properties
@@ -37,6 +37,7 @@ org.hibernate.validator.constraints.ParametersScriptAssert.message  = le script
 org.hibernate.validator.constraints.Range.message            = doit \u00EAtre entre {min} et {max}
 org.hibernate.validator.constraints.SafeHtml.message         = peut contenir du HTML dangereux
 org.hibernate.validator.constraints.ScriptAssert.message     = le script "{script}" n'a pas \u00E9t\u00E9 \u00E9valu\u00E9 \u00E0 vrai
+org.hibernate.validator.constraints.UniqueElements.message   = ne doit contenir que des \u00E9l\u00E9ments uniques
 org.hibernate.validator.constraints.URL.message              = URL mal form\u00E9e
 
 org.hibernate.validator.constraints.br.CNPJ.message                 = numéro d'enregistrement brésilien de société contribuable (CNPJ) invalide
diff --git a/engine/src/main/resources/org/hibernate/validator/ValidationMessages_uk.properties b/engine/src/main/resources/org/hibernate/validator/ValidationMessages_uk.properties
index 465e676de0..a9d2e5d8fc 100644
--- a/engine/src/main/resources/org/hibernate/validator/ValidationMessages_uk.properties
+++ b/engine/src/main/resources/org/hibernate/validator/ValidationMessages_uk.properties
@@ -37,6 +37,7 @@ org.hibernate.validator.constraints.ParametersScriptAssert.message  = \u0441\u04
 org.hibernate.validator.constraints.Range.message                   = \u043c\u0430\u0454 \u0431\u0443\u0442\u0438 \u043c\u0456\u0436 {min} \u0442\u0430 {max}
 org.hibernate.validator.constraints.SafeHtml.message                = \u043c\u043e\u0436\u0435 \u043c\u0456\u0441\u0442\u0438\u0442\u0438 \u043d\u0435\u0431\u0435\u0437\u043f\u0435\u0447\u043d\u0438\u0439 html \u043a\u043e\u043d\u0442\u0435\u043d\u0442
 org.hibernate.validator.constraints.ScriptAssert.message            = \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0438\u0439 \u0432\u0438\u0440\u0430\u0437 "{script}" \u043d\u0435 \u0454 \u0456\u0441\u0442\u0438\u043d\u043d\u0438\u043c
+org.hibernate.validator.constraints.UniqueElements.message          = \u043f\u043e\u0432\u0438\u043d\u043d\u043e \u043c\u0456\u0441\u0442\u0438\u0442\u0438 \u043b\u0438\u0448\u0435 \u0443\u043d\u0456\u043a\u0430\u043b\u044c\u043d\u0456 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438
 org.hibernate.validator.constraints.URL.message                     = \u043c\u0430\u0454 \u0431\u0443\u0442\u0438 \u0434\u0456\u0439\u0441\u043d\u0438\u043c URL
 
 org.hibernate.validator.constraints.br.CNPJ.message                 = \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0438\u0439 \u043d\u043e\u043c\u0435\u0440 \u0431\u0440\u0430\u0437\u0438\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u043d\u0438\u043a\u0430 \u043f\u043e\u0434\u0430\u0442\u043a\u0456\u0432 (CNPJ)
diff --git a/engine/src/main/resources/org/hibernate/validator/ValidationMessages_zh_CN.properties b/engine/src/main/resources/org/hibernate/validator/ValidationMessages_zh_CN.properties
index 3c4ba33c30..dba87b580d 100644
--- a/engine/src/main/resources/org/hibernate/validator/ValidationMessages_zh_CN.properties
+++ b/engine/src/main/resources/org/hibernate/validator/ValidationMessages_zh_CN.properties
@@ -1,27 +1,43 @@
-javax.validation.constraints.AssertFalse.message = \u53EA\u80FD\u4E3Afalse
-javax.validation.constraints.AssertTrue.message  = \u53EA\u80FD\u4E3Atrue
-javax.validation.constraints.DecimalMax.message  = \u5FC5\u987B\u5C0F\u4E8E\u6216\u7B49\u4E8E{value}
-javax.validation.constraints.DecimalMin.message  = \u5FC5\u987B\u5927\u4E8E\u6216\u7B49\u4E8E{value}
-javax.validation.constraints.Digits.message      = \u6570\u5B57\u7684\u503C\u8D85\u51FA\u4E86\u5141\u8BB8\u8303\u56F4(\u53EA\u5141\u8BB8\u5728{integer}\u4F4D\u6574\u6570\u548C{fraction}\u4F4D\u5C0F\u6570\u8303\u56F4\u5185)
-javax.validation.constraints.Email.message       = \u4E0D\u662F\u4E00\u4E2A\u5408\u6CD5\u7684\u7535\u5B50\u90AE\u4EF6\u5730\u5740
-javax.validation.constraints.Future.message      = \u9700\u8981\u662F\u4E00\u4E2A\u5C06\u6765\u7684\u65F6\u95F4
-javax.validation.constraints.Max.message         = \u6700\u5927\u4E0D\u80FD\u8D85\u8FC7{value}
-javax.validation.constraints.Min.message         = \u6700\u5C0F\u4E0D\u80FD\u5C0F\u4E8E{value}
-javax.validation.constraints.NotBlank.message    = \u4E0D\u80FD\u4E3A\u7A7A
-javax.validation.constraints.NotEmpty.message    = \u4E0D\u80FD\u4E3A\u7A7A
-javax.validation.constraints.NotNull.message     = \u4E0D\u80FD\u4E3Anull
-javax.validation.constraints.Null.message        = \u5FC5\u987B\u4E3Anull
-javax.validation.constraints.Past.message        = \u9700\u8981\u662f\u4e00\u4e2a\u8fc7\u53bb\u7684\u65F6\u95F4
-javax.validation.constraints.Pattern.message     = \u9700\u8981\u5339\u914D\u6B63\u5219\u8868\u8FBE\u5F0F"{regexp}"
-javax.validation.constraints.Size.message        = \u4E2A\u6570\u5FC5\u987B\u5728{min}\u548C{max}\u4E4B\u95F4
+javax.validation.constraints.AssertFalse.message     = \u53ea\u80fd\u4e3afalse
+javax.validation.constraints.AssertTrue.message      = \u53ea\u80fd\u4e3atrue
+javax.validation.constraints.DecimalMax.message      = \u5fc5\u987b\u5c0f\u4e8e\u6216\u7b49\u4e8e{value}
+javax.validation.constraints.DecimalMin.message      = \u5fc5\u987b\u5927\u4e8e\u6216\u7b49\u4e8e{value}
+javax.validation.constraints.Digits.message          = \u6570\u5b57\u7684\u503c\u8d85\u51fa\u4e86\u5141\u8bb8\u8303\u56f4(\u53ea\u5141\u8bb8\u5728{integer}\u4f4d\u6574\u6570\u548c{fraction}\u4f4d\u5c0f\u6570\u8303\u56f4\u5185)
+javax.validation.constraints.Email.message           = \u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740
+javax.validation.constraints.Future.message          = \u9700\u8981\u662f\u4e00\u4e2a\u5c06\u6765\u7684\u65f6\u95f4
+javax.validation.constraints.FutureOrPresent.message = \u9700\u8981\u662f\u4e00\u4e2a\u5c06\u6765\u6216\u73b0\u5728\u7684\u65f6\u95f4
+javax.validation.constraints.Max.message             = \u6700\u5927\u4e0d\u80fd\u8d85\u8fc7{value}
+javax.validation.constraints.Min.message             = \u6700\u5c0f\u4e0d\u80fd\u5c0f\u4e8e{value}
+javax.validation.constraints.Negative.message        = \u5fc5\u987b\u662f\u8d1f\u6570
+javax.validation.constraints.NegativeOrZero.message  = \u5fc5\u987b\u662f\u8d1f\u6570\u6216\u96f6
+javax.validation.constraints.NotBlank.message        = \u4e0d\u80fd\u4e3a\u7a7a
+javax.validation.constraints.NotEmpty.message        = \u4e0d\u80fd\u4e3a\u7a7a
+javax.validation.constraints.NotNull.message         = \u4e0d\u80fd\u4e3anull
+javax.validation.constraints.Null.message            = \u5fc5\u987b\u4e3anull
+javax.validation.constraints.Past.message            = \u9700\u8981\u662f\u4e00\u4e2a\u8fc7\u53bb\u7684\u65f6\u95f4
+javax.validation.constraints.PastOrPresent.message   = \u9700\u8981\u662f\u4e00\u4e2a\u8fc7\u53bb\u6216\u73b0\u5728\u7684\u65f6\u95f4
+javax.validation.constraints.Pattern.message         = \u9700\u8981\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f"{regexp}"
+javax.validation.constraints.Positive.message        = \u5fc5\u987b\u662f\u6b63\u6570
+javax.validation.constraints.PositiveOrZero.message  = \u5fc5\u987b\u662f\u6b63\u6570\u6216\u96f6
+javax.validation.constraints.Size.message            = \u4e2a\u6570\u5fc5\u987b\u5728{min}\u548c{max}\u4e4b\u95f4
 
-org.hibernate.validator.constraints.CreditCardNumber.message = \u4E0D\u5408\u6CD5\u7684\u4FE1\u7528\u5361\u53F7\u7801
-org.hibernate.validator.constraints.Email.message            = \u4E0D\u662F\u4E00\u4E2A\u5408\u6CD5\u7684\u7535\u5B50\u90AE\u4EF6\u5730\u5740
-org.hibernate.validator.constraints.Length.message           = \u957F\u5EA6\u9700\u8981\u5728{min}\u548C{max}\u4E4B\u95F4
-org.hibernate.validator.constraints.CodePointLength.message  = \u957F\u5EA6\u9700\u8981\u5728{min}\u548C{max}\u4E4B\u95F4
-org.hibernate.validator.constraints.NotBlank.message         = \u4E0D\u80FD\u4E3A\u7A7A
-org.hibernate.validator.constraints.NotEmpty.message         = \u4E0D\u80FD\u4E3A\u7A7A
-org.hibernate.validator.constraints.Range.message            = \u9700\u8981\u5728{min}\u548C{max}\u4E4B\u95F4
-org.hibernate.validator.constraints.SafeHtml.message         = \u53EF\u80FD\u6709\u4E0D\u5B89\u5168\u7684HTML\u5185\u5BB9
-org.hibernate.validator.constraints.ScriptAssert.message     = \u6267\u884C\u811A\u672C\u8868\u8FBE\u5F0F"{script}"\u6CA1\u6709\u80FD\u591F\u5F97\u5230true
-org.hibernate.validator.constraints.URL.message              = \u9700\u8981\u662F\u4E00\u4E2A\u5408\u6CD5\u7684URL
+org.hibernate.validator.constraints.CreditCardNumber.message        = \u4e0d\u5408\u6cd5\u7684\u4fe1\u7528\u5361\u53f7\u7801
+org.hibernate.validator.constraints.Currency.message                = \u4e0d\u5408\u6cd5\u7684\u8d27\u5e01 (\u5fc5\u987b\u662f{value}\u5176\u4e2d\u4e4b\u4e00)
+org.hibernate.validator.constraints.EAN.message                     = \u4e0d\u5408\u6cd5\u7684{type}\u6761\u5f62\u7801
+org.hibernate.validator.constraints.Email.message                   = \u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740
+org.hibernate.validator.constraints.Length.message                  = \u957f\u5ea6\u9700\u8981\u5728{min}\u548c{max}\u4e4b\u95f4
+org.hibernate.validator.constraints.CodePointLength.message         = \u957f\u5ea6\u9700\u8981\u5728{min}\u548c{max}\u4e4b\u95f4
+org.hibernate.validator.constraints.LuhnCheck.message               = ${validatedValue}\u7684\u6821\u9a8c\u7801\u4e0d\u5408\u6cd5, Luhn\u6a2110\u6821\u9a8c\u548c\u4e0d\u5339\u914d
+org.hibernate.validator.constraints.Mod10Check.message              = ${validatedValue}\u7684\u6821\u9a8c\u7801\u4e0d\u5408\u6cd5, \u6a2110\u6821\u9a8c\u548c\u4e0d\u5339\u914d
+org.hibernate.validator.constraints.Mod11Check.message              = ${validatedValue}\u7684\u6821\u9a8c\u7801\u4e0d\u5408\u6cd5, \u6a2111\u6821\u9a8c\u548c\u4e0d\u5339\u914d
+org.hibernate.validator.constraints.ModCheck.message                = ${validatedValue}\u7684\u6821\u9a8c\u7801\u4e0d\u5408\u6cd5, ${modType}\u6821\u9a8c\u548c\u4e0d\u5339\u914d
+org.hibernate.validator.constraints.NotBlank.message                = \u4e0d\u80fd\u4e3a\u7a7a
+org.hibernate.validator.constraints.NotEmpty.message                = \u4e0d\u80fd\u4e3a\u7a7a
+org.hibernate.validator.constraints.ParametersScriptAssert.message  = \u6267\u884c\u811a\u672c\u8868\u8fbe\u5f0f"{script}"\u6ca1\u6709\u8fd4\u56de\u671f\u671b\u7ed3\u679c
+org.hibernate.validator.constraints.Range.message                   = \u9700\u8981\u5728{min}\u548c{max}\u4e4b\u95f4
+org.hibernate.validator.constraints.SafeHtml.message                = \u53ef\u80fd\u6709\u4e0d\u5b89\u5168\u7684HTML\u5185\u5bb9
+org.hibernate.validator.constraints.ScriptAssert.message            = \u6267\u884c\u811a\u672c\u8868\u8fbe\u5f0f"{script}"\u6ca1\u6709\u8fd4\u56de\u671f\u671b\u7ed3\u679c
+org.hibernate.validator.constraints.URL.message                     = \u9700\u8981\u662f\u4e00\u4e2a\u5408\u6cd5\u7684URL
+
+org.hibernate.validator.constraints.time.DurationMax.message        = \u5fc5\u987b\u5c0f\u4e8e${inclusive == true ? '\u6216\u7b49\u4e8e' : ''}${days == 0 ? '' : days += '\u5929'}${hours == 0 ? '' : hours += '\u5c0f\u65f6'}${minutes == 0 ? '' : minutes += '\u5206\u949f'}${seconds == 0 ? '' : seconds += '\u79d2'}${millis == 0 ? '' : millis += '\u6beb\u79d2'}${nanos == 0 ? '' : nanos += '\u7eb3\u79d2'}
+org.hibernate.validator.constraints.time.DurationMin.message        = \u5fc5\u987b\u5927\u4e8e${inclusive == true ? '\u6216\u7b49\u4e8e' : ''}${days == 0 ? '' : days += '\u5929'}${hours == 0 ? '' : hours += '\u5c0f\u65f6'}${minutes == 0 ? '' : minutes += '\u5206\u949f'}${seconds == 0 ? '' : seconds += '\u79d2'}${millis == 0 ? '' : millis += '\u6beb\u79d2'}${nanos == 0 ? '' : nanos += '\u7eb3\u79d2'}
diff --git a/engine/src/test/java/org/hibernate/validator/ValidationMessages.java b/engine/src/test/java/org/hibernate/validator/ValidationMessages.java
index b2fe1a91d2..8da94713cd 100644
--- a/engine/src/test/java/org/hibernate/validator/ValidationMessages.java
+++ b/engine/src/test/java/org/hibernate/validator/ValidationMessages.java
@@ -8,6 +8,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.lang.invoke.MethodHandles;
 import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.Map;
@@ -25,7 +26,7 @@
  */
 public class ValidationMessages extends ResourceBundle {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log log = LoggerFactory.make( MethodHandles.lookup() );
 
 	private static final String DEFAULT_PROPERTIES_FILE_NAME = "/org/hibernate/validator/ValidationMessages.properties";
 
diff --git a/engine/src/test/java/org/hibernate/validator/test/cfg/UniqueElementsDefTest.java b/engine/src/test/java/org/hibernate/validator/test/cfg/UniqueElementsDefTest.java
new file mode 100644
index 0000000000..b87bb888e2
--- /dev/null
+++ b/engine/src/test/java/org/hibernate/validator/test/cfg/UniqueElementsDefTest.java
@@ -0,0 +1,62 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.test.cfg;
+
+import static org.hibernate.validator.testutil.ConstraintViolationAssert.assertThat;
+import static org.hibernate.validator.testutil.ConstraintViolationAssert.violationOf;
+
+import java.lang.annotation.ElementType;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+
+import javax.validation.ConstraintViolation;
+import javax.validation.Validator;
+
+import org.hibernate.validator.HibernateValidator;
+import org.hibernate.validator.HibernateValidatorConfiguration;
+import org.hibernate.validator.cfg.ConstraintMapping;
+import org.hibernate.validator.cfg.defs.UniqueElementsDef;
+import org.hibernate.validator.constraints.UniqueElements;
+import org.hibernate.validator.testutil.TestForIssue;
+import org.hibernate.validator.testutils.ValidatorUtil;
+import org.testng.annotations.Test;
+
+/**
+ * @author Guillaume Smet
+ */
+public class UniqueElementsDefTest {
+
+	@Test
+	@TestForIssue(jiraKey = "HV-1466")
+	public void testUniqueElementsDef() {
+		final HibernateValidatorConfiguration configuration = ValidatorUtil.getConfiguration( HibernateValidator.class );
+
+		final ConstraintMapping programmaticMapping = configuration.createConstraintMapping();
+		programmaticMapping.type( Library.class )
+				.property( "books", ElementType.FIELD ).constraint( new UniqueElementsDef() );
+		configuration.addMapping( programmaticMapping );
+
+		Validator validator = configuration.buildValidatorFactory().getValidator();
+		Set<ConstraintViolation<Library>> violations = validator.validate( new Library(
+				Arrays.asList( "A Prayer for Owen Meany", "The Cider House Rules", "The Cider House Rules" ) ) );
+
+		assertThat( violations ).containsOnlyViolations(
+				violationOf( UniqueElements.class ).withProperty( "books" )
+		);
+	}
+
+	@SuppressWarnings("unused")
+	private static class Library {
+
+		private final List<String> books;
+
+		public Library(List<String> books) {
+			this.books = books;
+		}
+	}
+}
diff --git a/engine/src/test/java/org/hibernate/validator/test/constraints/ConstraintValidatorContextImplTest.java b/engine/src/test/java/org/hibernate/validator/test/constraints/ConstraintValidatorContextImplTest.java
index 446ae5a73c..8006187854 100644
--- a/engine/src/test/java/org/hibernate/validator/test/constraints/ConstraintValidatorContextImplTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/constraints/ConstraintValidatorContextImplTest.java
@@ -226,7 +226,7 @@ private ConstraintValidatorContextImpl createEmptyConstraintValidatorContextImpl
 		PathImpl path = PathImpl.createRootPath();
 		path.addBeanNode();
 
-		ConstraintValidatorContextImpl context = new ConstraintValidatorContextImpl( null, null, null, path, null );
+		ConstraintValidatorContextImpl context = new ConstraintValidatorContextImpl( null, null, path, null );
 		context.disableDefaultConstraintViolation();
 		return context;
 	}
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/DigitsValidatorForCharSequenceTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/DigitsValidatorForCharSequenceTest.java
index 7461f76e69..ae775c4f99 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/DigitsValidatorForCharSequenceTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/DigitsValidatorForCharSequenceTest.java
@@ -12,10 +12,11 @@
 import javax.validation.constraints.Digits;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.DigitsValidatorForCharSequence;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.MyCustomStringImpl;
 import org.hibernate.validator.testutil.TestForIssue;
 import org.testng.annotations.BeforeClass;
+import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
 /**
@@ -24,23 +25,27 @@
 public class DigitsValidatorForCharSequenceTest {
 
 	private static DigitsValidatorForCharSequence constraint;
+	private ConstraintAnnotationDescriptor.Builder<Digits> descriptorBuilder;
 
 	@BeforeClass
 	public static void init() {
-
-		AnnotationDescriptor.Builder<Digits> descriptorBuilder = new AnnotationDescriptor.Builder<>( Digits.class );
+		ConstraintAnnotationDescriptor.Builder<Digits> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Digits.class );
 		descriptorBuilder.setAttribute( "integer", 5 );
 		descriptorBuilder.setAttribute( "fraction", 2 );
-		descriptorBuilder.setAttribute( "message", "{validator.digits}" );
+		descriptorBuilder.setMessage( "{validator.digits}" );
 		Digits p = descriptorBuilder.build().getAnnotation();
 
 		constraint = new DigitsValidatorForCharSequence();
 		constraint.initialize( p );
 	}
 
+	@BeforeMethod
+	public void setUp() throws Exception {
+		descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Digits.class );
+	}
+
 	@Test
 	public void testIsValid() {
-
 		assertTrue( constraint.isValid( null, null ) );
 		assertTrue( constraint.isValid( "0", null ) );
 		assertTrue( constraint.isValid( "500.2", null ) );
@@ -54,11 +59,8 @@ public void testIsValid() {
 
 	@Test(expectedExceptions = IllegalArgumentException.class)
 	public void testNegativeIntegerLength() {
-
-		AnnotationDescriptor.Builder<Digits> descriptorBuilder = new AnnotationDescriptor.Builder<>( Digits.class );
 		descriptorBuilder.setAttribute( "integer", -1 );
 		descriptorBuilder.setAttribute( "fraction", 1 );
-		descriptorBuilder.setAttribute( "message", "{validator.digits}" );
 		Digits p = descriptorBuilder.build().getAnnotation();
 
 		DigitsValidatorForCharSequence constraint = new DigitsValidatorForCharSequence();
@@ -67,11 +69,8 @@ public void testNegativeIntegerLength() {
 
 	@Test(expectedExceptions = IllegalArgumentException.class)
 	public void testNegativeFractionLength() {
-
-		AnnotationDescriptor.Builder<Digits> descriptorBuilder = new AnnotationDescriptor.Builder<>( Digits.class );
 		descriptorBuilder.setAttribute( "integer", 1 );
 		descriptorBuilder.setAttribute( "fraction", -1 );
-		descriptorBuilder.setAttribute( "message", "{validator.digits}" );
 		Digits p = descriptorBuilder.build().getAnnotation();
 
 		DigitsValidatorForCharSequence constraint = new DigitsValidatorForCharSequence();
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/DigitsValidatorForNumberTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/DigitsValidatorForNumberTest.java
index 64be27741a..d0a467e8d0 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/DigitsValidatorForNumberTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/DigitsValidatorForNumberTest.java
@@ -14,7 +14,9 @@
 import javax.validation.constraints.Digits;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.DigitsValidatorForNumber;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
+
+import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
 /**
@@ -23,13 +25,18 @@
  */
 public class DigitsValidatorForNumberTest {
 
+	private ConstraintAnnotationDescriptor.Builder<Digits> descriptorBuilder;
+
+	@BeforeMethod
+	public void setUp() throws Exception {
+		descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Digits.class );
+		descriptorBuilder.setMessage( "{validator.digits}" );
+	}
+
 	@Test
 	public void testIsValid() {
-
-		AnnotationDescriptor.Builder<Digits> descriptorBuilder = new AnnotationDescriptor.Builder<>( Digits.class );
 		descriptorBuilder.setAttribute( "integer", 5 );
 		descriptorBuilder.setAttribute( "fraction", 2 );
-		descriptorBuilder.setAttribute( "message", "{validator.digits}" );
 		Digits p = descriptorBuilder.build().getAnnotation();
 
 		DigitsValidatorForNumber constraint = new DigitsValidatorForNumber();
@@ -53,11 +60,8 @@ public void testIsValid() {
 
 	@Test
 	public void testIsValidZeroLength() {
-
-		AnnotationDescriptor.Builder<Digits> descriptorBuilder = new AnnotationDescriptor.Builder<>( Digits.class );
 		descriptorBuilder.setAttribute( "integer", 0 );
 		descriptorBuilder.setAttribute( "fraction", 0 );
-		descriptorBuilder.setAttribute( "message", "{validator.digits}" );
 		Digits p = descriptorBuilder.build().getAnnotation();
 
 		DigitsValidatorForNumber constraint = new DigitsValidatorForNumber();
@@ -71,11 +75,8 @@ public void testIsValidZeroLength() {
 
 	@Test(expectedExceptions = IllegalArgumentException.class)
 	public void testNegativeIntegerLength() {
-
-		AnnotationDescriptor.Builder<Digits> descriptorBuilder = new AnnotationDescriptor.Builder<>( Digits.class );
 		descriptorBuilder.setAttribute( "integer", -1 );
 		descriptorBuilder.setAttribute( "fraction", 1 );
-		descriptorBuilder.setAttribute( "message", "{validator.digits}" );
 		Digits p = descriptorBuilder.build().getAnnotation();
 
 		DigitsValidatorForNumber constraint = new DigitsValidatorForNumber();
@@ -84,11 +85,8 @@ public void testNegativeIntegerLength() {
 
 	@Test(expectedExceptions = IllegalArgumentException.class)
 	public void testNegativeFractionLength() {
-
-		AnnotationDescriptor.Builder<Digits> descriptorBuilder = new AnnotationDescriptor.Builder<>( Digits.class );
 		descriptorBuilder.setAttribute( "integer", 1 );
 		descriptorBuilder.setAttribute( "fraction", -1 );
-		descriptorBuilder.setAttribute( "message", "{validator.digits}" );
 		Digits p = descriptorBuilder.build().getAnnotation();
 
 		DigitsValidatorForNumber constraint = new DigitsValidatorForNumber();
@@ -97,10 +95,8 @@ public void testNegativeFractionLength() {
 
 	@Test
 	public void testTrailingZerosAreTrimmed() {
-		AnnotationDescriptor.Builder<Digits> descriptorBuilder = new AnnotationDescriptor.Builder<>( Digits.class );
 		descriptorBuilder.setAttribute( "integer", 12 );
 		descriptorBuilder.setAttribute( "fraction", 3 );
-		descriptorBuilder.setAttribute( "message", "{validator.digits}" );
 		Digits p = descriptorBuilder.build().getAnnotation();
 
 		DigitsValidatorForNumber constraint = new DigitsValidatorForNumber();
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MaxValidatorForNumberTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MaxValidatorForNumberTest.java
index ca2af97be6..d75b087855 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MaxValidatorForNumberTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MaxValidatorForNumberTest.java
@@ -23,7 +23,7 @@
 import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMaxValidatorForFloat;
 import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMaxValidatorForLong;
 import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMaxValidatorForNumber;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.TestForIssue;
 import org.testng.annotations.Test;
 
@@ -37,9 +37,9 @@ public class MaxValidatorForNumberTest extends BaseMinMaxValidatorForNumberTest
 
 	@Test
 	public void testIsValidMax() {
-		AnnotationDescriptor.Builder<Max> descriptorBuilder = new AnnotationDescriptor.Builder<>( Max.class );
+		ConstraintAnnotationDescriptor.Builder<Max> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Max.class );
 		descriptorBuilder.setAttribute( "value", 15L );
-		descriptorBuilder.setAttribute( "message", "{validator.max}" );
+		descriptorBuilder.setMessage( "{validator.max}" );
 		Max m = descriptorBuilder.build().getAnnotation();
 
 		testMax( m, true );
@@ -47,9 +47,9 @@ public void testIsValidMax() {
 
 	@Test
 	public void testIsValidDecimalMax() {
-		AnnotationDescriptor.Builder<DecimalMax> descriptorBuilder = new AnnotationDescriptor.Builder<>( DecimalMax.class );
+		ConstraintAnnotationDescriptor.Builder<DecimalMax> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DecimalMax.class );
 		descriptorBuilder.setAttribute( "value", "15.0E0" );
-		descriptorBuilder.setAttribute( "message", "{validator.max}" );
+		descriptorBuilder.setMessage( "{validator.max}" );
 		DecimalMax m = descriptorBuilder.build().getAnnotation();
 
 		testDecimalMax( m, true );
@@ -57,9 +57,9 @@ public void testIsValidDecimalMax() {
 
 	@Test(expectedExceptions = IllegalArgumentException.class)
 	public void testInitializeDecimalMaxWithInvalidValue() {
-		AnnotationDescriptor.Builder<DecimalMax> descriptorBuilder = new AnnotationDescriptor.Builder<>( DecimalMax.class );
+		ConstraintAnnotationDescriptor.Builder<DecimalMax> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DecimalMax.class );
 		descriptorBuilder.setAttribute( "value", "foobar" );
-		descriptorBuilder.setAttribute( "message", "{validator.max}" );
+		descriptorBuilder.setMessage( "{validator.max}" );
 		DecimalMax m = descriptorBuilder.build().getAnnotation();
 
 		DecimalMaxValidatorForNumber constraint = new DecimalMaxValidatorForNumber();
@@ -70,10 +70,10 @@ public void testInitializeDecimalMaxWithInvalidValue() {
 	@TestForIssue(jiraKey = "HV-256")
 	public void testIsValidDecimalMaxExclusive() {
 		boolean inclusive = false;
-		AnnotationDescriptor.Builder<DecimalMax> descriptorBuilder = new AnnotationDescriptor.Builder<>( DecimalMax.class );
+		ConstraintAnnotationDescriptor.Builder<DecimalMax> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DecimalMax.class );
 		descriptorBuilder.setAttribute( "value", "15.0E0" );
 		descriptorBuilder.setAttribute( "inclusive", inclusive );
-		descriptorBuilder.setAttribute( "message", "{validator.max}" );
+		descriptorBuilder.setMessage( "{validator.max}" );
 		DecimalMax m = descriptorBuilder.build().getAnnotation();
 		testDecimalMax( m, false );
 
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MaxValidatorForStringTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MaxValidatorForStringTest.java
index 2453d24a4c..f81b2edb50 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MaxValidatorForStringTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MaxValidatorForStringTest.java
@@ -17,7 +17,7 @@
 import org.hibernate.validator.internal.constraintvalidators.bv.DecimalMaxValidatorForCharSequence;
 import org.hibernate.validator.internal.constraintvalidators.bv.MaxValidatorForCharSequence;
 import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMaxValidatorForNumber;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.MyCustomStringImpl;
 import org.hibernate.validator.testutil.TestForIssue;
 import org.testng.annotations.Test;
@@ -30,9 +30,9 @@ public class MaxValidatorForStringTest {
 	@Test
 	public void testIsValidMax() {
 
-		AnnotationDescriptor.Builder<Max> descriptorBuilder = new AnnotationDescriptor.Builder<>( Max.class );
+		ConstraintAnnotationDescriptor.Builder<Max> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Max.class );
 		descriptorBuilder.setAttribute( "value", 15L );
-		descriptorBuilder.setAttribute( "message", "{validator.max}" );
+		descriptorBuilder.setMessage( "{validator.max}" );
 		Max m = descriptorBuilder.build().getAnnotation();
 
 		MaxValidatorForCharSequence constraint = new MaxValidatorForCharSequence();
@@ -43,9 +43,9 @@ public void testIsValidMax() {
 	@Test
 	public void testIsValidDecimalMax() {
 
-		AnnotationDescriptor.Builder<DecimalMax> descriptorBuilder = new AnnotationDescriptor.Builder<>( DecimalMax.class );
+		ConstraintAnnotationDescriptor.Builder<DecimalMax> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DecimalMax.class );
 		descriptorBuilder.setAttribute( "value", "15.0E0" );
-		descriptorBuilder.setAttribute( "message", "{validator.max}" );
+		descriptorBuilder.setMessage( "{validator.max}" );
 		DecimalMax m = descriptorBuilder.build().getAnnotation();
 
 		DecimalMaxValidatorForCharSequence constraint = new DecimalMaxValidatorForCharSequence();
@@ -56,9 +56,9 @@ public void testIsValidDecimalMax() {
 	@Test
 	public void testInitializeDecimalMaxWithInvalidValue() {
 
-		AnnotationDescriptor.Builder<DecimalMax> descriptorBuilder = new AnnotationDescriptor.Builder<>( DecimalMax.class );
+		ConstraintAnnotationDescriptor.Builder<DecimalMax> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DecimalMax.class );
 		descriptorBuilder.setAttribute( "value", "foobar" );
-		descriptorBuilder.setAttribute( "message", "{validator.max}" );
+		descriptorBuilder.setMessage( "{validator.max}" );
 		DecimalMax m = descriptorBuilder.build().getAnnotation();
 
 		DecimalMaxValidatorForNumber constraint = new DecimalMaxValidatorForNumber();
@@ -75,10 +75,10 @@ public void testInitializeDecimalMaxWithInvalidValue() {
 	@TestForIssue(jiraKey = "HV-256")
 	public void testIsValidDecimalMaxExclusive() {
 		boolean inclusive = false;
-		AnnotationDescriptor.Builder<DecimalMax> descriptorBuilder = new AnnotationDescriptor.Builder<>( DecimalMax.class );
+		ConstraintAnnotationDescriptor.Builder<DecimalMax> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DecimalMax.class );
 		descriptorBuilder.setAttribute( "value", "15.0E0" );
 		descriptorBuilder.setAttribute( "inclusive", inclusive );
-		descriptorBuilder.setAttribute( "message", "{validator.max}" );
+		descriptorBuilder.setMessage( "{validator.max}" );
 		DecimalMax m = descriptorBuilder.build().getAnnotation();
 
 		DecimalMaxValidatorForCharSequence constraint = new DecimalMaxValidatorForCharSequence();
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MinValidatorForNumberTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MinValidatorForNumberTest.java
index 754f3ace5d..5482548957 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MinValidatorForNumberTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MinValidatorForNumberTest.java
@@ -23,7 +23,7 @@
 import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMinValidatorForFloat;
 import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMinValidatorForLong;
 import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMinValidatorForNumber;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.TestForIssue;
 import org.testng.annotations.Test;
 
@@ -37,9 +37,9 @@ public class MinValidatorForNumberTest extends BaseMinMaxValidatorForNumberTest
 
 	@Test
 	public void testIsValidMinValidator() {
-		AnnotationDescriptor.Builder<Min> descriptorBuilder = new AnnotationDescriptor.Builder<>( Min.class );
+		ConstraintAnnotationDescriptor.Builder<Min> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Min.class );
 		descriptorBuilder.setAttribute( "value", 15L );
-		descriptorBuilder.setAttribute( "message", "{validator.min}" );
+		descriptorBuilder.setMessage( "{validator.min}" );
 		Min m = descriptorBuilder.build().getAnnotation();
 
 		testMin( m, true );
@@ -47,9 +47,9 @@ public void testIsValidMinValidator() {
 
 	@Test
 	public void testIsValidDecimalMinValidator() {
-		AnnotationDescriptor.Builder<DecimalMin> descriptorBuilder = new AnnotationDescriptor.Builder<>( DecimalMin.class );
+		ConstraintAnnotationDescriptor.Builder<DecimalMin> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DecimalMin.class );
 		descriptorBuilder.setAttribute( "value", "1500E-2" );
-		descriptorBuilder.setAttribute( "message", "{validator.min}" );
+		descriptorBuilder.setMessage( "{validator.min}" );
 		DecimalMin m = descriptorBuilder.build().getAnnotation();
 
 		testDecimalMin( m, true );
@@ -57,9 +57,9 @@ public void testIsValidDecimalMinValidator() {
 
 	@Test(expectedExceptions = IllegalArgumentException.class)
 	public void testInitializeDecimalMinWithInvalidValue() {
-		AnnotationDescriptor.Builder<DecimalMin> descriptorBuilder = new AnnotationDescriptor.Builder<>( DecimalMin.class );
+		ConstraintAnnotationDescriptor.Builder<DecimalMin> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DecimalMin.class );
 		descriptorBuilder.setAttribute( "value", "foobar" );
-		descriptorBuilder.setAttribute( "message", "{validator.min}" );
+		descriptorBuilder.setMessage( "{validator.min}" );
 		DecimalMin m = descriptorBuilder.build().getAnnotation();
 
 		DecimalMinValidatorForNumber constraint = new DecimalMinValidatorForNumber();
@@ -70,10 +70,10 @@ public void testInitializeDecimalMinWithInvalidValue() {
 	@TestForIssue(jiraKey = "HV-256")
 	public void testIsValidDecimalMinExclusive() {
 		boolean inclusive = false;
-		AnnotationDescriptor.Builder<DecimalMin> descriptorBuilder = new AnnotationDescriptor.Builder<>( DecimalMin.class );
+		ConstraintAnnotationDescriptor.Builder<DecimalMin> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DecimalMin.class );
 		descriptorBuilder.setAttribute( "value", "1500E-2" );
 		descriptorBuilder.setAttribute( "inclusive", inclusive );
-		descriptorBuilder.setAttribute( "message", "{validator.min}" );
+		descriptorBuilder.setMessage( "{validator.min}" );
 		DecimalMin m = descriptorBuilder.build().getAnnotation();
 
 		testDecimalMin( m, inclusive );
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MinValidatorForStringTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MinValidatorForStringTest.java
index 2a01a2d2e4..4701cd58e1 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MinValidatorForStringTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/MinValidatorForStringTest.java
@@ -17,7 +17,7 @@
 import org.hibernate.validator.internal.constraintvalidators.bv.DecimalMinValidatorForCharSequence;
 import org.hibernate.validator.internal.constraintvalidators.bv.MinValidatorForCharSequence;
 import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMinValidatorForNumber;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.MyCustomStringImpl;
 import org.hibernate.validator.testutil.TestForIssue;
 import org.testng.annotations.Test;
@@ -30,9 +30,9 @@ public class MinValidatorForStringTest {
 
 	@Test
 	public void testIsValidMinValidator() {
-		AnnotationDescriptor.Builder<Min> descriptorBuilder = new AnnotationDescriptor.Builder<>( Min.class );
+		ConstraintAnnotationDescriptor.Builder<Min> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Min.class );
 		descriptorBuilder.setAttribute( "value", 15L );
-		descriptorBuilder.setAttribute( "message", "{validator.min}" );
+		descriptorBuilder.setMessage( "{validator.min}" );
 		Min m = descriptorBuilder.build().getAnnotation();
 
 		MinValidatorForCharSequence constraint = new MinValidatorForCharSequence();
@@ -42,9 +42,9 @@ public void testIsValidMinValidator() {
 
 	@Test
 	public void testIsValidDecimalMinValidator() {
-		AnnotationDescriptor.Builder<DecimalMin> descriptorBuilder = new AnnotationDescriptor.Builder<>( DecimalMin.class );
+		ConstraintAnnotationDescriptor.Builder<DecimalMin> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DecimalMin.class );
 		descriptorBuilder.setAttribute( "value", "1500E-2" );
-		descriptorBuilder.setAttribute( "message", "{validator.min}" );
+		descriptorBuilder.setMessage( "{validator.min}" );
 		DecimalMin m = descriptorBuilder.build().getAnnotation();
 
 		DecimalMinValidatorForCharSequence constraint = new DecimalMinValidatorForCharSequence();
@@ -55,9 +55,9 @@ public void testIsValidDecimalMinValidator() {
 	@Test
 	public void testInitializeDecimalMaxWithInvalidValue() {
 
-		AnnotationDescriptor.Builder<DecimalMin> descriptorBuilder = new AnnotationDescriptor.Builder<>( DecimalMin.class );
+		ConstraintAnnotationDescriptor.Builder<DecimalMin> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DecimalMin.class );
 		descriptorBuilder.setAttribute( "value", "foobar" );
-		descriptorBuilder.setAttribute( "message", "{validator.min}" );
+		descriptorBuilder.setMessage( "{validator.min}" );
 		DecimalMin m = descriptorBuilder.build().getAnnotation();
 
 		DecimalMinValidatorForNumber constraint = new DecimalMinValidatorForNumber();
@@ -74,10 +74,10 @@ public void testInitializeDecimalMaxWithInvalidValue() {
 	@TestForIssue(jiraKey = "HV-256")
 	public void testIsValidDecimalMinExclusive() {
 		boolean inclusive = false;
-		AnnotationDescriptor.Builder<DecimalMin> descriptorBuilder = new AnnotationDescriptor.Builder<>( DecimalMin.class );
+		ConstraintAnnotationDescriptor.Builder<DecimalMin> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DecimalMin.class );
 		descriptorBuilder.setAttribute( "value", "1500E-2" );
 		descriptorBuilder.setAttribute( "inclusive", inclusive );
-		descriptorBuilder.setAttribute( "message", "{validator.min}" );
+		descriptorBuilder.setMessage( "{validator.min}" );
 		DecimalMin m = descriptorBuilder.build().getAnnotation();
 
 		DecimalMinValidatorForCharSequence constraint = new DecimalMinValidatorForCharSequence();
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/PatternValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/PatternValidatorTest.java
index a497ffe9a8..3f3460e35e 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/PatternValidatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/PatternValidatorTest.java
@@ -12,7 +12,7 @@
 import javax.validation.constraints.Pattern;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.PatternValidator;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.MyCustomStringImpl;
 import org.hibernate.validator.testutil.TestForIssue;
 import org.testng.annotations.Test;
@@ -24,9 +24,9 @@ public class PatternValidatorTest {
 
 	@Test
 	public void testIsValid() {
-		AnnotationDescriptor.Builder<Pattern> descriptorBuilder = new AnnotationDescriptor.Builder<>( Pattern.class );
+		ConstraintAnnotationDescriptor.Builder<Pattern> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Pattern.class );
 		descriptorBuilder.setAttribute( "regexp", "foobar" );
-		descriptorBuilder.setAttribute( "message", "pattern does not match" );
+		descriptorBuilder.setMessage( "pattern does not match" );
 		Pattern p = descriptorBuilder.build().getAnnotation();
 
 		PatternValidator constraint = new PatternValidator();
@@ -41,7 +41,7 @@ public void testIsValid() {
 	@Test
 	@TestForIssue(jiraKey = "HV-502")
 	public void testIsValidForCharSequence() {
-		AnnotationDescriptor.Builder<Pattern> descriptorBuilder = new AnnotationDescriptor.Builder<>( Pattern.class );
+		ConstraintAnnotationDescriptor.Builder<Pattern> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Pattern.class );
 		descriptorBuilder.setAttribute( "regexp", "char sequence" );
 		Pattern p = descriptorBuilder.build().getAnnotation();
 
@@ -53,9 +53,9 @@ public void testIsValidForCharSequence() {
 
 	@Test
 	public void testIsValidForEmptyStringRegexp() {
-		AnnotationDescriptor.Builder<Pattern> descriptorBuilder = new AnnotationDescriptor.Builder<>( Pattern.class );
+		ConstraintAnnotationDescriptor.Builder<Pattern> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Pattern.class );
 		descriptorBuilder.setAttribute( "regexp", "|^.*foo$" );
-		descriptorBuilder.setAttribute( "message", "pattern does not match" );
+		descriptorBuilder.setMessage( "pattern does not match" );
 		Pattern p = descriptorBuilder.build().getAnnotation();
 
 		PatternValidator constraint = new PatternValidator();
@@ -70,9 +70,9 @@ public void testIsValidForEmptyStringRegexp() {
 
 	@Test(expectedExceptions = IllegalArgumentException.class)
 	public void testInvalidRegularExpression() {
-		AnnotationDescriptor.Builder<Pattern> descriptorBuilder = new AnnotationDescriptor.Builder<>( Pattern.class );
+		ConstraintAnnotationDescriptor.Builder<Pattern> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Pattern.class );
 		descriptorBuilder.setAttribute( "regexp", "(unbalanced parentheses" );
-		descriptorBuilder.setAttribute( "message", "pattern does not match" );
+		descriptorBuilder.setMessage( "pattern does not match" );
 		Pattern p = descriptorBuilder.build().getAnnotation();
 
 		PatternValidator constraint = new PatternValidator();
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/SignValidatorForNumberTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/SignValidatorForNumberTest.java
index 31d13618e0..0874e2d972 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/SignValidatorForNumberTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/SignValidatorForNumberTest.java
@@ -55,7 +55,8 @@
 import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveValidatorForLong;
 import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveValidatorForNumber;
 import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveValidatorForShort;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
+
 import org.testng.annotations.Test;
 
 /**
@@ -66,22 +67,22 @@ public class SignValidatorForNumberTest {
 
 	@Test
 	public void testPositiveValidator() {
-		testPositive( new AnnotationDescriptor.Builder<>( Positive.class ).build().getAnnotation() );
+		testPositive( new ConstraintAnnotationDescriptor.Builder<>( Positive.class ).build().getAnnotation() );
 	}
 
 	@Test
 	public void testPositiveOrZeroValidator() {
-		testPositiveOrZero( new AnnotationDescriptor.Builder<>( PositiveOrZero.class ).build().getAnnotation() );
+		testPositiveOrZero( new ConstraintAnnotationDescriptor.Builder<>( PositiveOrZero.class ).build().getAnnotation() );
 	}
 
 	@Test
 	public void testNegativeValidator() {
-		testNegative( new AnnotationDescriptor.Builder<>( Negative.class ).build().getAnnotation() );
+		testNegative( new ConstraintAnnotationDescriptor.Builder<>( Negative.class ).build().getAnnotation() );
 	}
 
 	@Test
 	public void testNegativeOrZeroValidator() {
-		testNegativeOrZero( new AnnotationDescriptor.Builder<>( NegativeOrZero.class ).build().getAnnotation() );
+		testNegativeOrZero( new ConstraintAnnotationDescriptor.Builder<>( NegativeOrZero.class ).build().getAnnotation() );
 	}
 
 	@SuppressWarnings({ "rawtypes", "unchecked" })
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/CurrencyValidatorForMonetaryAmountTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/CurrencyValidatorForMonetaryAmountTest.java
index 09bd1b0ec9..9768d6daa3 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/CurrencyValidatorForMonetaryAmountTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/CurrencyValidatorForMonetaryAmountTest.java
@@ -26,7 +26,8 @@
 import org.hibernate.validator.cfg.defs.CurrencyDef;
 import org.hibernate.validator.constraints.Currency;
 import org.hibernate.validator.internal.constraintvalidators.bv.money.CurrencyValidatorForMonetaryAmount;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
+
 import org.javamoney.moneta.Money;
 import org.testng.annotations.Test;
 
@@ -88,7 +89,7 @@ public void programmaticDefinition() {
 	}
 
 	private Currency currency(String... acceptedCurrencies) {
-		AnnotationDescriptor.Builder<Currency> descriptorBuilder = new AnnotationDescriptor.Builder<>( Currency.class );
+		ConstraintAnnotationDescriptor.Builder<Currency> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Currency.class );
 		descriptorBuilder.setAttribute( "value", acceptedCurrencies );
 		return descriptorBuilder.build().getAnnotation();
 	}
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/DecimalMaxValidatorForMonetaryAmountTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/DecimalMaxValidatorForMonetaryAmountTest.java
index 6998a83b49..05ce20d4c1 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/DecimalMaxValidatorForMonetaryAmountTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/DecimalMaxValidatorForMonetaryAmountTest.java
@@ -14,7 +14,8 @@
 import javax.validation.constraints.DecimalMax;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.money.DecimalMaxValidatorForMonetaryAmount;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
+
 import org.javamoney.moneta.Money;
 import org.testng.annotations.Test;
 
@@ -69,7 +70,7 @@ public void validIfLessAndNotIncluded() {
 	}
 
 	private DecimalMax decimalMax(final String value, final boolean inclusive) {
-		AnnotationDescriptor.Builder<DecimalMax> descriptorBuilder = new AnnotationDescriptor.Builder<>( DecimalMax.class );
+		ConstraintAnnotationDescriptor.Builder<DecimalMax> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DecimalMax.class );
 		descriptorBuilder.setAttribute( "value", value );
 		descriptorBuilder.setAttribute( "inclusive", inclusive );
 		return descriptorBuilder.build().getAnnotation();
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/DecimalMinValidatorForMonetaryAmountTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/DecimalMinValidatorForMonetaryAmountTest.java
index 7e40e6b7d3..5e02512cea 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/DecimalMinValidatorForMonetaryAmountTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/DecimalMinValidatorForMonetaryAmountTest.java
@@ -14,7 +14,8 @@
 import javax.validation.constraints.DecimalMin;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.money.DecimalMinValidatorForMonetaryAmount;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
+
 import org.javamoney.moneta.Money;
 import org.testng.annotations.Test;
 
@@ -69,7 +70,7 @@ public void validIfGreaterAndNotIncluded() {
 	}
 
 	private DecimalMin decimalMin(final String value, final boolean inclusive) {
-		AnnotationDescriptor.Builder<DecimalMin> descriptorBuilder = new AnnotationDescriptor.Builder<>( DecimalMin.class );
+		ConstraintAnnotationDescriptor.Builder<DecimalMin> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DecimalMin.class );
 		descriptorBuilder.setAttribute( "value", value );
 		descriptorBuilder.setAttribute( "inclusive", inclusive );
 		return descriptorBuilder.build().getAnnotation();
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/MaxValidatorForMonetaryAmountTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/MaxValidatorForMonetaryAmountTest.java
index 1f6024ecf9..80f98fdc8c 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/MaxValidatorForMonetaryAmountTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/MaxValidatorForMonetaryAmountTest.java
@@ -14,7 +14,8 @@
 import javax.validation.constraints.Max;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.money.MaxValidatorForMonetaryAmount;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
+
 import org.javamoney.moneta.Money;
 import org.testng.annotations.Test;
 
@@ -55,7 +56,7 @@ public void validIfInclude() {
 	}
 
 	private Max max(final long value) {
-		AnnotationDescriptor.Builder<Max> descriptorBuilder = new AnnotationDescriptor.Builder<>( Max.class );
+		ConstraintAnnotationDescriptor.Builder<Max> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Max.class );
 		descriptorBuilder.setAttribute( "value", value );
 		return descriptorBuilder.build().getAnnotation();
 	}
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/MinValidatorForMonetaryAmountTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/MinValidatorForMonetaryAmountTest.java
index 6830d0f9d2..bd2ea00826 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/MinValidatorForMonetaryAmountTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/MinValidatorForMonetaryAmountTest.java
@@ -14,7 +14,8 @@
 import javax.validation.constraints.Min;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.money.MinValidatorForMonetaryAmount;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
+
 import org.javamoney.moneta.Money;
 import org.testng.annotations.Test;
 
@@ -55,7 +56,7 @@ public void validIfInclude() {
 	}
 
 	private Min min(final long value) {
-		AnnotationDescriptor.Builder<Min> descriptorBuilder = new AnnotationDescriptor.Builder<>( Min.class );
+		ConstraintAnnotationDescriptor.Builder<Min> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Min.class );
 		descriptorBuilder.setAttribute( "value", value );
 		return descriptorBuilder.build().getAnnotation();
 	}
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/NegativeOrZeroValidatorForMonetaryAmountTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/NegativeOrZeroValidatorForMonetaryAmountTest.java
index 6b6a917018..852d990c13 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/NegativeOrZeroValidatorForMonetaryAmountTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/NegativeOrZeroValidatorForMonetaryAmountTest.java
@@ -14,7 +14,7 @@
 import javax.validation.constraints.NegativeOrZero;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.money.NegativeOrZeroValidatorForMonetaryAmount;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.javamoney.moneta.Money;
 import org.testng.annotations.Test;
 
@@ -55,7 +55,7 @@ public void validIfZero() {
 	}
 
 	private NegativeOrZero negativeOrZero() {
-		AnnotationDescriptor.Builder<NegativeOrZero> descriptorBuilder = new AnnotationDescriptor.Builder<>( NegativeOrZero.class );
+		ConstraintAnnotationDescriptor.Builder<NegativeOrZero> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( NegativeOrZero.class );
 		return descriptorBuilder.build().getAnnotation();
 	}
 
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/NegativeValidatorForMonetaryAmountTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/NegativeValidatorForMonetaryAmountTest.java
index 67923515f4..efd7d7ce26 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/NegativeValidatorForMonetaryAmountTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/NegativeValidatorForMonetaryAmountTest.java
@@ -14,7 +14,8 @@
 import javax.validation.constraints.Negative;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.money.NegativeValidatorForMonetaryAmount;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
+
 import org.javamoney.moneta.Money;
 import org.testng.annotations.Test;
 
@@ -55,7 +56,7 @@ public void invalidIfZero() {
 	}
 
 	private Negative negative() {
-		AnnotationDescriptor.Builder<Negative> descriptorBuilder = new AnnotationDescriptor.Builder<>( Negative.class );
+		ConstraintAnnotationDescriptor.Builder<Negative> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Negative.class );
 		return descriptorBuilder.build().getAnnotation();
 	}
 
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/PositiveOrZeroValidatorForMonetaryAmountTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/PositiveOrZeroValidatorForMonetaryAmountTest.java
index 40ef63a3af..5b28b7ca2e 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/PositiveOrZeroValidatorForMonetaryAmountTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/PositiveOrZeroValidatorForMonetaryAmountTest.java
@@ -14,7 +14,8 @@
 import javax.validation.constraints.PositiveOrZero;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.money.PositiveOrZeroValidatorForMonetaryAmount;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
+
 import org.javamoney.moneta.Money;
 import org.testng.annotations.Test;
 
@@ -55,7 +56,7 @@ public void validIfZero() {
 	}
 
 	private PositiveOrZero positiveOrZero() {
-		AnnotationDescriptor.Builder<PositiveOrZero> descriptorBuilder = new AnnotationDescriptor.Builder<>( PositiveOrZero.class );
+		ConstraintAnnotationDescriptor.Builder<PositiveOrZero> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( PositiveOrZero.class );
 		return descriptorBuilder.build().getAnnotation();
 	}
 }
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/PositiveValidatorForMonetaryAmountTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/PositiveValidatorForMonetaryAmountTest.java
index 3268012d99..55936f0f7a 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/PositiveValidatorForMonetaryAmountTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/money/PositiveValidatorForMonetaryAmountTest.java
@@ -14,7 +14,8 @@
 import javax.validation.constraints.Positive;
 
 import org.hibernate.validator.internal.constraintvalidators.bv.money.PositiveValidatorForMonetaryAmount;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
+
 import org.javamoney.moneta.Money;
 import org.testng.annotations.Test;
 
@@ -55,7 +56,7 @@ public void invalidIfZero() {
 	}
 
 	private Positive positive(final boolean strict) {
-		AnnotationDescriptor.Builder<Positive> descriptorBuilder = new AnnotationDescriptor.Builder<>( Positive.class );
+		ConstraintAnnotationDescriptor.Builder<Positive> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Positive.class );
 		return descriptorBuilder.build().getAnnotation();
 	}
 }
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/size/SizeValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/size/SizeValidatorTest.java
index 6ae90a1069..09e3da8900 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/size/SizeValidatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/size/SizeValidatorTest.java
@@ -36,7 +36,7 @@
 import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence;
 import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCollection;
 import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForMap;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.MyCustomStringImpl;
 import org.hibernate.validator.testutil.TestForIssue;
 import org.hibernate.validator.testutils.ValidatorUtil;
@@ -171,10 +171,10 @@ public void testGenericsExtendsFoo() throws Exception {
 	}
 
 	private <T> ConstraintValidator<Size, T> getValidatorMin1Max2(Class<?> validatorClass) throws Exception {
-		AnnotationDescriptor.Builder<Size> descriptorBuilder = new AnnotationDescriptor.Builder<>( Size.class );
+		ConstraintAnnotationDescriptor.Builder<Size> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Size.class );
 		descriptorBuilder.setAttribute( "min", 1 );
 		descriptorBuilder.setAttribute( "max", 2 );
-		descriptorBuilder.setAttribute( "message", "{validator.max}" );
+		descriptorBuilder.setMessage( "{validator.max}" );
 		Size m = descriptorBuilder.build().getAnnotation();
 		@SuppressWarnings("unchecked")
 		ConstraintValidator<Size, T> validator = (ConstraintValidator<Size, T>) validatorClass.newInstance();
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/time/TemporalValidationToleranceTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/time/TemporalValidationToleranceTest.java
new file mode 100644
index 0000000000..d86550a7ec
--- /dev/null
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/bv/time/TemporalValidationToleranceTest.java
@@ -0,0 +1,440 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.test.internal.constraintvalidators.bv.time;
+
+import static org.hibernate.validator.testutil.ConstraintViolationAssert.assertNoViolations;
+import static org.hibernate.validator.testutil.ConstraintViolationAssert.assertThat;
+import static org.hibernate.validator.testutil.ConstraintViolationAssert.violationOf;
+import static org.hibernate.validator.testutils.ValidatorUtil.getConfiguration;
+
+import java.time.Clock;
+import java.time.Duration;
+import java.time.Instant;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.OffsetDateTime;
+import java.time.Year;
+import java.time.YearMonth;
+import java.time.ZoneId;
+import java.time.ZonedDateTime;
+import java.time.chrono.HijrahDate;
+import java.time.chrono.JapaneseDate;
+import java.time.chrono.MinguoDate;
+import java.time.chrono.ThaiBuddhistDate;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+
+import javax.validation.Validator;
+import javax.validation.constraints.Future;
+import javax.validation.constraints.FutureOrPresent;
+import javax.validation.constraints.Past;
+import javax.validation.constraints.PastOrPresent;
+
+import org.hibernate.validator.testutil.TestForIssue;
+import org.joda.time.ReadableInstant;
+import org.testng.annotations.Test;
+
+/**
+ * @author Marko Bekhta
+ * @author Guillaume Smet
+ */
+@TestForIssue(jiraKey = "HV-1493")
+public class TemporalValidationToleranceTest {
+
+	@Test
+	public void testFutureTolerance() throws Exception {
+		ZonedDateTime reference = ZonedDateTime.of( 2017, 1, 1, 0, 0, 7, 0, ZoneId.systemDefault() );
+		FutureDummyEntity entity = new FutureDummyEntity( reference.minus( Duration.ofSeconds( 5 ) ) );
+
+		Validator validator = getNoTemporalValidationToleranceValidator( reference );
+
+		assertThat( validator.validate( entity ) ).containsOnlyViolations(
+				violationOf( Future.class ).withProperty( "calendar" ),
+				violationOf( Future.class ).withProperty( "date" ),
+				violationOf( Future.class ).withProperty( "hijrahDate" ),
+				violationOf( Future.class ).withProperty( "instant" ),
+				violationOf( Future.class ).withProperty( "japaneseDate" ),
+				violationOf( Future.class ).withProperty( "localDate" ),
+				violationOf( Future.class ).withProperty( "localDateTime" ),
+				violationOf( Future.class ).withProperty( "minguoDate" ),
+				violationOf( Future.class ).withProperty( "offsetDateTime" ),
+				violationOf( Future.class ).withProperty( "thaiBuddhistDate" ),
+				violationOf( Future.class ).withProperty( "year" ),
+				violationOf( Future.class ).withProperty( "yearMonth" ),
+				violationOf( Future.class ).withProperty( "zonedDateTime" ),
+				violationOf( Future.class ).withProperty( "readableInstant" )
+		);
+
+		validator = getTenSecondsTemporalValidationToleranceValidator( reference );
+
+		assertNoViolations( validator.validate( entity ) );
+	}
+
+	@Test
+	public void testFutureOrPresentTolerance() throws Exception {
+		ZonedDateTime reference = ZonedDateTime.of( 2017, 1, 1, 0, 0, 7, 0, ZoneId.systemDefault() );
+		FutureOrPresentDummyEntity entity = new FutureOrPresentDummyEntity( reference.minus( Duration.ofDays( 600 ) ) );
+
+		Validator validator = getNoTemporalValidationToleranceValidator( reference );
+
+		assertThat( validator.validate( entity ) ).containsOnlyViolations(
+				violationOf( FutureOrPresent.class ).withProperty( "calendar" ),
+				violationOf( FutureOrPresent.class ).withProperty( "date" ),
+				violationOf( FutureOrPresent.class ).withProperty( "hijrahDate" ),
+				violationOf( FutureOrPresent.class ).withProperty( "instant" ),
+				violationOf( FutureOrPresent.class ).withProperty( "japaneseDate" ),
+				violationOf( FutureOrPresent.class ).withProperty( "localDate" ),
+				violationOf( FutureOrPresent.class ).withProperty( "localDateTime" ),
+				violationOf( FutureOrPresent.class ).withProperty( "minguoDate" ),
+				violationOf( FutureOrPresent.class ).withProperty( "offsetDateTime" ),
+				violationOf( FutureOrPresent.class ).withProperty( "thaiBuddhistDate" ),
+				violationOf( FutureOrPresent.class ).withProperty( "year" ),
+				violationOf( FutureOrPresent.class ).withProperty( "yearMonth" ),
+				violationOf( FutureOrPresent.class ).withProperty( "zonedDateTime" ),
+				violationOf( FutureOrPresent.class ).withProperty( "readableInstant" )
+		);
+
+		validator = get2YearsTemporalValidationToleranceValidator( reference );
+
+		assertNoViolations( validator.validate( entity ) );
+	}
+
+	@Test
+	public void testPastTolerance() throws Exception {
+		ZonedDateTime reference = ZonedDateTime.of( 2017, 12, 31, 23, 59, 53, 0, ZoneId.systemDefault() );
+		PastDummyEntity entity = new PastDummyEntity( reference.plus( Duration.ofSeconds( 5 ) ) );
+
+		Validator validator = getNoTemporalValidationToleranceValidator( reference );
+
+		assertThat( validator.validate( entity ) ).containsOnlyViolations(
+				violationOf( Past.class ).withProperty( "calendar" ),
+				violationOf( Past.class ).withProperty( "date" ),
+				violationOf( Past.class ).withProperty( "hijrahDate" ),
+				violationOf( Past.class ).withProperty( "instant" ),
+				violationOf( Past.class ).withProperty( "japaneseDate" ),
+				violationOf( Past.class ).withProperty( "localDate" ),
+				violationOf( Past.class ).withProperty( "localDateTime" ),
+				violationOf( Past.class ).withProperty( "minguoDate" ),
+				violationOf( Past.class ).withProperty( "offsetDateTime" ),
+				violationOf( Past.class ).withProperty( "thaiBuddhistDate" ),
+				violationOf( Past.class ).withProperty( "year" ),
+				violationOf( Past.class ).withProperty( "yearMonth" ),
+				violationOf( Past.class ).withProperty( "zonedDateTime" ),
+				violationOf( Past.class ).withProperty( "readableInstant" )
+		);
+
+		validator = getTenSecondsTemporalValidationToleranceValidator( reference );
+
+		assertNoViolations( validator.validate( entity ) );
+	}
+
+	@Test
+	public void testPastOrPresentTolerance() throws Exception {
+		ZonedDateTime reference = ZonedDateTime.of( 2017, 1, 1, 0, 0, 7, 0, ZoneId.systemDefault() );
+		PastOrPresentDummyEntity entity = new PastOrPresentDummyEntity( reference.plus( Duration.ofDays( 600 ) ) );
+
+		Validator validator = getNoTemporalValidationToleranceValidator( reference );
+
+		assertThat( validator.validate( entity ) ).containsOnlyViolations(
+				violationOf( PastOrPresent.class ).withProperty( "calendar" ),
+				violationOf( PastOrPresent.class ).withProperty( "date" ),
+				violationOf( PastOrPresent.class ).withProperty( "hijrahDate" ),
+				violationOf( PastOrPresent.class ).withProperty( "instant" ),
+				violationOf( PastOrPresent.class ).withProperty( "japaneseDate" ),
+				violationOf( PastOrPresent.class ).withProperty( "localDate" ),
+				violationOf( PastOrPresent.class ).withProperty( "localDateTime" ),
+				violationOf( PastOrPresent.class ).withProperty( "minguoDate" ),
+				violationOf( PastOrPresent.class ).withProperty( "offsetDateTime" ),
+				violationOf( PastOrPresent.class ).withProperty( "thaiBuddhistDate" ),
+				violationOf( PastOrPresent.class ).withProperty( "year" ),
+				violationOf( PastOrPresent.class ).withProperty( "yearMonth" ),
+				violationOf( PastOrPresent.class ).withProperty( "zonedDateTime" ),
+				violationOf( PastOrPresent.class ).withProperty( "readableInstant" )
+		);
+
+		validator = get2YearsTemporalValidationToleranceValidator( reference );
+
+		assertNoViolations( validator.validate( entity ) );
+	}
+
+	private Validator getNoTemporalValidationToleranceValidator(ZonedDateTime reference) {
+		return getConfiguration()
+				.clockProvider( () -> Clock.fixed( reference.toInstant(), reference.getZone() ) )
+				.buildValidatorFactory().getValidator();
+	}
+
+	private Validator getTenSecondsTemporalValidationToleranceValidator(ZonedDateTime reference) {
+		return getConfiguration()
+				.temporalValidationTolerance( Duration.ofSeconds( 10 ) )
+				.clockProvider( () -> Clock.fixed( reference.toInstant(), reference.getZone() ) )
+				.buildValidatorFactory().getValidator();
+	}
+
+	private Validator get2YearsTemporalValidationToleranceValidator(ZonedDateTime reference) {
+		return getConfiguration()
+				.temporalValidationTolerance( Duration.ofDays( 365 * 2 ) )
+				.clockProvider( () -> Clock.fixed( reference.toInstant(), reference.getZone() ) )
+				.buildValidatorFactory().getValidator();
+	}
+
+	private static class FutureDummyEntity {
+
+		@Future
+		private Calendar calendar;
+
+		@Future
+		private Date date;
+
+		@Future
+		private HijrahDate hijrahDate;
+
+		@Future
+		private Instant instant;
+
+		@Future
+		private JapaneseDate japaneseDate;
+
+		@Future
+		private LocalDate localDate;
+
+		@Future
+		private LocalDateTime localDateTime;
+
+		@Future
+		private MinguoDate minguoDate;
+
+		@Future
+		private OffsetDateTime offsetDateTime;
+
+		@Future
+		private ThaiBuddhistDate thaiBuddhistDate;
+
+		@Future
+		private Year year;
+
+		@Future
+		private YearMonth yearMonth;
+
+		@Future
+		private ZonedDateTime zonedDateTime;
+
+		@Future
+		private ReadableInstant readableInstant;
+
+		public FutureDummyEntity(ZonedDateTime dateTime) {
+			calendar = GregorianCalendar.from( dateTime );
+			date = calendar.getTime();
+
+			instant = dateTime.toInstant();
+			localDateTime = dateTime.toLocalDateTime();
+
+			hijrahDate = HijrahDate.from( dateTime );
+			japaneseDate = JapaneseDate.from( dateTime );
+			localDate = LocalDate.from( dateTime );
+			minguoDate = MinguoDate.from( dateTime );
+			offsetDateTime = dateTime.toOffsetDateTime();
+			thaiBuddhistDate = ThaiBuddhistDate.from( dateTime );
+			year = Year.from( dateTime );
+			yearMonth = YearMonth.from( dateTime );
+			zonedDateTime = dateTime;
+			readableInstant = new org.joda.time.DateTime( dateTime.toEpochSecond() * 1_000 );
+		}
+	}
+
+	private static class FutureOrPresentDummyEntity {
+
+		@FutureOrPresent
+		private Calendar calendar;
+
+		@FutureOrPresent
+		private Date date;
+
+		@FutureOrPresent
+		private HijrahDate hijrahDate;
+
+		@FutureOrPresent
+		private Instant instant;
+
+		@FutureOrPresent
+		private JapaneseDate japaneseDate;
+
+		@FutureOrPresent
+		private LocalDate localDate;
+
+		@FutureOrPresent
+		private LocalDateTime localDateTime;
+
+		@FutureOrPresent
+		private MinguoDate minguoDate;
+
+		@FutureOrPresent
+		private OffsetDateTime offsetDateTime;
+
+		@FutureOrPresent
+		private ThaiBuddhistDate thaiBuddhistDate;
+
+		@FutureOrPresent
+		private Year year;
+
+		@FutureOrPresent
+		private YearMonth yearMonth;
+
+		@FutureOrPresent
+		private ZonedDateTime zonedDateTime;
+
+		@FutureOrPresent
+		private ReadableInstant readableInstant;
+
+		public FutureOrPresentDummyEntity(ZonedDateTime dateTime) {
+			calendar = GregorianCalendar.from( dateTime );
+			date = calendar.getTime();
+
+			instant = dateTime.toInstant();
+			localDateTime = dateTime.toLocalDateTime();
+
+			hijrahDate = HijrahDate.from( dateTime );
+			japaneseDate = JapaneseDate.from( dateTime );
+			localDate = LocalDate.from( dateTime );
+			minguoDate = MinguoDate.from( dateTime );
+			offsetDateTime = dateTime.toOffsetDateTime();
+			thaiBuddhistDate = ThaiBuddhistDate.from( dateTime );
+			year = Year.from( dateTime );
+			yearMonth = YearMonth.from( dateTime );
+			zonedDateTime = dateTime;
+			readableInstant = new org.joda.time.DateTime( dateTime.toEpochSecond() * 1_000 );
+		}
+	}
+
+	private static class PastDummyEntity {
+
+		@Past
+		private Calendar calendar;
+
+		@Past
+		private Date date;
+
+		@Past
+		private HijrahDate hijrahDate;
+
+		@Past
+		private Instant instant;
+
+		@Past
+		private JapaneseDate japaneseDate;
+
+		@Past
+		private LocalDate localDate;
+
+		@Past
+		private LocalDateTime localDateTime;
+
+		@Past
+		private MinguoDate minguoDate;
+
+		@Past
+		private OffsetDateTime offsetDateTime;
+
+		@Past
+		private ThaiBuddhistDate thaiBuddhistDate;
+
+		@Past
+		private Year year;
+
+		@Past
+		private YearMonth yearMonth;
+
+		@Past
+		private ZonedDateTime zonedDateTime;
+
+		@Past
+		private ReadableInstant readableInstant;
+
+		public PastDummyEntity(ZonedDateTime dateTime) {
+			calendar = GregorianCalendar.from( dateTime );
+			date = calendar.getTime();
+
+			instant = dateTime.toInstant();
+			localDateTime = dateTime.toLocalDateTime();
+
+			hijrahDate = HijrahDate.from( dateTime );
+			japaneseDate = JapaneseDate.from( dateTime );
+			localDate = LocalDate.from( dateTime );
+			minguoDate = MinguoDate.from( dateTime );
+			offsetDateTime = dateTime.toOffsetDateTime();
+			thaiBuddhistDate = ThaiBuddhistDate.from( dateTime );
+			year = Year.from( dateTime );
+			yearMonth = YearMonth.from( dateTime );
+			zonedDateTime = dateTime;
+			readableInstant = new org.joda.time.DateTime( dateTime.toEpochSecond() * 1_000 );
+		}
+	}
+
+	private static class PastOrPresentDummyEntity {
+
+		@PastOrPresent
+		private Calendar calendar;
+
+		@PastOrPresent
+		private Date date;
+
+		@PastOrPresent
+		private HijrahDate hijrahDate;
+
+		@PastOrPresent
+		private Instant instant;
+
+		@PastOrPresent
+		private JapaneseDate japaneseDate;
+
+		@PastOrPresent
+		private LocalDate localDate;
+
+		@PastOrPresent
+		private LocalDateTime localDateTime;
+
+		@PastOrPresent
+		private MinguoDate minguoDate;
+
+		@PastOrPresent
+		private OffsetDateTime offsetDateTime;
+
+		@PastOrPresent
+		private ThaiBuddhistDate thaiBuddhistDate;
+
+		@PastOrPresent
+		private Year year;
+
+		@PastOrPresent
+		private YearMonth yearMonth;
+
+		@PastOrPresent
+		private ZonedDateTime zonedDateTime;
+
+		@PastOrPresent
+		private ReadableInstant readableInstant;
+
+		public PastOrPresentDummyEntity(ZonedDateTime dateTime) {
+			calendar = GregorianCalendar.from( dateTime );
+			date = calendar.getTime();
+
+			instant = dateTime.toInstant();
+			localDateTime = dateTime.toLocalDateTime();
+
+			hijrahDate = HijrahDate.from( dateTime );
+			japaneseDate = JapaneseDate.from( dateTime );
+			localDate = LocalDate.from( dateTime );
+			minguoDate = MinguoDate.from( dateTime );
+			offsetDateTime = dateTime.toOffsetDateTime();
+			thaiBuddhistDate = ThaiBuddhistDate.from( dateTime );
+			year = Year.from( dateTime );
+			yearMonth = YearMonth.from( dateTime );
+			zonedDateTime = dateTime;
+			readableInstant = new org.joda.time.DateTime( dateTime.toEpochSecond() * 1_000 );
+		}
+	}
+}
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/CodePointLengthValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/CodePointLengthValidatorTest.java
index 4d6b97d442..9349332099 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/CodePointLengthValidatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/CodePointLengthValidatorTest.java
@@ -13,8 +13,10 @@
 
 import org.hibernate.validator.constraints.CodePointLength;
 import org.hibernate.validator.internal.constraintvalidators.hv.CodePointLengthValidator;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.MyCustomStringImpl;
+
+import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
 /**
@@ -24,12 +26,18 @@
  */
 public class CodePointLengthValidatorTest {
 
+	private ConstraintAnnotationDescriptor.Builder<CodePointLength> descriptorBuilder;
+
+	@BeforeMethod
+	public void setUp() throws Exception {
+		descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( CodePointLength.class );
+	}
+
 	@Test
 	public void testIsValid() {
-		AnnotationDescriptor.Builder<CodePointLength> descriptorBuilder = new AnnotationDescriptor.Builder<>( CodePointLength.class );
 		descriptorBuilder.setAttribute( "min", 1 );
 		descriptorBuilder.setAttribute( "max", 3 );
-		descriptorBuilder.setAttribute( "message", "{validator.codePointLength}" );
+		descriptorBuilder.setMessage( "{validator.codePointLength}" );
 		CodePointLength l = descriptorBuilder.build().getAnnotation();
 		CodePointLengthValidator constraint = new CodePointLengthValidator();
 		constraint.initialize( l );
@@ -45,7 +53,6 @@ public void testIsValid() {
 
 	@Test
 	public void testIsValidCharSequence() {
-		AnnotationDescriptor.Builder<CodePointLength> descriptorBuilder = new AnnotationDescriptor.Builder<>( CodePointLength.class );
 		descriptorBuilder.setAttribute( "min", 1 );
 		descriptorBuilder.setAttribute( "max", 3 );
 		CodePointLength l = descriptorBuilder.build().getAnnotation();
@@ -58,31 +65,28 @@ public void testIsValidCharSequence() {
 	}
 
 	@Test
-	public void testIsValidNormalizationStrategyIsNONE() {
-		{
-			AnnotationDescriptor.Builder<CodePointLength> descriptorBuilder = new AnnotationDescriptor.Builder<>( CodePointLength.class );
-			descriptorBuilder.setAttribute( "min", 3 );
-			descriptorBuilder.setAttribute( "max", 3 );
-			descriptorBuilder.setAttribute( "normalizationStrategy", CodePointLength.NormalizationStrategy.NONE );
-			CodePointLength l = descriptorBuilder.build().getAnnotation();
-			CodePointLengthValidator constraint = new CodePointLengthValidator();
-			constraint.initialize( l );
-			assertTrue( constraint.isValid( "があ", null ) );
-		}
-		{
-			AnnotationDescriptor.Builder<CodePointLength> descriptorBuilder = new AnnotationDescriptor.Builder<>( CodePointLength.class );
-			descriptorBuilder.setAttribute( "min", 2 );
-			descriptorBuilder.setAttribute( "max", 2 );
-			CodePointLength l = descriptorBuilder.build().getAnnotation();
-			CodePointLengthValidator constraint = new CodePointLengthValidator();
-			constraint.initialize( l );
-			assertTrue( constraint.isValid( "があ", null ) );
-		}
+	public void testIsValidNormalizationStrategyIsNONESpecified() {
+		descriptorBuilder.setAttribute( "min", 3 );
+		descriptorBuilder.setAttribute( "max", 3 );
+		descriptorBuilder.setAttribute( "normalizationStrategy", CodePointLength.NormalizationStrategy.NONE );
+		CodePointLength l = descriptorBuilder.build().getAnnotation();
+		CodePointLengthValidator constraint = new CodePointLengthValidator();
+		constraint.initialize( l );
+		assertTrue( constraint.isValid( "があ", null ) );
+	}
+
+	@Test
+	public void testIsValidNormalizationStrategyIsNONENotSpecified() {
+		descriptorBuilder.setAttribute( "min", 2 );
+		descriptorBuilder.setAttribute( "max", 2 );
+		CodePointLength l = descriptorBuilder.build().getAnnotation();
+		CodePointLengthValidator constraint = new CodePointLengthValidator();
+		constraint.initialize( l );
+		assertTrue( constraint.isValid( "があ", null ) );
 	}
 
 	@Test
 	public void testIsValidNormalizationStrategyIsNfc() {
-		AnnotationDescriptor.Builder<CodePointLength> descriptorBuilder = new AnnotationDescriptor.Builder<>( CodePointLength.class );
 		descriptorBuilder.setAttribute( "min", 3 );
 		descriptorBuilder.setAttribute( "max", 3 );
 		descriptorBuilder.setAttribute( "normalizationStrategy", CodePointLength.NormalizationStrategy.NFC );
@@ -94,7 +98,6 @@ public void testIsValidNormalizationStrategyIsNfc() {
 
 	@Test
 	public void testIsValidNormalizationStrategyIsNfkc() {
-		AnnotationDescriptor.Builder<CodePointLength> descriptorBuilder = new AnnotationDescriptor.Builder<>( CodePointLength.class );
 		descriptorBuilder.setAttribute( "min", 1 );
 		descriptorBuilder.setAttribute( "max", 1 );
 		descriptorBuilder.setAttribute( "normalizationStrategy", CodePointLength.NormalizationStrategy.NFKC );
@@ -106,7 +109,6 @@ public void testIsValidNormalizationStrategyIsNfkc() {
 
 	@Test
 	public void testIsValidNormalizationStrategyIsNfd() {
-		AnnotationDescriptor.Builder<CodePointLength> descriptorBuilder = new AnnotationDescriptor.Builder<>( CodePointLength.class );
 		descriptorBuilder.setAttribute( "min", 5 );
 		descriptorBuilder.setAttribute( "max", 5 );
 		descriptorBuilder.setAttribute( "normalizationStrategy", CodePointLength.NormalizationStrategy.NFD );
@@ -118,7 +120,6 @@ public void testIsValidNormalizationStrategyIsNfd() {
 
 	@Test
 	public void testIsValidNormalizationStrategyIsNfkd() {
-		AnnotationDescriptor.Builder<CodePointLength> descriptorBuilder = new AnnotationDescriptor.Builder<>( CodePointLength.class );
 		descriptorBuilder.setAttribute( "min", 4 );
 		descriptorBuilder.setAttribute( "max", 4 );
 		descriptorBuilder.setAttribute( "normalizationStrategy", CodePointLength.NormalizationStrategy.NFKD );
@@ -137,10 +138,9 @@ public void testNormalizationStrategyValueIsNullOrEmpty() {
 
 	@Test(expectedExceptions = IllegalArgumentException.class)
 	public void testNegativeMinValue() {
-		AnnotationDescriptor.Builder<CodePointLength> descriptorBuilder = new AnnotationDescriptor.Builder<>( CodePointLength.class );
 		descriptorBuilder.setAttribute( "min", -1 );
 		descriptorBuilder.setAttribute( "max", 1 );
-		descriptorBuilder.setAttribute( "message", "{validator.codePointLength}" );
+		descriptorBuilder.setMessage( "{validator.codePointLength}" );
 		CodePointLength l = descriptorBuilder.build().getAnnotation();
 
 		CodePointLengthValidator constraint = new CodePointLengthValidator();
@@ -149,10 +149,9 @@ public void testNegativeMinValue() {
 
 	@Test(expectedExceptions = IllegalArgumentException.class)
 	public void testNegativeMaxValue() {
-		AnnotationDescriptor.Builder<CodePointLength> descriptorBuilder = new AnnotationDescriptor.Builder<>( CodePointLength.class );
 		descriptorBuilder.setAttribute( "min", 1 );
 		descriptorBuilder.setAttribute( "max", -1 );
-		descriptorBuilder.setAttribute( "message", "{validator.codePointLength}" );
+		descriptorBuilder.setMessage( "{validator.codePointLength}" );
 		CodePointLength l = descriptorBuilder.build().getAnnotation();
 
 		CodePointLengthValidator constraint = new CodePointLengthValidator();
@@ -161,10 +160,9 @@ public void testNegativeMaxValue() {
 
 	@Test(expectedExceptions = IllegalArgumentException.class)
 	public void testNegativeLength() {
-		AnnotationDescriptor.Builder<CodePointLength> descriptorBuilder = new AnnotationDescriptor.Builder<>( CodePointLength.class );
 		descriptorBuilder.setAttribute( "min", 5 );
 		descriptorBuilder.setAttribute( "max", 4 );
-		descriptorBuilder.setAttribute( "message", "{validator.codePointLength}" );
+		descriptorBuilder.setMessage( "{validator.codePointLength}" );
 		CodePointLength l = descriptorBuilder.build().getAnnotation();
 
 		CodePointLengthValidator constraint = new CodePointLengthValidator();
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/EmailValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/EmailValidatorTest.java
index a9b78ac515..804e36658c 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/EmailValidatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/EmailValidatorTest.java
@@ -85,6 +85,8 @@ public void testValidEmail() throws Exception {
 		isValidEmail( "user@localserver" );
 		isValidEmail( "user@tt" );
 		isValidEmail( "user@[IPv6:2001:DB8::1]" );
+		isValidEmail( "xn--80ahgue5b@xn--p-8sbkgc5ag7bhce.xn--ba-lmcq" );
+		isValidEmail( "nothing@xn--fken-gra.no" );
 	}
 
 	@Test
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/LengthValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/LengthValidatorTest.java
index 9c0c9b9135..372dea12f5 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/LengthValidatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/LengthValidatorTest.java
@@ -11,7 +11,7 @@
 
 import org.hibernate.validator.constraints.Length;
 import org.hibernate.validator.internal.constraintvalidators.hv.LengthValidator;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.MyCustomStringImpl;
 import org.hibernate.validator.testutil.TestForIssue;
 import org.testng.annotations.Test;
@@ -25,10 +25,10 @@ public class LengthValidatorTest {
 
 	@Test
 	public void testIsValid() {
-		AnnotationDescriptor.Builder<Length> descriptorBuilder = new AnnotationDescriptor.Builder<>( Length.class );
+		ConstraintAnnotationDescriptor.Builder<Length> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Length.class );
 		descriptorBuilder.setAttribute( "min", 1 );
 		descriptorBuilder.setAttribute( "max", 3 );
-		descriptorBuilder.setAttribute( "message", "{validator.length}" );
+		descriptorBuilder.setMessage( "{validator.length}" );
 		Length l = descriptorBuilder.build().getAnnotation();
 		LengthValidator constraint = new LengthValidator();
 		constraint.initialize( l );
@@ -43,7 +43,7 @@ public void testIsValid() {
 	@Test
 	@TestForIssue(jiraKey = "HV-502")
 	public void testIsValidCharSequence() {
-		AnnotationDescriptor.Builder<Length> descriptorBuilder = new AnnotationDescriptor.Builder<>( Length.class );
+		ConstraintAnnotationDescriptor.Builder<Length> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Length.class );
 		descriptorBuilder.setAttribute( "min", 1 );
 		descriptorBuilder.setAttribute( "max", 3 );
 		Length l = descriptorBuilder.build().getAnnotation();
@@ -55,10 +55,10 @@ public void testIsValidCharSequence() {
 
 	@Test(expectedExceptions = IllegalArgumentException.class)
 	public void testNegativeMinValue() {
-		AnnotationDescriptor.Builder<Length> descriptorBuilder = new AnnotationDescriptor.Builder<>( Length.class );
+		ConstraintAnnotationDescriptor.Builder<Length> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Length.class );
 		descriptorBuilder.setAttribute( "min", -1 );
 		descriptorBuilder.setAttribute( "max", 1 );
-		descriptorBuilder.setAttribute( "message", "{validator.length}" );
+		descriptorBuilder.setMessage( "{validator.length}" );
 		Length p = descriptorBuilder.build().getAnnotation();
 
 		LengthValidator constraint = new LengthValidator();
@@ -67,10 +67,10 @@ public void testNegativeMinValue() {
 
 	@Test(expectedExceptions = IllegalArgumentException.class)
 	public void testNegativeMaxValue() {
-		AnnotationDescriptor.Builder<Length> descriptorBuilder = new AnnotationDescriptor.Builder<>( Length.class );
+		ConstraintAnnotationDescriptor.Builder<Length> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Length.class );
 		descriptorBuilder.setAttribute( "min", 1 );
 		descriptorBuilder.setAttribute( "max", -1 );
-		descriptorBuilder.setAttribute( "message", "{validator.length}" );
+		descriptorBuilder.setMessage( "{validator.length}" );
 		Length p = descriptorBuilder.build().getAnnotation();
 
 		LengthValidator constraint = new LengthValidator();
@@ -79,10 +79,10 @@ public void testNegativeMaxValue() {
 
 	@Test(expectedExceptions = IllegalArgumentException.class)
 	public void testNegativeLength() {
-		AnnotationDescriptor.Builder<Length> descriptorBuilder = new AnnotationDescriptor.Builder<>( Length.class );
+		ConstraintAnnotationDescriptor.Builder<Length> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Length.class );
 		descriptorBuilder.setAttribute( "min", 5 );
 		descriptorBuilder.setAttribute( "max", 4 );
-		descriptorBuilder.setAttribute( "message", "{validator.length}" );
+		descriptorBuilder.setMessage( "{validator.length}" );
 		Length p = descriptorBuilder.build().getAnnotation();
 
 		LengthValidator constraint = new LengthValidator();
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/LuhnCheckValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/LuhnCheckValidatorTest.java
index c42d8c184a..0fc63db39e 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/LuhnCheckValidatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/LuhnCheckValidatorTest.java
@@ -11,8 +11,9 @@
 
 import org.hibernate.validator.constraints.LuhnCheck;
 import org.hibernate.validator.internal.constraintvalidators.hv.LuhnCheckValidator;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.MyCustomStringImpl;
+
 import org.testng.annotations.Test;
 
 /**
@@ -106,7 +107,7 @@ public void testInvalidMod10() throws Exception {
 	}
 
 	private LuhnCheck createLuhnCheckAnnotation(int start, int end, int checkDigitIndex, boolean ignoreNonDigits) {
-		AnnotationDescriptor.Builder<LuhnCheck> descriptorBuilder = new AnnotationDescriptor.Builder<>( LuhnCheck.class );
+		ConstraintAnnotationDescriptor.Builder<LuhnCheck> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( LuhnCheck.class );
 		descriptorBuilder.setAttribute( "startIndex", start );
 		descriptorBuilder.setAttribute( "endIndex", end );
 		descriptorBuilder.setAttribute( "checkDigitIndex", checkDigitIndex );
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/Mod10CheckValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/Mod10CheckValidatorTest.java
index 6e622d59eb..effe337877 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/Mod10CheckValidatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/Mod10CheckValidatorTest.java
@@ -23,9 +23,10 @@
 import org.hibernate.validator.cfg.defs.Mod10CheckDef;
 import org.hibernate.validator.constraints.Mod10Check;
 import org.hibernate.validator.internal.constraintvalidators.hv.Mod10CheckValidator;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.MyCustomStringImpl;
 import org.hibernate.validator.testutil.TestForIssue;
+
 import org.testng.annotations.Test;
 
 /**
@@ -205,7 +206,7 @@ public void testProgrammaticMod11Constraint() {
 	}
 
 	private Mod10Check createMod10CheckAnnotation(int start, int end, int checkDigitIndex, boolean ignoreNonDigits, int multiplier, int weight) {
-		AnnotationDescriptor.Builder<Mod10Check> descriptorBuilder = new AnnotationDescriptor.Builder<>( Mod10Check.class );
+		ConstraintAnnotationDescriptor.Builder<Mod10Check> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Mod10Check.class );
 		descriptorBuilder.setAttribute( "startIndex", start );
 		descriptorBuilder.setAttribute( "endIndex", end );
 		descriptorBuilder.setAttribute( "checkDigitIndex", checkDigitIndex );
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/Mod11CheckValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/Mod11CheckValidatorTest.java
index 3a3240d72d..a43987f333 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/Mod11CheckValidatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/Mod11CheckValidatorTest.java
@@ -24,9 +24,10 @@
 import org.hibernate.validator.constraints.Mod11Check;
 import org.hibernate.validator.constraints.Mod11Check.ProcessingDirection;
 import org.hibernate.validator.internal.constraintvalidators.hv.Mod11CheckValidator;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.MyCustomStringImpl;
 import org.hibernate.validator.testutil.TestForIssue;
+
 import org.testng.annotations.Test;
 
 /**
@@ -292,7 +293,7 @@ private Mod11Check createMod11CheckAnnotation(
 			char treatCheck10As,
 			char treatCheck11As,
 			ProcessingDirection processingDirection) {
-		AnnotationDescriptor.Builder<Mod11Check> descriptorBuilder = new AnnotationDescriptor.Builder<>( Mod11Check.class );
+		ConstraintAnnotationDescriptor.Builder<Mod11Check> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Mod11Check.class );
 		descriptorBuilder.setAttribute( "startIndex", start );
 		descriptorBuilder.setAttribute( "endIndex", end );
 		descriptorBuilder.setAttribute( "checkDigitIndex", checkDigitIndex );
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/ModCheckValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/ModCheckValidatorTest.java
index b3dcc3ddc0..ce77171743 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/ModCheckValidatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/ModCheckValidatorTest.java
@@ -11,8 +11,9 @@
 
 import org.hibernate.validator.constraints.ModCheck;
 import org.hibernate.validator.internal.constraintvalidators.hv.ModCheckValidator;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.MyCustomStringImpl;
+
 import org.testng.annotations.Test;
 
 /**
@@ -114,7 +115,7 @@ public void testInvalidMod11() throws Exception {
 	}
 
 	private ModCheck createModCheckAnnotation(ModCheck.ModType modType, int multiplier, int start, int end, int checkDigitIndex, boolean ignoreNonDigits) {
-		AnnotationDescriptor.Builder<ModCheck> descriptorBuilder = new AnnotationDescriptor.Builder<>( ModCheck.class );
+		ConstraintAnnotationDescriptor.Builder<ModCheck> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( ModCheck.class );
 		descriptorBuilder.setAttribute( "modType", modType );
 		descriptorBuilder.setAttribute( "multiplier", multiplier );
 		descriptorBuilder.setAttribute( "startIndex", start );
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/SafeHtmlValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/SafeHtmlValidatorTest.java
index 2741f52956..7eb9e31737 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/SafeHtmlValidatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/SafeHtmlValidatorTest.java
@@ -22,6 +22,7 @@
 import org.hibernate.validator.constraints.SafeHtml.WhiteListType;
 import org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator;
 import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.TestForIssue;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
@@ -35,11 +36,11 @@
  */
 public class SafeHtmlValidatorTest {
 
-	private AnnotationDescriptor.Builder<SafeHtml> descriptorBuilder;
+	private ConstraintAnnotationDescriptor.Builder<SafeHtml> descriptorBuilder;
 
 	@BeforeMethod
 	public void setUp() {
-		descriptorBuilder = new AnnotationDescriptor.Builder<>( SafeHtml.class );
+		descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( SafeHtml.class );
 	}
 
 	@Test
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/ScriptAssertValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/ScriptAssertValidatorTest.java
index c09fbfc7ba..20d698abc8 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/ScriptAssertValidatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/ScriptAssertValidatorTest.java
@@ -10,6 +10,7 @@
 import static org.hibernate.validator.testutil.ConstraintViolationAssert.assertThat;
 import static org.hibernate.validator.testutil.ConstraintViolationAssert.pathWith;
 import static org.hibernate.validator.testutil.ConstraintViolationAssert.violationOf;
+import static org.hibernate.validator.testutils.ConstraintValidatorInitializationHelper.initialize;
 import static org.testng.Assert.assertTrue;
 
 import java.time.Instant;
@@ -23,11 +24,13 @@
 import javax.validation.Validator;
 
 import org.hibernate.validator.constraints.ScriptAssert;
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidator;
 import org.hibernate.validator.internal.constraintvalidators.hv.ScriptAssertValidator;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.test.constraints.annotations.AbstractConstrainedTest;
 import org.hibernate.validator.testutil.TestForIssue;
 import org.hibernate.validator.testutils.ValidatorUtil;
+
 import org.testng.annotations.Test;
 
 /**
@@ -203,8 +206,8 @@ private ConstraintValidator<ScriptAssert, Object> getInitializedValidator(String
 	 */
 	private ConstraintValidator<ScriptAssert, Object> getInitializedValidator(String lang, String script, String alias, String reportOn) {
 
-		ConstraintValidator<ScriptAssert, Object> validator = new ScriptAssertValidator();
-		validator.initialize( getScriptAssert( lang, script, alias, reportOn ) );
+		HibernateConstraintValidator<ScriptAssert, Object> validator = new ScriptAssertValidator();
+		initialize( validator, getScriptAssert( lang, script, alias, reportOn ) );
 
 		return validator;
 	}
@@ -217,8 +220,8 @@ private ConstraintValidator<ScriptAssert, Object> getInitializedValidator(String
 	 *
 	 * @return a {@link ScriptAssert} initialized with the given values.
 	 */
-	private ScriptAssert getScriptAssert(String lang, String script, String alias, String reportOn) {
-		AnnotationDescriptor.Builder<ScriptAssert> descriptorBuilder = new AnnotationDescriptor.Builder<>( ScriptAssert.class );
+	private ConstraintAnnotationDescriptor<ScriptAssert> getScriptAssert(String lang, String script, String alias, String reportOn) {
+		ConstraintAnnotationDescriptor.Builder<ScriptAssert> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( ScriptAssert.class );
 
 		descriptorBuilder.setAttribute( "lang", lang );
 		descriptorBuilder.setAttribute( "script", script );
@@ -229,7 +232,7 @@ private ScriptAssert getScriptAssert(String lang, String script, String alias, S
 			descriptorBuilder.setAttribute( "reportOn", reportOn );
 		}
 
-		return descriptorBuilder.build().getAnnotation();
+		return descriptorBuilder.build();
 	}
 
 	/**
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/URLValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/URLValidatorTest.java
index b2ab509453..844a48a313 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/URLValidatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/URLValidatorTest.java
@@ -32,7 +32,7 @@
 import org.hibernate.validator.constraints.URL;
 import org.hibernate.validator.constraintvalidators.RegexpURLValidator;
 import org.hibernate.validator.internal.constraintvalidators.hv.URLValidator;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.MyCustomStringImpl;
 import org.hibernate.validator.testutil.TestForIssue;
 import org.hibernate.validator.testutils.ValidatorUtil;
@@ -50,11 +50,11 @@ public class URLValidatorTest {
 	private URLValidator urlValidator;
 	private RegexpURLValidator regexpURLValidator;
 
-	private AnnotationDescriptor.Builder<URL> descriptorBuilder;
+	private ConstraintAnnotationDescriptor.Builder<URL> descriptorBuilder;
 
 	@BeforeMethod
 	public void setUp() {
-		descriptorBuilder = new AnnotationDescriptor.Builder<URL>( URL.class );
+		descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<URL>( URL.class );
 		urlValidator = new URLValidator();
 		regexpURLValidator = new RegexpURLValidator();
 	}
@@ -336,6 +336,9 @@ private void assertValidUrls(ConstraintValidator<URL, CharSequence> validator) {
 		assertTrue( validator.isValid( "http://a.b-c.de", null ) );
 		assertTrue( validator.isValid( "http://223.255.255.254", null ) );
 		assertTrue( validator.isValid( "http://[2001:0db8:0a0b:12f0:0000:0000:0000:0001]", null ) );
+		assertTrue( validator.isValid( "http://xn--80ahgue5b.xn--p-8sbkgc5ag7bhce.xn--ba-lmcq", null ) );
+		assertTrue( validator.isValid( "http://xn--fken-gra.no", null ) );
+		assertTrue( validator.isValid( "http://a.b--c.de/", null ) );
 
 		// invalid urls:
 		assertFalse( validator.isValid( "http", null ) );
@@ -371,7 +374,6 @@ private void assertValidUrls(ConstraintValidator<URL, CharSequence> validator) {
 			assertFalse( validator.isValid( "http:// shouldfail.com", null ) );
 			assertFalse( validator.isValid( "http://foo.bar/foo(bar)baz quux", null ) );
 			assertFalse( validator.isValid( "http://-error-.invalid/", null ) );
-			assertFalse( validator.isValid( "http://a.b--c.de/", null ) );
 			assertFalse( validator.isValid( "http://-a.b.co", null ) );
 			assertFalse( validator.isValid( "http://a.b-.co", null ) );
 //			assertFalse( validator.isValid( "http://123.123.123", null ) );
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/UniqueElementsValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/UniqueElementsValidatorTest.java
new file mode 100644
index 0000000000..422bfead80
--- /dev/null
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/UniqueElementsValidatorTest.java
@@ -0,0 +1,180 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.test.internal.constraintvalidators.hv;
+
+import static org.hibernate.validator.testutil.ConstraintViolationAssert.assertNoViolations;
+import static org.hibernate.validator.testutil.ConstraintViolationAssert.assertThat;
+import static org.hibernate.validator.testutil.ConstraintViolationAssert.violationOf;
+import static org.testng.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
+import java.util.Set;
+
+import javax.validation.ConstraintViolation;
+import javax.validation.MessageInterpolator;
+import javax.validation.Validator;
+
+import org.assertj.core.api.Assertions;
+import org.hibernate.validator.HibernateValidatorConfiguration;
+import org.hibernate.validator.constraints.UniqueElements;
+import org.hibernate.validator.engine.HibernateConstraintViolation;
+import org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator;
+import org.hibernate.validator.resourceloading.AggregateResourceBundleLocator;
+import org.hibernate.validator.testutils.ValidatorUtil;
+import org.testng.annotations.Test;
+
+/**
+ * Tests the {@link UniqueElements} constraint
+ *
+ * @author Tadhg Pearson
+ */
+public class UniqueElementsValidatorTest {
+
+	private static class AnnotationContainer {
+
+		@UniqueElements
+		private final List<Object> validateMe;
+
+		private AnnotationContainer(List<Object> validateMe) {
+			this.validateMe = validateMe;
+		}
+	}
+
+	@Test
+	public void testValidDataPasses() {
+		List<List<Object>> input = new ArrayList<>();
+		input.add( null );
+		input.add( Collections.singletonList( null ) );
+		input.add( Collections.singletonList( "" ) );
+		input.add( Collections.singletonList( "a" ) );
+		input.add( Arrays.asList( "a", "aa" ) );
+		input.add( Arrays.asList( "^", "ˆ" ) );
+		input.add( Arrays.asList( "a", "b", "c", "1", "2", "3", null ) );
+		input.add( Arrays.asList( "null", null ) );
+		input.add( Arrays.asList( "lorem", "lorem ipsum" ) );
+
+		input.add( Arrays.asList(
+				new TestObject( 1 ),
+				new TestObject( 2 ),
+				new TestExtendedObject( 2 ),
+				new TestExtendedObject( 3 )
+		) );
+
+		for ( List<Object> value : input ) {
+			Set<ConstraintViolation<AnnotationContainer>> violations = ValidatorUtil.getValidator().validate( new AnnotationContainer( value ) );
+			assertNoViolations( violations, "Validation should have passed for " + value );
+		}
+	}
+
+	@Test
+	public void testInvalidDataFails() {
+		List<List<Object>> input = new ArrayList<>();
+		input.add( Arrays.asList( null, null ) );
+		input.add( Arrays.asList( "a", "a" ) );
+		input.add( Arrays.asList( "ˆ", "ˆ" ) );
+		input.add( Arrays.asList( "a", "b", "a" ) );
+		input.add( Arrays.asList( "a", "b", "c", "b" ) );
+		input.add( Arrays.asList( "*", "*" ) );
+
+		input.add( Arrays.asList( new TestObject( 1 ), new TestObject( 2 ), new TestObject( 1 ) ) );
+		input.add( Arrays.asList( new TestObject( 0 ), new TestObject( 0 ) ) );
+
+		for ( List<Object> value : input ) {
+			Set<ConstraintViolation<AnnotationContainer>> violations = ValidatorUtil.getValidator().validate( new AnnotationContainer( value ) );
+			assertThat( violations )
+					.describedAs( "Validation should have failed for " + value )
+					.containsOnlyViolations( violationOf( UniqueElements.class ) );
+		}
+	}
+
+	@Test
+	public void testMessageContainsDuplicatedValue() {
+		HibernateValidatorConfiguration configuration = ValidatorUtil.getConfiguration();
+
+		MessageInterpolator messageInterpolator = new ResourceBundleMessageInterpolator(
+				new AggregateResourceBundleLocator(
+						Arrays.asList( "org/hibernate/validator/test/internal/constraintvalidators/hv/UniqueElementsMessages" ),
+						configuration.getDefaultResourceBundleLocator(),
+						getClass().getClassLoader()
+				)
+		);
+
+		Validator validator = configuration
+				.messageInterpolator( messageInterpolator )
+				.buildValidatorFactory().getValidator();
+
+		String duplicate = "seeme";
+		List<Object> fails = Arrays.asList( duplicate, duplicate );
+		Set<ConstraintViolation<AnnotationContainer>> violations = validator.validate( new AnnotationContainer( fails ) );
+
+		assertThat( violations ).containsOnlyViolations( violationOf( UniqueElements.class ) );
+
+		assertTrue( violations.stream().anyMatch( cv -> cv.getMessage().contains( duplicate ) ) );
+	}
+
+	@SuppressWarnings("unchecked")
+	@Test
+	public void testDymanicPayloadContainsDuplicatedValue() {
+		String duplicate = "seeme";
+		List<Object> fails = Arrays.asList( duplicate, duplicate );
+		Set<ConstraintViolation<AnnotationContainer>> violations = ValidatorUtil.getValidator().validate( new AnnotationContainer( fails ) );
+
+		assertThat( violations ).containsOnlyViolations( violationOf( UniqueElements.class ) );
+
+		ConstraintViolation<?> violation = violations.iterator().next();
+		Assertions.assertThat( ((HibernateConstraintViolation<UniqueElements>) violation.unwrap( HibernateConstraintViolation.class )).getDynamicPayload( List.class ) )
+				.containsOnly( duplicate );
+	}
+
+	private static class TestObject {
+
+		private final int value;
+
+		private TestObject(Integer value) {
+			this.value = value;
+		}
+
+		@Override
+		public boolean equals(Object o) {
+			if ( this == o ) {
+				return true;
+			}
+			if ( !( o instanceof TestObject ) ) {
+				return false;
+			}
+			TestObject that = (TestObject) o;
+			return value == that.value;
+		}
+
+		@Override
+		public int hashCode() {
+			return Objects.hash( value );
+		}
+	}
+
+
+	private static class TestExtendedObject extends TestObject {
+
+		private TestExtendedObject(Integer value) {
+			super( value );
+		}
+
+		@Override
+		public boolean equals(Object o) {
+			return ( this == o ) || ( o instanceof TestExtendedObject && super.equals( o ) );
+		}
+
+		@Override
+		public int hashCode() {
+			return Objects.hash( super.hashCode() );
+		}
+	}
+}
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/time/DurationMaxValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/time/DurationMaxValidatorTest.java
index a852d7c736..6d1065746d 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/time/DurationMaxValidatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/time/DurationMaxValidatorTest.java
@@ -26,7 +26,7 @@
 import org.hibernate.validator.cfg.defs.DurationMaxDef;
 import org.hibernate.validator.constraints.time.DurationMax;
 import org.hibernate.validator.internal.constraintvalidators.hv.time.DurationMaxValidator;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.TestForIssue;
 import org.testng.Assert;
 import org.testng.annotations.AfterClass;
@@ -118,7 +118,7 @@ public void testMessage() {
 	}
 
 	private void doTesting(boolean inclusive) {
-		AnnotationDescriptor.Builder<DurationMax> descriptorBuilder = new AnnotationDescriptor.Builder<>( DurationMax.class );
+		ConstraintAnnotationDescriptor.Builder<DurationMax> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DurationMax.class );
 		descriptorBuilder.setAttribute( "nanos", 100L );
 		descriptorBuilder.setAttribute( "inclusive", inclusive );
 		DurationMax annotation = descriptorBuilder.build().getAnnotation();
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/time/DurationMinValidatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/time/DurationMinValidatorTest.java
index 3645c2c1fc..3adee0f35c 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/time/DurationMinValidatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/time/DurationMinValidatorTest.java
@@ -26,7 +26,7 @@
 import org.hibernate.validator.cfg.defs.DurationMinDef;
 import org.hibernate.validator.constraints.time.DurationMin;
 import org.hibernate.validator.internal.constraintvalidators.hv.time.DurationMinValidator;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.TestForIssue;
 import org.testng.Assert;
 import org.testng.annotations.AfterClass;
@@ -120,7 +120,7 @@ public void testMessage() {
 	}
 
 	private void doTesting(boolean inclusive) {
-		AnnotationDescriptor.Builder<DurationMin> descriptorBuilder = new AnnotationDescriptor.Builder<>( DurationMin.class );
+		ConstraintAnnotationDescriptor.Builder<DurationMin> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( DurationMin.class );
 		descriptorBuilder.setAttribute( "nanos", 100L );
 		descriptorBuilder.setAttribute( "inclusive", inclusive );
 		DurationMin annotation = descriptorBuilder.build().getAnnotation();
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/engine/constraintvalidation/ConstraintValidatorManagerTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/engine/constraintvalidation/ConstraintValidatorManagerTest.java
index c415bf40af..00a032e907 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/engine/constraintvalidation/ConstraintValidatorManagerTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/engine/constraintvalidation/ConstraintValidatorManagerTest.java
@@ -7,6 +7,7 @@
 package org.hibernate.validator.test.internal.engine.constraintvalidation;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.hibernate.validator.testutils.ConstraintValidatorInitializationHelper.getDummyConstraintValidatorInitializationContext;
 import static org.hibernate.validator.testutils.ValidatorUtil.getConfiguration;
 import static org.hibernate.validator.testutils.ValidatorUtil.getValidator;
 import static org.testng.Assert.assertEquals;
@@ -64,7 +65,8 @@ public void testGetInitializedValidator() {
 		ConstraintValidator<?, ?> constraintValidator = constraintValidatorManager.getInitializedValidator(
 				String.class,
 				constraintDescriptor,
-				constraintValidatorFactory
+				constraintValidatorFactory,
+				getDummyConstraintValidatorInitializationContext()
 		);
 
 		assertTrue( constraintValidator instanceof NotNullValidator, "Unexpected validator type" );
@@ -77,7 +79,8 @@ public void testNullValidatedValueThrowsIllegalArgumentException() {
 		constraintValidatorManager.getInitializedValidator(
 				null,
 				constraintDescriptor,
-				constraintValidatorFactory
+				constraintValidatorFactory,
+				getDummyConstraintValidatorInitializationContext()
 		);
 	}
 
@@ -86,7 +89,8 @@ public void testNullDescriptorThrowsIllegalArgumentException() {
 		constraintValidatorManager.getInitializedValidator(
 				String.class,
 				null,
-				constraintValidatorFactory
+				constraintValidatorFactory,
+				getDummyConstraintValidatorInitializationContext()
 		);
 	}
 
@@ -97,7 +101,8 @@ public void testNullFactoryThrowsIllegalArgumentException() {
 		constraintValidatorManager.getInitializedValidator(
 				String.class,
 				constraintDescriptor,
-				null
+				null,
+				getDummyConstraintValidatorInitializationContext()
 		);
 	}
 
@@ -108,7 +113,8 @@ public void testUnexpectedTypeException() {
 		ConstraintValidator<?, ?> constraintValidator = constraintValidatorManager.getInitializedValidator(
 				Object.class,
 				constraintDescriptor,
-				constraintValidatorFactory
+				constraintValidatorFactory,
+				getDummyConstraintValidatorInitializationContext()
 		);
 		assertNull( constraintValidator, "there should be no matching constraint validator" );
 	}
@@ -120,7 +126,8 @@ public void testConstraintValidatorInstancesAreCachedPerFactory() {
 		ConstraintValidator<?, ?> constraintValidator1 = constraintValidatorManager.getInitializedValidator(
 				String.class,
 				constraintDescriptor,
-				constraintValidatorFactory
+				constraintValidatorFactory,
+				getDummyConstraintValidatorInitializationContext()
 		);
 
 		assertTrue(
@@ -131,7 +138,8 @@ public void testConstraintValidatorInstancesAreCachedPerFactory() {
 		ConstraintValidator<?, ?> constraintValidator2 = constraintValidatorManager.getInitializedValidator(
 				String.class,
 				constraintDescriptor,
-				new MyCustomValidatorFactory()
+				new MyCustomValidatorFactory(),
+				getDummyConstraintValidatorInitializationContext()
 		);
 
 		assertTrue(
@@ -154,7 +162,8 @@ public void testOnlyTheInstancesForTheLeastRecentlyUsedCustomFactoryAreCached()
 			constraintValidatorManager.getInitializedValidator(
 					String.class,
 					constraintDescriptor,
-					new MyCustomValidatorFactory()
+					new MyCustomValidatorFactory(),
+					getDummyConstraintValidatorInitializationContext()
 			);
 
 			assertEquals(
@@ -193,17 +202,20 @@ public void testValidatorsAreCachedPerConstraint() {
 		ConstraintValidator<?, ?> notNullValidatorForFirstName1 = constraintValidatorManager.getInitializedValidator(
 				String.class,
 				notNullOnFirstNameDescriptor,
-				constraintValidatorFactory
+				constraintValidatorFactory,
+				getDummyConstraintValidatorInitializationContext()
 		);
 		ConstraintValidator<?, ?> notNullValidatorForFirstName2 = constraintValidatorManager.getInitializedValidator(
 				String.class,
 				notNullOnFirstNameDescriptor,
-				constraintValidatorFactory
+				constraintValidatorFactory,
+				getDummyConstraintValidatorInitializationContext()
 		);
 		ConstraintValidator<?, ?> notNullValidatorForLastName = constraintValidatorManager.getInitializedValidator(
 				String.class,
 				notNullOnLastNameDescriptor,
-				constraintValidatorFactory
+				constraintValidatorFactory,
+				getDummyConstraintValidatorInitializationContext()
 		);
 
 		assertThat( notNullValidatorForFirstName1 ).isSameAs( notNullValidatorForFirstName2 );
@@ -233,13 +245,13 @@ public void testValidatorsAreCachedPerConstraintAndAnnotationMembers() {
 		);
 
 		ConstraintValidator<?, ?> sizeValidatorForMiddleName = constraintValidatorManager.getInitializedValidator(
-				String.class, sizeOnMiddleNameDescriptor, constraintValidatorFactory
+				String.class, sizeOnMiddleNameDescriptor, constraintValidatorFactory, getDummyConstraintValidatorInitializationContext()
 		);
 		ConstraintValidator<?, ?> sizeValidatorForAddress1 = constraintValidatorManager.getInitializedValidator(
-				String.class, sizeOnAddress1Descriptor, constraintValidatorFactory
+				String.class, sizeOnAddress1Descriptor, constraintValidatorFactory, getDummyConstraintValidatorInitializationContext()
 		);
 		ConstraintValidator<?, ?> sizeValidatorForAddress2 = constraintValidatorManager.getInitializedValidator(
-				String.class, sizeOnAddress2Descriptor, constraintValidatorFactory
+				String.class, sizeOnAddress2Descriptor, constraintValidatorFactory, getDummyConstraintValidatorInitializationContext()
 		);
 
 		assertThat( sizeValidatorForMiddleName ).isNotSameAs( sizeValidatorForAddress1 );
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/engine/failfast/FailFastTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/engine/failfast/FailFastTest.java
index af273a6850..1098e29f1f 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/engine/failfast/FailFastTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/engine/failfast/FailFastTest.java
@@ -16,6 +16,7 @@
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
+import java.lang.invoke.MethodHandles;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -54,7 +55,8 @@
  * @author Hardy Ferentschik
  */
 public class FailFastTest {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log log = LoggerFactory.make( MethodHandles.lookup() );
 	private final A testInstance = new A();
 
 	@Test
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/engine/groups/conversion/AbstractGroupConversionTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/engine/groups/conversion/AbstractGroupConversionTest.java
index 206e76ec0a..5075439f51 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/engine/groups/conversion/AbstractGroupConversionTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/engine/groups/conversion/AbstractGroupConversionTest.java
@@ -13,6 +13,7 @@
 import static org.hibernate.validator.testutil.ConstraintViolationAssert.violationOf;
 import static org.hibernate.validator.testutils.ValidatorUtil.getValidator;
 
+import java.lang.invoke.MethodHandles;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Set;
@@ -38,7 +39,7 @@
  */
 public abstract class AbstractGroupConversionTest {
 
-	private static final Log log = LoggerFactory.make();
+	private static final Log log = LoggerFactory.make( MethodHandles.lookup() );
 
 	protected Validator validator;
 
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/engine/messageinterpolation/ExpressionLanguageMessageInterpolationTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/engine/messageinterpolation/ExpressionLanguageMessageInterpolationTest.java
index 2c953739f0..b9515ff476 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/engine/messageinterpolation/ExpressionLanguageMessageInterpolationTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/engine/messageinterpolation/ExpressionLanguageMessageInterpolationTest.java
@@ -18,9 +18,10 @@
 import org.hibernate.validator.internal.engine.MessageInterpolatorContext;
 import org.hibernate.validator.internal.metadata.core.ConstraintHelper;
 import org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator;
 import org.hibernate.validator.testutil.TestForIssue;
+
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
@@ -38,16 +39,16 @@ public class ExpressionLanguageMessageInterpolationTest {
 	@BeforeTest
 	public void setUp() {
 		// Create some annotations for testing using AnnotationProxies
-		AnnotationDescriptor.Builder<NotNull> notNullAnnotationDescriptorBuilder = new AnnotationDescriptor.Builder<>( NotNull.class );
-		notNullDescriptor = new ConstraintDescriptorImpl<NotNull>(
+		ConstraintAnnotationDescriptor.Builder<NotNull> notNullAnnotationDescriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( NotNull.class );
+		notNullDescriptor = new ConstraintDescriptorImpl<>(
 				new ConstraintHelper(),
 				null,
 				notNullAnnotationDescriptorBuilder.build(),
 				java.lang.annotation.ElementType.FIELD
 		);
 
-		AnnotationDescriptor.Builder<Size> sizeAnnotationDescriptorBuilder = new AnnotationDescriptor.Builder<>( Size.class );
-		sizeDescriptor = new ConstraintDescriptorImpl<Size>(
+		ConstraintAnnotationDescriptor.Builder<Size> sizeAnnotationDescriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Size.class );
+		sizeDescriptor = new ConstraintDescriptorImpl<>(
 				new ConstraintHelper(),
 				null,
 				sizeAnnotationDescriptorBuilder.build(),
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/engine/messageinterpolation/ResourceBundleMessageInterpolatorTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/engine/messageinterpolation/ResourceBundleMessageInterpolatorTest.java
index 5a7c748222..889120f615 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/engine/messageinterpolation/ResourceBundleMessageInterpolatorTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/engine/messageinterpolation/ResourceBundleMessageInterpolatorTest.java
@@ -27,10 +27,11 @@
 import org.hibernate.validator.internal.engine.MessageInterpolatorContext;
 import org.hibernate.validator.internal.metadata.core.ConstraintHelper;
 import org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator;
 import org.hibernate.validator.spi.resourceloading.ResourceBundleLocator;
 import org.hibernate.validator.testutil.TestForIssue;
+
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
@@ -48,16 +49,16 @@ public class ResourceBundleMessageInterpolatorTest {
 	@BeforeTest
 	public void setUp() {
 		// Create some annotations for testing using AnnotationProxies
-		AnnotationDescriptor.Builder<NotNull> descriptorBuilder = new AnnotationDescriptor.Builder<>( NotNull.class );
-		notNullDescriptor = new ConstraintDescriptorImpl<NotNull>(
+		ConstraintAnnotationDescriptor.Builder<NotNull> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( NotNull.class );
+		notNullDescriptor = new ConstraintDescriptorImpl<>(
 				new ConstraintHelper(),
 				null,
 				descriptorBuilder.build(),
 				java.lang.annotation.ElementType.FIELD
 		);
 
-		AnnotationDescriptor.Builder<Size> sizeAnnotationDescriptorBuilder = new AnnotationDescriptor.Builder<Size>( Size.class );
-		sizeDescriptor = new ConstraintDescriptorImpl<Size>(
+		ConstraintAnnotationDescriptor.Builder<Size> sizeAnnotationDescriptorBuilder = new ConstraintAnnotationDescriptor.Builder<Size>( Size.class );
+		sizeDescriptor = new ConstraintDescriptorImpl<>(
 				new ConstraintHelper(),
 				null,
 				sizeAnnotationDescriptorBuilder.build(),
@@ -205,11 +206,11 @@ public void testUserResourceBundle() {
 	@Test
 	@TestForIssue(jiraKey = "HV-102")
 	public void testRecursiveMessageInterpolation() {
-		AnnotationDescriptor.Builder<Max> descriptorBuilder = new AnnotationDescriptor.Builder<>( Max.class );
-		descriptorBuilder.setAttribute( "message", "{replace.in.user.bundle1}" );
+		ConstraintAnnotationDescriptor.Builder<Max> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Max.class );
+		descriptorBuilder.setMessage( "{replace.in.user.bundle1}" );
 		descriptorBuilder.setAttribute( "value", 10L );
 
-		AnnotationDescriptor<Max> descriptor = descriptorBuilder.build();
+		ConstraintAnnotationDescriptor<Max> descriptor = descriptorBuilder.build();
 
 		ConstraintDescriptorImpl<Max> constraintDescriptor = new ConstraintDescriptorImpl<Max>(
 				new ConstraintHelper(),
@@ -233,12 +234,12 @@ public void testRecursiveMessageInterpolation() {
 	@Test
 	@TestForIssue(jiraKey = "HV-182")
 	public void testCorrectMessageInterpolationIfParameterCannotBeReplaced() {
-		AnnotationDescriptor.Builder<Max> descriptorBuilder = new AnnotationDescriptor.Builder<>( Max.class );
+		ConstraintAnnotationDescriptor.Builder<Max> descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( Max.class );
 		String message = "Message should stay unchanged since {fubar} is not replaceable";
-		descriptorBuilder.setAttribute( "message", message );
+		descriptorBuilder.setMessage( message );
 		descriptorBuilder.setAttribute( "value", 10L );
 
-		AnnotationDescriptor<Max> maxDescriptor = descriptorBuilder.build();
+		ConstraintAnnotationDescriptor<Max> maxDescriptor = descriptorBuilder.build();
 
 		ConstraintDescriptorImpl<Max> constraintDescriptor = new ConstraintDescriptorImpl<Max>(
 				new ConstraintHelper(),
@@ -253,7 +254,7 @@ public void testCorrectMessageInterpolationIfParameterCannotBeReplaced() {
 
 		MessageInterpolator.Context messageInterpolatorContext = createMessageInterpolatorContext( constraintDescriptor );
 
-		String actual = interpolator.interpolate( maxDescriptor.getAnnotation().message(), messageInterpolatorContext );
+		String actual = interpolator.interpolate( maxDescriptor.getMessage(), messageInterpolatorContext );
 		assertEquals(
 				actual, message, "The message should not have changed."
 		);
diff --git a/engine/src/test/java/org/hibernate/validator/bugs/TooBigMessageTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/engine/messageinterpolation/TooBigMessageTest.java
similarity index 98%
rename from engine/src/test/java/org/hibernate/validator/bugs/TooBigMessageTest.java
rename to engine/src/test/java/org/hibernate/validator/test/internal/engine/messageinterpolation/TooBigMessageTest.java
index e1a874c5b8..4e6b11e592 100644
--- a/engine/src/test/java/org/hibernate/validator/bugs/TooBigMessageTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/engine/messageinterpolation/TooBigMessageTest.java
@@ -4,7 +4,7 @@
  * License: Apache License, Version 2.0
  * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
  */
-package org.hibernate.validator.bugs;
+package org.hibernate.validator.test.internal.engine.messageinterpolation;
 
 import static org.hibernate.validator.testutil.ConstraintViolationAssert.assertThat;
 import static org.hibernate.validator.testutil.ConstraintViolationAssert.violationOf;
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/metadata/BeanMetaDataManagerTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/metadata/BeanMetaDataManagerTest.java
index 85e8f35de7..9b402186b8 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/metadata/BeanMetaDataManagerTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/metadata/BeanMetaDataManagerTest.java
@@ -15,6 +15,7 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
+import java.lang.invoke.MethodHandles;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -40,7 +41,8 @@
  * @author Hardy Ferentschik
  */
 public class BeanMetaDataManagerTest {
-	private static final Log log = LoggerFactory.make();
+
+	private static final Log log = LoggerFactory.make( MethodHandles.lookup() );
 	private static final int LOOP_COUNT = 100000;
 	private static final int ARRAY_ALLOCATION_SIZE = 100000;
 
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/metadata/core/MetaConstraintTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/metadata/core/MetaConstraintTest.java
index 180284b19c..29cfcc5550 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/metadata/core/MetaConstraintTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/metadata/core/MetaConstraintTest.java
@@ -21,7 +21,7 @@
 import org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl;
 import org.hibernate.validator.internal.metadata.location.ConstraintLocation;
 import org.hibernate.validator.internal.util.TypeResolutionHelper;
-import org.hibernate.validator.internal.util.annotation.AnnotationDescriptor;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
 import org.hibernate.validator.testutil.TestForIssue;
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
@@ -34,7 +34,7 @@ public class MetaConstraintTest {
 	private TypeResolutionHelper typeResolutionHelper;
 	private ValueExtractorManager valueExtractorManager;
 	private Method barMethod;
-	private AnnotationDescriptor<NotNull> constraintAnnotationDescriptor;
+	private ConstraintAnnotationDescriptor<NotNull> constraintAnnotationDescriptor;
 
 	@BeforeClass
 	public void setUp() throws Exception {
@@ -42,7 +42,7 @@ public void setUp() throws Exception {
 		typeResolutionHelper = new TypeResolutionHelper();
 		valueExtractorManager = new ValueExtractorManager( Collections.emptySet() );
 		barMethod = Foo.class.getMethod( "getBar" );
-		constraintAnnotationDescriptor = new AnnotationDescriptor.Builder<>( barMethod.getAnnotation( NotNull.class ) ).build();
+		constraintAnnotationDescriptor = new ConstraintAnnotationDescriptor.Builder<>( barMethod.getAnnotation( NotNull.class ) ).build();
 	}
 
 	@Test
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/util/DurationFormatterTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/util/DurationFormatterTest.java
new file mode 100644
index 0000000000..a5d77a3bb7
--- /dev/null
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/util/DurationFormatterTest.java
@@ -0,0 +1,30 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.test.internal.util;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.time.Duration;
+
+import org.hibernate.validator.internal.util.logging.formatter.DurationFormatter;
+
+import org.testng.annotations.Test;
+
+/**
+ * @author Marko Bekhta
+ */
+public class DurationFormatterTest {
+
+	@Test
+	public void testDurationFormatting() throws Exception {
+		assertThat( new DurationFormatter( Duration.ZERO ).toString() ).isEqualTo( "0" );
+		assertThat( new DurationFormatter( Duration.ofSeconds( 62, 100 ) ).toString() ).isEqualTo( "1 minute 2 seconds 100 nanoseconds" );
+		assertThat( new DurationFormatter( Duration.ofHours( 49 ).plusSeconds( 121 ) ).toString() ).isEqualTo( "2 days 1 hour 2 minutes 1 second" );
+		assertThat( new DurationFormatter( Duration.ofDays( 1 ).plusHours( 10 ).plusMinutes( 15 ).plusSeconds( 20 ).plusMillis( 25 ) ).toString() )
+				.isEqualTo( "1 day 10 hours 15 minutes 20 seconds 25 milliseconds" );
+	}
+}
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/xml/XmlMappingTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/xml/XmlMappingTest.java
index 62897f4ef0..f62ee1f70b 100644
--- a/engine/src/test/java/org/hibernate/validator/test/internal/xml/XmlMappingTest.java
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/xml/XmlMappingTest.java
@@ -230,7 +230,7 @@ public void run() {
 	}
 
 	@Test
-	@TestForIssue( jiraKey = "HV-1463")
+	@TestForIssue(jiraKey = "HV-1463")
 	public void testScriptEvaluatorFactoryConfiguration() {
 		validationXmlTestHelper.runWithCustomValidationXml(
 				"script-evaluator-factory-validation.xml", () -> {
@@ -248,6 +248,25 @@ public void testScriptEvaluatorFactoryConfiguration() {
 		);
 	}
 
+	@Test
+	@TestForIssue(jiraKey = "HV-1493")
+	public void testTemporalValidationToleranceConfiguration() {
+		validationXmlTestHelper.runWithCustomValidationXml(
+				"temporal-validation-tolerance-duration-validation.xml", () -> {
+					//given
+					BootstrapConfiguration bootstrapConfiguration = ValidatorUtil.getConfiguration()
+							.getBootstrapConfiguration();
+
+					//then
+					assertEquals(
+							bootstrapConfiguration.getProperties().get( HibernateValidatorConfiguration.TEMPORAL_VALIDATION_TOLERANCE ),
+							"123456"
+					);
+
+				}
+		);
+	}
+
 	@Test
 	@TestForIssue(jiraKey = "HV-707")
 	public void shouldReturnDefaultExecutableTypesForValidationXmlWithoutTypesGiven() {
diff --git a/engine/src/test/java/org/hibernate/validator/testutils/ConstraintValidatorInitializationHelper.java b/engine/src/test/java/org/hibernate/validator/testutils/ConstraintValidatorInitializationHelper.java
new file mode 100644
index 0000000000..0ac208acec
--- /dev/null
+++ b/engine/src/test/java/org/hibernate/validator/testutils/ConstraintValidatorInitializationHelper.java
@@ -0,0 +1,85 @@
+/*
+ * Hibernate Validator, declare and validate application constraints
+ *
+ * License: Apache License, Version 2.0
+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+package org.hibernate.validator.testutils;
+
+import java.lang.annotation.Annotation;
+import java.time.Duration;
+
+import javax.validation.ClockProvider;
+import javax.validation.metadata.ConstraintDescriptor;
+
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidator;
+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext;
+import org.hibernate.validator.internal.engine.DefaultClockProvider;
+import org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory;
+import org.hibernate.validator.internal.metadata.core.ConstraintHelper;
+import org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl;
+import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
+import org.hibernate.validator.spi.scripting.ScriptEvaluator;
+import org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory;
+
+/**
+ * @author Marko Bekhta
+ */
+public class ConstraintValidatorInitializationHelper {
+
+	private static final ConstraintHelper CONSTRAINT_HELPER = new ConstraintHelper();
+
+	private static final HibernateConstraintValidatorInitializationContext DUMMY_CONSTRAINT_VALIDATOR_INITIALIZATION_CONTEXT
+			= new HibernateConstraintValidatorInitializationContext() {
+
+		private ScriptEvaluatorFactory scriptEvaluatorFactory = new DefaultScriptEvaluatorFactory( null );
+
+		@Override
+		public ScriptEvaluator getScriptEvaluatorForLanguage(String languageName) {
+			return scriptEvaluatorFactory.getScriptEvaluatorByLanguageName( languageName );
+		}
+
+		@Override
+		public ClockProvider getClockProvider() {
+			return DefaultClockProvider.INSTANCE;
+		}
+
+		@Override
+		public Duration getTemporalValidationTolerance() {
+			return Duration.ZERO;
+		}
+	};
+
+	private ConstraintValidatorInitializationHelper() {
+	}
+
+	public static <T extends Annotation> ConstraintDescriptor<T> descriptorFrom(ConstraintAnnotationDescriptor<T> annotationDescriptor) {
+		return new ConstraintDescriptorImpl<>(
+				CONSTRAINT_HELPER,
+				null,
+				annotationDescriptor,
+				null
+		);
+	}
+
+	public static <A extends Annotation, T> void initialize(
+			HibernateConstraintValidator<A, T> constraintValidator,
+			ConstraintAnnotationDescriptor<A> annotationDescriptor
+	) {
+		initialize( constraintValidator, annotationDescriptor, getDummyConstraintValidatorInitializationContext() );
+	}
+
+	public static <A extends Annotation, T> void initialize(
+			HibernateConstraintValidator<A, T> constraintValidator,
+			ConstraintAnnotationDescriptor<A> annotationDescriptor,
+			HibernateConstraintValidatorInitializationContext initializationContext
+	) {
+		ConstraintDescriptor<A> constraintDescriptor = descriptorFrom( annotationDescriptor );
+		constraintValidator.initialize( constraintDescriptor, initializationContext );
+		constraintValidator.initialize( constraintDescriptor.getAnnotation() );
+	}
+
+	public static HibernateConstraintValidatorInitializationContext getDummyConstraintValidatorInitializationContext() {
+		return DUMMY_CONSTRAINT_VALIDATOR_INITIALIZATION_CONTEXT;
+	}
+}
diff --git a/engine/src/test/java/org/hibernate/validator/testutils/ValidatorUtil.java b/engine/src/test/java/org/hibernate/validator/testutils/ValidatorUtil.java
index 577ea65e8d..6ede3fab57 100644
--- a/engine/src/test/java/org/hibernate/validator/testutils/ValidatorUtil.java
+++ b/engine/src/test/java/org/hibernate/validator/testutils/ValidatorUtil.java
@@ -28,7 +28,6 @@
 import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorContext;
 import org.hibernate.validator.internal.engine.DefaultClockProvider;
 import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorContextImpl;
-import org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory;
 import org.hibernate.validator.testutil.DummyTraversableResolver;
 import org.hibernate.validator.testutil.ValidationInvocationHandler;
 
@@ -236,6 +235,6 @@ public static <T, I extends T> T getValidatingProxy(I implementor, Validator exe
 	}
 
 	public static HibernateConstraintValidatorContext getConstraintValidatorContext() {
-		return new ConstraintValidatorContextImpl( null, DefaultClockProvider.INSTANCE, new DefaultScriptEvaluatorFactory( null ), null, null );
+		return new ConstraintValidatorContextImpl( null, DefaultClockProvider.INSTANCE, null, null );
 	}
 }
diff --git a/engine/src/test/resources/org/hibernate/validator/test/internal/constraintvalidators/hv/UniqueElementsMessages.properties b/engine/src/test/resources/org/hibernate/validator/test/internal/constraintvalidators/hv/UniqueElementsMessages.properties
new file mode 100644
index 0000000000..e9234d21a8
--- /dev/null
+++ b/engine/src/test/resources/org/hibernate/validator/test/internal/constraintvalidators/hv/UniqueElementsMessages.properties
@@ -0,0 +1 @@
+org.hibernate.validator.constraints.UniqueElements.message = must only contain unique elements but contains duplicate elements: {duplicates}
diff --git a/engine/src/test/resources/org/hibernate/validator/test/internal/xml/temporal-validation-tolerance-duration-validation.xml b/engine/src/test/resources/org/hibernate/validator/test/internal/xml/temporal-validation-tolerance-duration-validation.xml
new file mode 100644
index 0000000000..c5c1dbafd9
--- /dev/null
+++ b/engine/src/test/resources/org/hibernate/validator/test/internal/xml/temporal-validation-tolerance-duration-validation.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Hibernate Validator, declare and validate application constraints
+  ~
+  ~ License: Apache License, Version 2.0
+  ~ See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
+  -->
+<validation-config
+        xmlns="http://xmlns.jcp.org/xml/ns/validation/configuration"
+        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/validation/configuration
+            http://xmlns.jcp.org/xml/ns/validation/configuration/validation-configuration-2.0.xsd"
+        version="2.0">
+
+    <property name="hibernate.validator.temporal_validation_tolerance">123456</property>
+</validation-config>
diff --git a/integration/pom.xml b/integration/pom.xml
index bed0083e54..fa51b3eb96 100644
--- a/integration/pom.xml
+++ b/integration/pom.xml
@@ -11,7 +11,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-parent</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/jqassistant/rules.xml b/jqassistant/rules.xml
index 2f6b413eb0..664ae2f976 100644
--- a/jqassistant/rules.xml
+++ b/jqassistant/rules.xml
@@ -13,7 +13,7 @@
             MATCH
                 (class)-[:`EXTENDS`]->(supertype)
             WHERE
-                NOT class.fqn =~ ".*\\.internal\\..*"
+                NOT (class.fqn =~ "^org\\.hibernate\\.validator\\.test\\..*" OR class.fqn =~ "^org\\.hibernate\\.validator\\.testutils\\..*" OR class.fqn =~ ".*\\.internal\\..*")
                 AND supertype.fqn =~ ".*\\.internal\\..*"
             RETURN
                 class
@@ -21,7 +21,7 @@
             MATCH
                 (class)-[:`IMPLEMENTS`]->(supertype)
             WHERE
-                NOT class.fqn =~ ".*\\.internal\\..*"
+                NOT (class.fqn =~ "^org\\.hibernate\\.validator\\.test\\..*" OR class.fqn =~ "^org\\.hibernate\\.validator\\.testutils\\..*" OR class.fqn =~ ".*\\.internal\\..*")
                 AND supertype.fqn =~ ".*\\.internal\\..*"
             RETURN
                 class
@@ -35,7 +35,7 @@
             MATCH
                 (class)-[:`DECLARES`]->(method)-[:`RETURNS`]->(returntype)
             WHERE
-                NOT class.fqn =~ ".*\\.internal\\..*"
+                NOT (class.fqn =~ "^org\\.hibernate\\.validator\\.test\\..*" OR class.fqn =~ "^org\\.hibernate\\.validator\\.testutils\\..*" OR class.fqn =~ ".*\\.internal\\..*")
                 AND (method.visibility="public" OR method.visibility="protected")
                 AND returntype.fqn =~ ".*\\.internal\\..*"
             RETURN
@@ -46,7 +46,7 @@
             MATCH
                 (class)-[:`DECLARES`]->(method)-[:`HAS`]->(parameter)-[:`OF_TYPE`]->(parametertype)
             WHERE
-                NOT class.fqn =~ ".*\\.internal\\..*"
+                NOT (class.fqn =~ "^org\\.hibernate\\.validator\\.test\\..*" OR class.fqn =~ "^org\\.hibernate\\.validator\\.testutils\\..*" OR class.fqn =~ ".*\\.internal\\..*")
                 AND (method.visibility="public" OR method.visibility="protected")
                 AND parametertype.fqn =~ ".*\\.internal\\..*"
             RETURN
@@ -60,7 +60,7 @@
             MATCH
                 (class)-[:`DECLARES`]->(field)-[:`OF_TYPE`]->(fieldtype)
             WHERE
-                NOT class.fqn =~ ".*\\.internal\\..*"
+                NOT (class.fqn =~ "^org\\.hibernate\\.validator\\.test\\..*" OR class.fqn =~ "^org\\.hibernate\\.validator\\.testutils\\..*" OR class.fqn =~ ".*\\.internal\\..*")
                 AND (field.visibility="public" OR field.visibility="protected")
                 AND fieldtype.fqn =~ ".*\\.internal\\..*"
             RETURN
diff --git a/modules/pom.xml b/modules/pom.xml
index 08e3a32f6a..ab38c6bfb6 100644
--- a/modules/pom.xml
+++ b/modules/pom.xml
@@ -11,7 +11,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-parent</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
 
diff --git a/osgi/felixtest/pom.xml b/osgi/felixtest/pom.xml
index ba806e332e..b8e013c586 100644
--- a/osgi/felixtest/pom.xml
+++ b/osgi/felixtest/pom.xml
@@ -10,7 +10,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-osgi</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/osgi/integrationtest/pom.xml b/osgi/integrationtest/pom.xml
index 64c5e258a8..3b6ec86154 100644
--- a/osgi/integrationtest/pom.xml
+++ b/osgi/integrationtest/pom.xml
@@ -11,7 +11,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-osgi</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/osgi/karaf-features/pom.xml b/osgi/karaf-features/pom.xml
index 9c32d546f2..6f2d839e0d 100644
--- a/osgi/karaf-features/pom.xml
+++ b/osgi/karaf-features/pom.xml
@@ -11,7 +11,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-osgi</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/osgi/pom.xml b/osgi/pom.xml
index 00772fb59a..358963e1c3 100644
--- a/osgi/pom.xml
+++ b/osgi/pom.xml
@@ -11,7 +11,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-parent</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/performance/README.md b/performance/README.md
index 1a09eb8187..051463b0af 100644
--- a/performance/README.md
+++ b/performance/README.md
@@ -20,7 +20,7 @@ defined profiles are:
 * hv-4.3 (Hibernate Validator 4.3.0.Final)
 * hv-4.2 (Hibernate Validator 4.2.0.Final)
 * hv-4.1 (Hibernate Validator 4.1.0.Final)
-* bval-1.1.2 (Apache BVal 1.1.2)
+* bval-1.1 (Apache BVal 1.1.2)
 
 ## Executing the performance tests
 
diff --git a/performance/pom.xml b/performance/pom.xml
index 585aca840b..a17a228047 100644
--- a/performance/pom.xml
+++ b/performance/pom.xml
@@ -11,7 +11,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-parent</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
@@ -202,7 +202,7 @@
             </activation>
             <properties>
                 <beanvalidation-impl.name>Hibernate Validator</beanvalidation-impl.name>
-                <beanvalidation-impl.version>6.0.3.Final</beanvalidation-impl.version>
+                <beanvalidation-impl.version>6.0.4.Final</beanvalidation-impl.version>
             </properties>
             <dependencies>
                 <dependency>
@@ -524,11 +524,11 @@
             </dependencies>
         </profile>
         <profile>
-            <id>bval-1.1.2</id>
+            <id>bval-1.1</id>
             <activation>
                 <property>
                     <name>validator</name>
-                    <value>bval-1.1.2</value>
+                    <value>bval-1.1</value>
                 </property>
             </activation>
             <properties>
diff --git a/performance/src/main/java/org/hibernate/validator/performance/cascaded/CascadedWithLotsOfItemsAndMoreConstraintsValidation.java b/performance/src/main/java/org/hibernate/validator/performance/cascaded/CascadedWithLotsOfItemsAndMoreConstraintsValidation.java
index 1e0422fc1e..b1110997bd 100644
--- a/performance/src/main/java/org/hibernate/validator/performance/cascaded/CascadedWithLotsOfItemsAndMoreConstraintsValidation.java
+++ b/performance/src/main/java/org/hibernate/validator/performance/cascaded/CascadedWithLotsOfItemsAndMoreConstraintsValidation.java
@@ -18,8 +18,8 @@
 import javax.validation.Validation;
 import javax.validation.Validator;
 import javax.validation.ValidatorFactory;
-import javax.validation.constraints.NotEmpty;
 import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Size;
 
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;
@@ -82,7 +82,7 @@ public static class Shop {
 		@NotNull
 		private Integer id;
 
-		@NotEmpty
+		@Size(min = 1)
 		private String name;
 
 		@NotNull
@@ -103,7 +103,7 @@ public static class Article {
 		@NotNull
 		private Integer id;
 
-		@NotEmpty
+		@Size(min = 1)
 		private String name;
 
 		public Article(Integer id, String name) {
diff --git a/pom.xml b/pom.xml
index f5027bc277..2238b158b3 100644
--- a/pom.xml
+++ b/pom.xml
@@ -10,7 +10,7 @@
 
     <groupId>org.hibernate.validator</groupId>
     <artifactId>hibernate-validator-parent</artifactId>
-    <version>6.0.4.Final</version>
+    <version>6.0.5.Final</version>
     <packaging>pom</packaging>
 
     <name>Hibernate Validator Aggregator</name>
@@ -116,7 +116,7 @@
         <tck.version>2.0.0.Final</tck.version>
 
         <!-- Version to be used as baseline for API/SPI change reports -->
-        <previous.stable>6.0.3.Final</previous.stable>
+        <previous.stable>6.0.4.Final</previous.stable>
 
         <paranamer.version>2.8</paranamer.version>
         <javax.el.version>3.0.1-b08</javax.el.version>
@@ -1189,12 +1189,19 @@
         </profile>
         <profile>
             <id>jqassistant</id>
+            <!--
+            To run the analysis on the engine module and launch a Neo4j server accessible at http://localhost:7474/, run:
+                mvn -pl engine jqassistant:scan jqassistant:server -Pjqassistant
+            To run the analysis on the engine module:
+                mvn clean install -pl engine -Pjqassistant -DskipTests=true
+            Our rules are in jqassistant/rules.xml.
+            -->
             <build>
                 <plugins>
                     <plugin>
-                        <groupId>com.buschmais.jqassistant.scm</groupId>
+                        <groupId>com.buschmais.jqassistant</groupId>
                         <artifactId>jqassistant-maven-plugin</artifactId>
-                        <version>1.1.4</version>
+                        <version>1.3.0</version>
                         <executions>
                             <execution>
                                 <goals>
diff --git a/relocation/annotation-processor/pom.xml b/relocation/annotation-processor/pom.xml
index 1279903ced..e67418a7b3 100644
--- a/relocation/annotation-processor/pom.xml
+++ b/relocation/annotation-processor/pom.xml
@@ -10,7 +10,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-relocation</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
     </parent>
 
     <groupId>org.hibernate</groupId>
diff --git a/relocation/cdi/pom.xml b/relocation/cdi/pom.xml
index e95eedca32..4fef73216f 100644
--- a/relocation/cdi/pom.xml
+++ b/relocation/cdi/pom.xml
@@ -10,7 +10,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-relocation</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
     </parent>
 
     <groupId>org.hibernate</groupId>
diff --git a/relocation/engine/pom.xml b/relocation/engine/pom.xml
index ffee61d80d..5adbfdebc9 100644
--- a/relocation/engine/pom.xml
+++ b/relocation/engine/pom.xml
@@ -10,7 +10,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-relocation</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
     </parent>
 
     <groupId>org.hibernate</groupId>
diff --git a/relocation/karaf-features/pom.xml b/relocation/karaf-features/pom.xml
index 8ee46f2199..b58d266dd3 100644
--- a/relocation/karaf-features/pom.xml
+++ b/relocation/karaf-features/pom.xml
@@ -10,7 +10,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-relocation</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
     </parent>
 
     <groupId>org.hibernate</groupId>
diff --git a/relocation/pom.xml b/relocation/pom.xml
index 939af37306..f7329d2854 100644
--- a/relocation/pom.xml
+++ b/relocation/pom.xml
@@ -10,7 +10,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-parent</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
     </parent>
 
     <artifactId>hibernate-validator-relocation</artifactId>
diff --git a/tck-runner/pom.xml b/tck-runner/pom.xml
index e51ee1d802..e444c44fd9 100644
--- a/tck-runner/pom.xml
+++ b/tck-runner/pom.xml
@@ -11,7 +11,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-parent</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/test-utils/pom.xml b/test-utils/pom.xml
index 9694a184ad..d9d83f65c0 100644
--- a/test-utils/pom.xml
+++ b/test-utils/pom.xml
@@ -10,7 +10,7 @@
     <parent>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator-parent</artifactId>
-        <version>6.0.4.Final</version>
+        <version>6.0.5.Final</version>
     </parent>
     <artifactId>hibernate-validator-test-utils</artifactId>
 
diff --git a/test-utils/src/main/java/org/hibernate/validator/testutil/ConstraintViolationAssert.java b/test-utils/src/main/java/org/hibernate/validator/testutil/ConstraintViolationAssert.java
index 32adb11959..ae8830cd19 100644
--- a/test-utils/src/main/java/org/hibernate/validator/testutil/ConstraintViolationAssert.java
+++ b/test-utils/src/main/java/org/hibernate/validator/testutil/ConstraintViolationAssert.java
@@ -97,6 +97,15 @@ public static void assertNoViolations(Set<? extends ConstraintViolation<?>> viol
 		Assertions.assertThat( violations ).isEmpty();
 	}
 
+	/**
+	 * Asserts that the given violation list has no violations (is empty).
+	 *
+	 * @param violations The violation list to verify.
+	 */
+	public static void assertNoViolations(Set<? extends ConstraintViolation<?>> violations, String message) {
+		Assertions.assertThat( violations ).describedAs( message ).isEmpty();
+	}
+
 	public static void assertConstraintTypes(Set<? extends ConstraintDescriptor<?>> descriptors,
 			Class<?>... expectedConstraintTypes) {
 		List<Class<? extends Annotation>> actualConstraintTypes = new ArrayList<>();
@@ -245,6 +254,11 @@ protected ConstraintViolationSetAssert(Set<? extends ConstraintViolation<?>> act
 			super( actualViolations );
 		}
 
+		@Override
+		public ConstraintViolationSetAssert describedAs(String description, Object... args) {
+			return (ConstraintViolationSetAssert) super.describedAs( description, args );
+		}
+
 		public void containsOnlyViolations(ViolationExpectation... expectedViolations) {
 			isNotNull();
 
diff --git a/test-utils/src/main/java/org/hibernate/validator/testutil/ValidationInvocationHandler.java b/test-utils/src/main/java/org/hibernate/validator/testutil/ValidationInvocationHandler.java
index 6333193d7e..defb40763d 100644
--- a/test-utils/src/main/java/org/hibernate/validator/testutil/ValidationInvocationHandler.java
+++ b/test-utils/src/main/java/org/hibernate/validator/testutil/ValidationInvocationHandler.java
@@ -21,6 +21,8 @@
  */
 public class ValidationInvocationHandler implements InvocationHandler {
 
+	private static final Object[] EMPTY_ARGS = new Object[0];
+
 	private final Object wrapped;
 
 	private final Validator validator;
@@ -38,7 +40,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
 		Set<ConstraintViolation<Object>> constraintViolations = validator.forExecutables().validateParameters(
 				wrapped,
 				method,
-				args == null ? new Object[] { } : args,
+				args == null ? EMPTY_ARGS : args,
 				groups
 		);
 