diff --git a/.pydevproject b/.pydevproject
new file mode 100644
index 0000000000..a9cca037b3
--- /dev/null
+++ b/.pydevproject
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<?eclipse-pydev version="1.0"?>
+
+<pydev_project>
+<pydev_property name="org.python.pydev.PYTHON_PROJECT_INTERPRETER">Default</pydev_property>
+<pydev_property name="org.python.pydev.PYTHON_PROJECT_VERSION">python 2.7</pydev_property>
+</pydev_project>
diff --git a/RELEASE_NOTES.txt b/RELEASE_NOTES.txt
index bc227b00a7..d514c8453e 100644
--- a/RELEASE_NOTES.txt
+++ b/RELEASE_NOTES.txt
@@ -1,3 +1,67 @@
+Release 4.2
+-------------------
+
+This is the first stable (GA) release of HttpClient 4.2. The most notable enhancements included 
+in this release are:
+
+* New facade API for HttpClient based on the concept of a fluent interface. The fluent API exposes
+  only the most fundamental functions of HttpClient and is intended for relatively simple use cases
+  that do not require the full flexibility of HttpClient. However, the fluent API almost fully
+  relieves the users from having to deal with connection management and resource deallocation.
+
+* Redesigned and rewritten connection management code. 
+
+* Enhanced HTTP authentication API that enables HttpClient to handle more complex authentication
+  scenarios. HttpClient 4.2 is now capable of making use of multiple authentication challenges
+  and retry authentication with a fall-back scheme in case the primary one fails. This can be
+  important for compatibility with Microsoft products that are often configured to use
+  SPNEGO/Kerberos as the preferred authentication scheme.
+
+
+Changelog
+-------------------
+
+* [HTTPCLIENT-1187] If a revalidation response is deemed too old CachingHttpClient fails to  
+  consume its content resulting in a connection leak.
+  Contributed by Oleg Kalnichevski <olegk at apache.org>
+
+* [HTTPCLIENT-1186] State of newly created connections in the connection pool is not always 
+  correctly updated potentially allowing those connections to be leased to users with a different 
+  security context. 
+  Contributed by Ralf Poehlmann <rpn at methodpark.de> 
+
+* [HTTPCLIENT-1179] Upgraded Commons Codec dependency to version 1.6
+  Contributed by Oleg Kalnichevski <olegk at apache.org>
+
+* [HTTPCLIENT-1177] always remove fragments from request URIs
+  Contributed by Oleg Kalnichevski <olegk at apache.org>
+
+Incompatible changes
+--------------------
+[Compared to release version 4.1.3]
+
+The following fields have been deprecated for some time now and have been deleted:
+
+org.apache.http.client.params.ClientPNames#CONNECTION_MANAGER_FACTORY
+org.apache.http.impl.cookie.BrowserCompatSpec#DATE_PATTERNS
+
+The following methods have been deprecated for some time now and have been deleted:
+
+org.apache.http.client.params.ClientParamBean#setConnectionManagerFactory(org.apache.http.conn.ClientConnectionManagerFactory)
+org.apache.http.client.protocol.ClientContextConfigurer#setAuthSchemePref(java.util.List)
+org.apache.http.entity.mime.content.FileBody#writeTo(java.io.OutputStream, int)
+org.apache.http.entity.mime.content.InputStreamBody#writeTo(java.io.OutputStream, int)
+org.apache.http.entity.mime.content.StringBody#writeTo(java.io.OutputStream, int)
+
+The following classes have been deprecated for some while now and have been deleted:
+
+org.apache.http.impl.conn.tsccm.RefQueueHandler
+org.apache.http.impl.conn.tsccm.AbstractConnPool no longer implements interface org.apache.http.impl.conn.tsccm.RefQueueHandler
+org.apache.http.impl.conn.tsccm.ConnPoolByRoute no longer implements interface org.apache.http.impl.conn.tsccm.RefQueueHandler
+org.apache.http.impl.conn.tsccm.RefQueueWorker
+
+
+
 Release 4.2 BETA1
 -------------------
 
@@ -22,6 +86,9 @@ notable enhancements in HttpClient:
 Changelog
 -------------------
 
+* [HTTPCLIENT-1164] Compressed entities are not being cached properly.
+  Contributed by Jon Moore <jonm at apache dot org>.
+
 * [HTTPCLIENT-1154] MemcachedHttpCacheStorage should allow client to
   specify custom prefix string for keys.
   Contributed by Jon Moore <jonm at apache dot org>.
diff --git a/fluent-hc/pom.xml b/fluent-hc/pom.xml
index b928d7b09c..e4c7189eb0 100644
--- a/fluent-hc/pom.xml
+++ b/fluent-hc/pom.xml
@@ -30,7 +30,7 @@
   <parent>
     <groupId>org.apache.httpcomponents</groupId>
     <artifactId>httpcomponents-client</artifactId>
-    <version>4.2-alpha2-SNAPSHOT</version>
+    <version>4.2</version>
   </parent>
   <artifactId>fluent-hc</artifactId>
   <name>Fluent HttpClient</name>
diff --git a/fluent-hc/src/examples/org/apache/http/client/fluent/FluentResponseHandling.java b/fluent-hc/src/examples/org/apache/http/client/fluent/FluentResponseHandling.java
index 70f18c1fee..6e6071f487 100644
--- a/fluent-hc/src/examples/org/apache/http/client/fluent/FluentResponseHandling.java
+++ b/fluent-hc/src/examples/org/apache/http/client/fluent/FluentResponseHandling.java
@@ -27,6 +27,7 @@
 package org.apache.http.client.fluent;
 
 import java.io.IOException;
+import java.nio.charset.Charset;
 
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -71,11 +72,11 @@ public Document handleResponse(final HttpResponse response) throws IOException {
                     if (!contentType.equals(ContentType.APPLICATION_XML)) {
                         throw new ClientProtocolException("Unexpected content type:" + contentType);
                     }
-                    String charset = contentType.getCharset();
+                    Charset charset = contentType.getCharset();
                     if (charset == null) {
-                        charset = HTTP.DEFAULT_CONTENT_CHARSET;
+                        charset = HTTP.DEF_CONTENT_CHARSET;
                     }
-                    return docBuilder.parse(entity.getContent(), charset);
+                    return docBuilder.parse(entity.getContent(), charset.name());
                 } catch (ParserConfigurationException ex) {
                     throw new IllegalStateException(ex);
                 } catch (SAXException ex) {
diff --git a/fluent-hc/src/main/java/org/apache/http/client/fluent/Content.java b/fluent-hc/src/main/java/org/apache/http/client/fluent/Content.java
index af0e5155f2..7d1ff5f384 100644
--- a/fluent-hc/src/main/java/org/apache/http/client/fluent/Content.java
+++ b/fluent-hc/src/main/java/org/apache/http/client/fluent/Content.java
@@ -29,6 +29,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 
 import org.apache.http.entity.ContentType;
 import org.apache.http.protocol.HTTP;
@@ -55,12 +56,12 @@ public byte[] asBytes() {
     }
 
     public String asString() {
-        String charset = this.type.getCharset();
+        Charset charset = this.type.getCharset();
         if (charset == null) {
-            charset = HTTP.DEFAULT_CONTENT_TYPE;
+            charset = HTTP.DEF_CONTENT_CHARSET;
         }
         try {
-            return new String(this.raw, charset);
+            return new String(this.raw, charset.name());
         } catch (UnsupportedEncodingException ex) {
             return new String(this.raw);
         }
diff --git a/fluent-hc/src/main/java/org/apache/http/client/fluent/Executor.java b/fluent-hc/src/main/java/org/apache/http/client/fluent/Executor.java
index bec5650f69..9c2cef46ac 100644
--- a/fluent-hc/src/main/java/org/apache/http/client/fluent/Executor.java
+++ b/fluent-hc/src/main/java/org/apache/http/client/fluent/Executor.java
@@ -27,6 +27,10 @@
 package org.apache.http.client.fluent;
 
 import java.io.IOException;
+import java.security.KeyManagementException;
+import java.security.NoSuchAlgorithmException;
+
+import javax.net.ssl.SSLContext;
 
 import org.apache.http.HttpHost;
 import org.apache.http.auth.AuthScope;
@@ -41,23 +45,46 @@
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpRequestBase;
 import org.apache.http.client.protocol.ClientContext;
+import org.apache.http.conn.scheme.PlainSocketFactory;
 import org.apache.http.conn.scheme.Scheme;
+import org.apache.http.conn.scheme.SchemeRegistry;
+import org.apache.http.conn.scheme.SchemeSocketFactory;
+import org.apache.http.conn.ssl.SSLInitializationException;
+import org.apache.http.conn.ssl.SSLSocketFactory;
 import org.apache.http.impl.auth.BasicScheme;
 import org.apache.http.impl.client.BasicAuthCache;
 import org.apache.http.impl.client.BasicCredentialsProvider;
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.impl.conn.PoolingClientConnectionManager;
-import org.apache.http.impl.conn.SchemeRegistryFactory;
 import org.apache.http.protocol.BasicHttpContext;
 
 public class Executor {
 
     final static PoolingClientConnectionManager CONNMGR;
     final static DefaultHttpClient CLIENT;
-    
+
     static {
-        CONNMGR = new PoolingClientConnectionManager(
-                SchemeRegistryFactory.createSystemDefault());
+        SchemeRegistry schemeRegistry = new SchemeRegistry();
+        SchemeSocketFactory plain = PlainSocketFactory.getSocketFactory();
+        schemeRegistry.register(new Scheme("http", 80, plain));
+        SchemeSocketFactory ssl = null;
+        try {
+            ssl = SSLSocketFactory.getSystemSocketFactory();
+        } catch (SSLInitializationException ex) {
+            SSLContext sslcontext;
+            try {
+                sslcontext = SSLContext.getInstance(SSLSocketFactory.TLS);
+                sslcontext.init(null, null, null);
+                ssl = new SSLSocketFactory(sslcontext);
+            } catch (SecurityException ignore) {
+            } catch (KeyManagementException ignore) {
+            } catch (NoSuchAlgorithmException ignore) {
+            }
+        }
+        if (ssl != null) {
+            schemeRegistry.register(new Scheme("https", 443, ssl));
+        }
+        CONNMGR = new PoolingClientConnectionManager(schemeRegistry);
         CONNMGR.setDefaultMaxPerRoute(100);
         CONNMGR.setMaxTotal(200);
         CLIENT = new DefaultHttpClient(CONNMGR);
@@ -67,6 +94,10 @@ public static Executor newInstance() {
         return new Executor(CLIENT);
     }
 
+    public static Executor newInstance(final HttpClient httpclient) {
+        return new Executor(httpclient != null ? httpclient : CLIENT);
+    }
+
     private final HttpClient httpclient;
     private final BasicHttpContext localContext;
     private final AuthCache authCache;
diff --git a/fluent-hc/src/main/java/org/apache/http/client/fluent/Request.java b/fluent-hc/src/main/java/org/apache/http/client/fluent/Request.java
index 4d467b20e7..4e96125c8a 100644
--- a/fluent-hc/src/main/java/org/apache/http/client/fluent/Request.java
+++ b/fluent-hc/src/main/java/org/apache/http/client/fluent/Request.java
@@ -29,8 +29,8 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
 import java.net.URI;
+import java.nio.charset.Charset;
 import java.text.SimpleDateFormat;
 import java.util.Arrays;
 import java.util.Date;
@@ -266,24 +266,20 @@ public Request body(final HttpEntity entity) {
         return this;
     }
 
-    public Request bodyForm(final Iterable <? extends NameValuePair> formParams, final String charset) {
-        try {
-            return body(new UrlEncodedFormEntity(formParams));
-        } catch (UnsupportedEncodingException ex) {
-            throw new IllegalArgumentException(ex);
-        }
+    public Request bodyForm(final Iterable <? extends NameValuePair> formParams, final Charset charset) {
+        return body(new UrlEncodedFormEntity(formParams, charset));
     }
 
     public Request bodyForm(final Iterable <? extends NameValuePair> formParams) {
-        return bodyForm(formParams, HTTP.DEFAULT_CONTENT_CHARSET);
+        return bodyForm(formParams, HTTP.DEF_CONTENT_CHARSET);
     }
 
     public Request bodyForm(final NameValuePair... formParams) {
-        return bodyForm(Arrays.asList(formParams), HTTP.DEFAULT_CONTENT_CHARSET);
+        return bodyForm(Arrays.asList(formParams), HTTP.DEF_CONTENT_CHARSET);
     }
 
     public Request bodyString(final String s, final ContentType contentType) {
-        return body(StringEntity.create(s, contentType));
+        return body(new StringEntity(s, contentType));
     }
 
     public Request bodyFile(final File file, final ContentType contentType) {
diff --git a/httpclient-benchmark/pom.xml b/httpclient-benchmark/pom.xml
index f08f94e7cc..d9d1945f12 100644
--- a/httpclient-benchmark/pom.xml
+++ b/httpclient-benchmark/pom.xml
@@ -30,7 +30,7 @@
   <parent>
     <groupId>org.apache.httpcomponents</groupId>
     <artifactId>httpcomponents-client</artifactId>
-    <version>4.2-alpha2-SNAPSHOT</version>
+    <version>4.2</version>
   </parent>
   <artifactId>httpclient-benchmark</artifactId>
   <name>HttpClient Benchmarks</name>
diff --git a/httpclient-cache/pom.xml b/httpclient-cache/pom.xml
index 60267fad55..aa37754667 100644
--- a/httpclient-cache/pom.xml
+++ b/httpclient-cache/pom.xml
@@ -30,7 +30,7 @@
   <parent>
     <groupId>org.apache.httpcomponents</groupId>
     <artifactId>httpcomponents-client</artifactId>
-    <version>4.2-alpha2-SNAPSHOT</version>
+    <version>4.2</version>
   </parent>
   <artifactId>httpclient-cache</artifactId>
   <name>HttpClient Cache</name>
diff --git a/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheConfig.java b/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheConfig.java
index a44cd4e9bd..f5dfcb5121 100644
--- a/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheConfig.java
+++ b/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheConfig.java
@@ -147,9 +147,9 @@ public class CacheConfig {
      * Returns the current maximum response body size that will be cached.
      * @return size in bytes
      *
-     * @deprecated use {@link #getMaxObjectSize()}
+     * @deprecated (4.2)  use {@link #getMaxObjectSize()}
      */
-    @Deprecated
+    @Deprecated 
     public int getMaxObjectSizeBytes() {
         return maxObjectSize > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) maxObjectSize;
     }
@@ -158,9 +158,9 @@ public int getMaxObjectSizeBytes() {
      * Specifies the maximum response body size that will be eligible for caching.
      * @param maxObjectSizeBytes size in bytes
      *
-     * @deprecated use {@link #setMaxObjectSize(long)}
+     * @deprecated (4.2)  use {@link #setMaxObjectSize(long)}
      */
-    @Deprecated
+    @Deprecated 
     public void setMaxObjectSizeBytes(int maxObjectSizeBytes) {
         if (maxObjectSizeBytes > Integer.MAX_VALUE) {
             this.maxObjectSize = Integer.MAX_VALUE;
diff --git a/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheKeyGenerator.java b/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheKeyGenerator.java
index 74fec45e80..50e8ce29e7 100644
--- a/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheKeyGenerator.java
+++ b/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheKeyGenerator.java
@@ -37,6 +37,7 @@
 import java.util.Collections;
 import java.util.List;
 
+import org.apache.http.Consts;
 import org.apache.http.Header;
 import org.apache.http.HeaderElement;
 import org.apache.http.HttpHost;
@@ -44,7 +45,6 @@
 import org.apache.http.annotation.Immutable;
 import org.apache.http.client.cache.HeaderConstants;
 import org.apache.http.client.cache.HttpCacheEntry;
-import org.apache.http.protocol.HTTP;
 
 /**
  * @since 4.1
@@ -166,10 +166,10 @@ public String getVariantKey(HttpRequest req, HttpCacheEntry entry) {
                 if (!first) {
                     buf.append("&");
                 }
-                buf.append(URLEncoder.encode(headerName, HTTP.UTF_8));
+                buf.append(URLEncoder.encode(headerName, Consts.UTF_8.name()));
                 buf.append("=");
                 buf.append(URLEncoder.encode(getFullHeaderValue(req.getHeaders(headerName)),
-                        HTTP.UTF_8));
+                        Consts.UTF_8.name()));
                 first = false;
             }
             buf.append("}");
diff --git a/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingHttpClient.java b/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingHttpClient.java
index 99d32281d0..409a892606 100644
--- a/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingHttpClient.java
+++ b/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingHttpClient.java
@@ -769,6 +769,7 @@ HttpResponse negotiateResponseFromVariants(HttpHost target,
         HttpCacheEntry matchedEntry = matchingVariant.getEntry();
 
         if (revalidationResponseIsTooOld(backendResponse, matchedEntry)) {
+            EntityUtils.consume(backendResponse.getEntity());
             return retryRequestUnconditionally(target, request, context,
                     matchedEntry);
         }
@@ -839,6 +840,7 @@ HttpResponse revalidateCacheEntry(
         Date responseDate = getCurrentDate();
 
         if (revalidationResponseIsTooOld(backendResponse, cacheEntry)) {
+            EntityUtils.consume(backendResponse.getEntity());
             HttpRequest unconditional = conditionalRequestBuilder
                 .buildUnconditionalRequest(request, cacheEntry);
             requestDate = getCurrentDate();
diff --git a/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/RequestProtocolCompliance.java b/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/RequestProtocolCompliance.java
index 3efc4eeed3..bef4ae4d74 100644
--- a/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/RequestProtocolCompliance.java
+++ b/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/RequestProtocolCompliance.java
@@ -43,6 +43,7 @@
 import org.apache.http.client.ClientProtocolException;
 import org.apache.http.client.cache.HeaderConstants;
 import org.apache.http.entity.AbstractHttpEntity;
+import org.apache.http.entity.ContentType;
 import org.apache.http.impl.client.RequestWrapper;
 import org.apache.http.message.BasicHeader;
 import org.apache.http.message.BasicHttpResponse;
@@ -184,7 +185,8 @@ private void verifyOPTIONSRequestWithBodyHasContentType(HttpRequest request) {
 
     private void addContentTypeHeaderIfMissing(HttpEntityEnclosingRequest request) {
         if (request.getEntity().getContentType() == null) {
-            ((AbstractHttpEntity) request.getEntity()).setContentType(HTTP.OCTET_STREAM_TYPE);
+            ((AbstractHttpEntity) request.getEntity()).setContentType(
+                    ContentType.APPLICATION_OCTET_STREAM.getMimeType());
         }
     }
 
diff --git a/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/memcached/MemcachedHttpCacheStorage.java b/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/memcached/MemcachedHttpCacheStorage.java
index d1c62b7bc8..e8a7cf06f3 100644
--- a/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/memcached/MemcachedHttpCacheStorage.java
+++ b/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/memcached/MemcachedHttpCacheStorage.java
@@ -129,6 +129,8 @@ public MemcachedHttpCacheStorage(MemcachedClientIF cache) {
      * @param client how to talk to <i>memcached</i>
      * @param config apply HTTP cache-related options
      * @param serializer <b>ignored</b>
+     *
+     * @deprecated (4.2) do not use
      */
     @Deprecated
     public MemcachedHttpCacheStorage(MemcachedClientIF client, CacheConfig config,
diff --git a/httpclient-contrib/pom.xml b/httpclient-contrib/pom.xml
index 60cb3f20a2..9b54de31b0 100644
--- a/httpclient-contrib/pom.xml
+++ b/httpclient-contrib/pom.xml
@@ -30,7 +30,7 @@
   <parent>
     <groupId>org.apache.httpcomponents</groupId>
     <artifactId>httpcomponents-client</artifactId>
-    <version>4.2-alpha2-SNAPSHOT</version>
+    <version>4.2</version>
   </parent>
   <artifactId>httpclient-contrib</artifactId>
   <name>HttpClient Contrib</name>
diff --git a/httpclient-osgi/pom.xml b/httpclient-osgi/pom.xml
index 7c6a503407..157190b69e 100644
--- a/httpclient-osgi/pom.xml
+++ b/httpclient-osgi/pom.xml
@@ -30,7 +30,7 @@
   <parent>
     <groupId>org.apache.httpcomponents</groupId>
     <artifactId>httpcomponents-client</artifactId>
-    <version>4.2-alpha2-SNAPSHOT</version>
+    <version>4.2</version>
   </parent>
   <artifactId>httpclient-osgi</artifactId>
   <name>HttpClient OSGi bundle</name>
diff --git a/httpclient/pom.xml b/httpclient/pom.xml
index b80dc1c9a5..734e929271 100644
--- a/httpclient/pom.xml
+++ b/httpclient/pom.xml
@@ -30,7 +30,7 @@
   <parent>
     <groupId>org.apache.httpcomponents</groupId>
     <artifactId>httpcomponents-client</artifactId>
-    <version>4.2-alpha2-SNAPSHOT</version>
+    <version>4.2</version>
   </parent>
   <artifactId>httpclient</artifactId>
   <name>HttpClient</name>
diff --git a/httpclient/src/examples/org/apache/http/examples/client/ClientFormLogin.java b/httpclient/src/examples/org/apache/http/examples/client/ClientFormLogin.java
index aae777877a..fedcacab3e 100644
--- a/httpclient/src/examples/org/apache/http/examples/client/ClientFormLogin.java
+++ b/httpclient/src/examples/org/apache/http/examples/client/ClientFormLogin.java
@@ -28,6 +28,8 @@
 
 import java.util.ArrayList;
 import java.util.List;
+
+import org.apache.http.Consts;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.NameValuePair;
@@ -37,7 +39,6 @@
 import org.apache.http.cookie.Cookie;
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.message.BasicNameValuePair;
-import org.apache.http.protocol.HTTP;
 import org.apache.http.util.EntityUtils;
 
 /**
@@ -77,7 +78,7 @@ public static void main(String[] args) throws Exception {
             nvps.add(new BasicNameValuePair("IDToken1", "username"));
             nvps.add(new BasicNameValuePair("IDToken2", "password"));
 
-            httpost.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));
+            httpost.setEntity(new UrlEncodedFormEntity(nvps, Consts.UTF_8));
 
             response = httpclient.execute(httpost);
             entity = response.getEntity();
diff --git a/httpclient/src/examples/org/apache/http/examples/client/ClientGZipContentCompression.java b/httpclient/src/examples/org/apache/http/examples/client/ClientGZipContentCompression.java
index 0f6844eb69..318d961907 100644
--- a/httpclient/src/examples/org/apache/http/examples/client/ClientGZipContentCompression.java
+++ b/httpclient/src/examples/org/apache/http/examples/client/ClientGZipContentCompression.java
@@ -28,8 +28,6 @@
 package org.apache.http.examples.client;
 
 import java.io.IOException;
-import java.io.InputStream;
-import java.util.zip.GZIPInputStream;
 
 import org.apache.http.Header;
 import org.apache.http.HeaderElement;
@@ -39,8 +37,8 @@
 import org.apache.http.HttpRequestInterceptor;
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpResponseInterceptor;
+import org.apache.http.client.entity.GzipDecompressingEntity;
 import org.apache.http.client.methods.HttpGet;
-import org.apache.http.entity.HttpEntityWrapper;
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.protocol.HttpContext;
 import org.apache.http.util.EntityUtils;
@@ -81,14 +79,16 @@ public void process(
                         final HttpResponse response,
                         final HttpContext context) throws HttpException, IOException {
                     HttpEntity entity = response.getEntity();
-                    Header ceheader = entity.getContentEncoding();
-                    if (ceheader != null) {
-                        HeaderElement[] codecs = ceheader.getElements();
-                        for (int i = 0; i < codecs.length; i++) {
-                            if (codecs[i].getName().equalsIgnoreCase("gzip")) {
-                                response.setEntity(
-                                        new GzipDecompressingEntity(response.getEntity()));
-                                return;
+                    if (entity != null) {
+                        Header ceheader = entity.getContentEncoding();
+                        if (ceheader != null) {
+                            HeaderElement[] codecs = ceheader.getElements();
+                            for (int i = 0; i < codecs.length; i++) {
+                                if (codecs[i].getName().equalsIgnoreCase("gzip")) {
+                                    response.setEntity(
+                                            new GzipDecompressingEntity(response.getEntity()));
+                                    return;
+                                }
                             }
                         }
                     }
@@ -125,29 +125,5 @@ public void process(
         }
     }
 
-    static class GzipDecompressingEntity extends HttpEntityWrapper {
-
-        public GzipDecompressingEntity(final HttpEntity entity) {
-            super(entity);
-        }
-
-        @Override
-        public InputStream getContent()
-            throws IOException, IllegalStateException {
-
-            // the wrapped entity's getContent() decides about repeatability
-            InputStream wrappedin = wrappedEntity.getContent();
-
-            return new GZIPInputStream(wrappedin);
-        }
-
-        @Override
-        public long getContentLength() {
-            // length of ungzipped content is not known
-            return -1;
-        }
-
-    }
-
 }
 
diff --git a/httpclient/src/examples/org/apache/http/examples/client/ProxyTunnelDemo.java b/httpclient/src/examples/org/apache/http/examples/client/ProxyTunnelDemo.java
index fba67365c3..3fd6464629 100644
--- a/httpclient/src/examples/org/apache/http/examples/client/ProxyTunnelDemo.java
+++ b/httpclient/src/examples/org/apache/http/examples/client/ProxyTunnelDemo.java
@@ -51,16 +51,15 @@ public final static void main(String[] args) throws Exception {
         UsernamePasswordCredentials credentials = new UsernamePasswordCredentials("user", "pwd");
         Socket socket = proxyClient.tunnel(proxy, target, credentials);
         try {
-            Writer out = new OutputStreamWriter(socket.getOutputStream(),
-                    HTTP.DEFAULT_CONTENT_CHARSET);
+            Writer out = new OutputStreamWriter(socket.getOutputStream(), HTTP.DEF_CONTENT_CHARSET);
             out.write("GET / HTTP/1.1\r\n");
             out.write("Host: " + target.toHostString() + "\r\n");
             out.write("Agent: whatever\r\n");
             out.write("Connection: close\r\n");
             out.write("\r\n");
             out.flush();
-            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(),
-                    HTTP.DEFAULT_CONTENT_CHARSET));
+            BufferedReader in = new BufferedReader(
+                    new InputStreamReader(socket.getInputStream(), HTTP.DEF_CONTENT_CHARSET));
             String line = null;
             while ((line = in.readLine()) != null) {
                 System.out.println(line);
diff --git a/httpclient/src/main/java/org/apache/http/auth/AuthScheme.java b/httpclient/src/main/java/org/apache/http/auth/AuthScheme.java
index cccb7c4a55..d7820146c2 100644
--- a/httpclient/src/main/java/org/apache/http/auth/AuthScheme.java
+++ b/httpclient/src/main/java/org/apache/http/auth/AuthScheme.java
@@ -121,7 +121,7 @@ public interface AuthScheme {
      *
      * @return the authorization string
      *
-     * @deprecated Use {@link ContextAwareAuthScheme#authenticate(Credentials, HttpRequest, org.apache.http.protocol.HttpContext)}
+     * @deprecated (4.1)  Use {@link ContextAwareAuthScheme#authenticate(Credentials, HttpRequest, org.apache.http.protocol.HttpContext)}
      */
     @Deprecated
     Header authenticate(Credentials credentials, HttpRequest request)
diff --git a/httpclient/src/main/java/org/apache/http/auth/AuthState.java b/httpclient/src/main/java/org/apache/http/auth/AuthState.java
index 071d6742c2..925d7f8232 100644
--- a/httpclient/src/main/java/org/apache/http/auth/AuthState.java
+++ b/httpclient/src/main/java/org/apache/http/auth/AuthState.java
@@ -157,13 +157,16 @@ public void update(final Queue<AuthOption> authOptions) {
     /**
      * Invalidates the authentication state by resetting its parameters.
      *
-     * @deprecated use {@link #reset()}
+     * @deprecated (4.2)  use {@link #reset()}
      */
-    @Deprecated
+    @Deprecated 
     public void invalidate() {
         reset();
     }
 
+    /**
+     * @deprecated (4.2) do not use
+     */
     @Deprecated
     public boolean isValid() {
         return this.authScheme != null;
@@ -174,9 +177,9 @@ public boolean isValid() {
      *
      * @param authScheme the {@link AuthScheme authentication scheme}
      *
-     * @deprecated use {@link #update(AuthScheme, Credentials)}
+     * @deprecated (4.2)  use {@link #update(AuthScheme, Credentials)}
      */
-    @Deprecated
+    @Deprecated 
     public void setAuthScheme(final AuthScheme authScheme) {
         if (authScheme == null) {
             reset();
@@ -190,7 +193,7 @@ public void setAuthScheme(final AuthScheme authScheme) {
      *
      * @param credentials User credentials
      *
-     * @deprecated use {@link #update(AuthScheme, Credentials)}
+     * @deprecated (4.2)  use {@link #update(AuthScheme, Credentials)}
      */
     @Deprecated
     public void setCredentials(final Credentials credentials) {
@@ -202,7 +205,7 @@ public void setCredentials(final Credentials credentials) {
      *
      * @return actual authentication scope if available, <code>null</code otherwise
      *
-     * @deprecated do not use.
+     * @deprecated (4.2)  do not use.
      */
     @Deprecated
     public AuthScope getAuthScope() {
@@ -214,7 +217,7 @@ public AuthScope getAuthScope() {
      *
      * @param authScope Authentication scope
      *
-     * @deprecated do not use.
+     * @deprecated (4.2)  do not use.
      */
     @Deprecated
     public void setAuthScope(final AuthScope authScope) {
diff --git a/httpclient/src/main/java/org/apache/http/auth/ChallengeState.java b/httpclient/src/main/java/org/apache/http/auth/ChallengeState.java
old mode 100755
new mode 100644
diff --git a/httpclient/src/main/java/org/apache/http/auth/params/AuthParams.java b/httpclient/src/main/java/org/apache/http/auth/params/AuthParams.java
index 55cf9a2401..8e8250a0e0 100644
--- a/httpclient/src/main/java/org/apache/http/auth/params/AuthParams.java
+++ b/httpclient/src/main/java/org/apache/http/auth/params/AuthParams.java
@@ -61,7 +61,7 @@ public static String getCredentialCharset(final HttpParams params) {
         String charset = (String) params.getParameter
             (AuthPNames.CREDENTIAL_CHARSET);
         if (charset == null) {
-            charset = HTTP.DEFAULT_PROTOCOL_CHARSET;
+            charset = HTTP.DEF_PROTOCOL_CHARSET.name();
         }
         return charset;
     }
diff --git a/httpclient/src/main/java/org/apache/http/client/AuthenticationHandler.java b/httpclient/src/main/java/org/apache/http/client/AuthenticationHandler.java
index afce2838c4..60065bd5ba 100644
--- a/httpclient/src/main/java/org/apache/http/client/AuthenticationHandler.java
+++ b/httpclient/src/main/java/org/apache/http/client/AuthenticationHandler.java
@@ -48,7 +48,7 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link AuthenticationStrategy}
+ * @deprecated (4.2)  use {@link AuthenticationStrategy}
  */
 @Deprecated
 public interface AuthenticationHandler {
diff --git a/httpclient/src/main/java/org/apache/http/client/RedirectHandler.java b/httpclient/src/main/java/org/apache/http/client/RedirectHandler.java
index af476385e3..7bd4bd49ef 100644
--- a/httpclient/src/main/java/org/apache/http/client/RedirectHandler.java
+++ b/httpclient/src/main/java/org/apache/http/client/RedirectHandler.java
@@ -44,7 +44,7 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link RedirectStrategy}
+ * @deprecated (4.1)  use {@link RedirectStrategy}
  */
 @Deprecated
 public interface RedirectHandler {
diff --git a/httpclient/src/main/java/org/apache/http/client/entity/UrlEncodedFormEntity.java b/httpclient/src/main/java/org/apache/http/client/entity/UrlEncodedFormEntity.java
index 37705f441d..33e389fad1 100644
--- a/httpclient/src/main/java/org/apache/http/client/entity/UrlEncodedFormEntity.java
+++ b/httpclient/src/main/java/org/apache/http/client/entity/UrlEncodedFormEntity.java
@@ -27,6 +27,7 @@
 package org.apache.http.client.entity;
 
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.util.List;
 
 import org.apache.http.annotation.NotThreadSafe;
@@ -46,24 +47,6 @@
 @NotThreadSafe // AbstractHttpEntity is not thread-safe
 public class UrlEncodedFormEntity extends StringEntity {
 
-    public static UrlEncodedFormEntity create(
-            final Iterable <? extends NameValuePair> parameters, final String charset) {
-        try {
-            return new UrlEncodedFormEntity(parameters, charset);
-        } catch (UnsupportedEncodingException ex) {
-            throw new IllegalArgumentException(ex.getMessage(), ex);
-        }
-    }
-    
-    public static UrlEncodedFormEntity create(
-            final Iterable <? extends NameValuePair> parameters) {
-        try {
-            return new UrlEncodedFormEntity(parameters, null);
-        } catch (UnsupportedEncodingException ex) {
-            throw new IllegalArgumentException(ex.getMessage(), ex);
-        }
-    }
-
     /**
      * Constructs a new {@link UrlEncodedFormEntity} with the list
      * of parameters in the specified encoding.
@@ -75,8 +58,8 @@ public static UrlEncodedFormEntity create(
     public UrlEncodedFormEntity (
         final List <? extends NameValuePair> parameters,
         final String charset) throws UnsupportedEncodingException {
-        super(URLEncodedUtils.format(parameters, 
-                charset != null ? charset : HTTP.DEFAULT_CONTENT_CHARSET), 
+        super(URLEncodedUtils.format(parameters,
+                charset != null ? charset : HTTP.DEF_CONTENT_CHARSET.name()),
                 ContentType.create(URLEncodedUtils.CONTENT_TYPE, charset));
     }
 
@@ -86,15 +69,14 @@ public UrlEncodedFormEntity (
      *
      * @param parameters iterable collection of name/value pairs
      * @param charset encoding the name/value pairs be encoded with
-     * @throws UnsupportedEncodingException if the encoding isn't supported
      *
      * @since 4.2
      */
     public UrlEncodedFormEntity (
         final Iterable <? extends NameValuePair> parameters,
-        final String charset) throws UnsupportedEncodingException {
-        super(URLEncodedUtils.format(parameters, 
-                charset != null ? charset : HTTP.DEFAULT_CONTENT_CHARSET), 
+        final Charset charset) {
+        super(URLEncodedUtils.format(parameters,
+                charset != null ? charset : HTTP.DEF_CONTENT_CHARSET),
                 ContentType.create(URLEncodedUtils.CONTENT_TYPE, charset));
     }
 
@@ -107,7 +89,7 @@ public UrlEncodedFormEntity (
      */
     public UrlEncodedFormEntity (
         final List <? extends NameValuePair> parameters) throws UnsupportedEncodingException {
-        this(parameters, null);
+        this(parameters, (Charset) null);
     }
 
     /**
@@ -115,12 +97,11 @@ public UrlEncodedFormEntity (
      * of parameters with the default encoding of {@link HTTP#DEFAULT_CONTENT_CHARSET}
      *
      * @param parameters iterable collection of name/value pairs
-     * @throws UnsupportedEncodingException if the default encoding isn't supported
      *
      * @since 4.2
      */
     public UrlEncodedFormEntity (
-        final Iterable <? extends NameValuePair> parameters) throws UnsupportedEncodingException {
+        final Iterable <? extends NameValuePair> parameters) {
         this(parameters, null);
     }
 
diff --git a/httpclient/src/main/java/org/apache/http/client/methods/HttpPatch.java b/httpclient/src/main/java/org/apache/http/client/methods/HttpPatch.java
new file mode 100644
index 0000000000..3a6b126e65
--- /dev/null
+++ b/httpclient/src/main/java/org/apache/http/client/methods/HttpPatch.java
@@ -0,0 +1,75 @@
+/*
+ * ====================================================================
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ *
+ */
+
+package org.apache.http.client.methods;
+
+import java.net.URI;
+
+import org.apache.http.annotation.NotThreadSafe;
+
+/**
+ * HTTP PATCH method.
+ * <p>
+ * The HTTP PATCH method is defined in <a
+ * href="http://tools.ietf.org/html/rfc5789">RF5789</a>: <blockquote> The PATCH
+ * method requests that a set of changes described in the request entity be
+ * applied to the resource identified by the Request- URI. Differs from the PUT
+ * method in the way the server processes the enclosed entity to modify the
+ * resource identified by the Request-URI. In a PUT request, the enclosed entity
+ * origin server, and the client is requesting that the stored version be
+ * replaced. With PATCH, however, the enclosed entity contains a set of
+ * instructions describing how a resource currently residing on the origin
+ * server should be modified to produce a new version. </blockquote>
+ * </p>
+ *
+ * @since 4.2
+ */
+@NotThreadSafe
+public class HttpPatch extends HttpEntityEnclosingRequestBase {
+
+    public final static String METHOD_NAME = "PATCH";
+
+    public HttpPatch() {
+        super();
+    }
+
+    public HttpPatch(final URI uri) {
+        super();
+        setURI(uri);
+    }
+
+    public HttpPatch(final String uri) {
+        super();
+        setURI(URI.create(uri));
+    }
+
+    @Override
+    public String getMethod() {
+        return METHOD_NAME;
+    }
+
+}
diff --git a/httpclient/src/main/java/org/apache/http/client/params/AuthPolicy.java b/httpclient/src/main/java/org/apache/http/client/params/AuthPolicy.java
index a278578467..4391dcf4ff 100644
--- a/httpclient/src/main/java/org/apache/http/client/params/AuthPolicy.java
+++ b/httpclient/src/main/java/org/apache/http/client/params/AuthPolicy.java
@@ -64,7 +64,7 @@ private AuthPolicy() {
      *
      * @since 4.1
      */
-    public static final String SPNEGO = "Negotiate";
+    public static final String SPNEGO = "negotiate";
 
     /**
      * Kerberos Authentication scheme.
diff --git a/httpclient/src/main/java/org/apache/http/client/params/ClientPNames.java b/httpclient/src/main/java/org/apache/http/client/params/ClientPNames.java
index e76e394bb4..cb895a89a2 100644
--- a/httpclient/src/main/java/org/apache/http/client/params/ClientPNames.java
+++ b/httpclient/src/main/java/org/apache/http/client/params/ClientPNames.java
@@ -34,17 +34,11 @@
 public interface ClientPNames {
 
     /**
-     * @deprecated do not use
+     * @deprecated (4.2)  do not use
      */
     @Deprecated
     public static final String CONNECTION_MANAGER_FACTORY_CLASS_NAME = "http.connection-manager.factory-class-name";
 
-    /**
-     * @deprecated do not use
-     */
-    @Deprecated
-    public static final String CONNECTION_MANAGER_FACTORY = "http.connection-manager.factory-object";
-
     /**
      * Defines whether redirects should be handled automatically
      * <p>
diff --git a/httpclient/src/main/java/org/apache/http/client/params/ClientParamBean.java b/httpclient/src/main/java/org/apache/http/client/params/ClientParamBean.java
index 40547c1633..a9b1f730f8 100644
--- a/httpclient/src/main/java/org/apache/http/client/params/ClientParamBean.java
+++ b/httpclient/src/main/java/org/apache/http/client/params/ClientParamBean.java
@@ -33,7 +33,6 @@
 
 import org.apache.http.Header;
 import org.apache.http.HttpHost;
-import org.apache.http.conn.ClientConnectionManagerFactory;
 import org.apache.http.params.HttpAbstractParamBean;
 import org.apache.http.params.HttpParams;
 
@@ -51,16 +50,14 @@ public ClientParamBean (final HttpParams params) {
         super(params);
     }
 
-    @Deprecated
+    /**
+     * @deprecated (4.2)  do not use.
+     */
+    @Deprecated 
     public void setConnectionManagerFactoryClassName (final String factory) {
         params.setParameter(ClientPNames.CONNECTION_MANAGER_FACTORY_CLASS_NAME, factory);
     }
 
-    @Deprecated
-    public void setConnectionManagerFactory(ClientConnectionManagerFactory factory) {
-        params.setParameter(ClientPNames.CONNECTION_MANAGER_FACTORY, factory);
-    }
-
     public void setHandleRedirects (final boolean handle) {
         params.setBooleanParameter(ClientPNames.HANDLE_REDIRECTS, handle);
     }
diff --git a/httpclient/src/main/java/org/apache/http/client/protocol/ClientContext.java b/httpclient/src/main/java/org/apache/http/client/protocol/ClientContext.java
index 9e7cbd3028..72ce5cc879 100644
--- a/httpclient/src/main/java/org/apache/http/client/protocol/ClientContext.java
+++ b/httpclient/src/main/java/org/apache/http/client/protocol/ClientContext.java
@@ -95,7 +95,7 @@ public interface ClientContext {
     public static final String PROXY_AUTH_STATE      = "http.auth.proxy-scope";
 
     /**
-     * @deprecated do not use
+     * @deprecated (4.1)  do not use
      */
     @Deprecated
     public static final String AUTH_SCHEME_PREF      = "http.auth.scheme-pref";
diff --git a/httpclient/src/main/java/org/apache/http/client/protocol/ClientContextConfigurer.java b/httpclient/src/main/java/org/apache/http/client/protocol/ClientContextConfigurer.java
index f29d016e65..b96735fbed 100644
--- a/httpclient/src/main/java/org/apache/http/client/protocol/ClientContextConfigurer.java
+++ b/httpclient/src/main/java/org/apache/http/client/protocol/ClientContextConfigurer.java
@@ -70,14 +70,4 @@ public void setCredentialsProvider(final CredentialsProvider provider) {
         this.context.setAttribute(CREDS_PROVIDER, provider);
     }
 
-    /**
-     * @deprecated (4.1-alpha1) Use {@link HttpParams#setParameter(String, Object)} to set the parameters
-     * {@link org.apache.http.auth.params.AuthPNames#TARGET_AUTH_PREF AuthPNames#TARGET_AUTH_PREF} and
-     * {@link org.apache.http.auth.params.AuthPNames#PROXY_AUTH_PREF AuthPNames#PROXY_AUTH_PREF} instead
-     */
-    @Deprecated
-    public void setAuthSchemePref(final List<String> list) {
-        this.context.setAttribute(AUTH_SCHEME_PREF, list);
-    }
-
 }
diff --git a/httpclient/src/main/java/org/apache/http/client/protocol/RequestAcceptEncoding.java b/httpclient/src/main/java/org/apache/http/client/protocol/RequestAcceptEncoding.java
index 1df09a9b5b..3b72666a9f 100644
--- a/httpclient/src/main/java/org/apache/http/client/protocol/RequestAcceptEncoding.java
+++ b/httpclient/src/main/java/org/apache/http/client/protocol/RequestAcceptEncoding.java
@@ -52,7 +52,9 @@ public void process(
             final HttpContext context) throws HttpException, IOException {
 
         /* Signal support for Accept-Encoding transfer encodings. */
-        request.addHeader("Accept-Encoding", "gzip,deflate");
+        if (!request.containsHeader("Accept-Encoding")) {
+            request.addHeader("Accept-Encoding", "gzip,deflate");
+        } 
     }
 
 }
diff --git a/httpclient/src/main/java/org/apache/http/client/protocol/ResponseAuthCache.java b/httpclient/src/main/java/org/apache/http/client/protocol/ResponseAuthCache.java
index 349f72dfc0..6696fab1c2 100644
--- a/httpclient/src/main/java/org/apache/http/client/protocol/ResponseAuthCache.java
+++ b/httpclient/src/main/java/org/apache/http/client/protocol/ResponseAuthCache.java
@@ -55,10 +55,10 @@
  *
  * @since 4.1
  *
- * @deprecated use {@link AuthenticationStrategy}
+ * @deprecated (4.2)  use {@link AuthenticationStrategy}
  */
 @Immutable
-@Deprecated
+@Deprecated 
 public class ResponseAuthCache implements HttpResponseInterceptor {
 
     private final Log log = LogFactory.getLog(getClass());
diff --git a/httpclient/src/main/java/org/apache/http/client/protocol/ResponseContentEncoding.java b/httpclient/src/main/java/org/apache/http/client/protocol/ResponseContentEncoding.java
index f218aa0902..b86a088d91 100644
--- a/httpclient/src/main/java/org/apache/http/client/protocol/ResponseContentEncoding.java
+++ b/httpclient/src/main/java/org/apache/http/client/protocol/ResponseContentEncoding.java
@@ -52,6 +52,8 @@
 @Immutable
 public class ResponseContentEncoding implements HttpResponseInterceptor {
 
+    public static final String UNCOMPRESSED = "http.client.response.uncompressed"; 
+    
     /**
      * Handles the following {@code Content-Encoding}s by
      * using the appropriate decompressor to wrap the response Entity:
@@ -80,9 +82,11 @@ public void process(
                     String codecname = codec.getName().toLowerCase(Locale.US);
                     if ("gzip".equals(codecname) || "x-gzip".equals(codecname)) {
                         response.setEntity(new GzipDecompressingEntity(response.getEntity()));
+                        if (context != null) context.setAttribute(UNCOMPRESSED, true);  
                         return;
                     } else if ("deflate".equals(codecname)) {
                         response.setEntity(new DeflateDecompressingEntity(response.getEntity()));
+                        if (context != null) context.setAttribute(UNCOMPRESSED, true);
                         return;
                     } else if ("identity".equals(codecname)) {
 
diff --git a/httpclient/src/main/java/org/apache/http/client/utils/URIBuilder.java b/httpclient/src/main/java/org/apache/http/client/utils/URIBuilder.java
index 7639ba655b..9d444e4342 100644
--- a/httpclient/src/main/java/org/apache/http/client/utils/URIBuilder.java
+++ b/httpclient/src/main/java/org/apache/http/client/utils/URIBuilder.java
@@ -28,15 +28,18 @@
 
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 
+import org.apache.http.Consts;
 import org.apache.http.NameValuePair;
 import org.apache.http.message.BasicNameValuePair;
-import org.apache.http.protocol.HTTP;
 
 /**
+ * {@link URI} builder for HTTP requests.
+ * 
  * @since 4.2
  */
 public class URIBuilder {
@@ -66,33 +69,33 @@ public URIBuilder(final URI uri) {
         digestURI(uri);
     }
 
-    private List <NameValuePair> parseQuery(final String query, final String encoding) {
+    private List <NameValuePair> parseQuery(final String query, final Charset charset) {
         if (query != null && query.length() > 0) {
-            return URLEncodedUtils.parse(query, encoding);
+            return URLEncodedUtils.parse(query, charset);
         }
         return null;
     }
 
-    private String formatQuery(final List<NameValuePair> parameters, final String encoding) {
+    private String formatQuery(final List<NameValuePair> parameters, final Charset charset) {
         if (parameters == null) {
             return null;
         }
-        return URLEncodedUtils.format(parameters, encoding);
+        return URLEncodedUtils.format(parameters, charset);
     }
 
     /**
-     * Builds a URI instance.
+     * Builds a {@link URI} instance.
      */
     public URI build() throws URISyntaxException {
         if (this.schemeSpecificPart != null) {
             return new URI(this.scheme, this.schemeSpecificPart, this.fragment);
         } else if (this.authority != null) {
             return new URI(this.scheme, this.authority,
-                    this.path, formatQuery(this.queryParams, HTTP.UTF_8), this.fragment);
+                    this.path, formatQuery(this.queryParams, Consts.UTF_8), this.fragment);
 
         } else {
             return new URI(this.scheme, this.userInfo, this.host, this.port,
-                    this.path, formatQuery(this.queryParams, HTTP.UTF_8), this.fragment);
+                    this.path, formatQuery(this.queryParams, Consts.UTF_8), this.fragment);
         }
     }
 
@@ -104,21 +107,15 @@ private void digestURI(final URI uri) {
         this.port = uri.getPort();
         this.userInfo = uri.getUserInfo();
         this.path = uri.getPath();
-        this.queryParams = parseQuery(uri.getRawQuery(), HTTP.UTF_8);
+        this.queryParams = parseQuery(uri.getRawQuery(), Consts.UTF_8);
         this.fragment = uri.getFragment();
     }
 
-    /**
-     * Sets URI scheme.
-     */
     public URIBuilder setScheme(final String scheme) {
         this.scheme = scheme;
         return this;
     }
 
-    /**
-     * Sets URI user-info.
-     */
     public URIBuilder setUserInfo(final String userInfo) {
         this.userInfo = userInfo;
         this.schemeSpecificPart = null;
@@ -126,16 +123,10 @@ public URIBuilder setUserInfo(final String userInfo) {
         return this;
     }
 
-    /**
-     * Sets URI user-info in a form of 'username:password'.
-     */
     public URIBuilder setUserInfo(final String username, final String password) {
         return setUserInfo(username + ':' + password);
     }
 
-    /**
-     * Sets URI host.
-     */
     public URIBuilder setHost(final String host) {
         this.host = host;
         this.schemeSpecificPart = null;
@@ -143,9 +134,6 @@ public URIBuilder setHost(final String host) {
         return this;
     }
 
-    /**
-     * Sets URI port.
-     */
     public URIBuilder setPort(final int port) {
         this.port = port < 0 ? -1 : port;
         this.schemeSpecificPart = null;
@@ -153,36 +141,24 @@ public URIBuilder setPort(final int port) {
         return this;
     }
 
-    /**
-     * Sets URI path.
-     */
     public URIBuilder setPath(final String path) {
         this.path = path;
         this.schemeSpecificPart = null;
         return this;
     }
 
-    /**
-     * Removes all query parameters.
-     */
     public URIBuilder removeQuery() {
         this.queryParams = null;
         this.schemeSpecificPart = null;
         return this;
     }
 
-    /**
-     * Set URI query.
-     */
     public URIBuilder setQuery(final String query) {
-        this.queryParams = parseQuery(query, HTTP.UTF_8);
+        this.queryParams = parseQuery(query, Consts.UTF_8);
         this.schemeSpecificPart = null;
         return this;
     }
 
-    /**
-     * Adds a parameter-value pair to URI query.
-     */
     public URIBuilder addParameter(final String param, final String value) {
         if (this.queryParams == null) {
             this.queryParams = new ArrayList<NameValuePair>();
@@ -192,9 +168,6 @@ public URIBuilder addParameter(final String param, final String value) {
         return this;
     }
 
-    /**
-     * Sets parameter-value pair to URI query removing existing parameters with the same name.
-     */
     public URIBuilder setParameter(final String param, final String value) {
         if (this.queryParams == null) {
             this.queryParams = new ArrayList<NameValuePair>();
@@ -212,12 +185,52 @@ public URIBuilder setParameter(final String param, final String value) {
         return this;
     }
 
-    /**
-     * Sets URI fragment.
-     */
     public URIBuilder setFragment(final String fragment) {
         this.fragment = fragment;
         return this;
     }
 
+    public String getScheme() {
+        return this.scheme;
+    }
+
+    public String getUserInfo() {
+        return this.userInfo;
+    }
+
+    public String getHost() {
+        return this.host;
+    }
+
+    public int getPort() {
+        return this.port;
+    }
+
+    public String getPath() {
+        return this.path;
+    }
+
+    public List<NameValuePair> getQueryParams() {
+        if (this.queryParams != null) {
+            return new ArrayList<NameValuePair>(this.queryParams);
+        } else {
+            return new ArrayList<NameValuePair>();
+        }
+    }
+
+    public String getFragment() {
+        return this.fragment;
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder builder = new StringBuilder();
+        builder.append("URI [scheme=").append(this.scheme)
+                .append(", userInfo=").append(this.userInfo).append(", host=").append(this.host)
+                .append(", port=").append(this.port).append(", path=").append(this.path)
+                .append(", queryParams=").append(this.queryParams).append(", fragment=")
+                .append(this.fragment).append("]");
+        return builder.toString();
+    }
+
 }
diff --git a/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java b/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java
index 65f3b66702..2e2d56d9e8 100644
--- a/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java
+++ b/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java
@@ -175,6 +175,33 @@ public static URI rewriteURI(
         return rewriteURI(uri, target, false);
     }
 
+    /**
+     * A convenience method that creates a new {@link URI} whose scheme, host, port ,path,
+     * query are taken from the existing URI if it contains a fragment. The existing URI
+     * is returned unmodified if it has no fragment.
+     *
+     * @param uri
+     *            original URI.
+     * @throws URISyntaxException
+     *             If the resulting URI is invalid.
+     */
+    public static URI rewriteURI(final URI uri) throws URISyntaxException {
+        if (uri == null) {
+            throw new IllegalArgumentException("URI may not be null");
+        }
+        if (uri.getFragment() != null) {
+            return URIUtils.createURI(
+                    uri.getScheme(),
+                    uri.getHost(),
+                    uri.getPort(),
+                    uri.getRawPath(),
+                    uri.getRawQuery(),
+                    null);
+        } else {
+            return uri;
+        }
+    }
+
     /**
      * Resolves a URI reference against a base URI. Work-around for bug in
      * java.net.URI (<http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4708535>)
@@ -306,10 +333,22 @@ public static HttpHost extractHost(final URI uri) {
                     if (host != null) {
                         int colon = host.indexOf(':');
                         if (colon >= 0) {
-                            if (colon+1 < host.length()) {
-                                port = Integer.parseInt(host.substring(colon+1));
+                            int pos = colon + 1;
+                            int len = 0;
+                            for (int i = pos; i < host.length(); i++) {
+                                if (Character.isDigit(host.charAt(i))) {
+                                    len++;
+                                } else {
+                                    break;
+                                }
+                            }
+                            if (len > 0) {
+                                try {
+                                    port = Integer.parseInt(host.substring(pos, pos + len));
+                                } catch (NumberFormatException ex) {
+                                }
                             }
-                            host = host.substring(0,colon);
+                            host = host.substring(0, colon);
                         }
                     }
                 }
diff --git a/httpclient/src/main/java/org/apache/http/client/utils/URLEncodedUtils.java b/httpclient/src/main/java/org/apache/http/client/utils/URLEncodedUtils.java
index aa18236d19..775604b810 100644
--- a/httpclient/src/main/java/org/apache/http/client/utils/URLEncodedUtils.java
+++ b/httpclient/src/main/java/org/apache/http/client/utils/URLEncodedUtils.java
@@ -32,13 +32,16 @@
 import java.net.URI;
 import java.net.URLDecoder;
 import java.net.URLEncoder;
+import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Scanner;
 
 import org.apache.http.annotation.Immutable;
+import org.apache.http.entity.ContentType;
 
+import org.apache.http.Consts;
 import org.apache.http.Header;
 import org.apache.http.HeaderElement;
 import org.apache.http.HttpEntity;
@@ -78,7 +81,10 @@ public class URLEncodedUtils {
     public static List <NameValuePair> parse (final URI uri, final String encoding) {
         final String query = uri.getRawQuery();
         if (query != null && query.length() > 0) {
-            return parse(query, encoding);
+            List<NameValuePair> result = new ArrayList<NameValuePair>();
+            Scanner scanner = new Scanner(query);
+            parse(result, scanner, encoding);
+            return result;
         } else {
             return Collections.emptyList();
         }
@@ -98,32 +104,18 @@ public static List <NameValuePair> parse (final URI uri, final String encoding)
      */
     public static List <NameValuePair> parse (
             final HttpEntity entity) throws IOException {
-        List <NameValuePair> result = Collections.emptyList();
-
-        String contentType = null;
-        String charset = null;
-
-        Header h = entity.getContentType();
-        if (h != null) {
-            HeaderElement[] elems = h.getElements();
-            if (elems.length > 0) {
-                HeaderElement elem = elems[0];
-                contentType = elem.getName();
-                NameValuePair param = elem.getParameterByName("charset");
-                if (param != null) {
-                    charset = param.getValue();
-                }
-            }
-        }
-
-        if (contentType != null && contentType.equalsIgnoreCase(CONTENT_TYPE)) {
-            final String content = EntityUtils.toString(entity, HTTP.ASCII);
+        ContentType contentType = ContentType.get(entity);
+        if (contentType != null && contentType.getMimeType().equalsIgnoreCase(CONTENT_TYPE)) {
+            String content = EntityUtils.toString(entity, Consts.ASCII);
             if (content != null && content.length() > 0) {
-                result = new ArrayList <NameValuePair>();
-                parse(result, new Scanner(content), charset);
+                Charset charset = contentType != null ? contentType.getCharset() : null;
+                if (charset == null) {
+                    charset = HTTP.DEF_CONTENT_CHARSET;
+                }
+                return parse(content, charset);
             }
         }
-        return result;
+        return Collections.emptyList();
     }
 
     /**
@@ -156,26 +148,25 @@ public static boolean isEncoded (final HttpEntity entity) {
      *            List to add parameters to.
      * @param scanner
      *            Input that contains the parameters to parse.
-     * @param encoding
+     * @param charset
      *            Encoding to use when decoding the parameters.
-     *
-     * @deprecated use {@link #parse(String, String)}
      */
-    @Deprecated
     public static void parse (
             final List <NameValuePair> parameters,
             final Scanner scanner,
-            final String encoding) {
+            final String charset) {
         scanner.useDelimiter(PARAMETER_SEPARATOR);
         while (scanner.hasNext()) {
-            final String[] nameValue = scanner.next().split(NAME_VALUE_SEPARATOR);
-            if (nameValue.length == 0 || nameValue.length > 2)
-                throw new IllegalArgumentException("bad parameter");
-
-            final String name = decode(nameValue[0], encoding);
+            String name = null;
             String value = null;
-            if (nameValue.length == 2)
-                value = decode(nameValue[1], encoding);
+            String token = scanner.next();
+            int i = token.indexOf(NAME_VALUE_SEPARATOR);
+            if (i != -1) {
+                name = decode(token.substring(0, i).trim(), charset);
+                value = decode(token.substring(i + 1).trim(), charset);
+            } else {
+                name = decode(token.trim(), charset);
+            }
             parameters.add(new BasicNameValuePair(name, value));
         }
     }
@@ -188,12 +179,12 @@ public static void parse (
      *
      * @param s
      *            text to parse.
-     * @param encoding
+     * @param charset
      *            Encoding to use when decoding the parameters.
      *
      * @since 4.2
      */
-    public static List<NameValuePair> parse (final String s, final String encoding) {
+    public static List<NameValuePair> parse (final String s, final Charset charset) {
         if (s == null) {
             return Collections.emptyList();
         }
@@ -206,8 +197,8 @@ public static List<NameValuePair> parse (final String s, final String encoding)
             NameValuePair nvp = parser.parseNameValuePair(buffer, cursor, DELIM);
             if (nvp.getName().length() > 0) {
                 list.add(new BasicNameValuePair(
-                        decode(nvp.getName(), encoding),
-                        decode(nvp.getValue(), encoding)));
+                        decode(nvp.getName(), charset),
+                        decode(nvp.getValue(), charset)));
             }
         }
         return list;
@@ -250,7 +241,7 @@ public static String format (
      */
     public static String format (
             final Iterable<? extends NameValuePair> parameters,
-            final String charset) {
+            final Charset charset) {
         final StringBuilder result = new StringBuilder();
         for (final NameValuePair parameter : parameters) {
             final String encodedName = encode(parameter.getName(), charset);
@@ -272,23 +263,37 @@ private static String decode (final String content, final String charset) {
             return null;
         }
         try {
-            return URLDecoder.decode(content,
-                    charset != null ? charset : HTTP.DEFAULT_CONTENT_CHARSET);
-        } catch (UnsupportedEncodingException problem) {
-            throw new IllegalArgumentException(problem);
+            return URLDecoder.decode(content, 
+                    charset != null ? charset : HTTP.DEF_CONTENT_CHARSET.name());
+        } catch (UnsupportedEncodingException ex) {
+            throw new IllegalArgumentException(ex);
         }
     }
 
+    private static String decode (final String content, final Charset charset) {
+        if (content == null) {
+            return null;
+        }
+        return decode(content, charset != null ? charset.name() : null);
+    }
+
     private static String encode (final String content, final String charset) {
         if (content == null) {
             return null;
         }
         try {
-            return URLEncoder.encode(content,
-                    charset != null ? charset : HTTP.DEFAULT_CONTENT_CHARSET);
-        } catch (UnsupportedEncodingException problem) {
-            throw new IllegalArgumentException(problem);
+            return URLEncoder.encode(content, 
+                    charset != null ? charset : HTTP.DEF_CONTENT_CHARSET.name());
+        } catch (UnsupportedEncodingException ex) {
+            throw new IllegalArgumentException(ex);
+        }
+    }
+
+    private static String encode (final String content, final Charset charset) {
+        if (content == null) {
+            return null;
         }
+        return encode(content, charset != null ? charset.name() : null);
     }
 
 }
diff --git a/httpclient/src/main/java/org/apache/http/conn/BasicManagedEntity.java b/httpclient/src/main/java/org/apache/http/conn/BasicManagedEntity.java
index 81df17e1ba..3f6975cedc 100644
--- a/httpclient/src/main/java/org/apache/http/conn/BasicManagedEntity.java
+++ b/httpclient/src/main/java/org/apache/http/conn/BasicManagedEntity.java
@@ -30,6 +30,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.net.SocketException;
 
 import org.apache.http.annotation.NotThreadSafe;
 
@@ -103,7 +104,9 @@ private void ensureConsumed() throws IOException {
         }
     }
 
-    @Deprecated
+    /**
+     * @deprecated (4.1) Use {@link EntityUtils#consume(HttpEntity)}
+     */
     @Override
     public void consumeContent() throws IOException {
         ensureConsumed();
@@ -147,10 +150,17 @@ public boolean eofDetected(InputStream wrapped) throws IOException {
     public boolean streamClosed(InputStream wrapped) throws IOException {
         try {
             if (attemptReuse && (managedConn != null)) {
+                boolean valid = managedConn.isOpen();
                 // this assumes that closing the stream will
                 // consume the remainder of the response body:
-                wrapped.close();
-                managedConn.markReusable();
+                try {
+                    wrapped.close();
+                    managedConn.markReusable();
+                } catch (SocketException ex) {
+                    if (valid) {
+                        throw ex;
+                    }
+                }
             }
         } finally {
             releaseManagedConnection();
diff --git a/httpclient/src/main/java/org/apache/http/conn/MultihomePlainSocketFactory.java b/httpclient/src/main/java/org/apache/http/conn/MultihomePlainSocketFactory.java
index 551477feae..22fa0a7451 100644
--- a/httpclient/src/main/java/org/apache/http/conn/MultihomePlainSocketFactory.java
+++ b/httpclient/src/main/java/org/apache/http/conn/MultihomePlainSocketFactory.java
@@ -53,7 +53,7 @@
  *
  * @since 4.0
  *
- * @deprecated Do not use. For multihome support socket factories must implement
+ * @deprecated (4.1)  Do not use. For multihome support socket factories must implement
  * {@link SchemeSocketFactory} interface.
  */
 @Deprecated
diff --git a/httpclient/src/main/java/org/apache/http/conn/params/ConnConnectionPNames.java b/httpclient/src/main/java/org/apache/http/conn/params/ConnConnectionPNames.java
index 7c46bf1f50..a6d66b00f3 100644
--- a/httpclient/src/main/java/org/apache/http/conn/params/ConnConnectionPNames.java
+++ b/httpclient/src/main/java/org/apache/http/conn/params/ConnConnectionPNames.java
@@ -26,7 +26,7 @@
 
 package org.apache.http.conn.params;
 
-import org.apache.http.impl.conn.DefaultResponseParser;
+import org.apache.http.impl.conn.DefaultHttpResponseParser;
 
 /**
  * Parameter names for HTTP client connections.
@@ -53,7 +53,7 @@ public interface ConnConnectionPNames {
      * Use {@link java.lang.Integer#MAX_VALUE} for unlimited number.
      * </p>
      *
-     * @deprecated Use custom {@link DefaultResponseParser} implementation
+     * @deprecated Use custom {@link DefaultHttpResponseParser} implementation
      */
     public static final String MAX_STATUS_LINE_GARBAGE = "http.connection.max-status-line-garbage";
 
diff --git a/httpclient/src/main/java/org/apache/http/conn/params/ConnConnectionParamBean.java b/httpclient/src/main/java/org/apache/http/conn/params/ConnConnectionParamBean.java
index 1be0c6d1b6..eac4c52095 100644
--- a/httpclient/src/main/java/org/apache/http/conn/params/ConnConnectionParamBean.java
+++ b/httpclient/src/main/java/org/apache/http/conn/params/ConnConnectionParamBean.java
@@ -27,9 +27,7 @@
 
 package org.apache.http.conn.params;
 
-import org.apache.http.annotation.NotThreadSafe;
-
-import org.apache.http.impl.conn.DefaultResponseParser;
+import org.apache.http.impl.conn.DefaultHttpResponseParser;
 import org.apache.http.params.HttpAbstractParamBean;
 import org.apache.http.params.HttpParams;
 
@@ -39,9 +37,10 @@
  * using Java Beans conventions.
  *
  * @since 4.0
+ * 
+ * @deprecated (4.2) do not use
  */
-@NotThreadSafe
-@Deprecated
+@Deprecated 
 public class ConnConnectionParamBean extends HttpAbstractParamBean {
 
     public ConnConnectionParamBean (final HttpParams params) {
@@ -49,7 +48,7 @@ public ConnConnectionParamBean (final HttpParams params) {
     }
 
     /**
-     * @deprecated Use custom {@link DefaultResponseParser} implementation
+     * @deprecated (4.2)  Use custom {@link DefaultHttpResponseParser} implementation
      */
     public void setMaxStatusLineGarbage (final int maxStatusLineGarbage) {
         params.setIntParameter(ConnConnectionPNames.MAX_STATUS_LINE_GARBAGE, maxStatusLineGarbage);
diff --git a/httpclient/src/main/java/org/apache/http/conn/params/ConnManagerPNames.java b/httpclient/src/main/java/org/apache/http/conn/params/ConnManagerPNames.java
index f0eaeb3b3e..375838b8de 100644
--- a/httpclient/src/main/java/org/apache/http/conn/params/ConnManagerPNames.java
+++ b/httpclient/src/main/java/org/apache/http/conn/params/ConnManagerPNames.java
@@ -26,15 +26,14 @@
 
 package org.apache.http.conn.params;
 
-import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
-import org.apache.http.params.CoreConnectionPNames;
-
 /**
  * Parameter names for connection managers in HttpConn.
  *
  * @since 4.0
- */
-@Deprecated
+ * 
+ * @deprecated (4.1.2) use configuration methods of the specific connection manager implementation.
+*/
+@Deprecated 
 public interface ConnManagerPNames {
 
     /**
@@ -43,10 +42,7 @@ public interface ConnManagerPNames {
      * {@link org.apache.http.conn.ClientConnectionManager}.
      * <p>
      * This parameter expects a value of type {@link Long}.
-     * <p>
-     * @deprecated use {@link CoreConnectionPNames#CONNECTION_TIMEOUT}
      */
-    @Deprecated
     public static final String TIMEOUT = "http.conn-manager.timeout";
 
     /**
@@ -56,10 +52,7 @@ public interface ConnManagerPNames {
      * <p>
      * This parameter expects a value of type {@link ConnPerRoute}.
      * <p>
-     * @deprecated use {@link ThreadSafeClientConnManager#setMaxForRoute(org.apache.http.conn.routing.HttpRoute, int)},
-     *  {@link ThreadSafeClientConnManager#getMaxForRoute(org.apache.http.conn.routing.HttpRoute)}
      */
-    @Deprecated
     public static final String MAX_CONNECTIONS_PER_ROUTE = "http.conn-manager.max-per-route";
 
     /**
@@ -68,11 +61,7 @@ public interface ConnManagerPNames {
      * and applies to individual manager instances.
      * <p>
      * This parameter expects a value of type {@link Integer}.
-     * <p>
-     * @deprecated use {@link ThreadSafeClientConnManager#setMaxTotal(int)},
-     *  {@link ThreadSafeClientConnManager#getMaxTotal()}
      */
-    @Deprecated
     public static final String MAX_TOTAL_CONNECTIONS = "http.conn-manager.max-total";
 
 }
diff --git a/httpclient/src/main/java/org/apache/http/conn/params/ConnManagerParamBean.java b/httpclient/src/main/java/org/apache/http/conn/params/ConnManagerParamBean.java
index ecd854719b..953af49231 100644
--- a/httpclient/src/main/java/org/apache/http/conn/params/ConnManagerParamBean.java
+++ b/httpclient/src/main/java/org/apache/http/conn/params/ConnManagerParamBean.java
@@ -38,9 +38,11 @@
  * using Java Beans conventions.
  *
  * @since 4.0
+ * 
+ * @deprecated (4.1.2) use configuration methods of the specific connection manager implementation.
  */
 @NotThreadSafe
-@Deprecated
+@Deprecated 
 public class ConnManagerParamBean extends HttpAbstractParamBean {
 
     public ConnManagerParamBean (final HttpParams params) {
@@ -51,14 +53,10 @@ public void setTimeout (final long timeout) {
         params.setLongParameter(ConnManagerPNames.TIMEOUT, timeout);
     }
 
-    /** @see ConnManagerPNames#MAX_TOTAL_CONNECTIONS */
-    @Deprecated
     public void setMaxTotalConnections (final int maxConnections) {
         params.setIntParameter(ConnManagerPNames.MAX_TOTAL_CONNECTIONS, maxConnections);
     }
 
-    /** @see ConnManagerPNames#MAX_CONNECTIONS_PER_ROUTE */
-    @Deprecated
     public void setConnectionsPerRoute(final ConnPerRouteBean connPerRoute) {
         params.setParameter(ConnManagerPNames.MAX_CONNECTIONS_PER_ROUTE, connPerRoute);
     }
diff --git a/httpclient/src/main/java/org/apache/http/conn/params/ConnManagerParams.java b/httpclient/src/main/java/org/apache/http/conn/params/ConnManagerParams.java
index 58eac1940c..bcb9a2d62b 100644
--- a/httpclient/src/main/java/org/apache/http/conn/params/ConnManagerParams.java
+++ b/httpclient/src/main/java/org/apache/http/conn/params/ConnManagerParams.java
@@ -29,7 +29,6 @@
 import org.apache.http.annotation.Immutable;
 
 import org.apache.http.conn.routing.HttpRoute;
-import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
 import org.apache.http.params.HttpConnectionParams;
 import org.apache.http.params.HttpParams;
 
@@ -40,8 +39,10 @@
  * @since 4.0
  *
  * @see ConnManagerPNames
+ * 
+ * @deprecated (4.1.2) use configuration methods of the specific connection manager implementation.
  */
-@Deprecated
+@Deprecated 
 @Immutable
 public final class ConnManagerParams implements ConnManagerPNames {
 
@@ -55,9 +56,8 @@ public final class ConnManagerParams implements ConnManagerPNames {
      *
      * @return timeout in milliseconds.
      *
-     * @deprecated use {@link HttpConnectionParams#getConnectionTimeout(HttpParams)}
+     * @deprecated (4.1)  use {@link HttpConnectionParams#getConnectionTimeout(HttpParams)}
      */
-    @Deprecated
     public static long getTimeout(final HttpParams params) {
         if (params == null) {
             throw new IllegalArgumentException("HTTP parameters may not be null");
@@ -72,9 +72,8 @@ public static long getTimeout(final HttpParams params) {
      *
      * @param timeout the timeout in milliseconds
      *
-     * @deprecated use {@link HttpConnectionParams#setConnectionTimeout(HttpParams, int)}
+     * @deprecated (4.1)  use {@link HttpConnectionParams#setConnectionTimeout(HttpParams, int)}
      */
-    @Deprecated
     public static void setTimeout(final HttpParams params, long timeout) {
         if (params == null) {
             throw new IllegalArgumentException("HTTP parameters may not be null");
@@ -97,10 +96,7 @@ public int getMaxForRoute(HttpRoute route) {
      * @param params HTTP parameters
      * @param connPerRoute lookup interface for maximum number of connections allowed
      *        per route
-     *
-     * @deprecated use {@link ThreadSafeClientConnManager#setMaxForRoute(org.apache.http.conn.routing.HttpRoute, int)}
      */
-    @Deprecated
     public static void setMaxConnectionsPerRoute(final HttpParams params,
                                                 final ConnPerRoute connPerRoute) {
         if (params == null) {
@@ -116,10 +112,7 @@ public static void setMaxConnectionsPerRoute(final HttpParams params,
      * @param params HTTP parameters
      *
      * @return lookup interface for maximum number of connections allowed per route.
-     *
-     * @deprecated use {@link ThreadSafeClientConnManager#getMaxForRoute(org.apache.http.conn.routing.HttpRoute)}
      */
-    @Deprecated
     public static ConnPerRoute getMaxConnectionsPerRoute(final HttpParams params) {
         if (params == null) {
             throw new IllegalArgumentException
@@ -137,10 +130,7 @@ public static ConnPerRoute getMaxConnectionsPerRoute(final HttpParams params) {
      *
      * @param params HTTP parameters
      * @param maxTotalConnections The maximum number of connections allowed.
-     *
-     * @deprecated use {@link ThreadSafeClientConnManager#setMaxTotal(int)}
      */
-    @Deprecated
     public static void setMaxTotalConnections(
             final HttpParams params,
             int maxTotalConnections) {
@@ -157,10 +147,7 @@ public static void setMaxTotalConnections(
      * @param params HTTP parameters
      *
      * @return The maximum number of connections allowed.
-     *
-     * @deprecated use {@link ThreadSafeClientConnManager#getMaxTotal()}
      */
-    @Deprecated
     public static int getMaxTotalConnections(
             final HttpParams params) {
         if (params == null) {
diff --git a/httpclient/src/main/java/org/apache/http/conn/params/ConnPerRouteBean.java b/httpclient/src/main/java/org/apache/http/conn/params/ConnPerRouteBean.java
index 73476511b2..be49a5380d 100644
--- a/httpclient/src/main/java/org/apache/http/conn/params/ConnPerRouteBean.java
+++ b/httpclient/src/main/java/org/apache/http/conn/params/ConnPerRouteBean.java
@@ -42,9 +42,9 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link ConnPoolControl}
+ * @deprecated (4.2)  use {@link ConnPoolControl}
  */
-@Deprecated
+@Deprecated 
 @ThreadSafe
 public final class ConnPerRouteBean implements ConnPerRoute {
 
@@ -65,10 +65,6 @@ public ConnPerRouteBean() {
         this(DEFAULT_MAX_CONNECTIONS_PER_ROUTE);
     }
 
-    /**
-     * @deprecated Use {@link #getDefaultMaxPerRoute()} instead
-     */
-    @Deprecated
     public int getDefaultMax() {
         return this.defaultMax;
     }
diff --git a/httpclient/src/main/java/org/apache/http/conn/scheme/HostNameResolver.java b/httpclient/src/main/java/org/apache/http/conn/scheme/HostNameResolver.java
index d325f424c3..b2f2f88e60 100644
--- a/httpclient/src/main/java/org/apache/http/conn/scheme/HostNameResolver.java
+++ b/httpclient/src/main/java/org/apache/http/conn/scheme/HostNameResolver.java
@@ -35,9 +35,9 @@
  *
  * @since 4.0
  *
- * @deprecated Do not use
+ * @deprecated (4.1)  Do not use
  */
-@Deprecated
+@Deprecated 
 public interface HostNameResolver {
 
     /**
diff --git a/httpclient/src/main/java/org/apache/http/conn/scheme/LayeredSchemeSocketFactory.java b/httpclient/src/main/java/org/apache/http/conn/scheme/LayeredSchemeSocketFactory.java
index abedca18ff..4a01bd1192 100644
--- a/httpclient/src/main/java/org/apache/http/conn/scheme/LayeredSchemeSocketFactory.java
+++ b/httpclient/src/main/java/org/apache/http/conn/scheme/LayeredSchemeSocketFactory.java
@@ -36,7 +36,7 @@
  *
  * @since 4.1
  * 
- * @deprecated use {@link SchemeLayeredSocketFactory}
+ * @deprecated (4.2)  use {@link SchemeLayeredSocketFactory}
  */
 @Deprecated
 public interface LayeredSchemeSocketFactory extends SchemeSocketFactory {
diff --git a/httpclient/src/main/java/org/apache/http/conn/scheme/LayeredSocketFactory.java b/httpclient/src/main/java/org/apache/http/conn/scheme/LayeredSocketFactory.java
index 3dd75811f8..8cc1bc939c 100644
--- a/httpclient/src/main/java/org/apache/http/conn/scheme/LayeredSocketFactory.java
+++ b/httpclient/src/main/java/org/apache/http/conn/scheme/LayeredSocketFactory.java
@@ -37,9 +37,9 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link SchemeSocketFactory}
+ * @deprecated (4.1)  use {@link SchemeSocketFactory}
  */
-@Deprecated
+@Deprecated 
 public interface LayeredSocketFactory extends SocketFactory {
 
     /**
diff --git a/httpclient/src/main/java/org/apache/http/conn/scheme/LayeredSocketFactoryAdaptor.java b/httpclient/src/main/java/org/apache/http/conn/scheme/LayeredSocketFactoryAdaptor.java
index 7843435d8e..f761778338 100644
--- a/httpclient/src/main/java/org/apache/http/conn/scheme/LayeredSocketFactoryAdaptor.java
+++ b/httpclient/src/main/java/org/apache/http/conn/scheme/LayeredSocketFactoryAdaptor.java
@@ -31,6 +31,9 @@
 import java.net.Socket;
 import java.net.UnknownHostException;
 
+/**
+ * @deprecated (4.1) do not use
+ */
 @Deprecated
 class LayeredSocketFactoryAdaptor extends SocketFactoryAdaptor implements LayeredSocketFactory {
 
diff --git a/httpclient/src/main/java/org/apache/http/conn/scheme/PlainSocketFactory.java b/httpclient/src/main/java/org/apache/http/conn/scheme/PlainSocketFactory.java
index 2de278e999..72f7279466 100644
--- a/httpclient/src/main/java/org/apache/http/conn/scheme/PlainSocketFactory.java
+++ b/httpclient/src/main/java/org/apache/http/conn/scheme/PlainSocketFactory.java
@@ -37,6 +37,7 @@
 import org.apache.http.annotation.Immutable;
 
 import org.apache.http.conn.ConnectTimeoutException;
+import org.apache.http.conn.DnsResolver;
 import org.apache.http.params.HttpConnectionParams;
 import org.apache.http.params.HttpParams;
 
@@ -67,6 +68,9 @@ public static PlainSocketFactory getSocketFactory() {
         return new PlainSocketFactory();
     }
 
+    /**
+     * @deprecated (4.1) use {@link DnsResolver}
+     */
     @Deprecated
     public PlainSocketFactory(final HostNameResolver nameResolver) {
         super();
@@ -153,7 +157,7 @@ public final boolean isSecure(Socket sock)
     }
 
     /**
-     * @deprecated Use {@link #connectSocket(Socket, InetSocketAddress, InetSocketAddress, HttpParams)}
+     * @deprecated (4.1)  Use {@link #connectSocket(Socket, InetSocketAddress, InetSocketAddress, HttpParams)}
      */
     @Deprecated
     public Socket connectSocket(
diff --git a/httpclient/src/main/java/org/apache/http/conn/scheme/Scheme.java b/httpclient/src/main/java/org/apache/http/conn/scheme/Scheme.java
index 7dbb4176a7..c022639c3e 100644
--- a/httpclient/src/main/java/org/apache/http/conn/scheme/Scheme.java
+++ b/httpclient/src/main/java/org/apache/http/conn/scheme/Scheme.java
@@ -117,9 +117,9 @@ public Scheme(final String name, final int port, final SchemeSocketFactory facto
      *                  with this scheme
      * @param port      the default port for this scheme
      *
-     * @deprecated Use {@link #Scheme(String, int, SchemeSocketFactory)}
+     * @deprecated (4.1)  Use {@link #Scheme(String, int, SchemeSocketFactory)}
      */
-    @Deprecated
+    @Deprecated 
     public Scheme(final String name,
                   final SocketFactory factory,
                   final int port) {
@@ -166,7 +166,7 @@ public final int getDefaultPort() {
      *
      * @return  the socket factory for this scheme
      *
-     * @deprecated Use {@link #getSchemeSocketFactory()}
+     * @deprecated (4.1)  Use {@link #getSchemeSocketFactory()}
      */
     @Deprecated
     public final SocketFactory getSocketFactory() {
diff --git a/httpclient/src/main/java/org/apache/http/conn/scheme/SchemeLayeredSocketFactoryAdaptor.java b/httpclient/src/main/java/org/apache/http/conn/scheme/SchemeLayeredSocketFactoryAdaptor.java
index 39aef843ff..38d45e2580 100644
--- a/httpclient/src/main/java/org/apache/http/conn/scheme/SchemeLayeredSocketFactoryAdaptor.java
+++ b/httpclient/src/main/java/org/apache/http/conn/scheme/SchemeLayeredSocketFactoryAdaptor.java
@@ -33,6 +33,9 @@
 
 import org.apache.http.params.HttpParams;
 
+/**
+ * @deprecated (4.2) do not use
+ */
 @Deprecated
 class SchemeLayeredSocketFactoryAdaptor extends SchemeSocketFactoryAdaptor
     implements SchemeLayeredSocketFactory {
diff --git a/httpclient/src/main/java/org/apache/http/conn/scheme/SchemeLayeredSocketFactoryAdaptor2.java b/httpclient/src/main/java/org/apache/http/conn/scheme/SchemeLayeredSocketFactoryAdaptor2.java
index 3e2e9fd6e2..12c1577468 100644
--- a/httpclient/src/main/java/org/apache/http/conn/scheme/SchemeLayeredSocketFactoryAdaptor2.java
+++ b/httpclient/src/main/java/org/apache/http/conn/scheme/SchemeLayeredSocketFactoryAdaptor2.java
@@ -35,7 +35,10 @@
 import org.apache.http.conn.ConnectTimeoutException;
 import org.apache.http.params.HttpParams;
 
-@Deprecated
+/**
+ * @deprecated (4.2) do not use
+ */
+@Deprecated 
 class SchemeLayeredSocketFactoryAdaptor2 implements SchemeLayeredSocketFactory {
 
     private final LayeredSchemeSocketFactory factory;
diff --git a/httpclient/src/main/java/org/apache/http/conn/scheme/SchemeSocketFactoryAdaptor.java b/httpclient/src/main/java/org/apache/http/conn/scheme/SchemeSocketFactoryAdaptor.java
index 077e664e2d..8aeac0fc11 100644
--- a/httpclient/src/main/java/org/apache/http/conn/scheme/SchemeSocketFactoryAdaptor.java
+++ b/httpclient/src/main/java/org/apache/http/conn/scheme/SchemeSocketFactoryAdaptor.java
@@ -36,6 +36,9 @@
 import org.apache.http.conn.ConnectTimeoutException;
 import org.apache.http.params.HttpParams;
 
+/**
+ * @deprecated (4.1) do not use
+ */
 @Deprecated
 class SchemeSocketFactoryAdaptor implements SchemeSocketFactory {
 
diff --git a/httpclient/src/main/java/org/apache/http/conn/scheme/SocketFactory.java b/httpclient/src/main/java/org/apache/http/conn/scheme/SocketFactory.java
index f086a443a5..99cbf50308 100644
--- a/httpclient/src/main/java/org/apache/http/conn/scheme/SocketFactory.java
+++ b/httpclient/src/main/java/org/apache/http/conn/scheme/SocketFactory.java
@@ -41,7 +41,7 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link SchemeSocketFactory}
+ * @deprecated (4.1)  use {@link SchemeSocketFactory}
  */
 @Deprecated
 public interface SocketFactory {
diff --git a/httpclient/src/main/java/org/apache/http/conn/scheme/SocketFactoryAdaptor.java b/httpclient/src/main/java/org/apache/http/conn/scheme/SocketFactoryAdaptor.java
index f8f0017704..1716189d8d 100644
--- a/httpclient/src/main/java/org/apache/http/conn/scheme/SocketFactoryAdaptor.java
+++ b/httpclient/src/main/java/org/apache/http/conn/scheme/SocketFactoryAdaptor.java
@@ -37,6 +37,9 @@
 import org.apache.http.params.BasicHttpParams;
 import org.apache.http.params.HttpParams;
 
+/**
+ * @deprecated (4.1) do not use
+ */
 @Deprecated
 class SocketFactoryAdaptor implements SocketFactory {
 
diff --git a/httpclient/src/main/java/org/apache/http/conn/ssl/SSLInitializationException.java b/httpclient/src/main/java/org/apache/http/conn/ssl/SSLInitializationException.java
new file mode 100644
index 0000000000..defd7e1cdf
--- /dev/null
+++ b/httpclient/src/main/java/org/apache/http/conn/ssl/SSLInitializationException.java
@@ -0,0 +1,37 @@
+/*
+ * ====================================================================
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ *
+ */
+package org.apache.http.conn.ssl;
+
+public class SSLInitializationException extends IllegalStateException {
+
+    private static final long serialVersionUID = -8243587425648536702L;
+
+    public SSLInitializationException(final String message, final Throwable cause) {
+        super(message, cause);
+    }    
+    
+}
diff --git a/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java b/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java
index d736c8fd2a..632a04f261 100644
--- a/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java
+++ b/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java
@@ -171,7 +171,7 @@ public class SSLSocketFactory implements SchemeLayeredSocketFactory,
      *
      * @return the default SSL socket factory
      */
-    public static SSLSocketFactory getSocketFactory() {
+    public static SSLSocketFactory getSocketFactory() throws SSLInitializationException {
         return new SSLSocketFactory(createDefaultSSLContext());
     }
 
@@ -200,7 +200,7 @@ public static SSLSocketFactory getSocketFactory() {
      *
      * @return the system SSL socket factory
      */
-    public static SSLSocketFactory getSystemSocketFactory() {
+    public static SSLSocketFactory getSystemSocketFactory() throws SSLInitializationException {
         return new SSLSocketFactory(createSystemSSLContext());
     }
 
@@ -242,7 +242,7 @@ private static SSLContext createSSLContext(
         sslcontext.init(keymanagers, trustmanagers, random);
         return sslcontext;
     }
-
+    
     private static SSLContext createSystemSSLContext(
             String algorithm,
             final SecureRandom random) throws IOException, NoSuchAlgorithmException, NoSuchProviderException,
@@ -296,12 +296,9 @@ private static SSLContext createSystemSSLContext(
                 tmfactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
                 KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
                 String trustStorePassword = System.getProperty("javax.net.ssl.trustStorePassword");
-                if (trustStorePassword == null) {
-                    trustStorePassword = "changeit";
-                }
                 FileInputStream instream = new FileInputStream(trustStoreFile);
                 try {
-                    trustStore.load(instream, trustStorePassword.toCharArray());
+                    trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : null);
                 } finally {
                     instream.close();
                 }
@@ -356,19 +353,19 @@ private static SSLContext createSystemSSLContext(
         return sslcontext;
     }
 
-    private static SSLContext createDefaultSSLContext() {
+    private static SSLContext createDefaultSSLContext() throws SSLInitializationException {
         try {
             return createSSLContext(TLS, null, null, null, null, null);
         } catch (Exception ex) {
-            throw new IllegalStateException("Failure initializing default SSL context", ex);
+            throw new SSLInitializationException("Failure initializing default SSL context", ex);
         }
     }
 
-    private static SSLContext createSystemSSLContext() {
+    private static SSLContext createSystemSSLContext() throws SSLInitializationException {
         try {
             return createSystemSSLContext(TLS, null);
         } catch (Exception ex) {
-            throw new IllegalStateException("Failure initializing default system SSL context", ex);
+            throw new SSLInitializationException("Failure initializing default system SSL context", ex);
         }
     }
 
@@ -484,11 +481,28 @@ public SSLSocketFactory(
     public SSLSocketFactory(
             final SSLContext sslContext, final X509HostnameVerifier hostnameVerifier) {
         super();
+        if (sslContext == null) {
+            throw new IllegalArgumentException("SSL context may not be null");
+        }
         this.socketfactory = sslContext.getSocketFactory();
         this.hostnameVerifier = hostnameVerifier;
         this.nameResolver = null;
     }
 
+    /**
+     * @since 4.2
+     */
+    public SSLSocketFactory(
+            final javax.net.ssl.SSLSocketFactory socketfactory, 
+            final X509HostnameVerifier hostnameVerifier) {
+        if (socketfactory == null) {
+            throw new IllegalArgumentException("SSL socket factory may not be null");
+        }
+        this.socketfactory = socketfactory;
+        this.hostnameVerifier = hostnameVerifier;
+        this.nameResolver = null;
+    }
+
     /**
      * @param params Optional parameters. Parameters passed to this method will have no effect.
      *               This method will create a unconnected instance of {@link Socket} class.
@@ -521,7 +535,7 @@ public Socket connectSocket(
         if (params == null) {
             throw new IllegalArgumentException("HTTP parameters may not be null");
         }
-        Socket sock = socket != null ? socket : new Socket();
+        Socket sock = socket != null ? socket : this.socketfactory.createSocket();
         if (localAddress != null) {
             sock.setReuseAddress(HttpConnectionParams.getSoReuseaddr(params));
             sock.bind(localAddress);
diff --git a/httpclient/src/main/java/org/apache/http/impl/auth/BasicScheme.java b/httpclient/src/main/java/org/apache/http/impl/auth/BasicScheme.java
index e6bd672fec..05349036e9 100644
--- a/httpclient/src/main/java/org/apache/http/impl/auth/BasicScheme.java
+++ b/httpclient/src/main/java/org/apache/http/impl/auth/BasicScheme.java
@@ -33,6 +33,7 @@
 import org.apache.http.HttpRequest;
 import org.apache.http.auth.AuthenticationException;
 import org.apache.http.auth.ChallengeState;
+import org.apache.http.auth.ContextAwareAuthScheme;
 import org.apache.http.auth.Credentials;
 import org.apache.http.auth.AUTH;
 import org.apache.http.auth.InvalidCredentialsException;
@@ -119,6 +120,9 @@ public boolean isConnectionBased() {
         return false;
     }
 
+    /**
+     * @deprecated (4.2) Use {@link ContextAwareAuthScheme#authenticate(Credentials, HttpRequest, org.apache.http.protocol.HttpContext)}
+     */
     @Deprecated
     public Header authenticate(
             final Credentials credentials, final HttpRequest request) throws AuthenticationException {
diff --git a/httpclient/src/main/java/org/apache/http/impl/auth/DigestScheme.java b/httpclient/src/main/java/org/apache/http/impl/auth/DigestScheme.java
index 66bf6ac80d..f183cb5151 100644
--- a/httpclient/src/main/java/org/apache/http/impl/auth/DigestScheme.java
+++ b/httpclient/src/main/java/org/apache/http/impl/auth/DigestScheme.java
@@ -45,6 +45,7 @@
 import org.apache.http.HttpRequest;
 import org.apache.http.auth.AuthenticationException;
 import org.apache.http.auth.ChallengeState;
+import org.apache.http.auth.ContextAwareAuthScheme;
 import org.apache.http.auth.Credentials;
 import org.apache.http.auth.AUTH;
 import org.apache.http.auth.MalformedChallengeException;
@@ -177,7 +178,10 @@ public void overrideParamter(final String name, final String value) {
         getParameters().put(name, value);
     }
 
-    @Deprecated
+    /**
+     * @deprecated (4.2) Use {@link ContextAwareAuthScheme#authenticate(Credentials, HttpRequest, org.apache.http.protocol.HttpContext)}
+     */
+    @Deprecated 
     public Header authenticate(
             final Credentials credentials, final HttpRequest request) throws AuthenticationException {
         return authenticate(credentials, request, new BasicHttpContext());
diff --git a/httpclient/src/main/java/org/apache/http/impl/auth/GGSSchemeBase.java b/httpclient/src/main/java/org/apache/http/impl/auth/GGSSchemeBase.java
index 330655bb0b..075c0a1362 100644
--- a/httpclient/src/main/java/org/apache/http/impl/auth/GGSSchemeBase.java
+++ b/httpclient/src/main/java/org/apache/http/impl/auth/GGSSchemeBase.java
@@ -32,6 +32,7 @@
 import org.apache.http.HttpHost;
 import org.apache.http.HttpRequest;
 import org.apache.http.auth.AuthenticationException;
+import org.apache.http.auth.ContextAwareAuthScheme;
 import org.apache.http.auth.Credentials;
 import org.apache.http.auth.InvalidCredentialsException;
 import org.apache.http.auth.MalformedChallengeException;
@@ -45,6 +46,9 @@
 import org.ietf.jgss.GSSName;
 import org.ietf.jgss.Oid;
 
+/**
+ * @since 4.2
+ */
 public abstract class GGSSchemeBase extends AuthSchemeBase {
 
     enum State {
@@ -102,7 +106,10 @@ public boolean isComplete() {
         return this.state == State.TOKEN_GENERATED || this.state == State.FAILED;
     }
 
-    @Deprecated
+    /**
+     * @deprecated (4.2) Use {@link ContextAwareAuthScheme#authenticate(Credentials, HttpRequest, org.apache.http.protocol.HttpContext)}
+     */
+    @Deprecated 
     public Header authenticate(
             final Credentials credentials,
             final HttpRequest request) throws AuthenticationException {
diff --git a/httpclient/src/main/java/org/apache/http/impl/auth/NegotiateScheme.java b/httpclient/src/main/java/org/apache/http/impl/auth/NegotiateScheme.java
index 5d3e846057..463e961bfd 100644
--- a/httpclient/src/main/java/org/apache/http/impl/auth/NegotiateScheme.java
+++ b/httpclient/src/main/java/org/apache/http/impl/auth/NegotiateScheme.java
@@ -43,7 +43,7 @@
  *
  * @since 4.1
  *
- * @deprecated use {@link SPNegoScheme} or {@link KerberosScheme}.
+ * @deprecated (4.2)  use {@link SPNegoScheme} or {@link KerberosScheme}.
  */
 @Deprecated
 public class NegotiateScheme extends GGSSchemeBase {
@@ -81,6 +81,12 @@ public String getSchemeName() {
         return "Negotiate";
     }
 
+    public Header authenticate(
+            final Credentials credentials,
+            final HttpRequest request) throws AuthenticationException {
+        return authenticate(credentials, request, null);
+    }
+
     /**
      * Produces Negotiate authorization Header based on token created by
      * processChallenge.
diff --git a/httpclient/src/main/java/org/apache/http/impl/auth/NegotiateSchemeFactory.java b/httpclient/src/main/java/org/apache/http/impl/auth/NegotiateSchemeFactory.java
index fb38d83e50..520e14df5a 100644
--- a/httpclient/src/main/java/org/apache/http/impl/auth/NegotiateSchemeFactory.java
+++ b/httpclient/src/main/java/org/apache/http/impl/auth/NegotiateSchemeFactory.java
@@ -36,9 +36,9 @@
  *
  * @since 4.1
  *
- * @deprecated
+ * @deprecated (4.2)  use {@link SPNegoSchemeFactory} or {@link KerberosSchemeFactory}.
  */
-@Deprecated
+@Deprecated 
 public class NegotiateSchemeFactory implements AuthSchemeFactory {
 
     private final SpnegoTokenGenerator spengoGenerator;
diff --git a/httpclient/src/main/java/org/apache/http/impl/auth/SpnegoTokenGenerator.java b/httpclient/src/main/java/org/apache/http/impl/auth/SpnegoTokenGenerator.java
index 0def2f4207..154e584f2e 100644
--- a/httpclient/src/main/java/org/apache/http/impl/auth/SpnegoTokenGenerator.java
+++ b/httpclient/src/main/java/org/apache/http/impl/auth/SpnegoTokenGenerator.java
@@ -36,7 +36,7 @@
  *
  * @since 4.1
  *
- * @deprecated subclass {@link KerberosScheme} and override
+ * @deprecated (4.2)  subclass {@link KerberosScheme} and override
  *   {@link KerberosScheme#generateGSSToken(byte[], org.ietf.jgss.Oid, String)}
  */
 @Deprecated
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/AbstractAuthenticationHandler.java b/httpclient/src/main/java/org/apache/http/impl/client/AbstractAuthenticationHandler.java
index 038fdbeb85..2976f4d74e 100644
--- a/httpclient/src/main/java/org/apache/http/impl/client/AbstractAuthenticationHandler.java
+++ b/httpclient/src/main/java/org/apache/http/impl/client/AbstractAuthenticationHandler.java
@@ -58,9 +58,9 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link AuthenticationStrategy}
+ * @deprecated (4.2)  use {@link AuthenticationStrategy}
  */
-@Deprecated
+@Deprecated 
 @Immutable
 public abstract class AbstractAuthenticationHandler implements AuthenticationHandler {
 
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/AbstractHttpClient.java b/httpclient/src/main/java/org/apache/http/impl/client/AbstractHttpClient.java
index 956b097f62..0f597d6f92 100644
--- a/httpclient/src/main/java/org/apache/http/impl/client/AbstractHttpClient.java
+++ b/httpclient/src/main/java/org/apache/http/impl/client/AbstractHttpClient.java
@@ -77,8 +77,8 @@
 import org.apache.http.impl.auth.KerberosSchemeFactory;
 import org.apache.http.impl.auth.NTLMSchemeFactory;
 import org.apache.http.impl.auth.SPNegoSchemeFactory;
+import org.apache.http.impl.conn.BasicClientConnectionManager;
 import org.apache.http.impl.conn.DefaultHttpRoutePlanner;
-import org.apache.http.impl.conn.PoolingClientConnectionManager;
 import org.apache.http.impl.conn.SchemeRegistryFactory;
 import org.apache.http.impl.cookie.BestMatchSpecFactory;
 import org.apache.http.impl.cookie.BrowserCompatSpecFactory;
@@ -327,7 +327,7 @@ protected ClientConnectionManager createClientConnectionManager() {
         if (factory != null) {
             connManager = factory.newInstance(params, registry);
         } else {
-            connManager = new PoolingClientConnectionManager(registry);
+            connManager = new BasicClientConnectionManager(registry);
         }
 
         return connManager;
@@ -382,70 +382,66 @@ protected HttpRequestExecutor createRequestExecutor() {
         return new HttpRequestExecutor();
     }
 
-
     protected ConnectionReuseStrategy createConnectionReuseStrategy() {
         return new DefaultConnectionReuseStrategy();
     }
 
-
     protected ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy() {
         return new DefaultConnectionKeepAliveStrategy();
     }
 
-
     protected HttpRequestRetryHandler createHttpRequestRetryHandler() {
         return new DefaultHttpRequestRetryHandler();
     }
 
-
-    @Deprecated
+    /**
+     * @deprecated (4.1) do not use
+     */
+    @Deprecated 
     protected RedirectHandler createRedirectHandler() {
         return new DefaultRedirectHandler();
     }
 
-
     protected AuthenticationStrategy createTargetAuthenticationStrategy() {
         return new TargetAuthenticationStrategy();
     }
 
-
-    @Deprecated
+    /**
+     * @deprecated (4.2) do not use
+     */
+    @Deprecated 
     protected AuthenticationHandler createTargetAuthenticationHandler() {
         return new DefaultTargetAuthenticationHandler();
     }
 
-
     protected AuthenticationStrategy createProxyAuthenticationStrategy() {
         return new ProxyAuthenticationStrategy();
     }
 
-
-    @Deprecated
+    /**
+     * @deprecated (4.2) do not use
+     */
+    @Deprecated 
     protected AuthenticationHandler createProxyAuthenticationHandler() {
         return new DefaultProxyAuthenticationHandler();
     }
 
-
     protected CookieStore createCookieStore() {
         return new BasicCookieStore();
     }
 
-
     protected CredentialsProvider createCredentialsProvider() {
         return new BasicCredentialsProvider();
     }
 
-
     protected HttpRoutePlanner createHttpRoutePlanner() {
         return new DefaultHttpRoutePlanner(getConnectionManager().getSchemeRegistry());
     }
 
-
     protected UserTokenHandler createUserTokenHandler() {
         return new DefaultUserTokenHandler();
     }
 
-
     // non-javadoc, see interface HttpClient
     public synchronized final HttpParams getParams() {
         if (defaultParams == null) {
@@ -454,7 +450,6 @@ public synchronized final HttpParams getParams() {
         return defaultParams;
     }
 
-
     /**
      * Replaces the parameters.
      * The implementation here does not update parameters of dependent objects.
@@ -553,19 +548,22 @@ public synchronized final HttpRequestRetryHandler getHttpRequestRetryHandler() {
         return retryHandler;
     }
 
-
     public synchronized void setHttpRequestRetryHandler(final HttpRequestRetryHandler handler) {
         this.retryHandler = handler;
     }
 
-
-    @Deprecated
+    /**
+     * @deprecated (4.1) do not use
+     */
+    @Deprecated 
     public synchronized final RedirectHandler getRedirectHandler() {
         return createRedirectHandler();
     }
 
-
-    @Deprecated
+    /**
+     * @deprecated (4.1) do not use
+     */
+    @Deprecated 
     public synchronized void setRedirectHandler(final RedirectHandler handler) {
         this.redirectStrategy = new DefaultRedirectStrategyAdaptor(handler);
     }
@@ -587,19 +585,22 @@ public synchronized void setRedirectStrategy(final RedirectStrategy strategy) {
         this.redirectStrategy = strategy;
     }
 
-
-    @Deprecated
+    /**
+     * @deprecated (4.2) do not use
+     */
+    @Deprecated 
     public synchronized final AuthenticationHandler getTargetAuthenticationHandler() {
         return createTargetAuthenticationHandler();
     }
 
-
-    @Deprecated
+    /**
+     * @deprecated (4.2) do not use
+     */
+    @Deprecated 
     public synchronized void setTargetAuthenticationHandler(final AuthenticationHandler handler) {
         this.targetAuthStrategy = new AuthenticationStrategyAdaptor(handler);
     }
 
-
     /**
      * @since 4.2
      */
@@ -610,7 +611,6 @@ public synchronized final AuthenticationStrategy getTargetAuthenticationStrategy
         return targetAuthStrategy;
     }
 
-
     /**
      * @since 4.2
      */
@@ -618,19 +618,22 @@ public synchronized void setTargetAuthenticationStrategy(final AuthenticationStr
         this.targetAuthStrategy = strategy;
     }
 
-
-    @Deprecated
+    /**
+     * @deprecated (4.2) do not use
+     */
+    @Deprecated 
     public synchronized final AuthenticationHandler getProxyAuthenticationHandler() {
         return createProxyAuthenticationHandler();
     }
 
-
-    @Deprecated
+    /**
+     * @deprecated (4.2) do not use
+     */
+    @Deprecated 
     public synchronized void setProxyAuthenticationHandler(final AuthenticationHandler handler) {
         this.proxyAuthStrategy = new AuthenticationStrategyAdaptor(handler);
     }
 
-
     /**
      * @since 4.2
      */
@@ -641,7 +644,6 @@ public synchronized final AuthenticationStrategy getProxyAuthenticationStrategy(
         return proxyAuthStrategy;
     }
 
-
     /**
      * @since 4.2
      */
@@ -649,7 +651,6 @@ public synchronized void setProxyAuthenticationStrategy(final AuthenticationStra
         this.proxyAuthStrategy = strategy;
     }
 
-
     public synchronized final CookieStore getCookieStore() {
         if (cookieStore == null) {
             cookieStore = createCookieStore();
@@ -657,12 +658,10 @@ public synchronized final CookieStore getCookieStore() {
         return cookieStore;
     }
 
-
     public synchronized void setCookieStore(final CookieStore cookieStore) {
         this.cookieStore = cookieStore;
     }
 
-
     public synchronized final CredentialsProvider getCredentialsProvider() {
         if (credsProvider == null) {
             credsProvider = createCredentialsProvider();
@@ -670,12 +669,10 @@ public synchronized final CredentialsProvider getCredentialsProvider() {
         return credsProvider;
     }
 
-
     public synchronized void setCredentialsProvider(final CredentialsProvider credsProvider) {
         this.credsProvider = credsProvider;
     }
 
-
     public synchronized final HttpRoutePlanner getRoutePlanner() {
         if (this.routePlanner == null) {
             this.routePlanner = createHttpRoutePlanner();
@@ -683,12 +680,10 @@ public synchronized final HttpRoutePlanner getRoutePlanner() {
         return this.routePlanner;
     }
 
-
     public synchronized void setRoutePlanner(final HttpRoutePlanner routePlanner) {
         this.routePlanner = routePlanner;
     }
 
-
     public synchronized final UserTokenHandler getUserTokenHandler() {
         if (this.userTokenHandler == null) {
             this.userTokenHandler = createUserTokenHandler();
@@ -696,12 +691,10 @@ public synchronized final UserTokenHandler getUserTokenHandler() {
         return this.userTokenHandler;
     }
 
-
     public synchronized void setUserTokenHandler(final UserTokenHandler handler) {
         this.userTokenHandler = handler;
     }
 
-
     protected synchronized final BasicHttpProcessor getHttpProcessor() {
         if (mutableProcessor == null) {
             mutableProcessor = createHttpProcessor();
@@ -709,7 +702,6 @@ protected synchronized final BasicHttpProcessor getHttpProcessor() {
         return mutableProcessor;
     }
 
-
     private synchronized final HttpProcessor getProtocolProcessor() {
         if (protocolProcessor == null) {
             // Get mutable HTTP processor
@@ -730,69 +722,57 @@ private synchronized final HttpProcessor getProtocolProcessor() {
         return protocolProcessor;
     }
 
-
     public synchronized int getResponseInterceptorCount() {
         return getHttpProcessor().getResponseInterceptorCount();
     }
 
-
     public synchronized HttpResponseInterceptor getResponseInterceptor(int index) {
         return getHttpProcessor().getResponseInterceptor(index);
     }
 
-
     public synchronized HttpRequestInterceptor getRequestInterceptor(int index) {
         return getHttpProcessor().getRequestInterceptor(index);
     }
 
-
     public synchronized int getRequestInterceptorCount() {
         return getHttpProcessor().getRequestInterceptorCount();
     }
 
-
     public synchronized void addResponseInterceptor(final HttpResponseInterceptor itcp) {
         getHttpProcessor().addInterceptor(itcp);
         protocolProcessor = null;
     }
 
-
     public synchronized void addResponseInterceptor(final HttpResponseInterceptor itcp, int index) {
         getHttpProcessor().addInterceptor(itcp, index);
         protocolProcessor = null;
     }
 
-
     public synchronized void clearResponseInterceptors() {
         getHttpProcessor().clearResponseInterceptors();
         protocolProcessor = null;
     }
 
-
     public synchronized void removeResponseInterceptorByClass(Class<? extends HttpResponseInterceptor> clazz) {
         getHttpProcessor().removeResponseInterceptorByClass(clazz);
         protocolProcessor = null;
     }
 
-
     public synchronized void addRequestInterceptor(final HttpRequestInterceptor itcp) {
         getHttpProcessor().addInterceptor(itcp);
         protocolProcessor = null;
     }
 
-
     public synchronized void addRequestInterceptor(final HttpRequestInterceptor itcp, int index) {
         getHttpProcessor().addInterceptor(itcp, index);
         protocolProcessor = null;
     }
 
-
     public synchronized void clearRequestInterceptors() {
         getHttpProcessor().clearRequestInterceptors();
         protocolProcessor = null;
     }
 
-
     public synchronized void removeRequestInterceptorByClass(Class<? extends HttpRequestInterceptor> clazz) {
         getHttpProcessor().removeRequestInterceptorByClass(clazz);
         protocolProcessor = null;
@@ -804,7 +784,6 @@ public final HttpResponse execute(HttpUriRequest request)
         return execute(request, (HttpContext) null);
     }
 
-
     /**
      * Maps to {@link HttpClient#execute(HttpHost,HttpRequest,HttpContext)
      *                           execute(target, request, context)}.
@@ -931,6 +910,9 @@ public final HttpResponse execute(HttpHost target, HttpRequest request,
         }
     }
 
+    /**
+     * @deprecated (4.1) do not use
+     */
     @Deprecated
     protected RequestDirector createClientRequestDirector(
             final HttpRequestExecutor requestExec,
@@ -960,7 +942,10 @@ protected RequestDirector createClientRequestDirector(
                 params);
     }
 
-    @Deprecated
+    /**
+     * @deprecated (4.2) do not use
+     */
+    @Deprecated 
     protected RequestDirector createClientRequestDirector(
             final HttpRequestExecutor requestExec,
             final ClientConnectionManager conman,
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/AuthenticationStrategyAdaptor.java b/httpclient/src/main/java/org/apache/http/impl/client/AuthenticationStrategyAdaptor.java
index 5c4a7768e0..c7d53465cc 100644
--- a/httpclient/src/main/java/org/apache/http/impl/client/AuthenticationStrategyAdaptor.java
+++ b/httpclient/src/main/java/org/apache/http/impl/client/AuthenticationStrategyAdaptor.java
@@ -53,9 +53,8 @@
 import org.apache.http.protocol.HttpContext;
 
 /**
- * @since 4.2
+ * @deprecated (4.2) do not use
  */
-@SuppressWarnings("deprecation")
 @Immutable
 @Deprecated
 class AuthenticationStrategyAdaptor implements AuthenticationStrategy {
@@ -64,7 +63,6 @@ class AuthenticationStrategyAdaptor implements AuthenticationStrategy {
 
     private final AuthenticationHandler handler;
 
-    @Deprecated
     public AuthenticationStrategyAdaptor(final AuthenticationHandler handler) {
         super();
         this.handler = handler;
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/AuthenticationStrategyImpl.java b/httpclient/src/main/java/org/apache/http/impl/client/AuthenticationStrategyImpl.java
index e6263615fc..3d1ff95936 100644
--- a/httpclient/src/main/java/org/apache/http/impl/client/AuthenticationStrategyImpl.java
+++ b/httpclient/src/main/java/org/apache/http/impl/client/AuthenticationStrategyImpl.java
@@ -245,17 +245,13 @@ public void authFailed(
         if (authhost == null) {
             throw new IllegalArgumentException("Host may not be null");
         }
-        if (authScheme == null) {
-            throw new IllegalArgumentException("Auth scheme may not be null");
-        }
         if (context == null) {
             throw new IllegalArgumentException("HTTP context may not be null");
         }
         AuthCache authCache = (AuthCache) context.getAttribute(ClientContext.AUTH_CACHE);
         if (authCache != null) {
             if (this.log.isDebugEnabled()) {
-                this.log.debug("Removing from cache '" + authScheme.getSchemeName() +
-                        "' auth scheme for " + authhost);
+                this.log.debug("Clearing cached auth scheme for " + authhost);
             }
             authCache.remove(authhost);
         }
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/ContentEncodingHttpClient.java b/httpclient/src/main/java/org/apache/http/impl/client/ContentEncodingHttpClient.java
index 82e3a686e2..2a08d99570 100644
--- a/httpclient/src/main/java/org/apache/http/impl/client/ContentEncodingHttpClient.java
+++ b/httpclient/src/main/java/org/apache/http/impl/client/ContentEncodingHttpClient.java
@@ -27,6 +27,7 @@
 package org.apache.http.impl.client;
 
 import org.apache.http.annotation.ThreadSafe;
+import org.apache.http.client.HttpClient;
 import org.apache.http.client.protocol.RequestAcceptEncoding;
 import org.apache.http.client.protocol.ResponseContentEncoding;
 import org.apache.http.conn.ClientConnectionManager;
@@ -36,9 +37,18 @@
 /**
  * {@link DefaultHttpClient} sub-class which includes a {@link RequestAcceptEncoding}
  * for the request and response.
+ * 
+ * <b>Deprecation note:</b> due to the way this class modifies a response body
+ * without changing the response headers to reflect the entity changes, it cannot
+ * be used as the &quot;backend&quot; for a caching {@link HttpClient} and still
+ * have uncompressed responses be cached. Users are encouraged to use the
+ * {@link DecompressingHttpClient} instead of this class, which can be wired in
+ * either before or after caching, depending on whether you want to cache
+ * responses in compressed or uncompressed form.
  *
  * @since 4.1
  */
+@Deprecated
 @ThreadSafe // since DefaultHttpClient is
 public class ContentEncodingHttpClient extends DefaultHttpClient {
 
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/DecompressingHttpClient.java b/httpclient/src/main/java/org/apache/http/impl/client/DecompressingHttpClient.java
new file mode 100644
index 0000000000..29252f75bd
--- /dev/null
+++ b/httpclient/src/main/java/org/apache/http/impl/client/DecompressingHttpClient.java
@@ -0,0 +1,173 @@
+/*
+ * ====================================================================
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.http.impl.client;
+
+import java.io.IOException;
+import java.net.URI;
+
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpException;
+import org.apache.http.HttpHost;
+import org.apache.http.HttpRequest;
+import org.apache.http.HttpRequestInterceptor;
+import org.apache.http.HttpResponse;
+import org.apache.http.HttpResponseInterceptor;
+import org.apache.http.client.ClientProtocolException;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.ResponseHandler;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.client.protocol.RequestAcceptEncoding;
+import org.apache.http.client.protocol.ResponseContentEncoding;
+import org.apache.http.conn.ClientConnectionManager;
+import org.apache.http.params.HttpParams;
+import org.apache.http.protocol.BasicHttpContext;
+import org.apache.http.protocol.HttpContext;
+import org.apache.http.util.EntityUtils;
+
+/**
+ * <p>Decorator adding support for compressed responses. This class sets
+ * the <code>Accept-Encoding</code> header on requests to indicate
+ * support for the <code>gzip</code> and <code>deflate</code>
+ * compression schemes; it then checks the <code>Content-Encoding</code>
+ * header on the response to uncompress any compressed response bodies.
+ * The {@link java.io.InputStream} of the entity will contain the uncompressed
+ * content.</p>
+ * 
+ * <p><b>N.B.</b> Any upstream clients of this class need to be aware that
+ * this effectively obscures visibility into the length of a server
+ * response body, since the <code>Content-Length</code> header will
+ * correspond to the compressed entity length received from the server,
+ * but the content length experienced by reading the response body may
+ * be different (hopefully higher!).</p>
+ * 
+ * <p>That said, this decorator is compatible with the 
+ * <code>CachingHttpClient</code> in that the two decorators can be added 
+ * in either order and still have cacheable responses be cached.</p> 
+ * 
+ * @since 4.2
+ */
+public class DecompressingHttpClient implements HttpClient {
+
+    private HttpClient backend;
+    private HttpRequestInterceptor acceptEncodingInterceptor;
+    private HttpResponseInterceptor contentEncodingInterceptor;
+    
+    /**
+     * Constructs a decorator to ask for and handle compressed
+     * entities on the fly.
+     * @param backend the {@link HttpClient} to use for actually
+     *   issuing requests
+     */
+    public DecompressingHttpClient(HttpClient backend) {
+        this(backend, new RequestAcceptEncoding(), new ResponseContentEncoding());
+    }
+    
+    DecompressingHttpClient(HttpClient backend, 
+            HttpRequestInterceptor requestInterceptor, 
+            HttpResponseInterceptor responseInterceptor) {
+        this.backend = backend;
+        this.acceptEncodingInterceptor = requestInterceptor;
+        this.contentEncodingInterceptor = responseInterceptor;
+    }
+
+    public HttpParams getParams() {
+        return backend.getParams();
+    }
+
+    public ClientConnectionManager getConnectionManager() {
+        return backend.getConnectionManager();
+    }
+
+    public HttpResponse execute(HttpUriRequest request) throws IOException,
+            ClientProtocolException {
+        return execute(getHttpHost(request), request, (HttpContext)null);
+    }
+
+    HttpHost getHttpHost(HttpUriRequest request) {
+        URI uri = request.getURI();
+        return new HttpHost(uri.getAuthority());
+    }
+
+    public HttpResponse execute(HttpUriRequest request, HttpContext context)
+            throws IOException, ClientProtocolException {
+        return execute(getHttpHost(request), request, context);
+    }
+
+    public HttpResponse execute(HttpHost target, HttpRequest request)
+            throws IOException, ClientProtocolException {
+        return execute(target, request, (HttpContext)null);
+    }
+
+    public HttpResponse execute(HttpHost target, HttpRequest request,
+            HttpContext context) throws IOException, ClientProtocolException {
+        try {
+            if (context == null) context = new BasicHttpContext();
+            HttpRequest wrapped = new RequestWrapper(request);
+            acceptEncodingInterceptor.process(wrapped, context);
+            HttpResponse response = backend.execute(target, wrapped, context);
+            contentEncodingInterceptor.process(response, context);
+            if (Boolean.TRUE.equals(context.getAttribute(ResponseContentEncoding.UNCOMPRESSED))) {
+                response.removeHeaders("Content-Length");
+                response.removeHeaders("Content-Encoding");
+                response.removeHeaders("Content-MD5");
+            }
+            return response;
+        } catch (HttpException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public <T> T execute(HttpUriRequest request,
+            ResponseHandler<? extends T> responseHandler) throws IOException,
+            ClientProtocolException {
+        return execute(getHttpHost(request), request, responseHandler);
+    }
+
+    public <T> T execute(HttpUriRequest request,
+            ResponseHandler<? extends T> responseHandler, HttpContext context)
+            throws IOException, ClientProtocolException {
+        return execute(getHttpHost(request), request, responseHandler, context);
+    }
+
+    public <T> T execute(HttpHost target, HttpRequest request,
+            ResponseHandler<? extends T> responseHandler) throws IOException,
+            ClientProtocolException {
+        return execute(target, request, responseHandler, null);
+    }
+
+    public <T> T execute(HttpHost target, HttpRequest request,
+            ResponseHandler<? extends T> responseHandler, HttpContext context)
+            throws IOException, ClientProtocolException {
+        HttpResponse response = execute(target, request, context);
+        try {
+            return responseHandler.handleResponse(response);
+        } finally {
+            HttpEntity entity = response.getEntity();
+            if (entity != null) EntityUtils.consume(entity);
+        }
+    }
+
+}
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/DefaultHttpClient.java b/httpclient/src/main/java/org/apache/http/impl/client/DefaultHttpClient.java
index 391e0e2cf0..e4eb54f388 100644
--- a/httpclient/src/main/java/org/apache/http/impl/client/DefaultHttpClient.java
+++ b/httpclient/src/main/java/org/apache/http/impl/client/DefaultHttpClient.java
@@ -172,7 +172,7 @@ protected HttpParams createHttpParams() {
      */
     public static void setDefaultHttpParams(HttpParams params) {
         HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);
-        HttpProtocolParams.setContentCharset(params, HTTP.DEFAULT_CONTENT_CHARSET);
+        HttpProtocolParams.setContentCharset(params, HTTP.DEF_CONTENT_CHARSET.name());
         HttpConnectionParams.setTcpNoDelay(params, true);
         HttpConnectionParams.setSocketBufferSize(params, 8192);
 
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/DefaultProxyAuthenticationHandler.java b/httpclient/src/main/java/org/apache/http/impl/client/DefaultProxyAuthenticationHandler.java
index 72f191ad65..345c347950 100644
--- a/httpclient/src/main/java/org/apache/http/impl/client/DefaultProxyAuthenticationHandler.java
+++ b/httpclient/src/main/java/org/apache/http/impl/client/DefaultProxyAuthenticationHandler.java
@@ -47,9 +47,9 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link ProxyAuthenticationStrategy}
+ * @deprecated (4.2)  use {@link ProxyAuthenticationStrategy}
  */
-@Deprecated
+@Deprecated 
 @Immutable
 public class DefaultProxyAuthenticationHandler extends AbstractAuthenticationHandler {
 
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/DefaultRedirectHandler.java b/httpclient/src/main/java/org/apache/http/impl/client/DefaultRedirectHandler.java
index 850a33b3ec..4b1a3f3793 100644
--- a/httpclient/src/main/java/org/apache/http/impl/client/DefaultRedirectHandler.java
+++ b/httpclient/src/main/java/org/apache/http/impl/client/DefaultRedirectHandler.java
@@ -55,7 +55,7 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link DefaultRedirectStrategy}.
+ * @deprecated (4.1)  use {@link DefaultRedirectStrategy}.
  */
 @Immutable
 @Deprecated
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/DefaultRedirectStrategy.java b/httpclient/src/main/java/org/apache/http/impl/client/DefaultRedirectStrategy.java
index b44ef5781c..f837d1d32d 100644
--- a/httpclient/src/main/java/org/apache/http/impl/client/DefaultRedirectStrategy.java
+++ b/httpclient/src/main/java/org/apache/http/impl/client/DefaultRedirectStrategy.java
@@ -115,9 +115,15 @@ public URI getLocationURI(
             final HttpRequest request,
             final HttpResponse response,
             final HttpContext context) throws ProtocolException {
+        if (request == null) {
+            throw new IllegalArgumentException("HTTP request may not be null");
+        }
         if (response == null) {
             throw new IllegalArgumentException("HTTP response may not be null");
         }
+        if (context == null) {
+            throw new IllegalArgumentException("HTTP context may not be null");
+        }
         //get the location header to find out where to redirect to
         Header locationHeader = response.getFirstHeader("location");
         if (locationHeader == null) {
@@ -133,63 +139,43 @@ public URI getLocationURI(
 
         URI uri = createLocationURI(location);
 
-        HttpParams params = response.getParams();
+        HttpParams params = request.getParams();
         // rfc2616 demands the location value be a complete URI
         // Location       = "Location" ":" absoluteURI
-        if (!uri.isAbsolute()) {
-            if (params.isParameterTrue(ClientPNames.REJECT_RELATIVE_REDIRECT)) {
-                throw new ProtocolException("Relative redirect location '"
-                        + uri + "' not allowed");
-            }
-            // Adjust location URI
-            HttpHost target = (HttpHost) context.getAttribute(
-                    ExecutionContext.HTTP_TARGET_HOST);
-            if (target == null) {
-                throw new IllegalStateException("Target host not available " +
-                        "in the HTTP context");
-            }
-            try {
+        try {
+            // Drop fragment
+            uri = URIUtils.rewriteURI(uri);
+            if (!uri.isAbsolute()) {
+                if (params.isParameterTrue(ClientPNames.REJECT_RELATIVE_REDIRECT)) {
+                    throw new ProtocolException("Relative redirect location '"
+                            + uri + "' not allowed");
+                }
+                // Adjust location URI
+                HttpHost target = (HttpHost) context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);
+                if (target == null) {
+                    throw new IllegalStateException("Target host not available " +
+                            "in the HTTP context");
+                }
                 URI requestURI = new URI(request.getRequestLine().getUri());
                 URI absoluteRequestURI = URIUtils.rewriteURI(requestURI, target, true);
                 uri = URIUtils.resolve(absoluteRequestURI, uri);
-            } catch (URISyntaxException ex) {
-                throw new ProtocolException(ex.getMessage(), ex);
             }
+        } catch (URISyntaxException ex) {
+            throw new ProtocolException(ex.getMessage(), ex);
         }
 
+        RedirectLocations redirectLocations = (RedirectLocations) context.getAttribute(
+                REDIRECT_LOCATIONS);
+        if (redirectLocations == null) {
+            redirectLocations = new RedirectLocations();
+            context.setAttribute(REDIRECT_LOCATIONS, redirectLocations);
+        }
         if (params.isParameterFalse(ClientPNames.ALLOW_CIRCULAR_REDIRECTS)) {
-
-            RedirectLocations redirectLocations = (RedirectLocations) context.getAttribute(
-                    REDIRECT_LOCATIONS);
-
-            if (redirectLocations == null) {
-                redirectLocations = new RedirectLocations();
-                context.setAttribute(REDIRECT_LOCATIONS, redirectLocations);
-            }
-
-            URI redirectURI;
-            if (uri.getFragment() != null) {
-                try {
-                    HttpHost target = new HttpHost(
-                            uri.getHost(),
-                            uri.getPort(),
-                            uri.getScheme());
-                    redirectURI = URIUtils.rewriteURI(uri, target, true);
-                } catch (URISyntaxException ex) {
-                    throw new ProtocolException(ex.getMessage(), ex);
-                }
-            } else {
-                redirectURI = uri;
-            }
-
-            if (redirectLocations.contains(redirectURI)) {
-                throw new CircularRedirectException("Circular redirect to '" +
-                        redirectURI + "'");
-            } else {
-                redirectLocations.add(redirectURI);
+            if (redirectLocations.contains(uri)) {
+                throw new CircularRedirectException("Circular redirect to '" + uri + "'");
             }
         }
-
+        redirectLocations.add(uri);
         return uri;
     }
 
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/DefaultRedirectStrategyAdaptor.java b/httpclient/src/main/java/org/apache/http/impl/client/DefaultRedirectStrategyAdaptor.java
index f7254e8ba5..7a592aa487 100644
--- a/httpclient/src/main/java/org/apache/http/impl/client/DefaultRedirectStrategyAdaptor.java
+++ b/httpclient/src/main/java/org/apache/http/impl/client/DefaultRedirectStrategyAdaptor.java
@@ -41,16 +41,14 @@
 import org.apache.http.protocol.HttpContext;
 
 /**
- * @since 4.1
+ * @deprecated (4.1) do not use
  */
-@SuppressWarnings("deprecation")
 @Immutable
-@Deprecated
+@Deprecated 
 class DefaultRedirectStrategyAdaptor implements RedirectStrategy {
 
     private final RedirectHandler handler;
 
-    @Deprecated
     public DefaultRedirectStrategyAdaptor(final RedirectHandler handler) {
         super();
         this.handler = handler;
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/DefaultRequestDirector.java b/httpclient/src/main/java/org/apache/http/impl/client/DefaultRequestDirector.java
index 3319fa10ef..bf05800c19 100644
--- a/httpclient/src/main/java/org/apache/http/impl/client/DefaultRequestDirector.java
+++ b/httpclient/src/main/java/org/apache/http/impl/client/DefaultRequestDirector.java
@@ -379,14 +379,18 @@ protected void rewriteRequestURI(
                 // Make sure the request URI is absolute
                 if (!uri.isAbsolute()) {
                     HttpHost target = route.getTargetHost();
-                    uri = URIUtils.rewriteURI(uri, target);
+                    uri = URIUtils.rewriteURI(uri, target, true);
                     request.setURI(uri);
+                } else {
+                    uri = URIUtils.rewriteURI(uri);
                 }
             } else {
                 // Make sure the request URI is relative
                 if (uri.isAbsolute()) {
                     uri = URIUtils.rewriteURI(uri, null);
                     request.setURI(uri);
+                } else {
+                    uri = URIUtils.rewriteURI(uri);
                 }
             }
 
@@ -410,8 +414,7 @@ public HttpResponse execute(HttpHost target, HttpRequest request,
         origWrapper.setParams(params);
         HttpRoute origRoute = determineRoute(target, origWrapper, context);
 
-        virtualHost = (HttpHost) orig.getParams().getParameter(
-                ClientPNames.VIRTUAL_HOST);
+        virtualHost = (HttpHost) origWrapper.getParams().getParameter(ClientPNames.VIRTUAL_HOST);
 
         // HTTPCLIENT-1092 - add the port if necessary
         if (virtualHost != null && virtualHost.getPort() == -1) {
@@ -573,9 +576,11 @@ public HttpResponse execute(HttpHost target, HttpRequest request,
                     roureq = followup;
                 }
 
-                if (managedConn != null && userToken == null) {
-                    userToken = userTokenHandler.getUserToken(context);
-                    context.setAttribute(ClientContext.USER_TOKEN, userToken);
+                if (managedConn != null) {
+                    if (userToken == null) {
+                        userToken = userTokenHandler.getUserToken(context);
+                        context.setAttribute(ClientContext.USER_TOKEN, userToken);
+                    }
                     if (userToken != null) {
                         managedConn.setState(userToken);
                     }
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/DefaultTargetAuthenticationHandler.java b/httpclient/src/main/java/org/apache/http/impl/client/DefaultTargetAuthenticationHandler.java
index 1272534093..17cfc5c1af 100644
--- a/httpclient/src/main/java/org/apache/http/impl/client/DefaultTargetAuthenticationHandler.java
+++ b/httpclient/src/main/java/org/apache/http/impl/client/DefaultTargetAuthenticationHandler.java
@@ -47,7 +47,7 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link TargetAuthenticationStrategy}
+ * @deprecated (4.2)  use {@link TargetAuthenticationStrategy}
  */
 @Deprecated
 @Immutable
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/EntityEnclosingRequestWrapper.java b/httpclient/src/main/java/org/apache/http/impl/client/EntityEnclosingRequestWrapper.java
index 3c393c6590..c256c10a8f 100644
--- a/httpclient/src/main/java/org/apache/http/impl/client/EntityEnclosingRequestWrapper.java
+++ b/httpclient/src/main/java/org/apache/http/impl/client/EntityEnclosingRequestWrapper.java
@@ -89,7 +89,7 @@ class EntityWrapper extends HttpEntityWrapper {
             super(entity);
         }
 
-        @Deprecated
+        @SuppressWarnings("deprecation")
         @Override
         public void consumeContent() throws IOException {
             consumed = true;
diff --git a/httpclient/src/main/java/org/apache/http/impl/client/HttpAuthenticator.java b/httpclient/src/main/java/org/apache/http/impl/client/HttpAuthenticator.java
index db22b64d03..034de00664 100644
--- a/httpclient/src/main/java/org/apache/http/impl/client/HttpAuthenticator.java
+++ b/httpclient/src/main/java/org/apache/http/impl/client/HttpAuthenticator.java
@@ -108,7 +108,7 @@ public boolean authenticate(
             case HANDSHAKE:
                 if (authScheme == null) {
                     this.log.debug("Auth scheme is null");
-                    authStrategy.authFailed(host, authState.getAuthScheme(), context);
+                    authStrategy.authFailed(host, null, context);
                     authState.reset();
                     authState.setState(AuthProtocolState.FAILURE);
                     return false;
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/AbstractClientConnAdapter.java b/httpclient/src/main/java/org/apache/http/impl/conn/AbstractClientConnAdapter.java
index bf27b9f3e0..4d5718b4c5 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/AbstractClientConnAdapter.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/AbstractClientConnAdapter.java
@@ -67,7 +67,7 @@
  *
  * @since 4.0
  *
- * @deprecated do not use
+ * @deprecated (4.2)  do not use
  */
 @Deprecated
 @NotThreadSafe
@@ -126,9 +126,8 @@ protected ClientConnectionManager getManager() {
     }
 
     /**
-     * @deprecated use {@link #assertValid(OperatedClientConnection)}
+     * @deprecated (4.1)  use {@link #assertValid(OperatedClientConnection)}
      */
-    @Deprecated
     protected final void assertNotAborted() throws InterruptedIOException {
         if (isReleased()) {
             throw new InterruptedIOException("Connection has been shut down");
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/AbstractPoolEntry.java b/httpclient/src/main/java/org/apache/http/impl/conn/AbstractPoolEntry.java
index 928c7a65db..8ae374adfc 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/AbstractPoolEntry.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/AbstractPoolEntry.java
@@ -53,7 +53,7 @@
  *
  * @since 4.0
  *
- * @deprecated do not use
+ * @deprecated (4.2)  do not use
  */
 @Deprecated
 public abstract class AbstractPoolEntry {
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/AbstractPooledConnAdapter.java b/httpclient/src/main/java/org/apache/http/impl/conn/AbstractPooledConnAdapter.java
index 1fa5de72bc..db98e8431a 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/AbstractPooledConnAdapter.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/AbstractPooledConnAdapter.java
@@ -47,7 +47,7 @@
  *
  * @since 4.0
  *
- * @deprecated do not use
+ * @deprecated (4.2)  do not use
  */
 @Deprecated
 public abstract class AbstractPooledConnAdapter extends AbstractClientConnAdapter {
@@ -71,6 +71,8 @@ protected AbstractPooledConnAdapter(ClientConnectionManager manager,
      * Obtains the pool entry.
      *
      * @return  the pool entry, or <code>null</code> if detached
+     * 
+     * @deprecated (4.0.1) 
      */
     protected AbstractPoolEntry getPoolEntry() {
         return this.poolEntry;
@@ -91,9 +93,8 @@ protected void assertValid(final AbstractPoolEntry entry) {
     }
 
     /**
-     * @deprecated use {@link #assertValid(AbstractPoolEntry)}
+     * @deprecated (4.1)  use {@link #assertValid(AbstractPoolEntry)}
      */
-    @Deprecated
     protected final void assertAttached() {
         if (poolEntry == null) {
             throw new ConnectionShutdownException();
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/DefaultClientConnection.java b/httpclient/src/main/java/org/apache/http/impl/conn/DefaultClientConnection.java
index b6ed737296..4b612d9dea 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/DefaultClientConnection.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/DefaultClientConnection.java
@@ -221,7 +221,7 @@ protected HttpMessageParser<HttpResponse> createResponseParser(
             final HttpResponseFactory responseFactory,
             final HttpParams params) {
         // override in derived class to specify a line parser
-        return new DefaultResponseParser
+        return new DefaultHttpResponseParser
             (buffer, null, responseFactory, params);
     }
 
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/DefaultHttpResponseParser.java b/httpclient/src/main/java/org/apache/http/impl/conn/DefaultHttpResponseParser.java
new file mode 100644
index 0000000000..98b9831759
--- /dev/null
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/DefaultHttpResponseParser.java
@@ -0,0 +1,120 @@
+/*
+ * ====================================================================
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ *
+ */
+
+package org.apache.http.impl.conn;
+
+import java.io.IOException;
+
+import org.apache.http.annotation.ThreadSafe;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.http.HttpException;
+import org.apache.http.HttpResponse;
+import org.apache.http.HttpResponseFactory;
+import org.apache.http.NoHttpResponseException;
+import org.apache.http.ProtocolException;
+import org.apache.http.StatusLine;
+import org.apache.http.impl.io.AbstractMessageParser;
+import org.apache.http.io.SessionInputBuffer;
+import org.apache.http.message.LineParser;
+import org.apache.http.message.ParserCursor;
+import org.apache.http.params.HttpParams;
+import org.apache.http.util.CharArrayBuffer;
+
+/**
+ * Default HTTP response parser implementation.
+ * <p>
+ * The following parameters can be used to customize the behavior of this
+ * class:
+ * <ul>
+ *  <li>{@link org.apache.http.params.CoreConnectionPNames#MAX_HEADER_COUNT}</li>
+ *  <li>{@link org.apache.http.params.CoreConnectionPNames#MAX_LINE_LENGTH}</li>
+ * </ul>
+ *
+ * @since 4.2
+ */
+@ThreadSafe // no public methods
+public class DefaultHttpResponseParser extends AbstractMessageParser<HttpResponse> {
+
+    private final Log log = LogFactory.getLog(getClass());
+
+    private final HttpResponseFactory responseFactory;
+    private final CharArrayBuffer lineBuf;
+
+    public DefaultHttpResponseParser(
+            final SessionInputBuffer buffer,
+            final LineParser parser,
+            final HttpResponseFactory responseFactory,
+            final HttpParams params) {
+        super(buffer, parser, params);
+        if (responseFactory == null) {
+            throw new IllegalArgumentException
+                ("Response factory may not be null");
+        }
+        this.responseFactory = responseFactory;
+        this.lineBuf = new CharArrayBuffer(128);
+    }
+
+    @Override
+    protected HttpResponse parseHead(
+            final SessionInputBuffer sessionBuffer) throws IOException, HttpException {
+        //read out the HTTP status string
+        int count = 0;
+        ParserCursor cursor = null;
+        do {
+            // clear the buffer
+            this.lineBuf.clear();
+            int i = sessionBuffer.readLine(this.lineBuf);
+            if (i == -1 && count == 0) {
+                // The server just dropped connection on us
+                throw new NoHttpResponseException("The target server failed to respond");
+            }
+            cursor = new ParserCursor(0, this.lineBuf.length());
+            if (lineParser.hasProtocolVersion(this.lineBuf, cursor)) {
+                // Got one
+                break;
+            } else if (i == -1 || reject(this.lineBuf, count)) {
+                // Giving up
+                throw new ProtocolException("The server failed to respond with a " +
+                        "valid HTTP response");
+            }
+            if (this.log.isDebugEnabled()) {
+                this.log.debug("Garbage in response: " + this.lineBuf.toString());
+            }
+            count++;
+        } while(true);
+        //create the status line from the status string
+        StatusLine statusline = lineParser.parseStatusLine(this.lineBuf, cursor);
+        return this.responseFactory.newHttpResponse(statusline, null);
+    }
+
+    protected boolean reject(CharArrayBuffer line, int count) {
+        return false;
+    }
+    
+}
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/DefaultResponseParser.java b/httpclient/src/main/java/org/apache/http/impl/conn/DefaultResponseParser.java
index 001b965b5d..894fa13ad6 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/DefaultResponseParser.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/DefaultResponseParser.java
@@ -34,7 +34,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.http.HttpException;
-import org.apache.http.HttpResponse;
+import org.apache.http.HttpMessage;
 import org.apache.http.HttpResponseFactory;
 import org.apache.http.NoHttpResponseException;
 import org.apache.http.ProtocolException;
@@ -58,9 +58,11 @@
  * </ul>
  *
  * @since 4.0
+ * 
+ * @deprecated (4.2) use {@link DefaultHttpResponseParser}
  */
 @ThreadSafe // no public methods
-public class DefaultResponseParser extends AbstractMessageParser<HttpResponse> {
+public class DefaultResponseParser extends AbstractMessageParser<HttpMessage> {
 
     private final Log log = LogFactory.getLog(getClass());
 
@@ -83,10 +85,6 @@ public DefaultResponseParser(
         this.maxGarbageLines = getMaxGarbageLines(params);
     }
 
-    /**
-     * @since 4.2
-     */
-    @SuppressWarnings("deprecation")
     protected int getMaxGarbageLines(final HttpParams params) {
         return params.getIntParameter(
                 org.apache.http.conn.params.ConnConnectionPNames.MAX_STATUS_LINE_GARBAGE,
@@ -94,7 +92,7 @@ protected int getMaxGarbageLines(final HttpParams params) {
     }
 
     @Override
-    protected HttpResponse parseHead(
+    protected HttpMessage parseHead(
             final SessionInputBuffer sessionBuffer) throws IOException, HttpException {
         //read out the HTTP status string
         int count = 0;
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/IdleConnectionHandler.java b/httpclient/src/main/java/org/apache/http/impl/conn/IdleConnectionHandler.java
index aa5813a184..ac5ce514f7 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/IdleConnectionHandler.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/IdleConnectionHandler.java
@@ -45,7 +45,7 @@
  *
  * @since 4.0
  *
- * @deprecated no longer used
+ * @deprecated (4.1)  no longer used
  */
 @Deprecated
 public class IdleConnectionHandler {
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/LoggingSessionInputBuffer.java b/httpclient/src/main/java/org/apache/http/impl/conn/LoggingSessionInputBuffer.java
index 0562075a88..ff6cfa21e6 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/LoggingSessionInputBuffer.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/LoggingSessionInputBuffer.java
@@ -28,12 +28,12 @@
 
 import java.io.IOException;
 
+import org.apache.http.Consts;
 import org.apache.http.annotation.Immutable;
 
 import org.apache.http.io.EofSensor;
 import org.apache.http.io.HttpTransportMetrics;
 import org.apache.http.io.SessionInputBuffer;
-import org.apache.http.protocol.HTTP;
 import org.apache.http.util.CharArrayBuffer;
 
 /**
@@ -67,7 +67,7 @@ public LoggingSessionInputBuffer(
         this.in = in;
         this.eofSensor = in instanceof EofSensor ? (EofSensor) in : null;
         this.wire = wire;
-        this.charset = charset != null ? charset : HTTP.ASCII;
+        this.charset = charset != null ? charset : Consts.ASCII.name();
     }
 
     public LoggingSessionInputBuffer(final SessionInputBuffer in, final Wire wire) {
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/LoggingSessionOutputBuffer.java b/httpclient/src/main/java/org/apache/http/impl/conn/LoggingSessionOutputBuffer.java
index 803853b39b..d6a332ec36 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/LoggingSessionOutputBuffer.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/LoggingSessionOutputBuffer.java
@@ -28,11 +28,11 @@
 
 import java.io.IOException;
 
+import org.apache.http.Consts;
 import org.apache.http.annotation.Immutable;
 
 import org.apache.http.io.HttpTransportMetrics;
 import org.apache.http.io.SessionOutputBuffer;
-import org.apache.http.protocol.HTTP;
 import org.apache.http.util.CharArrayBuffer;
 
 /**
@@ -63,7 +63,7 @@ public LoggingSessionOutputBuffer(
         super();
         this.out = out;
         this.wire = wire;
-        this.charset = charset != null ? charset : HTTP.ASCII;
+        this.charset = charset != null ? charset : Consts.ASCII.name();
     }
 
     public LoggingSessionOutputBuffer(final SessionOutputBuffer out, final Wire wire) {
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/SingleClientConnManager.java b/httpclient/src/main/java/org/apache/http/impl/conn/SingleClientConnManager.java
index db2e94eccc..1140640686 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/SingleClientConnManager.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/SingleClientConnManager.java
@@ -58,10 +58,10 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link BasicClientConnectionManager}
+ * @deprecated (4.2)  use {@link BasicClientConnectionManager}
  */
 @ThreadSafe
-@Deprecated
+@Deprecated 
 public class SingleClientConnManager implements ClientConnectionManager {
 
     private final Log log = LogFactory.getLog(getClass());
@@ -105,9 +105,8 @@ public class SingleClientConnManager implements ClientConnectionManager {
      * @param params    the parameters for this manager
      * @param schreg    the scheme registry
      *
-     * @deprecated use {@link SingleClientConnManager#SingleClientConnManager(SchemeRegistry)}
+     * @deprecated (4.1)  use {@link SingleClientConnManager#SingleClientConnManager(SchemeRegistry)}
      */
-    @Deprecated
     public SingleClientConnManager(HttpParams params,
                                    SchemeRegistry schreg) {
         this(schreg);
@@ -361,10 +360,6 @@ public void shutdown() {
         }
     }
 
-    /**
-     * @deprecated no longer used
-     */
-    @Deprecated
     protected void revokeConnection() {
         ConnAdapter conn = managedConn;
         if (conn == null)
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/Wire.java b/httpclient/src/main/java/org/apache/http/impl/conn/Wire.java
index bc0b9e29b6..11cb49236d 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/Wire.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/Wire.java
@@ -141,7 +141,10 @@ public void input(int b)
         input(new byte[] {(byte) b});
     }
 
-    @Deprecated
+    /**
+     * @deprecated (4.1)  do not use
+     */
+    @Deprecated 
     public void output(final String s)
       throws IOException {
         if (s == null) {
@@ -150,7 +153,10 @@ public void output(final String s)
         output(s.getBytes());
     }
 
-    @Deprecated
+    /**
+     * @deprecated (4.1)  do not use
+     */
+    @Deprecated 
     public void input(final String s)
       throws IOException {
         if (s == null) {
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/AbstractConnPool.java b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/AbstractConnPool.java
index cf08e286f7..1892d3899f 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/AbstractConnPool.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/AbstractConnPool.java
@@ -54,11 +54,10 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link org.apache.http.pool.AbstractConnPool}
+ * @deprecated (4.2) use {@link org.apache.http.pool.AbstractConnPool}
  */
-
 @Deprecated
-public abstract class AbstractConnPool implements RefQueueHandler {
+public abstract class AbstractConnPool {
 
     private final Log log;
 
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/BasicPoolEntry.java b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/BasicPoolEntry.java
index 4d617a1a23..ea270dac10 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/BasicPoolEntry.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/BasicPoolEntry.java
@@ -39,7 +39,7 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link org.apache.http.pool.PoolEntry}
+ * @deprecated (4.2)  use {@link org.apache.http.pool.PoolEntry}
  */
 @Deprecated
 public class BasicPoolEntry extends AbstractPoolEntry {
@@ -50,10 +50,6 @@ public class BasicPoolEntry extends AbstractPoolEntry {
     private long validUntil;
     private long expiry;
 
-    /**
-     * @deprecated do not use
-     */
-    @Deprecated
     public BasicPoolEntry(ClientConnectionOperator op,
                           HttpRoute route,
                           ReferenceQueue<Object> queue) {
@@ -110,7 +106,6 @@ protected final HttpRoute getPlannedRoute() {
         return super.route;
     }
 
-    @Deprecated
     protected final BasicPoolEntryRef getWeakRef() {
         return null;
     }
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/BasicPoolEntryRef.java b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/BasicPoolEntryRef.java
index ae2ba609f6..ce23ee6b9c 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/BasicPoolEntryRef.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/BasicPoolEntryRef.java
@@ -38,9 +38,9 @@
  *
  * @since 4.0
  *
- * @deprecated do not use
+ * @deprecated (4.2)  do not use
  */
-@Deprecated
+@Deprecated 
 public class BasicPoolEntryRef extends WeakReference<BasicPoolEntry> {
 
     /** The planned route of the entry. */
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/BasicPooledConnAdapter.java b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/BasicPooledConnAdapter.java
index cc290838e6..5f20a9655e 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/BasicPooledConnAdapter.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/BasicPooledConnAdapter.java
@@ -37,9 +37,9 @@
  *
  * @since 4.0
  *
- * @deprecated do not use
+ * @deprecated (4.2)  do not use
  */
-@Deprecated
+@Deprecated 
 public class BasicPooledConnAdapter extends AbstractPooledConnAdapter {
 
     /**
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/ConnPoolByRoute.java b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/ConnPoolByRoute.java
index c5973436c4..864c6d6f0b 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/ConnPoolByRoute.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/ConnPoolByRoute.java
@@ -63,9 +63,9 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link org.apache.http.pool.AbstractConnPool}
+ * @deprecated (4.2)  use {@link org.apache.http.pool.AbstractConnPool}
  */
-@Deprecated
+@Deprecated 
 public class ConnPoolByRoute extends AbstractConnPool {
 
     private final Log log = LogFactory.getLog(getClass());
@@ -147,9 +147,8 @@ protected Lock getLock() {
     /**
      * Creates a new connection pool, managed by route.
      *
-     * @deprecated use {@link ConnPoolByRoute#ConnPoolByRoute(ClientConnectionOperator, ConnPerRoute, int)}
+     * @deprecated (4.1)  use {@link ConnPoolByRoute#ConnPoolByRoute(ClientConnectionOperator, ConnPerRoute, int)}
      */
-    @Deprecated
     public ConnPoolByRoute(final ClientConnectionOperator operator, final HttpParams params) {
         this(operator,
                 ConnManagerParams.getMaxConnectionsPerRoute(params),
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/PoolEntryRequest.java b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/PoolEntryRequest.java
index c28d9363e2..a27dae7c9d 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/PoolEntryRequest.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/PoolEntryRequest.java
@@ -36,9 +36,9 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link Future}
+ * @deprecated (4.2)  use {@link Future}
  */
-@Deprecated
+@Deprecated 
 public interface PoolEntryRequest {
 
     /**
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/RefQueueHandler.java b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/RefQueueHandler.java
deleted file mode 100644
index f4666bc724..0000000000
--- a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/RefQueueHandler.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * ====================================================================
- *
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- *
- */
-
-package org.apache.http.impl.conn.tsccm;
-
-import java.lang.ref.Reference;
-
-/**
- * @deprecated do not use
- *
- * @since 4.0
- */
-@Deprecated
-public interface RefQueueHandler {
-
-    /**
-     * Invoked when a reference is found on the queue.
-     *
-     * @param ref       the reference to handle
-     */
-    public void handleReference(Reference<?> ref)
-        ;
-}
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/RefQueueWorker.java b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/RefQueueWorker.java
deleted file mode 100644
index 1d65c06018..0000000000
--- a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/RefQueueWorker.java
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * ====================================================================
- *
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- *
- */
-
-package org.apache.http.impl.conn.tsccm;
-
-import java.lang.ref.Reference;
-import java.lang.ref.ReferenceQueue;
-
-/**
- * A worker thread for processing queued references.
- * {@link Reference Reference}s can be
- * {@link ReferenceQueue queued}
- * automatically by the garbage collector.
- * If that feature is used, a daemon thread should be executing
- * this worker. It will pick up the queued references and pass them
- * on to a handler for appropriate processing.
- *
- * @deprecated do not use
- */
-@Deprecated
-public class RefQueueWorker implements Runnable {
-
-    /** The reference queue to monitor. */
-    protected final ReferenceQueue<?> refQueue;
-
-    /** The handler for the references found. */
-    protected final RefQueueHandler refHandler;
-
-
-    /**
-     * The thread executing this handler.
-     * This attribute is also used as a shutdown indicator.
-     */
-    protected volatile Thread workerThread;
-
-
-    /**
-     * Instantiates a new worker to listen for lost connections.
-     *
-     * @param queue     the queue on which to wait for references
-     * @param handler   the handler to pass the references to
-     */
-    public RefQueueWorker(ReferenceQueue<?> queue, RefQueueHandler handler) {
-        if (queue == null) {
-            throw new IllegalArgumentException("Queue must not be null.");
-        }
-        if (handler == null) {
-            throw new IllegalArgumentException("Handler must not be null.");
-        }
-
-        refQueue   = queue;
-        refHandler = handler;
-    }
-
-
-    /**
-     * The main loop of this worker.
-     * If initialization succeeds, this method will only return
-     * after {@link #shutdown shutdown()}. Only one thread can
-     * execute the main loop at any time.
-     */
-    public void run() {
-
-        if (this.workerThread == null) {
-            this.workerThread = Thread.currentThread();
-        }
-
-        while (this.workerThread == Thread.currentThread()) {
-            try {
-                // remove the next reference and process it
-                Reference<?> ref = refQueue.remove();
-                refHandler.handleReference(ref);
-            } catch (InterruptedException ignore) {
-            }
-        }
-    }
-
-
-    /**
-     * Shuts down this worker.
-     * It can be re-started afterwards by another call to {@link #run run()}.
-     */
-    public void shutdown() {
-        Thread wt = this.workerThread;
-        if (wt != null) {
-            this.workerThread = null; // indicate shutdown
-            wt.interrupt();
-        }
-    }
-
-
-    /**
-     * Obtains a description of this worker.
-     *
-     * @return  a descriptive string for this worker
-     */
-    @Override
-    public String toString() {
-        return "RefQueueWorker::" + this.workerThread;
-    }
-
-} // class RefQueueWorker
-
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/RouteSpecificPool.java b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/RouteSpecificPool.java
index 9d24da12b7..3283ad1264 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/RouteSpecificPool.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/RouteSpecificPool.java
@@ -46,7 +46,7 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link org.apache.http.pool.AbstractConnPool}
+ * @deprecated (4.2)  use {@link org.apache.http.pool.AbstractConnPool}
  */
 @Deprecated
 public class RouteSpecificPool {
@@ -56,7 +56,6 @@ public class RouteSpecificPool {
     /** The route this pool is for. */
     protected final HttpRoute route; //Immutable
 
-    @Deprecated
     protected final int maxEntries;
 
     /** Connections per route */
@@ -75,11 +74,9 @@ public class RouteSpecificPool {
     /** The number of created entries. */
     protected int numEntries;
 
-
     /**
-     * @deprecated use {@link RouteSpecificPool#RouteSpecificPool(HttpRoute, ConnPerRoute)}
+     * @deprecated (4.1)  use {@link RouteSpecificPool#RouteSpecificPool(HttpRoute, ConnPerRoute)}
      */
-    @Deprecated
     public RouteSpecificPool(HttpRoute route, int maxEntries) {
         this.route = route;
         this.maxEntries = maxEntries;
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/ThreadSafeClientConnManager.java b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/ThreadSafeClientConnManager.java
index cb55569df2..022794aa73 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/ThreadSafeClientConnManager.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/ThreadSafeClientConnManager.java
@@ -64,10 +64,10 @@
  *
  * @since 4.0
  *
- * @deprecated use {@link PoolingClientConnectionManager}
+ * @deprecated (4.2)  use {@link PoolingClientConnectionManager}
  */
 @ThreadSafe
-@Deprecated
+@Deprecated 
 public class ThreadSafeClientConnManager implements ClientConnectionManager {
 
     private final Log log;
@@ -75,7 +75,6 @@ public class ThreadSafeClientConnManager implements ClientConnectionManager {
     /** The schemes supported by this connection manager. */
     protected final SchemeRegistry schemeRegistry; // @ThreadSafe
 
-    @Deprecated
     protected final AbstractConnPool connectionPool;
 
     /** The pool of connections being managed. */
@@ -148,9 +147,8 @@ public ThreadSafeClientConnManager(final SchemeRegistry schreg,
      * @param params    the parameters for this manager.
      * @param schreg    the scheme registry.
      *
-     * @deprecated use {@link ThreadSafeClientConnManager#ThreadSafeClientConnManager(SchemeRegistry)}
+     * @deprecated (4.1)  use {@link ThreadSafeClientConnManager#ThreadSafeClientConnManager(SchemeRegistry)}
      */
-    @Deprecated
     public ThreadSafeClientConnManager(HttpParams params,
                                        SchemeRegistry schreg) {
         if (schreg == null) {
@@ -178,9 +176,8 @@ protected void finalize() throws Throwable {
      *
      * @return  the connection pool to use
      *
-     * @deprecated use #createConnectionPool(long, TimeUnit))
+     * @deprecated (4.1)  use #createConnectionPool(long, TimeUnit))
      */
-    @Deprecated
     protected AbstractConnPool createConnectionPool(final HttpParams params) {
         return new ConnPoolByRoute(connOperator, params);
     }
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/WaitingThread.java b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/WaitingThread.java
index e1921bb741..47bafd63d6 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/WaitingThread.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/WaitingThread.java
@@ -43,9 +43,9 @@
  *
  * @since 4.0
  *
- * @deprecated do not use
+ * @deprecated (4.2)  do not use
  */
-@Deprecated
+@Deprecated 
 public class WaitingThread {
 
     /** The condition on which the thread is waiting. */
diff --git a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/WaitingThreadAborter.java b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/WaitingThreadAborter.java
index 5a4a1d3aef..ce06894eae 100644
--- a/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/WaitingThreadAborter.java
+++ b/httpclient/src/main/java/org/apache/http/impl/conn/tsccm/WaitingThreadAborter.java
@@ -33,9 +33,9 @@
  *
  * @since 4.0
  *
- * @deprecated do not use
+ * @deprecated (4.2)  do not use
  */
-@Deprecated
+@Deprecated 
 public class WaitingThreadAborter {
 
     private WaitingThread waitingThread;
diff --git a/httpclient/src/main/java/org/apache/http/impl/cookie/BrowserCompatSpec.java b/httpclient/src/main/java/org/apache/http/impl/cookie/BrowserCompatSpec.java
index 018619fcef..81678fcb37 100644
--- a/httpclient/src/main/java/org/apache/http/impl/cookie/BrowserCompatSpec.java
+++ b/httpclient/src/main/java/org/apache/http/impl/cookie/BrowserCompatSpec.java
@@ -55,24 +55,6 @@
 @NotThreadSafe // superclass is @NotThreadSafe
 public class BrowserCompatSpec extends CookieSpecBase {
 
-    @Deprecated
-    protected static final String[] DATE_PATTERNS = new String[] {
-            DateUtils.PATTERN_RFC1123,
-            DateUtils.PATTERN_RFC1036,
-            DateUtils.PATTERN_ASCTIME,
-            "EEE, dd-MMM-yyyy HH:mm:ss z",
-            "EEE, dd-MMM-yyyy HH-mm-ss z",
-            "EEE, dd MMM yy HH:mm:ss z",
-            "EEE dd-MMM-yyyy HH:mm:ss z",
-            "EEE dd MMM yyyy HH:mm:ss z",
-            "EEE dd-MMM-yyyy HH-mm-ss z",
-            "EEE dd-MMM-yy HH:mm:ss z",
-            "EEE dd MMM yy HH:mm:ss z",
-            "EEE,dd-MMM-yy HH:mm:ss z",
-            "EEE,dd-MMM-yyyy HH:mm:ss z",
-            "EEE, dd-MM-yyyy HH:mm:ss z",
-        };
-
     private static final String[] DEFAULT_DATE_PATTERNS = new String[] {
         DateUtils.PATTERN_RFC1123,
         DateUtils.PATTERN_RFC1036,
diff --git a/httpclient/src/test/java/org/apache/http/client/protocol/TestRequestAcceptEncoding.java b/httpclient/src/test/java/org/apache/http/client/protocol/TestRequestAcceptEncoding.java
index 7677aa4866..baca22d65f 100644
--- a/httpclient/src/test/java/org/apache/http/client/protocol/TestRequestAcceptEncoding.java
+++ b/httpclient/src/test/java/org/apache/http/client/protocol/TestRequestAcceptEncoding.java
@@ -50,4 +50,17 @@ public void testAcceptEncoding() throws Exception {
         Assert.assertEquals("gzip,deflate", header.getValue());
     }
 
+    @Test
+    public void testAcceptEncodingAlreadyPResent() throws Exception {
+        HttpRequest request = new BasicHttpRequest("GET", "/");
+        request.addHeader("Accept-Encoding", "stuff");
+        HttpContext context = new BasicHttpContext();
+
+        HttpRequestInterceptor interceptor = new RequestAcceptEncoding();
+        interceptor.process(request, context);
+        Header header = request.getFirstHeader("Accept-Encoding");
+        Assert.assertNotNull(header);
+        Assert.assertEquals("stuff", header.getValue());
+    }
+
 }
diff --git a/httpclient/src/test/java/org/apache/http/client/protocol/TestResponseAuthCache.java b/httpclient/src/test/java/org/apache/http/client/protocol/TestResponseAuthCache.java
index 4a49d810c8..465d5bd942 100644
--- a/httpclient/src/test/java/org/apache/http/client/protocol/TestResponseAuthCache.java
+++ b/httpclient/src/test/java/org/apache/http/client/protocol/TestResponseAuthCache.java
@@ -48,7 +48,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-@Deprecated
+@Deprecated 
 public class TestResponseAuthCache {
 
     private HttpHost target;
diff --git a/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java b/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java
index 3fafad6728..4a8afcdc3b 100644
--- a/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java
+++ b/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java
@@ -40,310 +40,133 @@ public class TestURIUtils {
     private URI baseURI = URI.create("http://a/b/c/d;p?q");
 
     @Test
-    public void testRewite00() throws Exception {
-        URI uri = URI.create("http://thishost/stuff");
+    public void testRewite() throws Exception {
         HttpHost target = new HttpHost("thathost", -1);
-        Assert.assertEquals("http://thathost/stuff", URIUtils.rewriteURI(uri, target).toString());
-    }
-
-    @Test
-    public void testRewite01() throws Exception {
-        URI uri = URI.create("http://thishost/stuff");
-        Assert.assertEquals("/stuff", URIUtils.rewriteURI(uri, null).toString());
-    }
-
-    @Test
-    public void testRewite02() throws Exception {
-        URI uri = URI.create("http://thishost//");
-        Assert.assertEquals("/", URIUtils.rewriteURI(uri, null).toString());
-    }
-
-    @Test
-    public void testRewite03() throws Exception {
-        URI uri = URI.create("http://thishost//stuff///morestuff");
-        Assert.assertEquals("/stuff///morestuff", URIUtils.rewriteURI(uri, null).toString());
-    }
-
-    @Test
-    public void testRewite04() throws Exception {
-        URI uri = URI.create("http://thishost/stuff#crap");
-        HttpHost target = new HttpHost("thathost", -1);
-        Assert.assertEquals("http://thathost/stuff", URIUtils.rewriteURI(uri, target, true).toString());
-    }
-
-    @Test
-    public void testRewite05() throws Exception {
-        URI uri = URI.create("http://thishost/stuff#crap");
-        HttpHost target = new HttpHost("thathost", -1);
-        Assert.assertEquals("http://thathost/stuff#crap", URIUtils.rewriteURI(uri, target, false).toString());
-    }
-
-    @Test
-    public void testRewite06() throws Exception {
-        URI uri = URI.create("http://thishost//////////////stuff/");
-        Assert.assertEquals("/stuff/", URIUtils.rewriteURI(uri, null).toString());
-    }
-
-    @Test
-    public void testResolve00() {
+        Assert.assertEquals("http://thathost/stuff", URIUtils.rewriteURI(
+                URI.create("http://thishost/stuff"), target).toString());
+        Assert.assertEquals("/stuff", URIUtils.rewriteURI(
+                URI.create("http://thishost/stuff"), null).toString());
+        Assert.assertEquals("/", URIUtils.rewriteURI(
+                URI.create("http://thishost//"), null).toString());
+        Assert.assertEquals("/stuff///morestuff", URIUtils.rewriteURI(
+                URI.create("http://thishost//stuff///morestuff"), null).toString());
+        Assert.assertEquals("http://thathost/stuff", URIUtils.rewriteURI(
+                URI.create("http://thishost/stuff#crap"), target, true).toString());
+        Assert.assertEquals("http://thathost/stuff#crap", URIUtils.rewriteURI(
+                URI.create("http://thishost/stuff#crap"), target, false).toString());
+        Assert.assertEquals("/stuff/", URIUtils.rewriteURI(
+                URI.create("http://thishost//////////////stuff/"), null).toString());
+        Assert.assertEquals("http://thathost/stuff", URIUtils.rewriteURI(
+                URI.create("http://thathost/stuff")).toString());
+        Assert.assertEquals("http://thathost/stuff", URIUtils.rewriteURI(
+                URI.create("http://thathost/stuff#fragment")).toString());
+    }
+
+    @Test
+    public void testResolve() {
         Assert.assertEquals("g:h", URIUtils.resolve(this.baseURI, "g:h").toString());
-    }
-
-    @Test
-    public void testResolve01() {
         Assert.assertEquals("http://a/b/c/g", URIUtils.resolve(this.baseURI, "g").toString());
-    }
-
-    @Test
-    public void testResolve02() {
         Assert.assertEquals("http://a/b/c/g", URIUtils.resolve(this.baseURI, "./g").toString());
-    }
-
-    @Test
-    public void testResolve03() {
         Assert.assertEquals("http://a/b/c/g/", URIUtils.resolve(this.baseURI, "g/").toString());
-    }
-
-    @Test
-    public void testResolve04() {
         Assert.assertEquals("http://a/g", URIUtils.resolve(this.baseURI, "/g").toString());
-    }
-
-    @Test
-    public void testResolve05() {
         Assert.assertEquals("http://g", URIUtils.resolve(this.baseURI, "//g").toString());
-    }
-
-    @Test
-    public void testResolve06() {
         Assert.assertEquals("http://a/b/c/d;p?y", URIUtils.resolve(this.baseURI, "?y").toString());
-    }
-
-    @Test
-    public void testResolve06_() {
         Assert.assertEquals("http://a/b/c/d;p?y#f", URIUtils.resolve(this.baseURI, "?y#f")
                 .toString());
-    }
-
-    @Test
-    public void testResolve07() {
         Assert.assertEquals("http://a/b/c/g?y", URIUtils.resolve(this.baseURI, "g?y").toString());
-    }
-
-    @Test
-    public void testResolve08() {
         Assert.assertEquals("http://a/b/c/d;p?q#s", URIUtils.resolve(this.baseURI, "#s")
                 .toString());
-    }
-
-    @Test
-    public void testResolve09() {
         Assert.assertEquals("http://a/b/c/g#s", URIUtils.resolve(this.baseURI, "g#s").toString());
-    }
-
-    @Test
-    public void testResolve10() {
         Assert.assertEquals("http://a/b/c/g?y#s", URIUtils.resolve(this.baseURI, "g?y#s")
                 .toString());
-    }
-
-    @Test
-    public void testResolve11() {
         Assert.assertEquals("http://a/b/c/;x", URIUtils.resolve(this.baseURI, ";x").toString());
-    }
-
-    @Test
-    public void testResolve12() {
         Assert.assertEquals("http://a/b/c/g;x", URIUtils.resolve(this.baseURI, "g;x").toString());
-    }
-
-    @Test
-    public void testResolve13() {
         Assert.assertEquals("http://a/b/c/g;x?y#s", URIUtils.resolve(this.baseURI, "g;x?y#s")
                 .toString());
-    }
-
-    @Test
-    public void testResolve14() {
         Assert.assertEquals("http://a/b/c/d;p?q", URIUtils.resolve(this.baseURI, "").toString());
-    }
-
-    @Test
-    public void testResolve15() {
         Assert.assertEquals("http://a/b/c/", URIUtils.resolve(this.baseURI, ".").toString());
-    }
-
-    @Test
-    public void testResolve16() {
         Assert.assertEquals("http://a/b/c/", URIUtils.resolve(this.baseURI, "./").toString());
-    }
-
-    @Test
-    public void testResolve17() {
         Assert.assertEquals("http://a/b/", URIUtils.resolve(this.baseURI, "..").toString());
-    }
-
-    @Test
-    public void testResolve18() {
         Assert.assertEquals("http://a/b/", URIUtils.resolve(this.baseURI, "../").toString());
-    }
-
-    @Test
-    public void testResolve19() {
         Assert.assertEquals("http://a/b/g", URIUtils.resolve(this.baseURI, "../g").toString());
-    }
-
-    @Test
-    public void testResolve20() {
         Assert.assertEquals("http://a/", URIUtils.resolve(this.baseURI, "../..").toString());
-    }
-
-    @Test
-    public void testResolve21() {
         Assert.assertEquals("http://a/", URIUtils.resolve(this.baseURI, "../../").toString());
-    }
-
-    @Test
-    public void testResolve22() {
         Assert.assertEquals("http://a/g", URIUtils.resolve(this.baseURI, "../../g").toString());
-    }
-
-    @Test
-    public void testResolveAbnormal23() {
         Assert.assertEquals("http://a/g", URIUtils.resolve(this.baseURI, "../../../g").toString());
-    }
-
-    @Test
-    public void testResolveAbnormal24() {
         Assert.assertEquals("http://a/g", URIUtils.resolve(this.baseURI, "../../../../g")
                 .toString());
-    }
-
-    @Test
-    public void testResolve25() {
         Assert.assertEquals("http://a/g", URIUtils.resolve(this.baseURI, "/./g").toString());
-    }
-
-    @Test
-    public void testResolve26() {
         Assert.assertEquals("http://a/g", URIUtils.resolve(this.baseURI, "/../g").toString());
-    }
-
-    @Test
-    public void testResolve27() {
         Assert.assertEquals("http://a/b/c/g.", URIUtils.resolve(this.baseURI, "g.").toString());
-    }
-
-    @Test
-    public void testResolve28() {
         Assert.assertEquals("http://a/b/c/.g", URIUtils.resolve(this.baseURI, ".g").toString());
-    }
-
-    @Test
-    public void testResolve29() {
         Assert.assertEquals("http://a/b/c/g..", URIUtils.resolve(this.baseURI, "g..").toString());
-    }
-
-    @Test
-    public void testResolve30() {
         Assert.assertEquals("http://a/b/c/..g", URIUtils.resolve(this.baseURI, "..g").toString());
-    }
-
-    @Test
-    public void testResolve31() {
         Assert.assertEquals("http://a/b/g", URIUtils.resolve(this.baseURI, "./../g").toString());
-    }
-
-    @Test
-    public void testResolve32() {
         Assert.assertEquals("http://a/b/c/g/", URIUtils.resolve(this.baseURI, "./g/.").toString());
-    }
-
-    @Test
-    public void testResolve33() {
         Assert.assertEquals("http://a/b/c/g/h", URIUtils.resolve(this.baseURI, "g/./h").toString());
-    }
-
-    @Test
-    public void testResolve34() {
         Assert.assertEquals("http://a/b/c/h", URIUtils.resolve(this.baseURI, "g/../h").toString());
-    }
-
-    @Test
-    public void testResolve35() {
         Assert.assertEquals("http://a/b/c/g;x=1/y", URIUtils.resolve(this.baseURI, "g;x=1/./y")
                 .toString());
-    }
-
-    @Test
-    public void testResolve36() {
         Assert.assertEquals("http://a/b/c/y", URIUtils.resolve(this.baseURI, "g;x=1/../y")
                 .toString());
-    }
-
-    @Test
-    public void testResolve37() {
         Assert.assertEquals("http://a/b/c/g?y/./x", URIUtils.resolve(this.baseURI, "g?y/./x")
                 .toString());
-    }
-
-    @Test
-    public void testResolve38() {
         Assert.assertEquals("http://a/b/c/g?y/../x", URIUtils.resolve(this.baseURI, "g?y/../x")
                 .toString());
-    }
-
-    @Test
-    public void testResolve39() {
         Assert.assertEquals("http://a/b/c/g#s/./x", URIUtils.resolve(this.baseURI, "g#s/./x")
                 .toString());
-    }
-
-    @Test
-    public void testResolve40() {
         Assert.assertEquals("http://a/b/c/g#s/../x", URIUtils.resolve(this.baseURI, "g#s/../x")
                 .toString());
-    }
-
-    @Test
-    public void testResolve41() {
         Assert.assertEquals("http:g", URIUtils.resolve(this.baseURI, "http:g").toString());
-    }
-
-    // examples from section 5.2.4
-    @Test
-    public void testResolve42() {
+        // examples from section 5.2.4
         Assert.assertEquals("http://s/a/g", URIUtils.resolve(this.baseURI,
                 "http://s/a/b/c/./../../g").toString());
-    }
-
-    @Test
-    public void testResolve43() {
         Assert.assertEquals("http://s/mid/6", URIUtils.resolve(this.baseURI,
                 "http://s/mid/content=5/../6").toString());
     }
 
     @Test
-    public void testHTTPCLIENT_911() throws Exception{
-        Assert.assertEquals(new HttpHost("localhost"),URIUtils.extractHost(new URI("http://localhost/abcd")));
-        Assert.assertEquals(new HttpHost("localhost"),URIUtils.extractHost(new URI("http://localhost/abcd%3A")));
+    public void testExtractHost() throws Exception {
+        Assert.assertEquals(new HttpHost("localhost"),
+                URIUtils.extractHost(new URI("http://localhost/abcd")));
+        Assert.assertEquals(new HttpHost("localhost"),
+                URIUtils.extractHost(new URI("http://localhost/abcd%3A")));
 
-        Assert.assertEquals(new HttpHost("local_host"),URIUtils.extractHost(new URI("http://local_host/abcd")));
-        Assert.assertEquals(new HttpHost("local_host"),URIUtils.extractHost(new URI("http://local_host/abcd%3A")));
+        Assert.assertEquals(new HttpHost("local_host"),
+                URIUtils.extractHost(new URI("http://local_host/abcd")));
+        Assert.assertEquals(new HttpHost("local_host"),
+                URIUtils.extractHost(new URI("http://local_host/abcd%3A")));
 
-        Assert.assertEquals(new HttpHost("localhost",8),URIUtils.extractHost(new URI("http://localhost:8/abcd")));
-        Assert.assertEquals(new HttpHost("local_host",8),URIUtils.extractHost(new URI("http://local_host:8/abcd")));
+        Assert.assertEquals(new HttpHost("localhost",8),
+                URIUtils.extractHost(new URI("http://localhost:8/abcd")));
+        Assert.assertEquals(new HttpHost("local_host",8),
+                URIUtils.extractHost(new URI("http://local_host:8/abcd")));
 
         // URI seems to OK with missing port number
-        Assert.assertEquals(new HttpHost("localhost"),URIUtils.extractHost(new URI("http://localhost:/abcd")));
-        Assert.assertEquals(new HttpHost("local_host"),URIUtils.extractHost(new URI("http://local_host:/abcd")));
-
-        Assert.assertEquals(new HttpHost("localhost",8080),URIUtils.extractHost(new URI("http://user:pass@localhost:8080/abcd")));
-        Assert.assertEquals(new HttpHost("local_host",8080),URIUtils.extractHost(new URI("http://user:pass@local_host:8080/abcd")));
-
-        Assert.assertEquals(new HttpHost("localhost",8080),URIUtils.extractHost(new URI("http://@localhost:8080/abcd")));
-        Assert.assertEquals(new HttpHost("local_host",8080),URIUtils.extractHost(new URI("http://@local_host:8080/abcd")));
-
+        Assert.assertEquals(new HttpHost("localhost",-1),URIUtils.extractHost(
+                new URI("http://localhost:/abcd")));
+        Assert.assertEquals(new HttpHost("local_host",-1),URIUtils.extractHost(
+                new URI("http://local_host:/abcd")));
+
+        Assert.assertEquals(new HttpHost("localhost",8080),
+                URIUtils.extractHost(new URI("http://user:pass@localhost:8080/abcd")));
+        Assert.assertEquals(new HttpHost("local_host",8080),
+                URIUtils.extractHost(new URI("http://user:pass@local_host:8080/abcd")));
+
+        Assert.assertEquals(new HttpHost("localhost",8080),URIUtils.extractHost(
+                new URI("http://@localhost:8080/abcd")));
+        Assert.assertEquals(new HttpHost("local_host",8080),URIUtils.extractHost(
+                new URI("http://@local_host:8080/abcd")));
+
+        Assert.assertEquals(new HttpHost("[2a00:1450:400c:c01::69]",8080),
+                URIUtils.extractHost(new URI("http://[2a00:1450:400c:c01::69]:8080/")));
+
+        Assert.assertEquals(new HttpHost("localhost",8080),
+                URIUtils.extractHost(new URI("http://localhost:8080/;sessionid=stuff/abcd")));
+        Assert.assertEquals(new HttpHost("localhost",8080),
+                URIUtils.extractHost(new URI("http://localhost:8080;sessionid=stuff/abcd")));
+        Assert.assertEquals(new HttpHost("localhost",-1),
+                URIUtils.extractHost(new URI("http://localhost:;sessionid=stuff/abcd")));
     }
 
 }
diff --git a/httpclient/src/test/java/org/apache/http/client/utils/TestURLEncodedUtils.java b/httpclient/src/test/java/org/apache/http/client/utils/TestURLEncodedUtils.java
index ca27b5c663..79b4a97452 100644
--- a/httpclient/src/test/java/org/apache/http/client/utils/TestURLEncodedUtils.java
+++ b/httpclient/src/test/java/org/apache/http/client/utils/TestURLEncodedUtils.java
@@ -31,7 +31,9 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.apache.http.Consts;
 import org.apache.http.NameValuePair;
+import org.apache.http.entity.ContentType;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.message.BasicNameValuePair;
 import org.apache.http.protocol.HTTP;
@@ -131,19 +133,55 @@ public void testParseUTF8Entity () throws Exception {
         parameters.add(new BasicNameValuePair("russian", ru_hello));
         parameters.add(new BasicNameValuePair("swiss", ch_hello));
 
-        String s = URLEncodedUtils.format(parameters, HTTP.UTF_8);
+        String s = URLEncodedUtils.format(parameters, Consts.UTF_8);
 
         Assert.assertEquals("russian=%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82" +
                 "&swiss=Gr%C3%BCezi_z%C3%A4m%C3%A4", s);
 
-        StringEntity entity = new StringEntity(s, HTTP.UTF_8);
-        entity.setContentType(URLEncodedUtils.CONTENT_TYPE + HTTP.CHARSET_PARAM + HTTP.UTF_8);
+        StringEntity entity = new StringEntity(s, ContentType.create(
+                URLEncodedUtils.CONTENT_TYPE, Consts.UTF_8));
         List <NameValuePair> result = URLEncodedUtils.parse(entity);
         Assert.assertEquals(2, result.size());
         assertNameValuePair(result.get(0), "russian", ru_hello);
         assertNameValuePair(result.get(1), "swiss", ch_hello);
     }
 
+    @Test
+    public void testParseUTF8String () throws Exception {
+        String ru_hello = constructString(RUSSIAN_HELLO);
+        String ch_hello = constructString(SWISS_GERMAN_HELLO);
+        List <NameValuePair> parameters = new ArrayList<NameValuePair>();
+        parameters.add(new BasicNameValuePair("russian", ru_hello));
+        parameters.add(new BasicNameValuePair("swiss", ch_hello));
+
+        String s = URLEncodedUtils.format(parameters, Consts.UTF_8);
+
+        List <NameValuePair> result = URLEncodedUtils.parse(s, Consts.UTF_8);
+        Assert.assertEquals(2, result.size());
+        assertNameValuePair(result.get(0), "russian", ru_hello);
+        assertNameValuePair(result.get(1), "swiss", ch_hello);
+    }
+
+    @Test
+    public void testParseEntityDefaultContentType () throws Exception {
+        String ch_hello = constructString(SWISS_GERMAN_HELLO);
+        String us_hello = "hi there";
+        List <NameValuePair> parameters = new ArrayList<NameValuePair>();
+        parameters.add(new BasicNameValuePair("english", us_hello));
+        parameters.add(new BasicNameValuePair("swiss", ch_hello));
+
+        String s = URLEncodedUtils.format(parameters, HTTP.DEF_CONTENT_CHARSET);
+
+        Assert.assertEquals("english=hi+there&swiss=Gr%FCezi_z%E4m%E4", s);
+
+        StringEntity entity = new StringEntity(s, ContentType.create(
+                URLEncodedUtils.CONTENT_TYPE, HTTP.DEF_CONTENT_CHARSET));
+        List <NameValuePair> result = URLEncodedUtils.parse(entity);
+        Assert.assertEquals(2, result.size());
+        assertNameValuePair(result.get(0), "english", us_hello);
+        assertNameValuePair(result.get(1), "swiss", ch_hello);
+    }
+
     @Test
     public void testIsEncoded () throws Exception {
         final StringEntity entity = new StringEntity("...");
@@ -161,46 +199,46 @@ public void testIsEncoded () throws Exception {
     @Test
     public void testFormat () throws Exception {
         final List <NameValuePair> params = new ArrayList <NameValuePair>();
-        Assert.assertEquals(0, URLEncodedUtils.format(params, null).length());
+        Assert.assertEquals(0, URLEncodedUtils.format(params, Consts.ASCII).length());
 
         params.clear();
         params.add(new BasicNameValuePair("Name0", null));
-        Assert.assertEquals("Name0", URLEncodedUtils.format(params, null));
+        Assert.assertEquals("Name0", URLEncodedUtils.format(params, Consts.ASCII));
 
         params.clear();
         params.add(new BasicNameValuePair("Name1", "Value1"));
-        Assert.assertEquals("Name1=Value1", URLEncodedUtils.format(params, null));
+        Assert.assertEquals("Name1=Value1", URLEncodedUtils.format(params, Consts.ASCII));
 
         params.clear();
         params.add(new BasicNameValuePair("Name2", ""));
-        Assert.assertEquals("Name2=", URLEncodedUtils.format(params, null));
+        Assert.assertEquals("Name2=", URLEncodedUtils.format(params, Consts.ASCII));
 
         params.clear();
         params.add(new BasicNameValuePair("Name4", "Value 4!"));
-        Assert.assertEquals("Name4=Value+4%21", URLEncodedUtils.format(params, null));
+        Assert.assertEquals("Name4=Value+4%21", URLEncodedUtils.format(params, Consts.ASCII));
 
         params.clear();
         params.add(new BasicNameValuePair("Name4", "Value+4!"));
-        Assert.assertEquals("Name4=Value%2B4%21", URLEncodedUtils.format(params, null));
+        Assert.assertEquals("Name4=Value%2B4%21", URLEncodedUtils.format(params, Consts.ASCII));
 
         params.clear();
         params.add(new BasicNameValuePair("Name4", "Value 4! !4"));
-        Assert.assertEquals("Name4=Value+4%21+%214", URLEncodedUtils.format(params, null));
+        Assert.assertEquals("Name4=Value+4%21+%214", URLEncodedUtils.format(params, Consts.ASCII));
 
         params.clear();
         params.add(new BasicNameValuePair("Name5", "aaa"));
         params.add(new BasicNameValuePair("Name6", "bbb"));
-        Assert.assertEquals("Name5=aaa&Name6=bbb", URLEncodedUtils.format(params, null));
+        Assert.assertEquals("Name5=aaa&Name6=bbb", URLEncodedUtils.format(params, Consts.ASCII));
 
         params.clear();
         params.add(new BasicNameValuePair("Name7", "aaa"));
         params.add(new BasicNameValuePair("Name7", "b,b"));
         params.add(new BasicNameValuePair("Name7", "ccc"));
-        Assert.assertEquals("Name7=aaa&Name7=b%2Cb&Name7=ccc", URLEncodedUtils.format(params, null));
+        Assert.assertEquals("Name7=aaa&Name7=b%2Cb&Name7=ccc", URLEncodedUtils.format(params, Consts.ASCII));
 
         params.clear();
         params.add(new BasicNameValuePair("Name8", "xx,  yy  ,zz"));
-        Assert.assertEquals("Name8=xx%2C++yy++%2Czz", URLEncodedUtils.format(params, null));
+        Assert.assertEquals("Name8=xx%2C++yy++%2Czz", URLEncodedUtils.format(params, Consts.ASCII));
     }
 
     private List <NameValuePair> parse (final String params, final String encoding) {
diff --git a/httpclient/src/test/java/org/apache/http/impl/auth/TestDigestScheme.java b/httpclient/src/test/java/org/apache/http/impl/auth/TestDigestScheme.java
index e6ae623948..d1f581ff8f 100644
--- a/httpclient/src/test/java/org/apache/http/impl/auth/TestDigestScheme.java
+++ b/httpclient/src/test/java/org/apache/http/impl/auth/TestDigestScheme.java
@@ -543,7 +543,7 @@ public void testDigestAuthenticationQopAuthInt() throws Exception {
                 "qop=\"auth,auth-int\"";
         Header authChallenge = new BasicHeader(AUTH.WWW_AUTH, challenge);
         HttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("Post", "/");
-        request.setEntity(new StringEntity("abc\u00e4\u00f6\u00fcabc", HTTP.DEFAULT_CONTENT_CHARSET));
+        request.setEntity(new StringEntity("abc\u00e4\u00f6\u00fcabc", HTTP.DEF_CONTENT_CHARSET));
         Credentials cred = new UsernamePasswordCredentials("username","password");
         DigestScheme authscheme = new DigestScheme();
         HttpContext context = new BasicHttpContext();
diff --git a/httpclient/src/test/java/org/apache/http/impl/client/DummyHttpClient.java b/httpclient/src/test/java/org/apache/http/impl/client/DummyHttpClient.java
new file mode 100644
index 0000000000..6717a3f2b3
--- /dev/null
+++ b/httpclient/src/test/java/org/apache/http/impl/client/DummyHttpClient.java
@@ -0,0 +1,130 @@
+/*
+ * ====================================================================
+ *
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ *
+ */
+package org.apache.http.impl.client;
+
+import java.io.IOException;
+
+import org.apache.http.HttpHost;
+import org.apache.http.HttpRequest;
+import org.apache.http.HttpResponse;
+import org.apache.http.HttpStatus;
+import org.apache.http.ProtocolVersion;
+import org.apache.http.client.ClientProtocolException;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.ResponseHandler;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.conn.ClientConnectionManager;
+import org.apache.http.impl.conn.SingleClientConnManager;
+import org.apache.http.message.BasicHttpResponse;
+import org.apache.http.params.BasicHttpParams;
+import org.apache.http.params.HttpParams;
+import org.apache.http.protocol.HttpContext;
+
+@SuppressWarnings("deprecation")
+public class DummyHttpClient implements HttpClient {
+
+    private HttpParams params = new BasicHttpParams();
+    private ClientConnectionManager connManager = new SingleClientConnManager();
+    private HttpRequest request;
+    private HttpResponse response = new BasicHttpResponse(new ProtocolVersion("HTTP",1,1), HttpStatus.SC_OK, "OK");
+    
+    public void setParams(HttpParams params) {
+        this.params = params;
+    }
+    
+    public HttpParams getParams() {
+        return params;
+    }
+
+    public ClientConnectionManager getConnectionManager() {
+        return connManager;
+    }
+    
+    public void setConnectionManager(ClientConnectionManager ccm) {
+        connManager = ccm;
+    }
+    
+    public void setResponse(HttpResponse resp) {
+        response = resp;
+    }
+    
+    public HttpRequest getCapturedRequest() {
+        return request;
+    }
+
+    public HttpResponse execute(HttpUriRequest request) throws IOException,
+            ClientProtocolException {
+        this.request = request;
+        return response;
+    }
+
+    public HttpResponse execute(HttpUriRequest request, HttpContext context)
+            throws IOException, ClientProtocolException {
+        this.request = request;
+        return response;
+    }
+
+    public HttpResponse execute(HttpHost target, HttpRequest request)
+            throws IOException, ClientProtocolException {
+        this.request = request;
+        return response;
+    }
+
+    public HttpResponse execute(HttpHost target, HttpRequest request,
+            HttpContext context) throws IOException, ClientProtocolException {
+        this.request = request;
+        return response;
+    }
+
+    public <T> T execute(HttpUriRequest request,
+            ResponseHandler<? extends T> responseHandler) throws IOException,
+            ClientProtocolException {
+        this.request = request;
+        return responseHandler.handleResponse(response);
+    }
+
+    public <T> T execute(HttpUriRequest request,
+            ResponseHandler<? extends T> responseHandler, HttpContext context)
+            throws IOException, ClientProtocolException {
+        this.request = request;
+        return responseHandler.handleResponse(response);
+    }
+
+    public <T> T execute(HttpHost target, HttpRequest request,
+            ResponseHandler<? extends T> responseHandler) throws IOException,
+            ClientProtocolException {
+        this.request = request;
+        return responseHandler.handleResponse(response);
+    }
+
+    public <T> T execute(HttpHost target, HttpRequest request,
+            ResponseHandler<? extends T> responseHandler, HttpContext context)
+            throws IOException, ClientProtocolException {
+        this.request = request;
+        return responseHandler.handleResponse(response);
+    }
+
+}
diff --git a/httpclient/src/test/java/org/apache/http/impl/client/TestAuthenticationStrategy.java b/httpclient/src/test/java/org/apache/http/impl/client/TestAuthenticationStrategy.java
index 03096377dc..4500fd768d 100644
--- a/httpclient/src/test/java/org/apache/http/impl/client/TestAuthenticationStrategy.java
+++ b/httpclient/src/test/java/org/apache/http/impl/client/TestAuthenticationStrategy.java
@@ -395,11 +395,6 @@ public void testAuthFailedInvalidInput() throws Exception {
             Assert.fail("IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
         }
-        try {
-            authStrategy.authFailed(authhost, null, context);
-            Assert.fail("IllegalArgumentException expected");
-        } catch (IllegalArgumentException ex) {
-        }
         try {
             authStrategy.authFailed(authhost, authScheme, null);
             Assert.fail("IllegalArgumentException expected");
diff --git a/httpclient/src/test/java/org/apache/http/impl/client/TestBasicResponseHandler.java b/httpclient/src/test/java/org/apache/http/impl/client/TestBasicResponseHandler.java
index 8ce627f27b..2595cb3413 100644
--- a/httpclient/src/test/java/org/apache/http/impl/client/TestBasicResponseHandler.java
+++ b/httpclient/src/test/java/org/apache/http/impl/client/TestBasicResponseHandler.java
@@ -50,7 +50,7 @@ public class TestBasicResponseHandler {
     public void testSuccessfulResponse() throws Exception {
         StatusLine sl = new BasicStatusLine(HttpVersion.HTTP_1_1, 200, "OK");
         HttpResponse response = Mockito.mock(HttpResponse.class);
-        HttpEntity entity = StringEntity.create("stuff");
+        HttpEntity entity = new StringEntity("stuff");
         Mockito.when(response.getStatusLine()).thenReturn(sl);
         Mockito.when(response.getEntity()).thenReturn(entity);
 
diff --git a/httpclient/src/test/java/org/apache/http/impl/client/TestClientAuthentication.java b/httpclient/src/test/java/org/apache/http/impl/client/TestClientAuthentication.java
index cd5b61bbce..39813d6559 100644
--- a/httpclient/src/test/java/org/apache/http/impl/client/TestClientAuthentication.java
+++ b/httpclient/src/test/java/org/apache/http/impl/client/TestClientAuthentication.java
@@ -28,6 +28,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 
+import org.apache.http.Consts;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpException;
 import org.apache.http.HttpHost;
@@ -53,7 +54,6 @@
 import org.apache.http.params.CoreProtocolPNames;
 import org.apache.http.protocol.BasicHttpContext;
 import org.apache.http.protocol.BasicHttpProcessor;
-import org.apache.http.protocol.HTTP;
 import org.apache.http.protocol.HttpContext;
 import org.apache.http.protocol.HttpExpectationVerifier;
 import org.apache.http.protocol.HttpRequestHandler;
@@ -96,7 +96,7 @@ public void handle(
                 response.setStatusCode(HttpStatus.SC_UNAUTHORIZED);
             } else {
                 response.setStatusCode(HttpStatus.SC_OK);
-                StringEntity entity = new StringEntity("success", HTTP.ASCII);
+                StringEntity entity = new StringEntity("success", Consts.ASCII);
                 response.setEntity(entity);
             }
         }
@@ -295,7 +295,7 @@ public void testBasicAuthenticationSuccessOnRepeatablePost() throws Exception {
         this.httpclient.setCredentialsProvider(credsProvider);
 
         HttpPost httppost = new HttpPost("/");
-        httppost.setEntity(new StringEntity("some important stuff", HTTP.ISO_8859_1));
+        httppost.setEntity(new StringEntity("some important stuff", Consts.ASCII));
 
         HttpResponse response = this.httpclient.execute(getServerHttp(), httppost);
         HttpEntity entity = response.getEntity();
diff --git a/httpclient/src/test/java/org/apache/http/impl/client/TestClientAuthenticationFallBack.java b/httpclient/src/test/java/org/apache/http/impl/client/TestClientAuthenticationFallBack.java
index 3bb1cabbda..1dcbe2ef23 100644
--- a/httpclient/src/test/java/org/apache/http/impl/client/TestClientAuthenticationFallBack.java
+++ b/httpclient/src/test/java/org/apache/http/impl/client/TestClientAuthenticationFallBack.java
@@ -27,6 +27,7 @@
 
 import java.io.IOException;
 
+import org.apache.http.Consts;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpException;
 import org.apache.http.HttpRequest;
@@ -44,7 +45,6 @@
 import org.apache.http.localserver.LocalTestServer;
 import org.apache.http.localserver.RequestBasicAuth;
 import org.apache.http.protocol.BasicHttpProcessor;
-import org.apache.http.protocol.HTTP;
 import org.apache.http.protocol.HttpContext;
 import org.apache.http.protocol.HttpRequestHandler;
 import org.apache.http.protocol.ResponseConnControl;
@@ -96,7 +96,7 @@ public void handle(
                 response.setStatusCode(HttpStatus.SC_UNAUTHORIZED);
             } else {
                 response.setStatusCode(HttpStatus.SC_OK);
-                StringEntity entity = new StringEntity("success", HTTP.ASCII);
+                StringEntity entity = new StringEntity("success", Consts.ASCII);
                 response.setEntity(entity);
             }
         }
diff --git a/httpclient/src/test/java/org/apache/http/impl/client/TestClientReauthentication.java b/httpclient/src/test/java/org/apache/http/impl/client/TestClientReauthentication.java
index c57bc9e46c..7cde9c45b9 100644
--- a/httpclient/src/test/java/org/apache/http/impl/client/TestClientReauthentication.java
+++ b/httpclient/src/test/java/org/apache/http/impl/client/TestClientReauthentication.java
@@ -28,6 +28,7 @@
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicLong;
 
+import org.apache.http.Consts;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpException;
 import org.apache.http.HttpRequest;
@@ -46,7 +47,6 @@
 import org.apache.http.localserver.RequestBasicAuth;
 import org.apache.http.protocol.BasicHttpContext;
 import org.apache.http.protocol.BasicHttpProcessor;
-import org.apache.http.protocol.HTTP;
 import org.apache.http.protocol.HttpContext;
 import org.apache.http.protocol.HttpRequestHandler;
 import org.apache.http.protocol.ResponseConnControl;
@@ -103,7 +103,7 @@ public void handle(
                     response.setStatusCode(HttpStatus.SC_UNAUTHORIZED);
                 } else {
                     response.setStatusCode(HttpStatus.SC_OK);
-                    StringEntity entity = new StringEntity("success", HTTP.ASCII);
+                    StringEntity entity = new StringEntity("success", Consts.ASCII);
                     response.setEntity(entity);
                 }
             }
diff --git a/httpclient/src/test/java/org/apache/http/impl/client/TestContentCodings.java b/httpclient/src/test/java/org/apache/http/impl/client/TestContentCodings.java
index be1b794d93..f04393d8d8 100644
--- a/httpclient/src/test/java/org/apache/http/impl/client/TestContentCodings.java
+++ b/httpclient/src/test/java/org/apache/http/impl/client/TestContentCodings.java
@@ -49,7 +49,6 @@
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.entity.DeflateDecompressingEntity;
 import org.apache.http.client.methods.HttpGet;
-import org.apache.http.client.protocol.RequestAcceptEncoding;
 import org.apache.http.conn.scheme.PlainSocketFactory;
 import org.apache.http.conn.scheme.Scheme;
 import org.apache.http.conn.scheme.SchemeRegistry;
@@ -92,7 +91,7 @@ public void handle(
             }
         });
 
-        DefaultHttpClient client = createHttpClient();
+        HttpClient client = new DecompressingHttpClient(new DefaultHttpClient());
 
         HttpGet request = new HttpGet("/some-resource");
         HttpResponse response = client.execute(getServerHttp(), request);
@@ -115,7 +114,7 @@ public void testDeflateSupportForServerReturningRfc1950Stream() throws Exception
 
         this.localServer.register("*", createDeflateEncodingRequestHandler(entityText, false));
 
-        DefaultHttpClient client = createHttpClient();
+        HttpClient client = new DecompressingHttpClient(new DefaultHttpClient());
 
         HttpGet request = new HttpGet("/some-resource");
         HttpResponse response = client.execute(getServerHttp(), request);
@@ -138,7 +137,8 @@ public void testDeflateSupportForServerReturningRfc1951Stream() throws Exception
 
         this.localServer.register("*", createDeflateEncodingRequestHandler(entityText, true));
 
-        DefaultHttpClient client = createHttpClient();
+        HttpClient client = new DecompressingHttpClient(new DefaultHttpClient());
+
         HttpGet request = new HttpGet("/some-resource");
         HttpResponse response = client.execute(getServerHttp(), request);
         Assert.assertEquals("The entity text is correctly transported", entityText,
@@ -158,7 +158,8 @@ public void testGzipSupport() throws Exception {
 
         this.localServer.register("*", createGzipEncodingRequestHandler(entityText));
 
-        DefaultHttpClient client = createHttpClient();
+        HttpClient client = new DecompressingHttpClient(new DefaultHttpClient());
+
         HttpGet request = new HttpGet("/some-resource");
         HttpResponse response = client.execute(getServerHttp(), request);
         Assert.assertEquals("The entity text is correctly transported", entityText,
@@ -223,48 +224,6 @@ public void testThreadSafetyOfContentCodings() throws Exception {
         }
     }
 
-    /**
-     * Checks that we can turn off the new Content-Coding support. The default is that it's on, but that is a change
-     * to existing behaviour and might not be desirable in some situations.
-     *
-     * @throws Exception
-     */
-    @Test
-    public void testCanBeDisabledAtRequestTime() throws Exception {
-        final String entityText = "Hello, this is some plain text coming back.";
-
-        /* Assume that server will see an Accept-Encoding header. */
-        final boolean [] sawAcceptEncodingHeader = { true };
-
-        this.localServer.register("*", new HttpRequestHandler() {
-
-            /**
-             * {@inheritDoc}
-             */
-            public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {
-                response.setEntity(new StringEntity(entityText));
-                response.addHeader("Content-Type", "text/plain");
-                Header[] acceptEncodings = request.getHeaders("Accept-Encoding");
-
-                sawAcceptEncodingHeader[0] = acceptEncodings.length > 0;
-            }
-
-        });
-
-        AbstractHttpClient client = createHttpClient();
-        HttpGet request = new HttpGet("/some-resource");
-
-        client.removeRequestInterceptorByClass(RequestAcceptEncoding.class);
-
-        HttpResponse response = client.execute(getServerHttp(), request);
-
-        Assert.assertFalse("The Accept-Encoding header was not there", sawAcceptEncodingHeader[0]);
-        Assert.assertEquals("The entity isn't treated as gzip or zip content", entityText,
-                EntityUtils.toString(response.getEntity()));
-
-        client.getConnectionManager().shutdown();
-    }
-
     /**
      * Test that the returned {@link HttpEntity} in the response correctly overrides
      * {@link HttpEntity#writeTo(OutputStream)} for gzip-encoding.
@@ -277,7 +236,7 @@ public void testHttpEntityWriteToForGzip() throws Exception {
 
         this.localServer.register("*", createGzipEncodingRequestHandler(entityText));
 
-        DefaultHttpClient client = createHttpClient();
+        HttpClient client = new DecompressingHttpClient(new DefaultHttpClient());
         HttpGet request = new HttpGet("/some-resource");
         HttpResponse response = client.execute(getServerHttp(), request);
         ByteArrayOutputStream out = new ByteArrayOutputStream();
@@ -301,7 +260,8 @@ public void testHttpEntityWriteToForDeflate() throws Exception {
 
         this.localServer.register("*", createDeflateEncodingRequestHandler(entityText, true));
 
-        DefaultHttpClient client = createHttpClient();
+        HttpClient client = new DecompressingHttpClient(new DefaultHttpClient());
+
         HttpGet request = new HttpGet("/some-resource");
         HttpResponse response = client.execute(getServerHttp(), request);
         ByteArrayOutputStream out = new ByteArrayOutputStream();
@@ -319,7 +279,8 @@ public void gzipResponsesWorkWithBasicResponseHandler() throws Exception {
 
         this.localServer.register("*", createGzipEncodingRequestHandler(entityText));
 
-        DefaultHttpClient client = createHttpClient();
+        HttpClient client = new DecompressingHttpClient(new DefaultHttpClient());
+
         HttpGet request = new HttpGet("/some-resource");
         String response = client.execute(getServerHttp(), request, new BasicResponseHandler());
         Assert.assertEquals("The entity text is correctly transported", entityText, response);
@@ -333,7 +294,8 @@ public void deflateResponsesWorkWithBasicResponseHandler() throws Exception {
 
         this.localServer.register("*", createDeflateEncodingRequestHandler(entityText, false));
 
-        DefaultHttpClient client = createHttpClient();
+        HttpClient client = new DecompressingHttpClient(new DefaultHttpClient());
+        
         HttpGet request = new HttpGet("/some-resource");
         String response = client.execute(getServerHttp(), request, new BasicResponseHandler());
         Assert.assertEquals("The entity text is correctly transported", entityText, response);
@@ -457,10 +419,6 @@ public void handle(
         };
     }
 
-    private DefaultHttpClient createHttpClient() {
-        return new ContentEncodingHttpClient();
-    }
-
     /**
      * Sub-ordinate task passed off to a different thread to be executed.
      *
diff --git a/httpclient/src/test/java/org/apache/http/impl/client/TestDecompressingHttpClient.java b/httpclient/src/test/java/org/apache/http/impl/client/TestDecompressingHttpClient.java
new file mode 100644
index 0000000000..da7b2d4400
--- /dev/null
+++ b/httpclient/src/test/java/org/apache/http/impl/client/TestDecompressingHttpClient.java
@@ -0,0 +1,353 @@
+/*
+ * ====================================================================
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.http.impl.client;
+
+import static org.junit.Assert.*;
+import static org.mockito.Mockito.*;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.zip.GZIPOutputStream;
+
+import org.apache.http.Header;
+import org.apache.http.HeaderElement;
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpHost;
+import org.apache.http.HttpRequest;
+import org.apache.http.HttpResponse;
+import org.apache.http.HttpStatus;
+import org.apache.http.HttpVersion;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.ResponseHandler;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.conn.ClientConnectionManager;
+import org.apache.http.entity.ByteArrayEntity;
+import org.apache.http.message.BasicHttpResponse;
+import org.apache.http.params.BasicHttpParams;
+import org.apache.http.params.HttpParams;
+import org.apache.http.protocol.BasicHttpContext;
+import org.apache.http.protocol.HttpContext;
+import org.apache.http.util.EntityUtils;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.runners.MockitoJUnitRunner;
+
+@RunWith(MockitoJUnitRunner.class)
+public class TestDecompressingHttpClient {
+    
+    private DummyHttpClient backend;
+    @Mock private ClientConnectionManager mockConnManager;
+    @Mock private ResponseHandler<Object> mockHandler;
+    private DecompressingHttpClient impl;
+    private HttpUriRequest request;
+    private HttpContext ctx;
+    private HttpHost host;
+    @Mock private HttpResponse mockResponse;
+    @Mock private HttpEntity mockEntity;
+    private Object handled;
+    
+    @Before
+    public void canCreate() {
+        handled = new Object();
+        backend = new DummyHttpClient();
+        impl = new DecompressingHttpClient(backend);
+        request = new HttpGet("http://localhost:8080");
+        ctx = new BasicHttpContext();
+        host = new HttpHost("www.example.com");
+    }
+    
+    @Test
+    public void isAnHttpClient() {
+        assertTrue(impl instanceof HttpClient);
+    }
+    
+    @Test
+    public void usesParamsFromBackend() {
+        HttpParams params = new BasicHttpParams();
+        backend.setParams(params);
+        assertSame(params, impl.getParams());
+    }
+    
+    @Test
+    public void extractsHostNameFromUriRequest() {
+        assertEquals(new HttpHost("www.example.com"), 
+                impl.getHttpHost(new HttpGet("http://www.example.com/")));
+    }
+    
+    @Test
+    public void extractsHostNameAndPortFromUriRequest() {
+        assertEquals(new HttpHost("www.example.com:8080"), 
+                impl.getHttpHost(new HttpGet("http://www.example.com:8080/")));
+    }
+
+    @Test
+    public void extractsIPAddressFromUriRequest() {
+        assertEquals(new HttpHost("10.0.0.1"), 
+                impl.getHttpHost(new HttpGet("http://10.0.0.1/")));
+    }
+
+    @Test
+    public void extractsIPAddressAndPortFromUriRequest() {
+        assertEquals(new HttpHost("10.0.0.1:8080"), 
+                impl.getHttpHost(new HttpGet("http://10.0.0.1:8080/")));
+    }
+
+    @Test
+    public void extractsLocalhostFromUriRequest() {
+        assertEquals(new HttpHost("localhost"), 
+                impl.getHttpHost(new HttpGet("http://localhost/")));
+    }
+
+    @Test
+    public void extractsLocalhostAndPortFromUriRequest() {
+        assertEquals(new HttpHost("localhost:8080"), 
+                impl.getHttpHost(new HttpGet("http://localhost:8080/")));
+    }
+    
+    @Test
+    public void usesConnectionManagerFromBackend() {
+        backend.setConnectionManager(mockConnManager);
+        assertSame(mockConnManager, impl.getConnectionManager());
+    }
+    
+    private void assertAcceptEncodingGzipAndDeflateWereAddedToRequest(HttpRequest captured) {
+        boolean foundGzip = false;
+        boolean foundDeflate = false;
+        for(Header h : captured.getHeaders("Accept-Encoding")) {
+            for(HeaderElement elt : h.getElements()) {
+                if ("gzip".equals(elt.getName())) foundGzip = true;
+                if ("deflate".equals(elt.getName())) foundDeflate = true;
+            }
+        }
+        assertTrue(foundGzip);
+        assertTrue(foundDeflate);
+    }
+    
+    @Test
+    public void addsAcceptEncodingHeaderToHttpUriRequest() throws Exception {
+        impl.execute(request);
+        assertAcceptEncodingGzipAndDeflateWereAddedToRequest(backend.getCapturedRequest());
+    }
+
+    @Test
+    public void addsAcceptEncodingHeaderToHttpUriRequestWithContext() throws Exception {
+        impl.execute(request, ctx);
+        assertAcceptEncodingGzipAndDeflateWereAddedToRequest(backend.getCapturedRequest());
+    }
+    
+    @Test
+    public void addsAcceptEncodingHeaderToHostAndHttpRequest() throws Exception {
+        impl.execute(host, request);
+        assertAcceptEncodingGzipAndDeflateWereAddedToRequest(backend.getCapturedRequest());
+    }
+    
+    @Test
+    public void addsAcceptEncodingHeaderToHostAndHttpRequestWithContext() throws Exception {
+        impl.execute(host, request, ctx);
+        assertAcceptEncodingGzipAndDeflateWereAddedToRequest(backend.getCapturedRequest());
+    }
+    
+    @Test
+    public void addsAcceptEncodingHeaderToUriRequestWithHandler() throws Exception {
+        when(mockHandler.handleResponse(isA(HttpResponse.class))).thenReturn(new Object());
+        impl.execute(request, mockHandler);
+        assertAcceptEncodingGzipAndDeflateWereAddedToRequest(backend.getCapturedRequest());
+    }
+
+    @Test
+    public void addsAcceptEncodingHeaderToUriRequestWithHandlerAndContext() throws Exception {
+        when(mockHandler.handleResponse(isA(HttpResponse.class))).thenReturn(new Object());
+        impl.execute(request, mockHandler, ctx);
+        assertAcceptEncodingGzipAndDeflateWereAddedToRequest(backend.getCapturedRequest());
+    }
+
+    @Test
+    public void addsAcceptEncodingHeaderToRequestWithHostAndHandler() throws Exception {
+        when(mockHandler.handleResponse(isA(HttpResponse.class))).thenReturn(new Object());
+        impl.execute(host, request, mockHandler);
+        assertAcceptEncodingGzipAndDeflateWereAddedToRequest(backend.getCapturedRequest());
+    }
+
+    @Test
+    public void addsAcceptEncodingHeaderToRequestWithHostAndContextAndHandler() throws Exception {
+        when(mockHandler.handleResponse(isA(HttpResponse.class))).thenReturn(new Object());
+        impl.execute(host, request, mockHandler, ctx);
+        assertAcceptEncodingGzipAndDeflateWereAddedToRequest(backend.getCapturedRequest());
+    }
+
+    private void mockResponseHasNoContentEncodingHeaders() {
+        backend.setResponse(mockResponse);
+        when(mockResponse.getAllHeaders()).thenReturn(new Header[]{});
+        when(mockResponse.getHeaders("Content-Encoding")).thenReturn(new Header[]{});
+        when(mockResponse.getFirstHeader("Content-Encoding")).thenReturn(null);
+        when(mockResponse.getLastHeader("Content-Encoding")).thenReturn(null);
+        when(mockResponse.getEntity()).thenReturn(mockEntity);
+    }
+    
+    @Test
+    public void doesNotModifyResponseBodyIfNoContentEncoding() throws Exception {
+        mockResponseHasNoContentEncodingHeaders();
+        assertSame(mockResponse, impl.execute(request));
+        verify(mockResponse, never()).setEntity(any(HttpEntity.class));
+    }
+    
+    @Test
+    public void doesNotModifyResponseBodyIfNoContentEncodingWithContext() throws Exception {
+        mockResponseHasNoContentEncodingHeaders();
+        assertSame(mockResponse, impl.execute(request, ctx));
+        verify(mockResponse, never()).setEntity(any(HttpEntity.class));
+    }
+    
+    @Test
+    public void doesNotModifyResponseBodyIfNoContentEncodingForHostRequest() throws Exception {
+        mockResponseHasNoContentEncodingHeaders();
+        assertSame(mockResponse, impl.execute(host, request));
+        verify(mockResponse, never()).setEntity(any(HttpEntity.class));
+    }
+    
+    @Test
+    public void doesNotModifyResponseBodyIfNoContentEncodingForHostRequestWithContext() throws Exception {
+        mockResponseHasNoContentEncodingHeaders();
+        assertSame(mockResponse, impl.execute(host, request, ctx));
+        verify(mockResponse, never()).setEntity(any(HttpEntity.class));
+    }
+    
+    @Test
+    public void doesNotModifyResponseBodyWithHandlerIfNoContentEncoding() throws Exception {
+        mockResponseHasNoContentEncodingHeaders();
+        when(mockHandler.handleResponse(mockResponse)).thenReturn(handled);
+        assertSame(handled, impl.execute(request, mockHandler));
+        verify(mockResponse, never()).setEntity(any(HttpEntity.class));
+    }
+    
+    @Test
+    public void doesNotModifyResponseBodyWithHandlerAndContextIfNoContentEncoding() throws Exception {
+        mockResponseHasNoContentEncodingHeaders();
+        when(mockHandler.handleResponse(mockResponse)).thenReturn(handled);
+        assertSame(handled, impl.execute(request, mockHandler, ctx));
+        verify(mockResponse, never()).setEntity(any(HttpEntity.class));
+    }
+    
+    @Test
+    public void doesNotModifyResponseBodyWithHostAndHandlerIfNoContentEncoding() throws Exception {
+        mockResponseHasNoContentEncodingHeaders();
+        when(mockHandler.handleResponse(mockResponse)).thenReturn(handled);
+        assertSame(handled, impl.execute(host, request, mockHandler));
+        verify(mockResponse, never()).setEntity(any(HttpEntity.class));
+    }
+    
+    @Test
+    public void doesNotModifyResponseBodyWithHostAndHandlerAndContextIfNoContentEncoding() throws Exception {
+        mockResponseHasNoContentEncodingHeaders();
+        when(mockHandler.handleResponse(mockResponse)).thenReturn(handled);
+        assertSame(handled, impl.execute(host, request, mockHandler, ctx));
+        verify(mockResponse, never()).setEntity(any(HttpEntity.class));
+    }
+    
+    @Test
+    public void successfullyUncompressesContent() throws Exception {
+        final String plainText = "hello\n";
+        HttpResponse response = getGzippedResponse(plainText);
+        backend.setResponse(response);
+        
+        HttpResponse result = impl.execute(request);
+        ByteArrayOutputStream resultBuf = new ByteArrayOutputStream();
+        InputStream is = result.getEntity().getContent();
+        int b;
+        while((b = is.read()) != -1) {
+            resultBuf.write(b);
+        }
+        is.close();
+        assertEquals(plainText, new String(resultBuf.toByteArray()));
+    }
+    
+    @Test
+    public void uncompressedResponseHasUnknownLength() throws Exception {
+        final String plainText = "hello\n";
+        HttpResponse response = getGzippedResponse(plainText);
+        backend.setResponse(response);
+        
+        HttpResponse result = impl.execute(request);
+        HttpEntity entity = result.getEntity();
+        assertEquals(-1, entity.getContentLength());
+        EntityUtils.consume(entity);
+        assertNull(result.getFirstHeader("Content-Length"));
+    }
+
+    @Test
+    public void uncompressedResponseIsNotEncoded() throws Exception {
+        final String plainText = "hello\n";
+        HttpResponse response = getGzippedResponse(plainText);
+        backend.setResponse(response);
+        
+        HttpResponse result = impl.execute(request);
+        assertNull(result.getFirstHeader("Content-Encoding"));
+    }
+    
+    @Test
+    public void uncompressedResponseHasContentMD5Removed() throws Exception {
+        final String plainText = "hello\n";
+        HttpResponse response = getGzippedResponse(plainText);
+        response.setHeader("Content-MD5","a checksum");
+        backend.setResponse(response);
+        
+        HttpResponse result = impl.execute(request);
+        assertNull(result.getFirstHeader("Content-MD5"));
+    }
+    
+    @Test
+    public void unencodedResponseRetainsContentMD5() throws Exception {
+        final String plainText = "hello\n";
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, "OK");
+        response.setHeader("Content-MD5","a checksum");
+        response.setEntity(new ByteArrayEntity(plainText.getBytes()));
+        backend.setResponse(response);
+        
+        HttpResponse result = impl.execute(request);
+        assertNotNull(result.getFirstHeader("Content-MD5"));
+    }
+    
+    private HttpResponse getGzippedResponse(final String plainText)
+            throws IOException {
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, "OK");
+        response.setHeader("Content-Encoding","gzip");
+        response.setHeader("Content-Type","text/plain");
+        ByteArrayOutputStream buf = new ByteArrayOutputStream();
+        GZIPOutputStream gos = new GZIPOutputStream(buf);
+        gos.write(plainText.getBytes());
+        gos.close();
+        ByteArrayEntity body = new ByteArrayEntity(buf.toByteArray());
+        body.setContentEncoding("gzip");
+        body.setContentType("text/plain");
+        response.setHeader("Content-Length", "" + (int)body.getContentLength());
+        response.setEntity(body);
+        return response;
+    }
+}
diff --git a/httpclient/src/test/java/org/apache/http/impl/client/TestDefaultClientRequestDirector.java b/httpclient/src/test/java/org/apache/http/impl/client/TestDefaultClientRequestDirector.java
index 0afe4c233c..22340a99f7 100644
--- a/httpclient/src/test/java/org/apache/http/impl/client/TestDefaultClientRequestDirector.java
+++ b/httpclient/src/test/java/org/apache/http/impl/client/TestDefaultClientRequestDirector.java
@@ -184,6 +184,32 @@ public void testVirtualHostPortHeader() throws Exception {
         Assert.assertEquals(virtHost+":"+virtPort,headers[0].getValue());
     }
 
+    @Test
+    public void testClientLevelVirtualHostHeader() throws Exception {
+        int port = this.localServer.getServiceAddress().getPort();
+        this.localServer.register("*", new SimpleService());
+
+        HttpContext context = new BasicHttpContext();
+
+        String s = "http://localhost:" + port;
+        HttpGet httpget = new HttpGet(s);
+
+        String virtHost = "virtual";
+        this.httpclient.getParams().setParameter(ClientPNames.VIRTUAL_HOST, new HttpHost(virtHost, port));
+        HttpResponse response = this.httpclient.execute(getServerHttp(), httpget, context);
+        EntityUtils.consume(response.getEntity());
+
+        HttpRequest reqWrapper = (HttpRequest) context.getAttribute(
+                ExecutionContext.HTTP_REQUEST);
+
+        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());
+        // Check that Host header is generated as expected
+        Header[] headers = reqWrapper.getHeaders("host");
+        Assert.assertNotNull(headers);
+        Assert.assertEquals(1, headers.length);
+        Assert.assertEquals(virtHost+":"+port,headers[0].getValue());
+    }
+
     @Test
     public void testDefaultHostAtRequestLevel() throws Exception {
         int port = this.localServer.getServiceAddress().getPort();
diff --git a/httpclient/src/test/java/org/apache/http/impl/client/TestDefaultRedirectStrategy.java b/httpclient/src/test/java/org/apache/http/impl/client/TestDefaultRedirectStrategy.java
new file mode 100644
index 0000000000..79ce604738
--- /dev/null
+++ b/httpclient/src/test/java/org/apache/http/impl/client/TestDefaultRedirectStrategy.java
@@ -0,0 +1,335 @@
+/*
+ * ====================================================================
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.http.impl.client;
+
+import java.net.URI;
+import java.util.List;
+
+import org.apache.http.HttpHost;
+import org.apache.http.HttpResponse;
+import org.apache.http.HttpStatus;
+import org.apache.http.HttpVersion;
+import org.apache.http.ProtocolException;
+import org.apache.http.client.methods.HttpDelete;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpHead;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.client.methods.HttpPut;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.client.params.ClientPNames;
+import org.apache.http.message.BasicHttpResponse;
+import org.apache.http.protocol.BasicHttpContext;
+import org.apache.http.protocol.ExecutionContext;
+import org.apache.http.protocol.HttpContext;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class TestDefaultRedirectStrategy {
+    
+    @Test
+    public void testIsRedirectable() {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        Assert.assertTrue(redirectStrategy.isRedirectable(HttpGet.METHOD_NAME));
+        Assert.assertTrue(redirectStrategy.isRedirectable(HttpHead.METHOD_NAME));
+        Assert.assertFalse(redirectStrategy.isRedirectable(HttpPut.METHOD_NAME));
+        Assert.assertFalse(redirectStrategy.isRedirectable(HttpPost.METHOD_NAME));
+        Assert.assertFalse(redirectStrategy.isRedirectable(HttpDelete.METHOD_NAME));
+    }
+
+    @Test
+    public void testIsRedirectedMovedTemporary() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_MOVED_TEMPORARILY, "Redirect");
+        response.addHeader("Location", "http://localhost/stuff");
+        Assert.assertTrue(redirectStrategy.isRedirected(httpget, response, context));
+        HttpPost httppost = new HttpPost("http://localhost/");
+        Assert.assertFalse(redirectStrategy.isRedirected(httppost, response, context));
+    }
+
+    @Test
+    public void testIsRedirectedMovedTemporaryNoLocation() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_MOVED_TEMPORARILY, "Redirect");
+        Assert.assertFalse(redirectStrategy.isRedirected(httpget, response, context));
+    }
+
+    @Test
+    public void testIsRedirectedMovedPermanently() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_MOVED_PERMANENTLY, "Redirect");
+        Assert.assertTrue(redirectStrategy.isRedirected(httpget, response, context));
+        HttpPost httppost = new HttpPost("http://localhost/");
+        Assert.assertFalse(redirectStrategy.isRedirected(httppost, response, context));
+    }
+
+    @Test
+    public void testIsRedirectedTemporaryRedirect() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_TEMPORARY_REDIRECT, "Redirect");
+        Assert.assertTrue(redirectStrategy.isRedirected(httpget, response, context));
+        HttpPost httppost = new HttpPost("http://localhost/");
+        Assert.assertFalse(redirectStrategy.isRedirected(httppost, response, context));
+    }
+
+    @Test
+    public void testIsRedirectedSeeOther() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_SEE_OTHER, "Redirect");
+        Assert.assertTrue(redirectStrategy.isRedirected(httpget, response, context));
+        HttpPost httppost = new HttpPost("http://localhost/");
+        Assert.assertTrue(redirectStrategy.isRedirected(httppost, response, context));
+    }
+
+    @Test
+    public void testIsRedirectedUnknownStatus() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 333, "Redirect");
+        Assert.assertFalse(redirectStrategy.isRedirected(httpget, response, context));
+        HttpPost httppost = new HttpPost("http://localhost/");
+        Assert.assertFalse(redirectStrategy.isRedirected(httppost, response, context));
+    }
+
+    @Test
+    public void testIsRedirectedInvalidInput() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_SEE_OTHER, "Redirect");
+        try {
+            redirectStrategy.isRedirected(null, response, context);
+            Assert.fail("IllegalArgumentException expected");
+        } catch (IllegalArgumentException expected) {
+        }
+        try {
+            redirectStrategy.isRedirected(httpget, null, context);
+            Assert.fail("IllegalArgumentException expected");
+        } catch (IllegalArgumentException expected) {
+        }
+    }
+
+    @Test
+    public void testGetLocationUri() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_MOVED_TEMPORARILY, "Redirect");
+        response.addHeader("Location", "http://localhost/stuff");
+        URI uri = redirectStrategy.getLocationURI(httpget, response, context);
+        Assert.assertEquals(URI.create("http://localhost/stuff"), uri);
+    }
+
+    @Test(expected=ProtocolException.class)
+    public void testGetLocationUriMissingHeader() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_MOVED_TEMPORARILY, "Redirect");
+        redirectStrategy.getLocationURI(httpget, response, context);
+    }
+
+    @Test(expected=ProtocolException.class)
+    public void testGetLocationUriInvalidLocation() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_MOVED_TEMPORARILY, "Redirect");
+        response.addHeader("Location", "http://localhost/not valid");
+        redirectStrategy.getLocationURI(httpget, response, context);
+    }
+
+    @Test
+    public void testGetLocationUriRelative() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        context.setAttribute(ExecutionContext.HTTP_TARGET_HOST, new HttpHost("localhost"));
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_MOVED_TEMPORARILY, "Redirect");
+        response.addHeader("Location", "/stuff");
+        URI uri = redirectStrategy.getLocationURI(httpget, response, context);
+        Assert.assertEquals(URI.create("http://localhost/stuff"), uri);
+    }
+
+    @Test(expected=IllegalStateException.class)
+    public void testGetLocationUriRelativeMissingTargetHost() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_MOVED_TEMPORARILY, "Redirect");
+        response.addHeader("Location", "/stuff");
+        URI uri = redirectStrategy.getLocationURI(httpget, response, context);
+        Assert.assertEquals(URI.create("http://localhost/stuff"), uri);
+    }
+
+    @Test
+    public void testGetLocationUriRelativeWithFragment() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        context.setAttribute(ExecutionContext.HTTP_TARGET_HOST, new HttpHost("localhost"));
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_MOVED_TEMPORARILY, "Redirect");
+        response.addHeader("Location", "/stuff#fragment");
+        URI uri = redirectStrategy.getLocationURI(httpget, response, context);
+        Assert.assertEquals(URI.create("http://localhost/stuff"), uri);
+    }
+
+    @Test
+    public void testGetLocationUriAbsoluteWithFragment() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        context.setAttribute(ExecutionContext.HTTP_TARGET_HOST, new HttpHost("localhost"));
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_MOVED_TEMPORARILY, "Redirect");
+        response.addHeader("Location", "http://localhost/stuff#fragment");
+        URI uri = redirectStrategy.getLocationURI(httpget, response, context);
+        Assert.assertEquals(URI.create("http://localhost/stuff"), uri);
+    }
+
+    @Test(expected=ProtocolException.class)
+    public void testGetLocationUriRelativeLocationNotAllowed() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        context.setAttribute(ExecutionContext.HTTP_TARGET_HOST, new HttpHost("localhost"));
+        HttpGet httpget = new HttpGet("http://localhost/");
+        httpget.getParams().setParameter(ClientPNames.REJECT_RELATIVE_REDIRECT, Boolean.TRUE);
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_MOVED_TEMPORARILY, "Redirect");
+        response.addHeader("Location", "/stuff");
+        redirectStrategy.getLocationURI(httpget, response, context);
+    }
+
+    @Test
+    public void testGetLocationUriAllowCircularRedirects() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        context.setAttribute(ExecutionContext.HTTP_TARGET_HOST, new HttpHost("localhost"));
+        HttpGet httpget = new HttpGet("http://localhost/");
+        httpget.getParams().setParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, Boolean.TRUE);
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_MOVED_TEMPORARILY, "Redirect");
+        response.addHeader("Location", "http://localhost/stuff");
+        URI uri = URI.create("http://localhost/stuff");
+        Assert.assertEquals(uri, redirectStrategy.getLocationURI(httpget, response, context));
+        Assert.assertEquals(uri, redirectStrategy.getLocationURI(httpget, response, context));
+        Assert.assertEquals(uri, redirectStrategy.getLocationURI(httpget, response, context));
+        
+        RedirectLocations redirectLocations = (RedirectLocations) context.getAttribute(
+                DefaultRedirectStrategy.REDIRECT_LOCATIONS);
+        Assert.assertNotNull(redirectLocations);
+        Assert.assertTrue(redirectLocations.contains(uri));
+        List<URI> uris = redirectLocations.getAll();
+        Assert.assertNotNull(uris);
+        Assert.assertEquals(3, uris.size());
+        Assert.assertEquals(uri, uris.get(0));
+        Assert.assertEquals(uri, uris.get(1));
+        Assert.assertEquals(uri, uris.get(2));
+    }
+
+    @Test(expected=ProtocolException.class)
+    public void testGetLocationUriDisallowCircularRedirects() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        context.setAttribute(ExecutionContext.HTTP_TARGET_HOST, new HttpHost("localhost"));
+        HttpGet httpget = new HttpGet("http://localhost/");
+        httpget.getParams().setParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, Boolean.FALSE);
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_MOVED_TEMPORARILY, "Redirect");
+        response.addHeader("Location", "http://localhost/stuff");
+        URI uri = URI.create("http://localhost/stuff");
+        Assert.assertEquals(uri, redirectStrategy.getLocationURI(httpget, response, context));
+        redirectStrategy.getLocationURI(httpget, response, context);
+    }
+
+    @Test
+    public void testGetLocationUriInvalidInput() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpContext context = new BasicHttpContext();
+        HttpGet httpget = new HttpGet("http://localhost/");
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_MOVED_TEMPORARILY, "Redirect");
+        response.addHeader("Location", "http://localhost/stuff");
+        try {
+            redirectStrategy.getLocationURI(null, response, context);
+            Assert.fail("IllegalArgumentException expected");
+        } catch (IllegalArgumentException expected) {
+        }
+        try {
+            redirectStrategy.getLocationURI(httpget, null, context);
+            Assert.fail("IllegalArgumentException expected");
+        } catch (IllegalArgumentException expected) {
+        }
+        try {
+            redirectStrategy.getLocationURI(httpget, response, null);
+            Assert.fail("IllegalArgumentException expected");
+        } catch (IllegalArgumentException expected) {
+        }
+    }
+
+    @Test
+    public void testGetRedirectRequest() throws Exception {
+        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); 
+        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 
+                HttpStatus.SC_SEE_OTHER, "Redirect");
+        response.addHeader("Location", "http://localhost/stuff");
+        HttpContext context1 = new BasicHttpContext();
+        HttpUriRequest redirect1 = redirectStrategy.getRedirect(
+                new HttpGet("http://localhost/"), response, context1);
+        Assert.assertEquals("GET", redirect1.getMethod());
+        HttpContext context2 = new BasicHttpContext();
+        HttpUriRequest redirect2 = redirectStrategy.getRedirect(
+                new HttpPost("http://localhost/"), response, context2);
+        Assert.assertEquals("GET", redirect2.getMethod());
+        HttpContext context3 = new BasicHttpContext();
+        HttpUriRequest redirect3 = redirectStrategy.getRedirect(
+                new HttpHead("http://localhost/"), response, context3);
+        Assert.assertEquals("HEAD", redirect3.getMethod());
+    }
+
+}
diff --git a/httpclient/src/test/java/org/apache/http/impl/conn/TestDefaultResponseParser.java b/httpclient/src/test/java/org/apache/http/impl/conn/TestDefaultHttpResponseParser.java
similarity index 89%
rename from httpclient/src/test/java/org/apache/http/impl/conn/TestDefaultResponseParser.java
rename to httpclient/src/test/java/org/apache/http/impl/conn/TestDefaultHttpResponseParser.java
index 4fb2766f00..4286a56c91 100644
--- a/httpclient/src/test/java/org/apache/http/impl/conn/TestDefaultResponseParser.java
+++ b/httpclient/src/test/java/org/apache/http/impl/conn/TestDefaultHttpResponseParser.java
@@ -39,13 +39,14 @@
 import org.apache.http.mockup.SessionInputBufferMockup;
 import org.apache.http.params.BasicHttpParams;
 import org.apache.http.params.HttpParams;
+import org.apache.http.util.CharArrayBuffer;
 import org.junit.Assert;
 import org.junit.Test;
 
 /**
  * Tests for <code>DefaultResponseParser</code>.
  */
-public class TestDefaultResponseParser {
+public class TestDefaultHttpResponseParser {
 
     @Test
     public void testResponseParsingWithSomeGarbage() throws Exception {
@@ -60,7 +61,7 @@ public void testResponseParsingWithSomeGarbage() throws Exception {
 
         HttpParams params = new BasicHttpParams();
         SessionInputBuffer inbuffer = new SessionInputBufferMockup(s, "US-ASCII", params);
-        HttpMessageParser<HttpResponse> parser = new DefaultResponseParser(
+        HttpMessageParser<HttpResponse> parser = new DefaultHttpResponseParser(
                 inbuffer,
                 BasicLineParser.DEFAULT,
                 new DefaultHttpResponseFactory(),
@@ -91,15 +92,15 @@ public void testResponseParsingWithTooMuchGarbage() throws Exception {
 
         HttpParams params = new BasicHttpParams();
         SessionInputBuffer inbuffer = new SessionInputBufferMockup(s, "US-ASCII", params);
-        HttpMessageParser<HttpResponse> parser = new DefaultResponseParser(
+        HttpMessageParser<HttpResponse> parser = new DefaultHttpResponseParser(
                 inbuffer,
                 BasicLineParser.DEFAULT,
                 new DefaultHttpResponseFactory(),
                 params) {
 
                     @Override
-                    protected int getMaxGarbageLines(HttpParams params) {
-                        return 2;
+                    protected boolean reject(final CharArrayBuffer line, int count) {
+                        return count >= 2;
                     }
 
         };
@@ -110,7 +111,7 @@ protected int getMaxGarbageLines(HttpParams params) {
     public void testResponseParsingNoResponse() throws Exception {
         HttpParams params = new BasicHttpParams();
         SessionInputBuffer inbuffer = new SessionInputBufferMockup("", "US-ASCII", params);
-        HttpMessageParser<HttpResponse> parser = new DefaultResponseParser(
+        HttpMessageParser<HttpResponse> parser = new DefaultHttpResponseParser(
                 inbuffer,
                 BasicLineParser.DEFAULT,
                 new DefaultHttpResponseFactory(),
@@ -127,7 +128,7 @@ public void testResponseParsingOnlyGarbage() throws Exception {
             "a lot more garbage\r\n";
         HttpParams params = new BasicHttpParams();
         SessionInputBuffer inbuffer = new SessionInputBufferMockup(s, "US-ASCII", params);
-        HttpMessageParser<HttpResponse> parser = new DefaultResponseParser(
+        HttpMessageParser<HttpResponse> parser = new DefaultHttpResponseParser(
                 inbuffer,
                 BasicLineParser.DEFAULT,
                 new DefaultHttpResponseFactory(),
diff --git a/httpclient/src/test/java/org/apache/http/impl/conn/tsccm/AwaitThread.java b/httpclient/src/test/java/org/apache/http/impl/conn/tsccm/AwaitThread.java
index 6a7ae677e9..a6dd17de27 100644
--- a/httpclient/src/test/java/org/apache/http/impl/conn/tsccm/AwaitThread.java
+++ b/httpclient/src/test/java/org/apache/http/impl/conn/tsccm/AwaitThread.java
@@ -35,7 +35,7 @@
 /**
  * Thread to await something.
  */
-@Deprecated
+@Deprecated 
 public class AwaitThread extends Thread {
 
     protected final WaitingThread wait_object;
diff --git a/httpclient/src/test/java/org/apache/http/impl/conn/tsccm/TestSpuriousWakeup.java b/httpclient/src/test/java/org/apache/http/impl/conn/tsccm/TestSpuriousWakeup.java
index 263475e07a..c744fc619f 100644
--- a/httpclient/src/test/java/org/apache/http/impl/conn/tsccm/TestSpuriousWakeup.java
+++ b/httpclient/src/test/java/org/apache/http/impl/conn/tsccm/TestSpuriousWakeup.java
@@ -52,7 +52,7 @@
  * satisfying the condition.
  *
  */
-@Deprecated
+@Deprecated 
 public class TestSpuriousWakeup {
 
     public final static
diff --git a/httpmime/pom.xml b/httpmime/pom.xml
index 78f292d7aa..1ae50f194e 100644
--- a/httpmime/pom.xml
+++ b/httpmime/pom.xml
@@ -30,7 +30,7 @@
   <parent>
     <groupId>org.apache.httpcomponents</groupId>
     <artifactId>httpcomponents-client</artifactId>
-    <version>4.2-alpha2-SNAPSHOT</version>
+    <version>4.2</version>
   </parent>
   <artifactId>httpmime</artifactId>
   <name>HttpMime</name>
diff --git a/httpmime/src/main/java/org/apache/http/entity/mime/content/FileBody.java b/httpmime/src/main/java/org/apache/http/entity/mime/content/FileBody.java
index 96235549a2..93ea6a220a 100644
--- a/httpmime/src/main/java/org/apache/http/entity/mime/content/FileBody.java
+++ b/httpmime/src/main/java/org/apache/http/entity/mime/content/FileBody.java
@@ -85,14 +85,6 @@ public InputStream getInputStream() throws IOException {
         return new FileInputStream(this.file);
     }
 
-    /**
-     * @deprecated use {@link #writeTo(OutputStream)}
-     */
-    @Deprecated
-    public void writeTo(final OutputStream out, int mode) throws IOException {
-        writeTo(out);
-    }
-
     public void writeTo(final OutputStream out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("Output stream may not be null");
diff --git a/httpmime/src/main/java/org/apache/http/entity/mime/content/InputStreamBody.java b/httpmime/src/main/java/org/apache/http/entity/mime/content/InputStreamBody.java
index 976621210e..1e0f9ea349 100644
--- a/httpmime/src/main/java/org/apache/http/entity/mime/content/InputStreamBody.java
+++ b/httpmime/src/main/java/org/apache/http/entity/mime/content/InputStreamBody.java
@@ -59,14 +59,6 @@ public InputStream getInputStream() {
         return this.in;
     }
 
-    /**
-     * @deprecated use {@link #writeTo(OutputStream)}
-     */
-    @Deprecated
-    public void writeTo(final OutputStream out, int mode) throws IOException {
-        writeTo(out);
-    }
-
     public void writeTo(final OutputStream out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("Output stream may not be null");
diff --git a/httpmime/src/main/java/org/apache/http/entity/mime/content/StringBody.java b/httpmime/src/main/java/org/apache/http/entity/mime/content/StringBody.java
index 780ac93c24..d3bdfb4dc1 100644
--- a/httpmime/src/main/java/org/apache/http/entity/mime/content/StringBody.java
+++ b/httpmime/src/main/java/org/apache/http/entity/mime/content/StringBody.java
@@ -132,14 +132,6 @@ public Reader getReader() {
                 this.charset);
     }
 
-    /**
-     * @deprecated use {@link #writeTo(OutputStream)}
-     */
-    @Deprecated
-    public void writeTo(final OutputStream out, int mode) throws IOException {
-        writeTo(out);
-    }
-
     public void writeTo(final OutputStream out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("Output stream may not be null");
diff --git a/pom.xml b/pom.xml
index cab28a15c0..8957be538c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -34,7 +34,7 @@
   <modelVersion>4.0.0</modelVersion>
   <artifactId>httpcomponents-client</artifactId>
   <name>HttpComponents Client</name>
-  <version>4.2-alpha2-SNAPSHOT</version>
+  <version>4.2</version>
   <description>Apache HttpComponents Client is a library of components for building client side HTTP services</description>
   <url>http://hc.apache.org/httpcomponents-client</url>
   <inceptionYear>1999</inceptionYear>
@@ -59,17 +59,17 @@
   </issueManagement>
 
   <scm>
-    <connection>scm:svn:https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk</connection>
-    <developerConnection>scm:svn:https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk</developerConnection>
-    <url>https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk</url>
+    <connection>scm:svn:https://svn.apache.org/repos/asf/httpcomponents/httpclient/tags/4.2</connection>
+    <developerConnection>scm:svn:https://svn.apache.org/repos/asf/httpcomponents/httpclient/tags/4.2</developerConnection>
+    <url>https://svn.apache.org/repos/asf/httpcomponents/httpclient/tags/4.2</url>
   </scm>
 
   <properties>
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
-    <httpcore.version>4.2-beta1</httpcore.version>
+    <httpcore.version>4.2</httpcore.version>
     <commons-logging.version>1.1.1</commons-logging.version>
-    <commons-codec.version>1.4</commons-codec.version>
+    <commons-codec.version>1.6</commons-codec.version>
     <ehcache.version>2.2.0</ehcache.version>
     <memcached.version>2.6</memcached.version>
     <slf4j.version>1.5.11</slf4j.version>
@@ -307,14 +307,12 @@
             </entity>
           </entities>
           <postProcess>
-            <copy todir="target/site/tutorial/html" 
-              failonerror="false">
+            <copy todir="target/site/tutorial/html" failonerror="false">
               <fileset dir="target/docbkx/html/index">
                 <include name="**/*.html" />
               </fileset>
             </copy>
-            <copy todir="target/site/tutorial/html" 
-              failonerror="false">
+            <copy todir="target/site/tutorial/html" failonerror="false">
               <fileset dir="src/docbkx/resources">
                 <include name="**/*.css" />
                 <include name="**/*.png" />
@@ -322,9 +320,7 @@
                 <include name="**/*.jpg" />
               </fileset>
             </copy>
-            <copy file="target/docbkx/pdf/index.pdf" 
-                  tofile="target/site/tutorial/pdf/httpclient-tutorial.pdf" 
-                  failonerror="false"/>
+            <copy file="target/docbkx/pdf/index.pdf" tofile="target/site/tutorial/pdf/httpclient-tutorial.pdf" failonerror="false" />
           </postProcess>
         </configuration>
       </plugin>
diff --git a/src/docbkx/connmgmt.xml b/src/docbkx/connmgmt.xml
index 37c6ac02c0..8e8f70c901 100644
--- a/src/docbkx/connmgmt.xml
+++ b/src/docbkx/connmgmt.xml
@@ -626,6 +626,10 @@ for (int j = 0; j < threads.length; j++) {
 }
 
 ]]></programlisting>
+        <para>While <interfacename>HttpClient</interfacename> instances are thread safe and can be 
+              shared between multiple threads of execution, it is highly recommended that each 
+              thread maintains its own dedicated instance of <interfacename>HttpContext
+              </interfacename>.</para>
         <programlisting><![CDATA[
 static class GetThread extends Thread {
     
diff --git a/src/docbkx/fundamentals.xml b/src/docbkx/fundamentals.xml
index 3135592afe..9c550dc7b6 100644
--- a/src/docbkx/fundamentals.xml
+++ b/src/docbkx/fundamentals.xml
@@ -473,6 +473,9 @@ byte[] response = httpclient.execute(httpget, handler);
             simply a collection of arbitrary named values. An application can populate context
             attributes prior to request execution or examine the context after the execution has
             been completed.</para>
+        <para><interfacename>HttpContext</interfacename> can contain arbitrary objects and 
+            therefore may be unsafe to share between multiple threads. It is recommended that
+            each thread of execution maintains its own context.</para>
         <para>In the course of HTTP request execution HttpClient adds the following attributes to
             the execution context:</para>
         <itemizedlist>
diff --git a/src/site/apt/download.apt b/src/site/apt/download.apt
index 90d7cb4f12..1a988661c9 100644
--- a/src/site/apt/download.apt
+++ b/src/site/apt/download.apt
@@ -42,46 +42,46 @@ HttpClient Downloads
     in your {{{http://maven.apache.org/guides/introduction/introduction-to-the-pom.html}pom.xml}} 
     by adding the following block to the dependency descriptor:
 
-* {HttpComponents Client 4.2-beta1}
+* {HttpComponents Client 4.2}
 
 -------------------------
   <dependency>
     <groupId>org.apache.httpcomponents</groupId>
     <artifactId>httpclient</artifactId>
-    <version>4.2-beta1</version>
+    <version>4.2</version>
     <scope>compile</scope>
   </dependency>
 -------------------------
 
-* {HttpComponents HttpMime 4.2-beta1}
+* {HttpComponents HttpMime 4.2}
 
 -------------------------
   <dependency>
     <groupId>org.apache.httpcomponents</groupId>
     <artifactId>httpmime</artifactId>
-    <version>4.2-beta1</version>
+    <version>4.2</version>
     <scope>compile</scope>
   </dependency>
 -------------------------
 
-* {HttpComponents HttpClient Cache 4.2-beta1}
+* {HttpComponents HttpClient Cache 4.2}
 
 -------------------------
   <dependency>
     <groupId>org.apache.httpcomponents</groupId>
     <artifactId>httpclient-cache</artifactId>
-    <version>4.2-beta1</version>
+    <version>4.2</version>
     <scope>compile</scope>
   </dependency>
 -------------------------
 
-* {HttpComponents HttpClient Fluent 4.2-beta1}
+* {HttpComponents HttpClient Fluent 4.2}
 
 -------------------------
   <dependency>
     <groupId>org.apache.httpcomponents</groupId>
     <artifactId>hc-fluent</artifactId>
-    <version>4.2-beta1</version>
+    <version>4.2</version>
     <scope>compile</scope>
   </dependency>
 -------------------------