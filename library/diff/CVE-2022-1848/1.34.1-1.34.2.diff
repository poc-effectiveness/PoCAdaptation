diff --git a/Dockerfile b/Dockerfile
index 9271222a..f99f7f58 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -4,7 +4,7 @@ FROM openjdk:8-jdk-alpine
 
 ENV BOOT_SLEEP=0 \
     JAVA_OPTS="" \
-    PARA_VERSION="1.34.1" \
+    PARA_VERSION="1.34.2" \
     REPO_URL=https://oss.sonatype.org/service/local/repositories/releases/content/com/erudika
 
 RUN addgroup -S para && adduser -S -G para para && \
diff --git a/README.md b/README.md
index 8298ab34..356c8f4f 100755
--- a/README.md
+++ b/README.md
@@ -134,7 +134,7 @@ First, create an `application.conf` file in a directory and run this command:
 ```
 $ docker run -ti -p 8080:8080 --rm -v para-data:/para/data \
   -v $(pwd)/application.conf:/para/application.conf \
-  -e JAVA_OPTS="-Dconfig.file=/para/application.conf" erudikaltd/para
+  -e JAVA_OPTS="-Dconfig.file=/para/application.conf -Dloader.path=lib" erudikaltd/para
 ```
 
 **Environment variables**
diff --git a/para-client/pom.xml b/para-client/pom.xml
index 13ce7985..2a968d01 100644
--- a/para-client/pom.xml
+++ b/para-client/pom.xml
@@ -4,7 +4,7 @@
 	<parent>
 		<groupId>com.erudika</groupId>
 		<artifactId>para-parent</artifactId>
-		<version>1.34.1</version>
+		<version>1.34.2</version>
 	</parent>
 
 	<artifactId>para-client</artifactId>
diff --git a/para-core/pom.xml b/para-core/pom.xml
index f994fcc8..0cd2c9d5 100644
--- a/para-core/pom.xml
+++ b/para-core/pom.xml
@@ -4,7 +4,7 @@
 	<parent>
 		<groupId>com.erudika</groupId>
 		<artifactId>para-parent</artifactId>
-		<version>1.34.1</version>
+		<version>1.34.2</version>
 	</parent>
 
 	<artifactId>para-core</artifactId>
@@ -12,9 +12,9 @@
 	<name>para-core</name>
 
 	<properties>
-		<jacksonVer>2.10.0.pr3</jacksonVer>
-		<springVer>5.2.0.RC2</springVer>
-		<flexmarkVer>0.50.32</flexmarkVer>
+		<jacksonVer>2.10.1</jacksonVer>
+		<springVer>5.2.1.RELEASE</springVer>
+		<flexmarkVer>0.50.44</flexmarkVer>
 	</properties>
 
 	<dependencies>
@@ -177,12 +177,12 @@
 		<dependency>
 			<groupId>com.typesafe</groupId>
 			<artifactId>config</artifactId>
-			<version>1.3.4</version>
+			<version>1.4.0</version>
 		</dependency>
 		<dependency>
 			<groupId>org.hibernate.validator</groupId>
 			<artifactId>hibernate-validator</artifactId>
-			<version>6.0.16.Final</version>
+			<version>6.1.0.Final</version>
 		</dependency>
 		<dependency>
 			<groupId>org.apache.commons</groupId>
@@ -218,6 +218,12 @@
 			<groupId>com.vladsch.flexmark</groupId>
 			<artifactId>flexmark-ext-emoji</artifactId>
 			<version>${flexmarkVer}</version>
+			<exclusions>
+				<exclusion>
+					<groupId>com.vladsch.flexmark</groupId>
+					<artifactId>flexmark-jira-converter</artifactId>
+				</exclusion>
+			</exclusions>
 		</dependency>
 		<dependency>
 			<groupId>com.vladsch.flexmark</groupId>
@@ -360,4 +366,4 @@
 		</plugins>
 	</build>
 
-</project>
\ No newline at end of file
+</project>
diff --git a/para-core/src/main/java/com/erudika/para/core/User.java b/para-core/src/main/java/com/erudika/para/core/User.java
index 47804370..7202c6dc 100644
--- a/para-core/src/main/java/com/erudika/para/core/User.java
+++ b/para-core/src/main/java/com/erudika/para/core/User.java
@@ -449,13 +449,22 @@ public boolean isMicrosoftUser() {
 
 	/**
 	 * Is the main identifier a Slack account id.
-	 * @return true if user is signed in with a Microsoft account
+	 * @return true if user is signed in with a Slack account
 	 */
 	@JsonIgnore
 	public boolean isSlackUser() {
 		return StringUtils.startsWithIgnoreCase(identifier, Config.SLACK_PREFIX);
 	}
 
+	/**
+	 * Is the main identifier a Mattermost account id.
+	 * @return true if user is signed in with a Mattermost account
+	 */
+	@JsonIgnore
+	public boolean isMattermostUser() {
+		return StringUtils.startsWithIgnoreCase(identifier, Config.MATTERMOST_PREFIX);
+	}
+
 	/**
 	 * Is the main identifier a LDAP account.
 	 * @return true if user is signed in with a LDAP account
diff --git a/para-core/src/main/java/com/erudika/para/rest/Signer.java b/para-core/src/main/java/com/erudika/para/rest/Signer.java
index 8f65cdc9..d5d757af 100644
--- a/para-core/src/main/java/com/erudika/para/rest/Signer.java
+++ b/para-core/src/main/java/com/erudika/para/rest/Signer.java
@@ -17,6 +17,7 @@
  */
 package com.erudika.para.rest;
 
+import com.erudika.para.Para;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.utils.Config;
 import com.fasterxml.jackson.core.JsonProcessingException;
@@ -270,6 +271,12 @@ public Response invokeSignedRequest(Client apiClient, String accessKey, String s
 					header("X-Amz-Date", signedHeaders.get("X-Amz-Date"));
 		}
 
+		if (Config.getConfigBoolean("user_agent_id_enabled", true)) {
+			String userAgent = new StringBuilder("Para client ").append(Para.getVersion()).append(" ").append(accessKey).
+					append(" (Java ").append(System.getProperty("java.runtime.version")).append(")").toString();
+			builder.header(HttpHeaders.USER_AGENT, userAgent);
+		}
+
 		if (jsonPayload != null) {
 			return builder.method(httpMethod, jsonPayload);
 		} else {
diff --git a/para-core/src/main/java/com/erudika/para/utils/Config.java b/para-core/src/main/java/com/erudika/para/utils/Config.java
index 8ed67b44..3b9dacbf 100644
--- a/para-core/src/main/java/com/erudika/para/utils/Config.java
+++ b/para-core/src/main/java/com/erudika/para/utils/Config.java
@@ -104,6 +104,8 @@ private Config() { }
 	public static final String MICROSOFT_PREFIX = "ms" + SEPARATOR;
 	/** Slack prefix - defaults to 'sl:'. */
 	public static final String SLACK_PREFIX = "sl" + SEPARATOR;
+	/** Mattermost prefix - defaults to 'mm:'. */
+	public static final String MATTERMOST_PREFIX = "mm" + Config.SEPARATOR;
 	/** OAuth2 generic prefix - defaults to 'oa2:'. */
 	public static final String OAUTH2_PREFIX = "oa2" + SEPARATOR;
 	/** OAuth2 second generic prefix - defaults to 'oa2second:'. */
@@ -208,6 +210,14 @@ private Config() { }
 	 * Slack app secret (for authentication).
 	 */
 	public static final String SLACK_SECRET = getConfigParam("sl_secret", "");
+	/**
+	 * Mattermost app id (for authentication).
+	 */
+	public static final String MATTERMOST_APP_ID = getConfigParam("mm_app_id", "");
+	/**
+	 * Mattermost app secret (for authentication).
+	 */
+	public static final String MATTERMOST_SECRET = getConfigParam("mm_secret", "");
 	/**
 	 * The identifier of the first administrator (can be email, OpenID, or Facebook user id).
 	 */
diff --git a/para-jar/pom.xml b/para-jar/pom.xml
index a63d75d4..cd882c0d 100644
--- a/para-jar/pom.xml
+++ b/para-jar/pom.xml
@@ -4,7 +4,7 @@
 	<parent>
 		<groupId>com.erudika</groupId>
 		<artifactId>para-parent</artifactId>
-		<version>1.34.1</version>
+		<version>1.34.2</version>
 	</parent>
 
 	<artifactId>para-jar</artifactId>
diff --git a/para-server/pom.xml b/para-server/pom.xml
index ec6cc4f3..ba2b5431 100644
--- a/para-server/pom.xml
+++ b/para-server/pom.xml
@@ -4,7 +4,7 @@
 	<parent>
 		<groupId>com.erudika</groupId>
 		<artifactId>para-parent</artifactId>
-		<version>1.34.1</version>
+		<version>1.34.2</version>
 	</parent>
 
 	<artifactId>para-server</artifactId>
@@ -12,7 +12,7 @@
 	<name>para-server</name>
 
 	<properties>
-		<springSecVer>5.2.0.RC1</springSecVer>
+		<springSecVer>5.2.1.RELEASE</springSecVer>
 		<springLdapVer>2.3.2.RELEASE</springLdapVer>
 	</properties>
 
@@ -92,21 +92,21 @@
 		<dependency>
 			<groupId>com.unboundid</groupId>
 			<artifactId>unboundid-ldapsdk</artifactId>
-			<version>4.0.10</version>
+			<version>4.0.13</version>
 		</dependency>
 
 		<!-- SAML -->
 		<dependency>
 			<groupId>com.onelogin</groupId>
 			<artifactId>java-saml</artifactId>
-			<version>2.4.0</version>
+			<version>2.5.0</version>
 		</dependency>
 
 		<!--	 CAFFEINE -->
 		<dependency>
 			<groupId>com.github.ben-manes.caffeine</groupId>
 			<artifactId>caffeine</artifactId>
-			<version>2.7.0</version>
+			<version>2.8.0</version>
 		</dependency>
 
 		<!-- JERSEY -->
@@ -196,7 +196,7 @@
 		<dependency>
 			<groupId>org.yaml</groupId>
 			<artifactId>snakeyaml</artifactId>
-			<version>1.24</version>
+			<version>1.25</version>
 		</dependency>
 		<dependency>
 			<groupId>javax.servlet</groupId>
@@ -207,7 +207,7 @@
 		<dependency>
 			<groupId>com.nimbusds</groupId>
 			<artifactId>nimbus-jose-jwt</artifactId>
-			<version>7.8</version>
+			<version>8.2.1</version>
 		</dependency>
 		<dependency>
 			<groupId>com.microsoft.azure.iothub-java-client</groupId>
@@ -233,7 +233,7 @@
 		<dependency>
 			<groupId>org.apache.httpcomponents</groupId>
 			<artifactId>httpclient</artifactId>
-			<version>4.5.9</version>
+			<version>4.5.10</version>
 		</dependency>
 
 		<!-- TESTING -->
@@ -326,6 +326,9 @@
 				<groupId>org.springframework.boot</groupId>
 				<artifactId>spring-boot-maven-plugin</artifactId>
 				<version>${springBootVer}</version>
+				<configuration>
+					<fork>false</fork>
+				</configuration>
 			</plugin>
 
 			<plugin>
diff --git a/para-server/src/main/java/com/erudika/para/security/SecurityUtils.java b/para-server/src/main/java/com/erudika/para/security/SecurityUtils.java
index 1c5e49f2..1f8a78d7 100644
--- a/para-server/src/main/java/com/erudika/para/security/SecurityUtils.java
+++ b/para-server/src/main/java/com/erudika/para/security/SecurityUtils.java
@@ -238,7 +238,7 @@ public static boolean isValidJWToken(String secret, SignedJWT jwt) {
 					Date expirationTime = claims.getExpirationTime();
 					Date notBeforeTime = claims.getNotBeforeTime();
 					boolean expired = expirationTime == null || expirationTime.before(referenceTime);
-					boolean notYetValid = notBeforeTime == null || notBeforeTime.after(referenceTime);
+					boolean notYetValid = notBeforeTime != null && notBeforeTime.after(referenceTime);
 
 					return !(expired || notYetValid);
 				}
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/GenericOAuth2Filter.java b/para-server/src/main/java/com/erudika/para/security/filters/GenericOAuth2Filter.java
index 8d9cb78f..b7cdac4b 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/GenericOAuth2Filter.java
+++ b/para-server/src/main/java/com/erudika/para/security/filters/GenericOAuth2Filter.java
@@ -117,9 +117,13 @@ public Authentication attemptAuthentication(HttpServletRequest request, HttpServ
 				App app = Para.getDAO().read(App.id(appid == null ? Config.getRootAppIdentifier() : appid));
 
 				Map<String, Object> token = tokenRequest(app, authCode, SecurityUtils.getRedirectUrl(request), alias);
-				if (token != null && token.containsKey("access_token")) {
-					userAuth = getOrCreateUser(app, token.get("access_token") +
-							Config.SEPARATOR + token.get("refresh_token"));
+				if (token != null) {
+					if (token.containsKey("access_token")) {
+						userAuth = getOrCreateUser(app, token.get("access_token") +
+								Config.SEPARATOR + token.get("refresh_token"));
+					} else {
+						logger.error("OAuth 2.0 token request failed with response " + token);
+					}
 				}
 			}
 		}
@@ -200,6 +204,10 @@ public UserAuthentication getOrCreateUser(App app, String accessToken, String al
 					}
 				}
 				userAuth = new UserAuthentication(new AuthenticatedUserDetails(user));
+			} else {
+				logger.error("Authentication was successful but OAuth 2 parameter names not configured properly - "
+						+ "'id' property not found in user data (data." + accountIdParam + " = null). "
+						+ "The names available are: " + (profile != null ? profile.keySet() : null));
 			}
 		}
 		return SecurityUtils.checkIfActive(userAuth, user, false);
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/LdapAuthFilter.java b/para-server/src/main/java/com/erudika/para/security/filters/LdapAuthFilter.java
index 7c7b580c..6dc8c424 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/LdapAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/security/filters/LdapAuthFilter.java
@@ -117,7 +117,8 @@ private UserAuthentication getOrCreateUser(App app, Authentication ldapAuth) {
 
 			if (StringUtils.isBlank(email)) {
 				if (!StringUtils.isBlank(adDomain)) {
-					LOG.warn("The AD doesn't have email attribute. Instead, it uses domain name for email address: {}@{}.", ldapAccountId, adDomain);
+					LOG.warn("The AD doesn't have email attribute. Instead, it uses domain name for email address: "
+							+ "{}@{}.", ldapAccountId, adDomain);
 					email = ldapAccountId.concat("@").concat(adDomain);
 				} else {
 					LOG.warn("Failed to create LDAP user '{}' with blank email.", ldapAccountId);
@@ -125,6 +126,10 @@ private UserAuthentication getOrCreateUser(App app, Authentication ldapAuth) {
 				}
 			}
 
+			if (Boolean.parseBoolean(app.getSetting("security.ldap.username_as_name") + "")) {
+				name = email.split("@")[0];
+			}
+
 			user.setAppid(getAppid(app));
 			user.setIdentifier(Config.LDAP_PREFIX.concat(ldapAccountId));
 			user.setEmail(email);
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/PasswordlessAuthFilter.java b/para-server/src/main/java/com/erudika/para/security/filters/PasswordlessAuthFilter.java
index 37e0f7eb..8d4205a0 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/PasswordlessAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/security/filters/PasswordlessAuthFilter.java
@@ -30,6 +30,7 @@
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import org.apache.commons.lang3.StringUtils;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;
 
@@ -100,6 +101,7 @@ public UserAuthentication getOrCreateUser(App app, String accessToken) {
 				String email = jwt.getJWTClaimsSet().getStringClaim(Config._EMAIL);
 				String name = jwt.getJWTClaimsSet().getStringClaim(Config._NAME);
 				String identifier = jwt.getJWTClaimsSet().getStringClaim(Config._IDENTIFIER);
+				String picture = jwt.getJWTClaimsSet().getStringClaim("picture");
 				String appid = app.getAppIdentifier();
 
 				User u = new User();
@@ -116,17 +118,36 @@ public UserAuthentication getOrCreateUser(App app, String accessToken) {
 					user.setName(name);
 					user.setIdentifier(identifier);
 					user.setEmail(email);
-					if (user.create() != null) {
-						// allow temporary first-time login without verifying email address
-						userAuth = new UserAuthentication(new AuthenticatedUserDetails(user));
-					}
+					user.setPicture(picture);
+					// allow temporary first-time login without verifying email address
+					user.create();
 				} else {
-					userAuth = new UserAuthentication(new AuthenticatedUserDetails(user));
+					if (updateUserInfo(user, picture, email, name, accessToken)) {
+						user.update();
+					}
 				}
+				userAuth = new UserAuthentication(new AuthenticatedUserDetails(user));
 			}
 		} catch (ParseException e) {
 			logger.warn("Invalid token: " + e.getMessage());
 		}
 		return SecurityUtils.checkIfActive(userAuth, user, false);
 	}
+
+	private boolean updateUserInfo(User user, String picture, String email, String name, String accessToken) {
+		boolean update = false;
+		if (!StringUtils.equals(user.getPicture(), picture)) {
+			user.setPicture(picture);
+			update = true;
+		}
+		if (!StringUtils.isBlank(email) && !StringUtils.equals(user.getEmail(), email)) {
+			user.setEmail(email);
+			update = true;
+		}
+		if (!StringUtils.isBlank(name) && !StringUtils.equals(user.getName(), name)) {
+			user.setName(name);
+			update = true;
+		}
+		return update;
+	}
 }
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/SlackAuthFilter.java b/para-server/src/main/java/com/erudika/para/security/filters/SlackAuthFilter.java
index 57e17909..82f6a508 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/SlackAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/security/filters/SlackAuthFilter.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * For issues and patches go to: https://slack.com/erudika
+ * For issues and patches go to: https://github.com/erudika
  */
 package com.erudika.para.security.filters;
 
diff --git a/para-war/pom.xml b/para-war/pom.xml
index 3493aa79..eb2b9e0e 100644
--- a/para-war/pom.xml
+++ b/para-war/pom.xml
@@ -4,7 +4,7 @@
 	<parent>
 		<groupId>com.erudika</groupId>
 		<artifactId>para-parent</artifactId>
-		<version>1.34.1</version>
+		<version>1.34.2</version>
 	</parent>
 
 	<artifactId>para-war</artifactId>
diff --git a/pom.xml b/pom.xml
index 2c97cb7b..46c04172 100644
--- a/pom.xml
+++ b/pom.xml
@@ -3,7 +3,7 @@
 
 	<groupId>com.erudika</groupId>
 	<artifactId>para-parent</artifactId>
-	<version>1.34.1</version>
+	<version>1.34.2</version>
 	<packaging>pom</packaging>
 
 	<organization>
@@ -50,7 +50,7 @@
 		<connection>scm:git:https://github.com/Erudika/para.git</connection>
 		<developerConnection>scm:git:git@github.com:Erudika/para.git</developerConnection>
 		<url>https://github.com/Erudika/para</url>
-		<tag>v1.34.1</tag>
+		<tag>v1.34.2</tag>
 	</scm>
 
 	<issueManagement>
@@ -79,12 +79,12 @@
 		<skipITs>${skipTests}</skipITs>
 		<skipUTs>${skipTests}</skipUTs>
 		<deployPluginVer>2.8.2</deployPluginVer>
-		<slf4jVer>1.7.28</slf4jVer>
+		<slf4jVer>1.7.29</slf4jVer>
 		<logbackVer>1.2.3</logbackVer>
-		<awsJdkVer>2.7.36</awsJdkVer>
-		<jerseyVer>2.29</jerseyVer>
-		<springBootVer>2.1.8.RELEASE</springBootVer>
-		<metricsVer>4.1.0</metricsVer>
+		<awsJdkVer>2.10.27</awsJdkVer>
+		<jerseyVer>2.29.1</jerseyVer>
+		<springBootVer>2.2.1.RELEASE</springBootVer>
+		<metricsVer>4.1.1</metricsVer>
 	</properties>
 
 	<dependencies>