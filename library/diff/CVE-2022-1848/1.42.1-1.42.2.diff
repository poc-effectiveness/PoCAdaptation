diff --git a/migrate-h2.sh b/migrate-h2.sh
new file mode 100644
index 00000000..6b5c3360
--- /dev/null
+++ b/migrate-h2.sh
@@ -0,0 +1,20 @@
+#!/bin/bash
+
+# Run this script from inside the Para ./data folder, or wherever para.mv.db is located
+
+OLD_H2_VERSION="1.4.200"
+NEW_H2_VERSION="2.0.202"
+PARA_USER="para"
+PARA_PASS="secret"
+
+wget -q -O h2-$NEW_H2_VERSION.jar https://search.maven.org/remotecontent?filepath=com/h2database/h2/2.0.202/h2-2.0.202.jar && \
+wget -q -O h2-$OLD_H2_VERSION.jar https://search.maven.org/remotecontent?filepath=com/h2database/h2/1.4.200/h2-1.4.200.jar && \
+
+java -cp h2-${OLD_H2_VERSION}.jar org.h2.tools.Script -url jdbc:h2:./para -user $PARA_USER -password $PARA_PASS -script para.sql && \
+rm para.mv.db para.trace.db && \
+java -cp h2-${NEW_H2_VERSION}.jar org.h2.tools.RunScript -url jdbc:h2:./para -user $PARA_USER -password $PARA_PASS -script para.sql && \
+rm h2-$NEW_H2_VERSION.jar h2-$OLD_H2_VERSION.jar && \
+
+echo "Migrated Para DB from $OLD_H2_VERSION to $NEW_H2_VERSION." || \
+
+echo "Migration failed."
\ No newline at end of file
diff --git a/para-client/pom.xml b/para-client/pom.xml
index 240612b0..1434db44 100644
--- a/para-client/pom.xml
+++ b/para-client/pom.xml
@@ -4,7 +4,7 @@
 	<parent>
 		<groupId>com.erudika</groupId>
 		<artifactId>para-parent</artifactId>
-		<version>1.42.1</version>
+		<version>1.42.2</version>
 	</parent>
 
 	<artifactId>para-client</artifactId>
@@ -35,7 +35,14 @@
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-checkstyle-plugin</artifactId>
-				<version>3.1.0</version>
+				<version>3.1.2</version>
+				<dependencies>
+					<dependency>
+						<groupId>com.puppycrawl.tools</groupId>
+						<artifactId>checkstyle</artifactId>
+						<version>9.2</version>
+					</dependency>
+				</dependencies>
 				<executions>
 					<execution>
 						<id>validate-server</id>
@@ -58,7 +65,7 @@
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-javadoc-plugin</artifactId>
-				<version>3.2.0</version>
+				<version>3.3.1</version>
 				<executions>
 					<execution>
 						<id>javadocs</id>
@@ -68,7 +75,7 @@
 					</execution>
 				</executions>
 				<configuration>
-					<source>1.8</source>
+					<release>11</release>
 					<stylesheetfile>../para-core/src/main/javadoc/stylesheet.css</stylesheetfile>
 					<show>public</show>
 					<aggregate>true</aggregate>
diff --git a/para-client/src/main/java/com/erudika/para/client/ParaClient.java b/para-client/src/main/java/com/erudika/para/client/ParaClient.java
index 5144b025..fd7bff2e 100644
--- a/para-client/src/main/java/com/erudika/para/client/ParaClient.java
+++ b/para-client/src/main/java/com/erudika/para/client/ParaClient.java
@@ -17,7 +17,7 @@
  */
 package com.erudika.para.client;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import static com.erudika.para.core.App.AllowedMethods.DELETE;
 import static com.erudika.para.core.App.AllowedMethods.GET;
@@ -28,11 +28,11 @@
 import com.erudika.para.core.Tag;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.core.User;
-import com.erudika.para.rest.Signer;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
-import com.erudika.para.validation.Constraint;
+import com.erudika.para.core.rest.Signer;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
+import com.erudika.para.core.validation.Constraint;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -832,7 +832,7 @@ public void deleteAll(List<String> keys) {
 	 * The result is paginated so only one page of items is returned, at a time.
 	 * @param <P> the type of object
 	 * @param type the type of objects to search for
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects
 	 */
 	public <P extends ParaObject> List<P> list(String type, Pager... pager) {
@@ -879,7 +879,7 @@ public <P extends ParaObject> List<P> findByIds(List<String> ids) {
 	 * @param radius the radius of the search circle
 	 * @param lat latitude
 	 * @param lng longitude
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	public <P extends ParaObject> List<P> findNearby(String type, String query, int radius, double lat, double lng,
@@ -899,7 +899,7 @@ public <P extends ParaObject> List<P> findNearby(String type, String query, int
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param field the property name of an object
 	 * @param prefix the prefix
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	public <P extends ParaObject> List<P> findPrefix(String type, String field, String prefix, Pager... pager) {
@@ -916,7 +916,7 @@ public <P extends ParaObject> List<P> findPrefix(String type, String field, Stri
 	 * @param <P> type of the object
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param query the query string
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	public <P extends ParaObject> List<P> findQuery(String type, String query, Pager... pager) {
@@ -933,7 +933,7 @@ public <P extends ParaObject> List<P> findQuery(String type, String query, Pager
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param field the name of the field to target (within a nested field "nstd")
 	 * @param query the query string
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	public <P extends ParaObject> List<P> findNestedQuery(String type, String field, String query, Pager... pager) {
@@ -952,7 +952,7 @@ public <P extends ParaObject> List<P> findNestedQuery(String type, String field,
 	 * @param filterKey exclude an object with this key from the results (optional)
 	 * @param fields a list of property names
 	 * @param liketext text to compare to
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	public <P extends ParaObject> List<P> findSimilar(String type, String filterKey, String[] fields, String liketext,
@@ -971,7 +971,7 @@ public <P extends ParaObject> List<P> findSimilar(String type, String filterKey,
 	 * @param <P> type of the object
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param tags the list of tags
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	public <P extends ParaObject> List<P> findTagged(String type, String[] tags, Pager... pager) {
@@ -987,7 +987,7 @@ public <P extends ParaObject> List<P> findTagged(String type, String[] tags, Pag
 	 * This method might be deprecated in the future.
 	 * @param <P> type of the object
 	 * @param keyword the tag keyword to search for
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	public <P extends ParaObject> List<P> findTags(String keyword, Pager... pager) {
@@ -1001,7 +1001,7 @@ public <P extends ParaObject> List<P> findTags(String keyword, Pager... pager) {
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param field the property name of an object
 	 * @param terms a list of terms (property values)
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	public <P extends ParaObject> List<P> findTermInList(String type, String field, List<String> terms, Pager... pager) {
@@ -1019,7 +1019,7 @@ public <P extends ParaObject> List<P> findTermInList(String type, String field,
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param terms a map of fields (property names) to terms (property values)
 	 * @param matchAll match all terms. If true - AND search, if false - OR search
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	public <P extends ParaObject> List<P> findTerms(String type, Map<String, ?> terms, boolean matchAll,
@@ -1051,7 +1051,7 @@ public <P extends ParaObject> List<P> findTerms(String type, Map<String, ?> term
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param field the property name of an object
 	 * @param wildcard wildcard query string. For example "cat*".
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	public <P extends ParaObject> List<P> findWildcard(String type, String field, String wildcard, Pager... pager) {
@@ -1148,7 +1148,7 @@ public Long countLinks(ParaObject obj, String type2) {
 	 * @param <P> type of linked objects
 	 * @param type2 type of linked objects to search for
 	 * @param obj the object to execute this method on
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of linked objects
 	 */
 	public <P extends ParaObject> List<P> getLinkedObjects(ParaObject obj, String type2, Pager... pager) {
@@ -1164,7 +1164,7 @@ public <P extends ParaObject> List<P> getLinkedObjects(ParaObject obj, String ty
 	 * @param <P> type of linked objects
 	 * @param type2 type of linked objects to search for
 	 * @param obj the object to execute this method on
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @param field the name of the field to target (within a nested field "nstd")
 	 * @param query a query string
 	 * @return a list of linked objects matching the search query
@@ -1282,7 +1282,7 @@ public Long countChildren(ParaObject obj, String type2) {
 	 * @param <P> the type of children
 	 * @param type2 the type of children to look for
 	 * @param obj the object to execute this method on
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of {@link ParaObject} in a one-to-many relationship with this object
 	 */
 	public <P extends ParaObject> List<P> getChildren(ParaObject obj, String type2, Pager... pager) {
@@ -1303,7 +1303,7 @@ public <P extends ParaObject> List<P> getChildren(ParaObject obj, String type2,
 	 * @param field the field name to use as filter
 	 * @param term the field value to use as filter
 	 * @param obj the object to execute this method on
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of {@link ParaObject} in a one-to-many relationship with this object
 	 */
 	public <P extends ParaObject> List<P> getChildren(ParaObject obj, String type2, String field, String term,
@@ -1327,7 +1327,7 @@ public <P extends ParaObject> List<P> getChildren(ParaObject obj, String type2,
 	 * @param type2 the type of children to look for
 	 * @param query a query string
 	 * @param obj the object to execute this method on
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of {@link ParaObject} in a one-to-many relationship with this object
 	 */
 	public <P extends ParaObject> List<P> findChildren(ParaObject obj, String type2, String query, Pager... pager) {
diff --git a/para-core/pom.xml b/para-core/pom.xml
index ef999cbd..aa6ddbdf 100644
--- a/para-core/pom.xml
+++ b/para-core/pom.xml
@@ -4,7 +4,7 @@
 	<parent>
 		<groupId>com.erudika</groupId>
 		<artifactId>para-parent</artifactId>
-		<version>1.42.1</version>
+		<version>1.42.2</version>
 	</parent>
 
 	<artifactId>para-core</artifactId>
@@ -64,6 +64,12 @@
 			<groupId>com.fasterxml.jackson.jaxrs</groupId>
 			<artifactId>jackson-jaxrs-json-provider</artifactId>
 			<version>${jacksonVer}</version>
+			<exclusions>
+				<exclusion>
+					<groupId>com.fasterxml.jackson.module</groupId>
+					<artifactId>jackson-module-jaxb-annotations</artifactId>
+				</exclusion>
+			</exclusions>
 		</dependency>
 		<dependency>
 			<groupId>com.fasterxml.jackson.core</groupId>
@@ -160,7 +166,7 @@
 		<dependency>
 			<groupId>org.hibernate.validator</groupId>
 			<artifactId>hibernate-validator</artifactId>
-			<!-- WARN: Breaking changes in 7.x! -->
+			<!-- WARN: Breaking changes in 7.x! Wait until Spring Boot 6, javax=>jakarta -->
 			<version>6.2.0.Final</version>
 		</dependency>
 		<dependency>
@@ -249,11 +255,11 @@
 			<artifactId>javax.el-api</artifactId>
 			<version>3.0.1-b06</version>
 		</dependency>
-		<dependency>
+<!--		<dependency>
 			<groupId>javax.xml.bind</groupId>
 			<artifactId>jaxb-api</artifactId>
 			<version>2.4.0-b180830.0359</version>
-		</dependency>
+		</dependency>-->
 		<dependency>
 			<groupId>org.glassfish.web</groupId>
 			<artifactId>javax.el</artifactId>
@@ -267,7 +273,7 @@
 		<dependency>
 			<groupId>io.github.hakky54</groupId>
 			<artifactId>sslcontext-kickstart</artifactId>
-			<version>6.8.0</version>
+			<version>7.1.0</version>
 		</dependency>
 	</dependencies>
 
@@ -316,7 +322,14 @@
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-checkstyle-plugin</artifactId>
-				<version>3.1.0</version>
+				<version>3.1.2</version>
+				<dependencies>
+					<dependency>
+						<groupId>com.puppycrawl.tools</groupId>
+						<artifactId>checkstyle</artifactId>
+						<version>9.2</version>
+					</dependency>
+				</dependencies>
 				<executions>
 					<execution>
 						<id>validate-core</id>
@@ -340,7 +353,7 @@
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-javadoc-plugin</artifactId>
-				<version>3.2.0</version>
+				<version>3.3.1</version>
 				<executions>
 					<execution>
 						<id>javadocs</id>
@@ -350,7 +363,7 @@
 					</execution>
 				</executions>
 				<configuration>
-					<source>1.8</source>
+					<release>11</release>
 					<stylesheetfile>src/main/javadoc/stylesheet.css</stylesheetfile>
 					<show>public</show>
 					<aggregate>true</aggregate>
diff --git a/para-core/src/main/java/com/erudika/para/core/Address.java b/para-core/src/main/java/com/erudika/para/core/Address.java
index 987f6bef..ee30a7dc 100644
--- a/para-core/src/main/java/com/erudika/para/core/Address.java
+++ b/para-core/src/main/java/com/erudika/para/core/Address.java
@@ -19,11 +19,11 @@
 
 import com.erudika.para.core.utils.CoreUtils;
 import com.erudika.para.core.utils.ParaObjectUtils;
-import com.erudika.para.annotations.Locked;
-import com.erudika.para.annotations.Stored;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.annotations.Locked;
+import com.erudika.para.core.annotations.Stored;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
 import java.util.List;
 import java.util.Objects;
 import javax.validation.constraints.Size;
diff --git a/para-core/src/main/java/com/erudika/para/core/App.java b/para-core/src/main/java/com/erudika/para/core/App.java
index 8223ac0e..ee3bcf73 100644
--- a/para-core/src/main/java/com/erudika/para/core/App.java
+++ b/para-core/src/main/java/com/erudika/para/core/App.java
@@ -17,14 +17,14 @@
  */
 package com.erudika.para.core;
 
-import com.erudika.para.AppCreatedListener;
-import com.erudika.para.AppDeletedListener;
-import com.erudika.para.AppSettingAddedListener;
-import com.erudika.para.AppSettingRemovedListener;
+import com.erudika.para.core.listeners.AppCreatedListener;
+import com.erudika.para.core.listeners.AppDeletedListener;
+import com.erudika.para.core.listeners.AppSettingAddedListener;
+import com.erudika.para.core.listeners.AppSettingRemovedListener;
 import com.erudika.para.core.utils.CoreUtils;
 import com.erudika.para.core.utils.ParaObjectUtils;
-import com.erudika.para.annotations.Locked;
-import com.erudika.para.annotations.Stored;
+import com.erudika.para.core.annotations.Locked;
+import com.erudika.para.core.annotations.Stored;
 import static com.erudika.para.core.App.AllowedMethods.ALL;
 import static com.erudika.para.core.App.AllowedMethods.GET;
 import static com.erudika.para.core.App.AllowedMethods.GUEST;
@@ -36,11 +36,11 @@
 import static com.erudika.para.core.App.AllowedMethods.WRITE;
 import static com.erudika.para.core.App.AllowedMethods.WRITE_ONLY;
 import static com.erudika.para.core.App.AllowedMethods.fromString;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
-import com.erudika.para.validation.Constraint;
-import com.erudika.para.validation.ValidationUtils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
+import com.erudika.para.core.validation.Constraint;
+import com.erudika.para.core.validation.ValidationUtils;
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonValue;
diff --git a/para-core/src/main/java/com/erudika/para/core/Linkable.java b/para-core/src/main/java/com/erudika/para/core/Linkable.java
index 78161c35..60972e34 100644
--- a/para-core/src/main/java/com/erudika/para/core/Linkable.java
+++ b/para-core/src/main/java/com/erudika/para/core/Linkable.java
@@ -17,7 +17,7 @@
  */
 package com.erudika.para.core;
 
-import com.erudika.para.utils.Pager;
+import com.erudika.para.core.utils.Pager;
 import java.util.List;
 
 /**
@@ -39,28 +39,28 @@ public interface Linkable {
 	/**
 	 * Returns all links between this type object and another type of object.
 	 * @param type2 the other type of object
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of {@code Linker} objects in a many-to-many relationship with this object.
 	 */
 	List<Linker> getLinks(String type2, Pager... pager);
 
 	/**
-	 * Similar to {@link #getChildren(java.lang.String, com.erudika.para.utils.Pager...) }
+	 * Similar to {@link #getChildren(java.lang.String, com.erudika.para.core.utils.Pager...) }
 	 * but for many-to-many relationships.
 	 * @param <P> type of linked objects
 	 * @param type type of linked objects to look for
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of linked objects
 	 */
 	<P extends ParaObject> List<P> getLinkedObjects(String type, Pager... pager);
 
 	/**
-	 * Similar to {@link #findChildren(java.lang.String, java.lang.String, com.erudika.para.utils.Pager...)}
+	 * Similar to {@link #findChildren(java.lang.String, java.lang.String, com.erudika.para.core.utils.Pager...)}
 	 * but for many-to-many relationships. Searches through all linked objects connected to this via
 	 * a {@link Linker} object.
 	 * @param <P> type of linked objects
 	 * @param type type of linked objects to look for
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @param field the name of the field to target (within a nested field "nstd")
 	 * @param query a query string
 	 * @return a list of linked objects matching the search query
@@ -116,7 +116,7 @@ public interface Linkable {
 	 * Returns all child objects linked to this object.
 	 * @param <P> the type of children
 	 * @param type the type of children to look for
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of {@link ParaObject} in a one-to-many relationship with this object
 	 */
 	<P extends ParaObject> List<P> getChildren(String type, Pager... pager);
@@ -126,7 +126,7 @@ public interface Linkable {
 	 * connected to this parent via the {@code parentid} field.
 	 * @param <P> the type of children
 	 * @param type the type of children to look for
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @param query a query string
 	 * @return a list of {@link ParaObject} in a one-to-many relationship with this object
 	 */
@@ -138,7 +138,7 @@ public interface Linkable {
 	 * @param type the type of children to look for
 	 * @param field the field name to use as filter
 	 * @param term the field value to use as filter
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of {@link ParaObject} in a one-to-many relationship with this object
 	 */
 	<P extends ParaObject> List<P> getChildren(String type, String field, String term, Pager... pager);
diff --git a/para-core/src/main/java/com/erudika/para/core/Linker.java b/para-core/src/main/java/com/erudika/para/core/Linker.java
index 00e4aac7..f663ca6d 100644
--- a/para-core/src/main/java/com/erudika/para/core/Linker.java
+++ b/para-core/src/main/java/com/erudika/para/core/Linker.java
@@ -19,11 +19,11 @@
 
 import com.erudika.para.core.utils.CoreUtils;
 import com.erudika.para.core.utils.ParaObjectUtils;
-import com.erudika.para.annotations.Locked;
-import com.erudika.para.annotations.Stored;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.annotations.Locked;
+import com.erudika.para.core.annotations.Stored;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
diff --git a/para-core/src/main/java/com/erudika/para/core/ParaObject.java b/para-core/src/main/java/com/erudika/para/core/ParaObject.java
index b6a6a1bb..1415c161 100644
--- a/para-core/src/main/java/com/erudika/para/core/ParaObject.java
+++ b/para-core/src/main/java/com/erudika/para/core/ParaObject.java
@@ -111,7 +111,7 @@ public interface ParaObject extends Serializable, Linkable, Votable {
 	/**
 	 * The URI of this object. For example: /users/123
 	 * @return the URI
-	 * @see com.erudika.para.utils.Utils#getObjectURI(com.erudika.para.core.ParaObject, boolean, boolean)
+	 * @see com.erudika.para.core.utils.Utils#getObjectURI(com.erudika.para.core.ParaObject, boolean, boolean)
 	 */
 	String getObjectURI();
 
@@ -206,28 +206,28 @@ public interface ParaObject extends Serializable, Linkable, Votable {
 	/**
 	 * Stores this object in the data store.
 	 * @return the id of the object (a new id if object is new)
-	 * @see com.erudika.para.annotations.Stored
-	 * @see com.erudika.para.persistence.DAO#create(com.erudika.para.core.ParaObject)
+	 * @see com.erudika.para.core.annotations.Stored
+	 * @see com.erudika.para.core.persistence.DAO#create(com.erudika.para.core.ParaObject)
 	 */
 	String create();
 
 	/**
-	 * Updates the object permanently. Changes to {@link com.erudika.para.annotations.Locked} fields are ignored.
-	 * @see com.erudika.para.annotations.Locked
-	 * @see com.erudika.para.persistence.DAO#update(com.erudika.para.core.ParaObject)
+	 * Updates the object permanently. Changes to {@link com.erudika.para.core.annotations.Locked} fields are ignored.
+	 * @see com.erudika.para.core.annotations.Locked
+	 * @see com.erudika.para.core.persistence.DAO#update(com.erudika.para.core.ParaObject)
 	 */
 	void update();
 
 	/**
 	 * Deletes the object permanently by removing it from the data store.
-	 * @see com.erudika.para.persistence.DAO#delete(com.erudika.para.core.ParaObject)
+	 * @see com.erudika.para.core.persistence.DAO#delete(com.erudika.para.core.ParaObject)
 	 */
 	void delete();
 
 	/**
 	 * Checks if an object is stored in the data store.
 	 * @return true if the object is persisted to the data store.
-	 * @see com.erudika.para.persistence.DAO#read(java.lang.String)
+	 * @see com.erudika.para.core.persistence.DAO#read(java.lang.String)
 	 */
 	boolean exists();
 
diff --git a/para-core/src/main/java/com/erudika/para/core/Sysprop.java b/para-core/src/main/java/com/erudika/para/core/Sysprop.java
index 0aa45a9d..606d68aa 100644
--- a/para-core/src/main/java/com/erudika/para/core/Sysprop.java
+++ b/para-core/src/main/java/com/erudika/para/core/Sysprop.java
@@ -19,11 +19,11 @@
 
 import com.erudika.para.core.utils.CoreUtils;
 import com.erudika.para.core.utils.ParaObjectUtils;
-import com.erudika.para.annotations.Locked;
-import com.erudika.para.annotations.Stored;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.annotations.Locked;
+import com.erudika.para.core.annotations.Stored;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 import java.io.Serializable;
diff --git a/para-core/src/main/java/com/erudika/para/core/Tag.java b/para-core/src/main/java/com/erudika/para/core/Tag.java
index 10b1d5bd..cd41b0e9 100644
--- a/para-core/src/main/java/com/erudika/para/core/Tag.java
+++ b/para-core/src/main/java/com/erudika/para/core/Tag.java
@@ -19,11 +19,11 @@
 
 import com.erudika.para.core.utils.CoreUtils;
 import com.erudika.para.core.utils.ParaObjectUtils;
-import com.erudika.para.annotations.Locked;
-import com.erudika.para.annotations.Stored;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.annotations.Locked;
+import com.erudika.para.core.annotations.Stored;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
 import java.util.List;
 import org.apache.commons.lang3.StringUtils;
 import javax.validation.constraints.NotBlank;
diff --git a/para-core/src/main/java/com/erudika/para/core/Translation.java b/para-core/src/main/java/com/erudika/para/core/Translation.java
index 5ef04aaa..4b12da68 100644
--- a/para-core/src/main/java/com/erudika/para/core/Translation.java
+++ b/para-core/src/main/java/com/erudika/para/core/Translation.java
@@ -19,11 +19,11 @@
 
 import com.erudika.para.core.utils.CoreUtils;
 import com.erudika.para.core.utils.ParaObjectUtils;
-import com.erudika.para.annotations.Locked;
-import com.erudika.para.annotations.Stored;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.annotations.Locked;
+import com.erudika.para.core.annotations.Stored;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
 import java.util.List;
 import java.util.Objects;
 import javax.validation.constraints.NotBlank;
diff --git a/para-core/src/main/java/com/erudika/para/core/User.java b/para-core/src/main/java/com/erudika/para/core/User.java
index 3f5568fa..0371904d 100644
--- a/para-core/src/main/java/com/erudika/para/core/User.java
+++ b/para-core/src/main/java/com/erudika/para/core/User.java
@@ -19,13 +19,13 @@
 
 import com.erudika.para.core.utils.CoreUtils;
 import com.erudika.para.core.utils.ParaObjectUtils;
-import com.erudika.para.annotations.Email;
-import com.erudika.para.annotations.Locked;
-import com.erudika.para.annotations.Stored;
-import com.erudika.para.i18n.CurrencyUtils;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.annotations.Email;
+import com.erudika.para.core.annotations.Locked;
+import com.erudika.para.core.annotations.Stored;
+import com.erudika.para.core.i18n.CurrencyUtils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import java.util.Collections;
 import java.util.HashMap;
diff --git a/para-core/src/main/java/com/erudika/para/core/Vote.java b/para-core/src/main/java/com/erudika/para/core/Vote.java
index 7cd4fa62..ba2144ae 100644
--- a/para-core/src/main/java/com/erudika/para/core/Vote.java
+++ b/para-core/src/main/java/com/erudika/para/core/Vote.java
@@ -19,13 +19,13 @@
 
 import com.erudika.para.core.utils.CoreUtils;
 import com.erudika.para.core.utils.ParaObjectUtils;
-import com.erudika.para.annotations.Locked;
-import com.erudika.para.annotations.Stored;
+import com.erudika.para.core.annotations.Locked;
+import com.erudika.para.core.annotations.Stored;
 import static com.erudika.para.core.Votable.VoteValue.DOWN;
 import static com.erudika.para.core.Votable.VoteValue.UP;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
 import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
diff --git a/para-core/src/main/java/com/erudika/para/core/Webhook.java b/para-core/src/main/java/com/erudika/para/core/Webhook.java
index 1f21e82c..64c310b1 100644
--- a/para-core/src/main/java/com/erudika/para/core/Webhook.java
+++ b/para-core/src/main/java/com/erudika/para/core/Webhook.java
@@ -17,12 +17,12 @@
  */
 package com.erudika.para.core;
 
-import com.erudika.para.Para;
-import com.erudika.para.annotations.Stored;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.core.annotations.Stored;
 import com.erudika.para.core.utils.ParaObjectUtils;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.LinkedList;
diff --git a/para-core/src/main/java/com/erudika/para/annotations/Cached.java b/para-core/src/main/java/com/erudika/para/core/annotations/Cached.java
similarity index 97%
rename from para-core/src/main/java/com/erudika/para/annotations/Cached.java
rename to para-core/src/main/java/com/erudika/para/core/annotations/Cached.java
index 55007d1f..d0d986a9 100644
--- a/para-core/src/main/java/com/erudika/para/annotations/Cached.java
+++ b/para-core/src/main/java/com/erudika/para/core/annotations/Cached.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.annotations;
+package com.erudika.para.core.annotations;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
diff --git a/para-core/src/main/java/com/erudika/para/annotations/Email.java b/para-core/src/main/java/com/erudika/para/core/annotations/Email.java
similarity index 94%
rename from para-core/src/main/java/com/erudika/para/annotations/Email.java
rename to para-core/src/main/java/com/erudika/para/core/annotations/Email.java
index 1e63e539..58c69f41 100644
--- a/para-core/src/main/java/com/erudika/para/annotations/Email.java
+++ b/para-core/src/main/java/com/erudika/para/core/annotations/Email.java
@@ -15,9 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.annotations;
+package com.erudika.para.core.annotations;
 
-import static com.erudika.para.annotations.Email.EMAIL_PATTERN;
+import static com.erudika.para.core.annotations.Email.EMAIL_PATTERN;
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
diff --git a/para-core/src/main/java/com/erudika/para/annotations/Indexed.java b/para-core/src/main/java/com/erudika/para/core/annotations/Indexed.java
similarity index 97%
rename from para-core/src/main/java/com/erudika/para/annotations/Indexed.java
rename to para-core/src/main/java/com/erudika/para/core/annotations/Indexed.java
index ed7c1d59..07899027 100644
--- a/para-core/src/main/java/com/erudika/para/annotations/Indexed.java
+++ b/para-core/src/main/java/com/erudika/para/core/annotations/Indexed.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.annotations;
+package com.erudika.para.core.annotations;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
diff --git a/para-core/src/main/java/com/erudika/para/annotations/Locked.java b/para-core/src/main/java/com/erudika/para/core/annotations/Locked.java
similarity index 96%
rename from para-core/src/main/java/com/erudika/para/annotations/Locked.java
rename to para-core/src/main/java/com/erudika/para/core/annotations/Locked.java
index 7130b4d1..e00764c5 100644
--- a/para-core/src/main/java/com/erudika/para/annotations/Locked.java
+++ b/para-core/src/main/java/com/erudika/para/core/annotations/Locked.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.annotations;
+package com.erudika.para.core.annotations;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
diff --git a/para-core/src/main/java/com/erudika/para/annotations/Measured.java b/para-core/src/main/java/com/erudika/para/core/annotations/Measured.java
similarity index 96%
rename from para-core/src/main/java/com/erudika/para/annotations/Measured.java
rename to para-core/src/main/java/com/erudika/para/core/annotations/Measured.java
index dbf55342..9509e680 100644
--- a/para-core/src/main/java/com/erudika/para/annotations/Measured.java
+++ b/para-core/src/main/java/com/erudika/para/core/annotations/Measured.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.annotations;
+package com.erudika.para.core.annotations;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
diff --git a/para-core/src/main/java/com/erudika/para/annotations/Stored.java b/para-core/src/main/java/com/erudika/para/core/annotations/Stored.java
similarity index 96%
rename from para-core/src/main/java/com/erudika/para/annotations/Stored.java
rename to para-core/src/main/java/com/erudika/para/core/annotations/Stored.java
index e4626ce9..d88b7114 100644
--- a/para-core/src/main/java/com/erudika/para/annotations/Stored.java
+++ b/para-core/src/main/java/com/erudika/para/core/annotations/Stored.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.annotations;
+package com.erudika.para.core.annotations;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
diff --git a/para-core/src/main/java/com/erudika/para/annotations/package-info.java b/para-core/src/main/java/com/erudika/para/core/annotations/package-info.java
similarity index 73%
rename from para-core/src/main/java/com/erudika/para/annotations/package-info.java
rename to para-core/src/main/java/com/erudika/para/core/annotations/package-info.java
index 6b1fee8a..63425410 100644
--- a/para-core/src/main/java/com/erudika/para/annotations/package-info.java
+++ b/para-core/src/main/java/com/erudika/para/core/annotations/package-info.java
@@ -2,5 +2,5 @@
  * Various annotation classes used for caching, indexing, etc.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.annotations;
+package com.erudika.para.core.annotations;
 
diff --git a/para-core/src/main/java/com/erudika/para/cache/Cache.java b/para-core/src/main/java/com/erudika/para/core/cache/Cache.java
similarity index 99%
rename from para-core/src/main/java/com/erudika/para/cache/Cache.java
rename to para-core/src/main/java/com/erudika/para/core/cache/Cache.java
index a097241f..4a00e4ab 100644
--- a/para-core/src/main/java/com/erudika/para/cache/Cache.java
+++ b/para-core/src/main/java/com/erudika/para/core/cache/Cache.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.cache;
+package com.erudika.para.core.cache;
 
 import java.util.List;
 import java.util.Map;
diff --git a/para-core/src/main/java/com/erudika/para/cache/MockCache.java b/para-core/src/main/java/com/erudika/para/core/cache/MockCache.java
similarity index 97%
rename from para-core/src/main/java/com/erudika/para/cache/MockCache.java
rename to para-core/src/main/java/com/erudika/para/core/cache/MockCache.java
index 7f6f4231..52a3f864 100644
--- a/para-core/src/main/java/com/erudika/para/cache/MockCache.java
+++ b/para-core/src/main/java/com/erudika/para/core/cache/MockCache.java
@@ -15,10 +15,10 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.cache;
+package com.erudika.para.core.cache;
 
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
diff --git a/para-server/src/main/java/com/erudika/para/cache/package-info.java b/para-core/src/main/java/com/erudika/para/core/cache/package-info.java
similarity index 73%
rename from para-server/src/main/java/com/erudika/para/cache/package-info.java
rename to para-core/src/main/java/com/erudika/para/core/cache/package-info.java
index f6eea50d..280c5e8f 100644
--- a/para-server/src/main/java/com/erudika/para/cache/package-info.java
+++ b/para-core/src/main/java/com/erudika/para/core/cache/package-info.java
@@ -2,5 +2,5 @@
  * The cache module - handles object caching.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.cache;
+package com.erudika.para.core.cache;
 
diff --git a/para-core/src/main/java/com/erudika/para/email/Emailer.java b/para-core/src/main/java/com/erudika/para/core/email/Emailer.java
similarity index 96%
rename from para-core/src/main/java/com/erudika/para/email/Emailer.java
rename to para-core/src/main/java/com/erudika/para/core/email/Emailer.java
index 53725b84..106cf470 100644
--- a/para-core/src/main/java/com/erudika/para/email/Emailer.java
+++ b/para-core/src/main/java/com/erudika/para/core/email/Emailer.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.email;
+package com.erudika.para.core.email;
 
 import java.util.List;
 
diff --git a/para-server/src/main/java/com/erudika/para/email/package-info.java b/para-core/src/main/java/com/erudika/para/core/email/package-info.java
similarity index 71%
rename from para-server/src/main/java/com/erudika/para/email/package-info.java
rename to para-core/src/main/java/com/erudika/para/core/email/package-info.java
index 573a5dcb..a1d30dae 100644
--- a/para-server/src/main/java/com/erudika/para/email/package-info.java
+++ b/para-core/src/main/java/com/erudika/para/core/email/package-info.java
@@ -2,5 +2,5 @@
  * The email module - sends emails.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.email;
+package com.erudika.para.core.email;
 
diff --git a/para-core/src/main/java/com/erudika/para/i18n/CurrencyUtils.java b/para-core/src/main/java/com/erudika/para/core/i18n/CurrencyUtils.java
similarity index 99%
rename from para-core/src/main/java/com/erudika/para/i18n/CurrencyUtils.java
rename to para-core/src/main/java/com/erudika/para/core/i18n/CurrencyUtils.java
index 989eceb7..c731568d 100644
--- a/para-core/src/main/java/com/erudika/para/i18n/CurrencyUtils.java
+++ b/para-core/src/main/java/com/erudika/para/core/i18n/CurrencyUtils.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.i18n;
+package com.erudika.para.core.i18n;
 
 import java.text.NumberFormat;
 import java.util.Currency;
diff --git a/para-core/src/main/java/com/erudika/para/i18n/package-info.java b/para-core/src/main/java/com/erudika/para/core/i18n/package-info.java
similarity index 78%
rename from para-core/src/main/java/com/erudika/para/i18n/package-info.java
rename to para-core/src/main/java/com/erudika/para/core/i18n/package-info.java
index d5849faf..c27635d8 100644
--- a/para-core/src/main/java/com/erudika/para/i18n/package-info.java
+++ b/para-core/src/main/java/com/erudika/para/core/i18n/package-info.java
@@ -2,5 +2,5 @@
  * The internationalization module - handles translations and currencies.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.i18n;
+package com.erudika.para.core.i18n;
 
diff --git a/para-core/src/main/java/com/erudika/para/AppCreatedListener.java b/para-core/src/main/java/com/erudika/para/core/listeners/AppCreatedListener.java
similarity index 96%
rename from para-core/src/main/java/com/erudika/para/AppCreatedListener.java
rename to para-core/src/main/java/com/erudika/para/core/listeners/AppCreatedListener.java
index 0c09849a..42f1b690 100644
--- a/para-core/src/main/java/com/erudika/para/AppCreatedListener.java
+++ b/para-core/src/main/java/com/erudika/para/core/listeners/AppCreatedListener.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para;
+package com.erudika.para.core.listeners;
 
 import com.erudika.para.core.App;
 import java.util.EventListener;
diff --git a/para-core/src/main/java/com/erudika/para/AppDeletedListener.java b/para-core/src/main/java/com/erudika/para/core/listeners/AppDeletedListener.java
similarity index 96%
rename from para-core/src/main/java/com/erudika/para/AppDeletedListener.java
rename to para-core/src/main/java/com/erudika/para/core/listeners/AppDeletedListener.java
index f1e74600..90e16c0d 100644
--- a/para-core/src/main/java/com/erudika/para/AppDeletedListener.java
+++ b/para-core/src/main/java/com/erudika/para/core/listeners/AppDeletedListener.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para;
+package com.erudika.para.core.listeners;
 
 import com.erudika.para.core.App;
 import java.util.EventListener;
diff --git a/para-core/src/main/java/com/erudika/para/AppSettingAddedListener.java b/para-core/src/main/java/com/erudika/para/core/listeners/AppSettingAddedListener.java
similarity index 96%
rename from para-core/src/main/java/com/erudika/para/AppSettingAddedListener.java
rename to para-core/src/main/java/com/erudika/para/core/listeners/AppSettingAddedListener.java
index dfd62479..ae38421a 100644
--- a/para-core/src/main/java/com/erudika/para/AppSettingAddedListener.java
+++ b/para-core/src/main/java/com/erudika/para/core/listeners/AppSettingAddedListener.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para;
+package com.erudika.para.core.listeners;
 
 import com.erudika.para.core.App;
 
diff --git a/para-core/src/main/java/com/erudika/para/AppSettingRemovedListener.java b/para-core/src/main/java/com/erudika/para/core/listeners/AppSettingRemovedListener.java
similarity index 96%
rename from para-core/src/main/java/com/erudika/para/AppSettingRemovedListener.java
rename to para-core/src/main/java/com/erudika/para/core/listeners/AppSettingRemovedListener.java
index 71f5b6f4..4babd7ad 100644
--- a/para-core/src/main/java/com/erudika/para/AppSettingRemovedListener.java
+++ b/para-core/src/main/java/com/erudika/para/core/listeners/AppSettingRemovedListener.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para;
+package com.erudika.para.core.listeners;
 
 import com.erudika.para.core.App;
 
diff --git a/para-core/src/main/java/com/erudika/para/DestroyListener.java b/para-core/src/main/java/com/erudika/para/core/listeners/DestroyListener.java
similarity index 95%
rename from para-core/src/main/java/com/erudika/para/DestroyListener.java
rename to para-core/src/main/java/com/erudika/para/core/listeners/DestroyListener.java
index d0f0368e..60d44b73 100644
--- a/para-core/src/main/java/com/erudika/para/DestroyListener.java
+++ b/para-core/src/main/java/com/erudika/para/core/listeners/DestroyListener.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para;
+package com.erudika.para.core.listeners;
 
 import java.util.EventListener;
 
diff --git a/para-core/src/main/java/com/erudika/para/IOListener.java b/para-core/src/main/java/com/erudika/para/core/listeners/IOListener.java
similarity index 94%
rename from para-core/src/main/java/com/erudika/para/IOListener.java
rename to para-core/src/main/java/com/erudika/para/core/listeners/IOListener.java
index 5c970587..ab22dcc3 100644
--- a/para-core/src/main/java/com/erudika/para/IOListener.java
+++ b/para-core/src/main/java/com/erudika/para/core/listeners/IOListener.java
@@ -15,12 +15,12 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para;
+package com.erudika.para.core.listeners;
 
 import java.lang.reflect.Method;
 
 /**
- * Listens for create/read/update/delete events when {@link com.erudika.para.persistence.DAO} is called.
+ * Listens for create/read/update/delete events when {@link com.erudika.para.core.persistence.DAO} is called.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
 public interface IOListener {
diff --git a/para-core/src/main/java/com/erudika/para/InitializeListener.java b/para-core/src/main/java/com/erudika/para/core/listeners/InitializeListener.java
similarity index 95%
rename from para-core/src/main/java/com/erudika/para/InitializeListener.java
rename to para-core/src/main/java/com/erudika/para/core/listeners/InitializeListener.java
index 2b586b5d..0a6a5deb 100644
--- a/para-core/src/main/java/com/erudika/para/InitializeListener.java
+++ b/para-core/src/main/java/com/erudika/para/core/listeners/InitializeListener.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para;
+package com.erudika.para.core.listeners;
 
 import java.util.EventListener;
 
diff --git a/para-core/src/main/java/com/erudika/para/WebhookIOListener.java b/para-core/src/main/java/com/erudika/para/core/listeners/WebhookIOListener.java
similarity index 93%
rename from para-core/src/main/java/com/erudika/para/WebhookIOListener.java
rename to para-core/src/main/java/com/erudika/para/core/listeners/WebhookIOListener.java
index 23265bd0..5699e465 100644
--- a/para-core/src/main/java/com/erudika/para/WebhookIOListener.java
+++ b/para-core/src/main/java/com/erudika/para/core/listeners/WebhookIOListener.java
@@ -15,13 +15,14 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para;
+package com.erudika.para.core.listeners;
 
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.ParaObject;
 import com.erudika.para.core.Sysprop;
 import com.erudika.para.core.Webhook;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import java.lang.reflect.Method;
 import java.util.List;
 import javax.inject.Singleton;
diff --git a/para-core/src/main/java/com/erudika/para/core/listeners/package-info.java b/para-core/src/main/java/com/erudika/para/core/listeners/package-info.java
new file mode 100644
index 00000000..8db1b5b6
--- /dev/null
+++ b/para-core/src/main/java/com/erudika/para/core/listeners/package-info.java
@@ -0,0 +1,5 @@
+/**
+ * Listeners package.
+ * @author Alex Bogdanovski [alex@erudika.com]
+ */
+package com.erudika.para.core.listeners;
diff --git a/para-core/src/main/java/com/erudika/para/metrics/Metrics.java b/para-core/src/main/java/com/erudika/para/core/metrics/Metrics.java
similarity index 96%
rename from para-core/src/main/java/com/erudika/para/metrics/Metrics.java
rename to para-core/src/main/java/com/erudika/para/core/metrics/Metrics.java
index e95abcf0..3c345bbd 100644
--- a/para-core/src/main/java/com/erudika/para/metrics/Metrics.java
+++ b/para-core/src/main/java/com/erudika/para/core/metrics/Metrics.java
@@ -15,14 +15,14 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.metrics;
+package com.erudika.para.core.metrics;
 
 import com.codahale.metrics.Counter;
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.SharedMetricRegistries;
 import com.codahale.metrics.Timer;
 import com.erudika.para.core.App;
-import com.erudika.para.rest.CustomResourceHandler;
+import com.erudika.para.core.rest.CustomResourceHandler;
 import java.io.Closeable;
 
 /**
@@ -96,7 +96,7 @@ private static Counter getCounter(String registryName, String className, String.
 		return SharedMetricRegistries.getOrCreate(registryName).counter(MetricRegistry.name(className, names));
 	}
 
-	static String getClassName(Class<?> clazz) {
+	public static String getClassName(Class<?> clazz) {
 		if (clazz.getSimpleName().contains("EnhancerByGuice")) {
 			clazz = clazz.getSuperclass();
 		}
diff --git a/para-core/src/main/java/com/erudika/para/persistence/DAO.java b/para-core/src/main/java/com/erudika/para/core/persistence/DAO.java
similarity index 95%
rename from para-core/src/main/java/com/erudika/para/persistence/DAO.java
rename to para-core/src/main/java/com/erudika/para/core/persistence/DAO.java
index 40a9b0a0..dc0b741c 100644
--- a/para-core/src/main/java/com/erudika/para/persistence/DAO.java
+++ b/para-core/src/main/java/com/erudika/para/core/persistence/DAO.java
@@ -15,12 +15,12 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.persistence;
+package com.erudika.para.core.persistence;
 
-import com.erudika.para.annotations.Cached;
-import com.erudika.para.annotations.Indexed;
+import com.erudika.para.core.annotations.Cached;
+import com.erudika.para.core.annotations.Indexed;
 import com.erudika.para.core.ParaObject;
-import com.erudika.para.utils.Pager;
+import com.erudika.para.core.utils.Pager;
 import java.util.List;
 import java.util.Map;
 
@@ -151,7 +151,7 @@ public interface DAO {
 	 * Calling this method would bypass the read cache and will hit the DB.
 	 * @param <P> the type of object
 	 * @param appid name of the {@link com.erudika.para.core.App}
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects
 	 */
 	<P extends ParaObject> List<P> readPage(String appid, Pager pager);
@@ -160,7 +160,7 @@ public interface DAO {
 	 * Reads a fixed number of objects. Used for scanning a data store page by page.
 	 * Calling this method would bypass the read cache and will hit the DB.
 	 * @param <P> the type of object
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects
 	 */
 	<P extends ParaObject> List<P> readPage(Pager pager);
diff --git a/para-core/src/main/java/com/erudika/para/persistence/MockDAO.java b/para-core/src/main/java/com/erudika/para/core/persistence/MockDAO.java
similarity index 96%
rename from para-core/src/main/java/com/erudika/para/persistence/MockDAO.java
rename to para-core/src/main/java/com/erudika/para/core/persistence/MockDAO.java
index fe63fd51..36566a66 100644
--- a/para-core/src/main/java/com/erudika/para/persistence/MockDAO.java
+++ b/para-core/src/main/java/com/erudika/para/core/persistence/MockDAO.java
@@ -15,14 +15,14 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.persistence;
+package com.erudika.para.core.persistence;
 
-import com.erudika.para.annotations.Locked;
+import com.erudika.para.core.annotations.Locked;
 import com.erudika.para.core.ParaObject;
 import com.erudika.para.core.utils.ParaObjectUtils;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
 import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.LinkedList;
diff --git a/para-core/src/main/java/com/erudika/para/persistence/package-info.java b/para-core/src/main/java/com/erudika/para/core/persistence/package-info.java
similarity index 76%
rename from para-core/src/main/java/com/erudika/para/persistence/package-info.java
rename to para-core/src/main/java/com/erudika/para/core/persistence/package-info.java
index b8ca726e..9b6a5b72 100644
--- a/para-core/src/main/java/com/erudika/para/persistence/package-info.java
+++ b/para-core/src/main/java/com/erudika/para/core/persistence/package-info.java
@@ -2,5 +2,5 @@
  * The persistence module - handles data store communications and object persistence.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.persistence;
+package com.erudika.para.core.persistence;
 
diff --git a/para-core/src/main/java/com/erudika/para/queue/MockQueue.java b/para-core/src/main/java/com/erudika/para/core/queue/MockQueue.java
similarity index 98%
rename from para-core/src/main/java/com/erudika/para/queue/MockQueue.java
rename to para-core/src/main/java/com/erudika/para/core/queue/MockQueue.java
index db016682..857cf40e 100644
--- a/para-core/src/main/java/com/erudika/para/queue/MockQueue.java
+++ b/para-core/src/main/java/com/erudika/para/core/queue/MockQueue.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.queue;
+package com.erudika.para.core.queue;
 
 import java.util.concurrent.ConcurrentLinkedQueue;
 import javax.inject.Singleton;
diff --git a/para-core/src/main/java/com/erudika/para/queue/Queue.java b/para-core/src/main/java/com/erudika/para/core/queue/Queue.java
similarity index 97%
rename from para-core/src/main/java/com/erudika/para/queue/Queue.java
rename to para-core/src/main/java/com/erudika/para/core/queue/Queue.java
index b893611c..df62951e 100644
--- a/para-core/src/main/java/com/erudika/para/queue/Queue.java
+++ b/para-core/src/main/java/com/erudika/para/core/queue/Queue.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.queue;
+package com.erudika.para.core.queue;
 
 /**
  * The core queue interface. Pushes messages to a queue and pulls them for processing.
diff --git a/para-core/src/main/java/com/erudika/para/queue/package-info.java b/para-core/src/main/java/com/erudika/para/core/queue/package-info.java
similarity index 71%
rename from para-core/src/main/java/com/erudika/para/queue/package-info.java
rename to para-core/src/main/java/com/erudika/para/core/queue/package-info.java
index 4d454a12..70bd9573 100644
--- a/para-core/src/main/java/com/erudika/para/queue/package-info.java
+++ b/para-core/src/main/java/com/erudika/para/core/queue/package-info.java
@@ -2,5 +2,5 @@
  * The queue module - handles queues.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.queue;
+package com.erudika.para.core.queue;
 
diff --git a/para-core/src/main/java/com/erudika/para/rest/CustomResourceHandler.java b/para-core/src/main/java/com/erudika/para/core/rest/CustomResourceHandler.java
similarity index 98%
rename from para-core/src/main/java/com/erudika/para/rest/CustomResourceHandler.java
rename to para-core/src/main/java/com/erudika/para/core/rest/CustomResourceHandler.java
index f547ccb7..f5d5e648 100644
--- a/para-core/src/main/java/com/erudika/para/rest/CustomResourceHandler.java
+++ b/para-core/src/main/java/com/erudika/para/core/rest/CustomResourceHandler.java
@@ -16,7 +16,7 @@
  * For issues and patches go to: https://github.com/erudika
  */
 
-package com.erudika.para.rest;
+package com.erudika.para.core.rest;
 
 import javax.ws.rs.container.ContainerRequestContext;
 import javax.ws.rs.core.Response;
diff --git a/para-core/src/main/java/com/erudika/para/rest/GenericExceptionMapper.java b/para-core/src/main/java/com/erudika/para/core/rest/GenericExceptionMapper.java
similarity index 98%
rename from para-core/src/main/java/com/erudika/para/rest/GenericExceptionMapper.java
rename to para-core/src/main/java/com/erudika/para/core/rest/GenericExceptionMapper.java
index ae14a075..1b889af2 100644
--- a/para-core/src/main/java/com/erudika/para/rest/GenericExceptionMapper.java
+++ b/para-core/src/main/java/com/erudika/para/core/rest/GenericExceptionMapper.java
@@ -16,7 +16,7 @@
  * For issues and patches go to: https://github.com/erudika
  */
 
-package com.erudika.para.rest;
+package com.erudika.para.core.rest;
 
 import java.util.LinkedHashMap;
 import javax.ws.rs.WebApplicationException;
diff --git a/para-core/src/main/java/com/erudika/para/rest/Signer.java b/para-core/src/main/java/com/erudika/para/core/rest/Signer.java
similarity index 99%
rename from para-core/src/main/java/com/erudika/para/rest/Signer.java
rename to para-core/src/main/java/com/erudika/para/core/rest/Signer.java
index ede5c12a..31e833a0 100644
--- a/para-core/src/main/java/com/erudika/para/rest/Signer.java
+++ b/para-core/src/main/java/com/erudika/para/core/rest/Signer.java
@@ -15,9 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.rest;
+package com.erudika.para.core.rest;
 
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.utils.Config;
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 import java.time.Clock;
diff --git a/para-core/src/main/java/com/erudika/para/rest/package-info.java b/para-core/src/main/java/com/erudika/para/core/rest/package-info.java
similarity index 76%
rename from para-core/src/main/java/com/erudika/para/rest/package-info.java
rename to para-core/src/main/java/com/erudika/para/core/rest/package-info.java
index 22cacda9..56f55f5a 100644
--- a/para-core/src/main/java/com/erudika/para/rest/package-info.java
+++ b/para-core/src/main/java/com/erudika/para/core/rest/package-info.java
@@ -2,5 +2,5 @@
  * The REST API module - provides a RESTful facade to clients.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.rest;
+package com.erudika.para.core.rest;
 
diff --git a/para-core/src/main/java/com/erudika/para/search/MockSearch.java b/para-core/src/main/java/com/erudika/para/core/search/MockSearch.java
similarity index 98%
rename from para-core/src/main/java/com/erudika/para/search/MockSearch.java
rename to para-core/src/main/java/com/erudika/para/core/search/MockSearch.java
index 4dca37c4..d7a2c66c 100644
--- a/para-core/src/main/java/com/erudika/para/search/MockSearch.java
+++ b/para-core/src/main/java/com/erudika/para/core/search/MockSearch.java
@@ -15,12 +15,12 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.search;
+package com.erudika.para.core.search;
 
 import com.erudika.para.core.App;
 import com.erudika.para.core.ParaObject;
-import com.erudika.para.persistence.DAO;
-import com.erudika.para.utils.Pager;
+import com.erudika.para.core.persistence.DAO;
+import com.erudika.para.core.utils.Pager;
 import java.util.List;
 import java.util.Map;
 import javax.inject.Singleton;
diff --git a/para-core/src/main/java/com/erudika/para/search/Search.java b/para-core/src/main/java/com/erudika/para/core/search/Search.java
similarity index 92%
rename from para-core/src/main/java/com/erudika/para/search/Search.java
rename to para-core/src/main/java/com/erudika/para/core/search/Search.java
index cc489ee9..ff0c1592 100644
--- a/para-core/src/main/java/com/erudika/para/search/Search.java
+++ b/para-core/src/main/java/com/erudika/para/core/search/Search.java
@@ -15,13 +15,13 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.search;
+package com.erudika.para.core.search;
 
-import com.erudika.para.annotations.Measured;
+import com.erudika.para.core.annotations.Measured;
 import com.erudika.para.core.App;
-import com.erudika.para.utils.Pager;
+import com.erudika.para.core.utils.Pager;
 import com.erudika.para.core.ParaObject;
-import com.erudika.para.persistence.DAO;
+import com.erudika.para.core.persistence.DAO;
 import java.util.List;
 import java.util.Map;
 
@@ -36,13 +36,13 @@ public interface Search {
 	/////////////////////////////////////////////
 
 	/**
-	 * Indexes an object. Only fields marked with {@link com.erudika.para.annotations.Stored} are indexed.
+	 * Indexes an object. Only fields marked with {@link com.erudika.para.core.annotations.Stored} are indexed.
 	 * @param po the domain object the object to index
 	 */
 	void index(ParaObject po);
 
 	/**
-	 * Indexes an object. Only fields marked with {@link com.erudika.para.annotations.Stored} are indexed.
+	 * Indexes an object. Only fields marked with {@link com.erudika.para.core.annotations.Stored} are indexed.
 	 * @param appid name of the {@link com.erudika.para.core.App}
 	 * @param po the domain object
 	 */
@@ -155,7 +155,7 @@ public interface Search {
 	 * @param radius the radius of the search circle
 	 * @param lat latitude
 	 * @param lng longitude
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	<P extends ParaObject> List<P> findNearby(String type, String query, int radius, double lat, double lng, Pager... pager);
@@ -169,7 +169,7 @@ public interface Search {
 	 * @param radius the radius of the search circle
 	 * @param lat latitude
 	 * @param lng longitude
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	@Measured
@@ -181,7 +181,7 @@ public interface Search {
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param field the property name of an object
 	 * @param prefix the prefix
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	<P extends ParaObject> List<P> findPrefix(String type, String field, String prefix, Pager... pager);
@@ -193,7 +193,7 @@ public interface Search {
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param field the property name of an object
 	 * @param prefix the prefix
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	@Measured
@@ -204,7 +204,7 @@ public interface Search {
 	 * @param <P> type of the object
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param query the query string
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	<P extends ParaObject> List<P> findQuery(String type, String query, Pager... pager);
@@ -215,7 +215,7 @@ public interface Search {
 	 * @param appid name of the {@link com.erudika.para.core.App}
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param query the query string
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	@Measured
@@ -227,7 +227,7 @@ public interface Search {
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param field the name of the field to target (within a nested field "nstd")
 	 * @param query query string
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return list of objects found
 	 */
 	<P extends ParaObject> List<P> findNestedQuery(String type, String field, String query, Pager... pager);
@@ -239,7 +239,7 @@ public interface Search {
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param field the name of the field to target (within a nested field "nstd")
 	 * @param query query string
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return list of objects found
 	 */
 	@Measured
@@ -252,7 +252,7 @@ public interface Search {
 	 * @param filterKey exclude an object with this key from the results (optional)
 	 * @param fields a list of property names
 	 * @param liketext text to compare to
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	<P extends ParaObject> List<P> findSimilar(String type, String filterKey, String[] fields, String liketext, Pager... pager);
@@ -265,7 +265,7 @@ public interface Search {
 	 * @param filterKey exclude an object with this key from the results (optional)
 	 * @param fields a list of property names
 	 * @param liketext text to compare to
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	@Measured
@@ -276,7 +276,7 @@ public interface Search {
 	 * @param <P> type of the object
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param tags the list of tags
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	<P extends ParaObject> List<P> findTagged(String type, String[] tags, Pager... pager);
@@ -287,7 +287,7 @@ public interface Search {
 	 * @param appid name of the {@link com.erudika.para.core.App}
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param tags the list of tags
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	@Measured
@@ -298,7 +298,7 @@ public interface Search {
 	 * This method might be deprecated in the future.
 	 * @param <P> type of the object
 	 * @param keyword the tag keyword to search for
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	<P extends ParaObject> List<P> findTags(String keyword, Pager... pager);
@@ -309,7 +309,7 @@ public interface Search {
 	 * @param <P> type of the object
 	 * @param appid name of the {@link com.erudika.para.core.App}
 	 * @param keyword the tag keyword to search for
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	@Measured
@@ -321,7 +321,7 @@ public interface Search {
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param field the property name of an object
 	 * @param terms a list of terms (property values)
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	<P extends ParaObject> List<P> findTermInList(String type, String field, List<?> terms, Pager... pager);
@@ -333,7 +333,7 @@ public interface Search {
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param field the property name of an object
 	 * @param terms a list of terms (property values)
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	@Measured
@@ -345,7 +345,7 @@ public interface Search {
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param terms a map of fields (property names) to terms (property values)
 	 * @param matchAll match all terms. If true - AND search, if false - OR search
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	<P extends ParaObject> List<P> findTerms(String type, Map<String, ?> terms, boolean matchAll, Pager... pager);
@@ -357,7 +357,7 @@ public interface Search {
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param terms a map of fields (property names) to terms (property values)
 	 * @param matchAll match all terms. If true - AND search, if false - OR search
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	@Measured
@@ -369,7 +369,7 @@ public interface Search {
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param field the property name of an object
 	 * @param wildcard wildcard query string. For example "cat*".
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	<P extends ParaObject> List<P> findWildcard(String type, String field, String wildcard, Pager... pager);
@@ -381,7 +381,7 @@ public interface Search {
 	 * @param type the type of object to search for. See {@link com.erudika.para.core.ParaObject#getType()}
 	 * @param field the property name of an object
 	 * @param wildcard wildcard query string. For example "cat*".
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of objects found
 	 */
 	@Measured
diff --git a/para-core/src/main/java/com/erudika/para/search/package-info.java b/para-core/src/main/java/com/erudika/para/core/search/package-info.java
similarity index 76%
rename from para-core/src/main/java/com/erudika/para/search/package-info.java
rename to para-core/src/main/java/com/erudika/para/core/search/package-info.java
index db8ffcf1..5e9b4344 100644
--- a/para-core/src/main/java/com/erudika/para/search/package-info.java
+++ b/para-core/src/main/java/com/erudika/para/core/search/package-info.java
@@ -2,5 +2,5 @@
  * The search module - manages indexing operations and enables search.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.search;
+package com.erudika.para.core.search;
 
diff --git a/para-core/src/main/java/com/erudika/para/storage/FileStore.java b/para-core/src/main/java/com/erudika/para/core/storage/FileStore.java
similarity index 97%
rename from para-core/src/main/java/com/erudika/para/storage/FileStore.java
rename to para-core/src/main/java/com/erudika/para/core/storage/FileStore.java
index ef1077b0..a1d2c22f 100644
--- a/para-core/src/main/java/com/erudika/para/storage/FileStore.java
+++ b/para-core/src/main/java/com/erudika/para/core/storage/FileStore.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.storage;
+package com.erudika.para.core.storage;
 
 import java.io.InputStream;
 
diff --git a/para-core/src/main/java/com/erudika/para/storage/MockFileStore.java b/para-core/src/main/java/com/erudika/para/core/storage/MockFileStore.java
similarity index 97%
rename from para-core/src/main/java/com/erudika/para/storage/MockFileStore.java
rename to para-core/src/main/java/com/erudika/para/core/storage/MockFileStore.java
index d04efbc6..c7dc3225 100644
--- a/para-core/src/main/java/com/erudika/para/storage/MockFileStore.java
+++ b/para-core/src/main/java/com/erudika/para/core/storage/MockFileStore.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.storage;
+package com.erudika.para.core.storage;
 
 import java.io.InputStream;
 import java.util.concurrent.ConcurrentHashMap;
diff --git a/para-server/src/main/java/com/erudika/para/storage/package-info.java b/para-core/src/main/java/com/erudika/para/core/storage/package-info.java
similarity index 72%
rename from para-server/src/main/java/com/erudika/para/storage/package-info.java
rename to para-core/src/main/java/com/erudika/para/core/storage/package-info.java
index de81a8bc..4a1a2369 100644
--- a/para-server/src/main/java/com/erudika/para/storage/package-info.java
+++ b/para-core/src/main/java/com/erudika/para/core/storage/package-info.java
@@ -2,5 +2,5 @@
  * The storage module - saves and loads files.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.storage;
+package com.erudika.para.core.storage;
 
diff --git a/para-core/src/main/java/com/erudika/para/utils/Config.java b/para-core/src/main/java/com/erudika/para/core/utils/Config.java
similarity index 99%
rename from para-core/src/main/java/com/erudika/para/utils/Config.java
rename to para-core/src/main/java/com/erudika/para/core/utils/Config.java
index 2fd844c6..77233397 100644
--- a/para-core/src/main/java/com/erudika/para/utils/Config.java
+++ b/para-core/src/main/java/com/erudika/para/core/utils/Config.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
 
 import com.erudika.para.core.App;
 import com.typesafe.config.ConfigFactory;
diff --git a/para-core/src/main/java/com/erudika/para/core/utils/CoreUtils.java b/para-core/src/main/java/com/erudika/para/core/utils/CoreUtils.java
index ca4e839e..5bbe5335 100644
--- a/para-core/src/main/java/com/erudika/para/core/utils/CoreUtils.java
+++ b/para-core/src/main/java/com/erudika/para/core/utils/CoreUtils.java
@@ -17,25 +17,22 @@
  */
 package com.erudika.para.core.utils;
 
-import com.erudika.para.InitializeListener;
-import com.erudika.para.cache.Cache;
-import com.erudika.para.cache.MockCache;
+import com.erudika.para.core.listeners.InitializeListener;
+import com.erudika.para.core.cache.Cache;
+import com.erudika.para.core.cache.MockCache;
 import com.erudika.para.core.Linker;
 import com.erudika.para.core.ParaObject;
 import com.erudika.para.core.Votable;
 import com.erudika.para.core.Votable.VoteValue;
 import com.erudika.para.core.Vote;
-import com.erudika.para.persistence.DAO;
-import com.erudika.para.persistence.MockDAO;
-import com.erudika.para.queue.MockQueue;
-import com.erudika.para.queue.Queue;
-import com.erudika.para.search.MockSearch;
-import com.erudika.para.search.Search;
-import com.erudika.para.storage.FileStore;
-import com.erudika.para.storage.MockFileStore;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.persistence.DAO;
+import com.erudika.para.core.persistence.MockDAO;
+import com.erudika.para.core.queue.MockQueue;
+import com.erudika.para.core.queue.Queue;
+import com.erudika.para.core.search.MockSearch;
+import com.erudika.para.core.search.Search;
+import com.erudika.para.core.storage.FileStore;
+import com.erudika.para.core.storage.MockFileStore;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -560,7 +557,7 @@ public static synchronized CoreUtils getInstance() {
 	 * @param type2 the type of children to look for
 	 * @param obj the object to execute this method on
 	 * @param query a query string
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of {@link ParaObject} in a one-to-many relationship with this object
 	 */
 	public abstract <P extends ParaObject> List<P> findChildren(ParaObject obj, String type2, String query, Pager... pager);
@@ -571,7 +568,7 @@ public static synchronized CoreUtils getInstance() {
 	 * @param <P> type of linked objects
 	 * @param type2 type of linked objects to search for
 	 * @param obj the object to execute this method on
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @param field the name of the field to target (within a nested field "nstd")
 	 * @param query a query string
 	 * @return a list of linked objects matching the search query
@@ -585,7 +582,7 @@ public abstract <P extends ParaObject> List<P> findLinkedObjects(ParaObject obj,
 	 * @param <P> the type of children
 	 * @param type2 the type of children to look for
 	 * @param obj the object to execute this method on
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of {@link ParaObject} in a one-to-many relationship with this object
 	 */
 	public abstract <P extends ParaObject> List<P> getChildren(ParaObject obj, String type2, Pager... pager);
@@ -598,7 +595,7 @@ public abstract <P extends ParaObject> List<P> findLinkedObjects(ParaObject obj,
 	 * @param field the field name to use as filter
 	 * @param term the field value to use as filter
 	 * @param obj the object to execute this method on
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of {@link ParaObject} in a one-to-many relationship with this object
 	 */
 	public abstract <P extends ParaObject> List<P> getChildren(ParaObject obj, String type2, String field,
@@ -620,7 +617,7 @@ public abstract <P extends ParaObject> List<P> getChildren(ParaObject obj, Strin
 	 * @param <P> type of linked objects
 	 * @param type2 type of linked objects to search for
 	 * @param obj the object to execute this method on
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of linked objects
 	 */
 	public abstract <P extends ParaObject> List<P> getLinkedObjects(ParaObject obj, String type2, Pager... pager);
@@ -630,7 +627,7 @@ public abstract <P extends ParaObject> List<P> getChildren(ParaObject obj, Strin
 	 *
 	 * @param obj the object to execute this method on
 	 * @param type2 the other type
-	 * @param pager a {@link com.erudika.para.utils.Pager}
+	 * @param pager a {@link com.erudika.para.core.utils.Pager}
 	 * @return a list of Linker objects
 	 */
 	public abstract List<Linker> getLinks(ParaObject obj, String type2, Pager... pager);
@@ -703,7 +700,7 @@ public abstract <P extends ParaObject> List<P> getChildren(ParaObject obj, Strin
 
 	/**
 	 * Creates the object again (use with caution!). Same as
-	 * {@link com.erudika.para.persistence.DAO#create(com.erudika.para.core.ParaObject)}.
+	 * {@link com.erudika.para.core.persistence.DAO#create(com.erudika.para.core.ParaObject)}.
 	 *
 	 * @param obj an object
 	 * @return the object id or null
@@ -712,7 +709,7 @@ public abstract <P extends ParaObject> List<P> getChildren(ParaObject obj, Strin
 
 	/**
 	 * Creates the object again (use with caution!). Same as
-	 * {@link com.erudika.para.persistence.DAO#create(java.lang.String, com.erudika.para.core.ParaObject)}.
+	 * {@link com.erudika.para.core.persistence.DAO#create(java.lang.String, com.erudika.para.core.ParaObject)}.
 	 *
 	 * @param appid the app id
 	 * @param obj an object
diff --git a/para-core/src/main/java/com/erudika/para/utils/HumanTime.java b/para-core/src/main/java/com/erudika/para/core/utils/HumanTime.java
similarity index 99%
rename from para-core/src/main/java/com/erudika/para/utils/HumanTime.java
rename to para-core/src/main/java/com/erudika/para/core/utils/HumanTime.java
index d72a82a1..34026373 100644
--- a/para-core/src/main/java/com/erudika/para/utils/HumanTime.java
+++ b/para-core/src/main/java/com/erudika/para/core/utils/HumanTime.java
@@ -19,7 +19,7 @@
  * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  *
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
 
 import java.io.Externalizable;
 import java.io.IOException;
diff --git a/para-core/src/main/java/com/erudika/para/utils/Pager.java b/para-core/src/main/java/com/erudika/para/core/utils/Pager.java
similarity index 95%
rename from para-core/src/main/java/com/erudika/para/utils/Pager.java
rename to para-core/src/main/java/com/erudika/para/core/utils/Pager.java
index e145281f..314239ff 100644
--- a/para-core/src/main/java/com/erudika/para/utils/Pager.java
+++ b/para-core/src/main/java/com/erudika/para/core/utils/Pager.java
@@ -15,15 +15,15 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
 
 import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
 
 /**
- * This class stores pagination data. It limits the results for queries in the {@link com.erudika.para.persistence.DAO}
- * and {@link com.erudika.para.search.Search} objects and also counts the total number of results that are returned.
+ * This class stores pagination data. It limits the results for queries in the {@link com.erudika.para.core.persistence.DAO}
+ * and {@link com.erudika.para.core.search.Search} objects and also counts the total number of results that are returned.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
 public class Pager {
diff --git a/para-core/src/main/java/com/erudika/para/Para.java b/para-core/src/main/java/com/erudika/para/core/utils/Para.java
similarity index 94%
rename from para-core/src/main/java/com/erudika/para/Para.java
rename to para-core/src/main/java/com/erudika/para/core/utils/Para.java
index 86354b6b..acaef910 100644
--- a/para-core/src/main/java/com/erudika/para/Para.java
+++ b/para-core/src/main/java/com/erudika/para/core/utils/Para.java
@@ -15,18 +15,18 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para;
+package com.erudika.para.core.utils;
 
-import com.erudika.para.cache.Cache;
+import com.erudika.para.core.listeners.DestroyListener;
+import com.erudika.para.core.listeners.IOListener;
+import com.erudika.para.core.listeners.InitializeListener;
+import com.erudika.para.core.cache.Cache;
 import com.erudika.para.core.App;
-import com.erudika.para.core.utils.CoreUtils;
-import com.erudika.para.persistence.DAO;
-import com.erudika.para.queue.Queue;
-import com.erudika.para.rest.CustomResourceHandler;
-import com.erudika.para.search.Search;
-import com.erudika.para.storage.FileStore;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.VersionInfo;
+import com.erudika.para.core.persistence.DAO;
+import com.erudika.para.core.queue.Queue;
+import com.erudika.para.core.rest.CustomResourceHandler;
+import com.erudika.para.core.search.Search;
+import com.erudika.para.core.storage.FileStore;
 import java.io.File;
 import java.net.URL;
 import java.net.URLClassLoader;
@@ -198,7 +198,7 @@ public static void addInitListener(InitializeListener il) {
 	/**
 	 * @return a list of {@link InitializeListener}
 	 */
-	protected static Set<InitializeListener> getInitListeners() {
+	public static Set<InitializeListener> getInitListeners() {
 		return Collections.unmodifiableSet(INIT_LISTENERS);
 	}
 
@@ -216,7 +216,7 @@ public static void addDestroyListener(DestroyListener dl) {
 	/**
 	 * @return a list of {@link DestroyListener
 	 */
-	protected static Set<DestroyListener> getDestroyListeners() {
+	public static Set<DestroyListener> getDestroyListeners() {
 		return Collections.unmodifiableSet(DESTROY_LISTENERS);
 	}
 
@@ -313,7 +313,7 @@ public static ScheduledFuture<?> asyncExecutePeriodically(Runnable task, long de
 	}
 
 	/**
-	 * Try loading external {@link com.erudika.para.rest.CustomResourceHandler} classes.
+	 * Try loading external {@link com.erudika.para.core.rest.CustomResourceHandler} classes.
 	 * These will handle custom API requests.
 	 * via {@link java.util.ServiceLoader#load(java.lang.Class)}.
 	 * @return a loaded list of  ServletContextListener class.
diff --git a/para-core/src/main/java/com/erudika/para/core/utils/ParaObjectUtils.java b/para-core/src/main/java/com/erudika/para/core/utils/ParaObjectUtils.java
index d868a4bd..7ed49b5d 100644
--- a/para-core/src/main/java/com/erudika/para/core/utils/ParaObjectUtils.java
+++ b/para-core/src/main/java/com/erudika/para/core/utils/ParaObjectUtils.java
@@ -17,13 +17,11 @@
  */
 package com.erudika.para.core.utils;
 
-import com.erudika.para.annotations.Stored;
+import com.erudika.para.core.annotations.Stored;
 import com.erudika.para.core.App;
 import com.erudika.para.core.ParaObject;
 import com.erudika.para.core.Sysprop;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
-import static com.erudika.para.utils.Utils.getAllDeclaredFields;
+import static com.erudika.para.core.utils.Utils.getAllDeclaredFields;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.JsonNode;
diff --git a/para-core/src/main/java/com/erudika/para/utils/RegistryUtils.java b/para-core/src/main/java/com/erudika/para/core/utils/RegistryUtils.java
similarity index 98%
rename from para-core/src/main/java/com/erudika/para/utils/RegistryUtils.java
rename to para-core/src/main/java/com/erudika/para/core/utils/RegistryUtils.java
index 6829dca8..3872b78c 100644
--- a/para-core/src/main/java/com/erudika/para/utils/RegistryUtils.java
+++ b/para-core/src/main/java/com/erudika/para/core/utils/RegistryUtils.java
@@ -15,10 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
 
 import com.erudika.para.core.Sysprop;
-import com.erudika.para.core.utils.CoreUtils;
 import org.apache.commons.lang3.StringUtils;
 
 import java.util.Map;
diff --git a/para-core/src/main/java/com/erudika/para/utils/Utils.java b/para-core/src/main/java/com/erudika/para/core/utils/Utils.java
similarity index 99%
rename from para-core/src/main/java/com/erudika/para/utils/Utils.java
rename to para-core/src/main/java/com/erudika/para/core/utils/Utils.java
index 8209d338..821b424a 100644
--- a/para-core/src/main/java/com/erudika/para/utils/Utils.java
+++ b/para-core/src/main/java/com/erudika/para/core/utils/Utils.java
@@ -15,9 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
 
-import com.erudika.para.annotations.Email;
+import com.erudika.para.core.annotations.Email;
 import com.erudika.para.core.ParaObject;
 import com.samskivert.mustache.Mustache;
 import com.vladsch.flexmark.ext.autolink.AutolinkExtension;
diff --git a/para-core/src/main/java/com/erudika/para/utils/VersionInfo.java b/para-core/src/main/java/com/erudika/para/core/utils/VersionInfo.java
similarity index 95%
rename from para-core/src/main/java/com/erudika/para/utils/VersionInfo.java
rename to para-core/src/main/java/com/erudika/para/core/utils/VersionInfo.java
index 0b1cc369..f069efe2 100644
--- a/para-core/src/main/java/com/erudika/para/utils/VersionInfo.java
+++ b/para-core/src/main/java/com/erudika/para/core/utils/VersionInfo.java
@@ -15,7 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
+
+import com.erudika.para.utils.Version;
 
 /**
  * Uses the generated class Version.java to display version information.
diff --git a/para-core/src/main/java/com/erudika/para/core/utils/package-info.java b/para-core/src/main/java/com/erudika/para/core/utils/package-info.java
index cce01d8a..eb04bc9b 100644
--- a/para-core/src/main/java/com/erudika/para/core/utils/package-info.java
+++ b/para-core/src/main/java/com/erudika/para/core/utils/package-info.java
@@ -1,5 +1,5 @@
 /**
- * Core utilities - helper methods for implementing ParaObject and and links.
+ * Utility classes.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
 package com.erudika.para.core.utils;
diff --git a/para-core/src/main/java/com/erudika/para/validation/Constraint.java b/para-core/src/main/java/com/erudika/para/core/validation/Constraint.java
similarity index 98%
rename from para-core/src/main/java/com/erudika/para/validation/Constraint.java
rename to para-core/src/main/java/com/erudika/para/core/validation/Constraint.java
index c178b7bf..96d79d4b 100644
--- a/para-core/src/main/java/com/erudika/para/validation/Constraint.java
+++ b/para-core/src/main/java/com/erudika/para/core/validation/Constraint.java
@@ -15,11 +15,11 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.validation;
+package com.erudika.para.core.validation;
 
-import com.erudika.para.annotations.Email;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.annotations.Email;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import java.lang.annotation.Annotation;
 import java.util.Collection;
 import java.util.Date;
diff --git a/para-core/src/main/java/com/erudika/para/validation/ValidationUtils.java b/para-core/src/main/java/com/erudika/para/core/validation/ValidationUtils.java
similarity index 89%
rename from para-core/src/main/java/com/erudika/para/validation/ValidationUtils.java
rename to para-core/src/main/java/com/erudika/para/core/validation/ValidationUtils.java
index 0d3b3b01..4df9b145 100644
--- a/para-core/src/main/java/com/erudika/para/validation/ValidationUtils.java
+++ b/para-core/src/main/java/com/erudika/para/core/validation/ValidationUtils.java
@@ -15,30 +15,30 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.validation;
+package com.erudika.para.core.validation;
 
-import com.erudika.para.annotations.Email;
+import com.erudika.para.core.annotations.Email;
 import com.erudika.para.core.App;
 import com.erudika.para.core.ParaObject;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.core.Sysprop;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
-import static com.erudika.para.validation.Constraint.digits;
-import static com.erudika.para.validation.Constraint.email;
-import static com.erudika.para.validation.Constraint.falsy;
-import static com.erudika.para.validation.Constraint.fromAnnotation;
-import static com.erudika.para.validation.Constraint.future;
-import static com.erudika.para.validation.Constraint.isValidConstraintType;
-import static com.erudika.para.validation.Constraint.matches;
-import static com.erudika.para.validation.Constraint.max;
-import static com.erudika.para.validation.Constraint.min;
-import static com.erudika.para.validation.Constraint.past;
-import static com.erudika.para.validation.Constraint.pattern;
-import static com.erudika.para.validation.Constraint.required;
-import static com.erudika.para.validation.Constraint.size;
-import static com.erudika.para.validation.Constraint.truthy;
-import static com.erudika.para.validation.Constraint.url;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
+import static com.erudika.para.core.validation.Constraint.digits;
+import static com.erudika.para.core.validation.Constraint.email;
+import static com.erudika.para.core.validation.Constraint.falsy;
+import static com.erudika.para.core.validation.Constraint.fromAnnotation;
+import static com.erudika.para.core.validation.Constraint.future;
+import static com.erudika.para.core.validation.Constraint.isValidConstraintType;
+import static com.erudika.para.core.validation.Constraint.matches;
+import static com.erudika.para.core.validation.Constraint.max;
+import static com.erudika.para.core.validation.Constraint.min;
+import static com.erudika.para.core.validation.Constraint.past;
+import static com.erudika.para.core.validation.Constraint.pattern;
+import static com.erudika.para.core.validation.Constraint.required;
+import static com.erudika.para.core.validation.Constraint.size;
+import static com.erudika.para.core.validation.Constraint.truthy;
+import static com.erudika.para.core.validation.Constraint.url;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.util.Collections;
diff --git a/para-core/src/main/java/com/erudika/para/validation/package-info.java b/para-core/src/main/java/com/erudika/para/core/validation/package-info.java
similarity index 67%
rename from para-core/src/main/java/com/erudika/para/validation/package-info.java
rename to para-core/src/main/java/com/erudika/para/core/validation/package-info.java
index cc3240d9..1c2e8498 100644
--- a/para-core/src/main/java/com/erudika/para/validation/package-info.java
+++ b/para-core/src/main/java/com/erudika/para/core/validation/package-info.java
@@ -2,5 +2,5 @@
  * Object validation utilities.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.validation;
+package com.erudika.para.core.validation;
 
diff --git a/para-core/src/main/java/com/erudika/para/package-info.java b/para-core/src/main/java/com/erudika/para/package-info.java
deleted file mode 100644
index 6ffee731..00000000
--- a/para-core/src/main/java/com/erudika/para/package-info.java
+++ /dev/null
@@ -1,5 +0,0 @@
-/**
- * Default package.
- * @author Alex Bogdanovski [alex@erudika.com]
- */
-package com.erudika.para;
diff --git a/para-core/src/main/java/com/erudika/para/utils/package-info.java b/para-core/src/main/java/com/erudika/para/utils/package-info.java
deleted file mode 100644
index 24def927..00000000
--- a/para-core/src/main/java/com/erudika/para/utils/package-info.java
+++ /dev/null
@@ -1,6 +0,0 @@
-/**
- * Utility classes.
- * @author Alex Bogdanovski [alex@erudika.com]
- */
-package com.erudika.para.utils;
-
diff --git a/para-core/src/main/resources/checkstyle.xml b/para-core/src/main/resources/checkstyle.xml
index 1009b071..04c67a24 100644
--- a/para-core/src/main/resources/checkstyle.xml
+++ b/para-core/src/main/resources/checkstyle.xml
@@ -12,6 +12,10 @@
 
 	<module name="FileLength"/>
 
+	<module name="LineLength">
+		<property name="max" value="180"/>
+	</module>
+
 	<module name="TreeWalker">
 		<module name="RegexpSinglelineJava">
 			<property name="format" value="\s+$"/>
@@ -28,7 +32,8 @@
 		<module name="JavadocType"/>
 		<module name="JavadocStyle"/>
 		<module name="JavadocMethod">
-			<property name="scope" value="public"/>
+			<property name="accessModifiers" value="public"/>
+			<property name="allowMissingParamTags" value="true"/>
 		</module>
 		<module name="JavadocVariable">
 			<property name="scope" value="public"/>
@@ -60,9 +65,6 @@
 		</module>
 
 		<!--Checks for Size Violations.-->
-		<module name="LineLength">
-			<property name="max" value="180"/>
-		</module>
 		<module name="MethodLength"/>
 		<module name="ParameterNumber">
 			<property name="max" value="15"/>
diff --git a/para-jar/pom.xml b/para-jar/pom.xml
index a787cef8..1d99b2bf 100644
--- a/para-jar/pom.xml
+++ b/para-jar/pom.xml
@@ -4,7 +4,7 @@
 	<parent>
 		<groupId>com.erudika</groupId>
 		<artifactId>para-parent</artifactId>
-		<version>1.42.1</version>
+		<version>1.42.2</version>
 	</parent>
 
 	<artifactId>para-jar</artifactId>
@@ -55,7 +55,7 @@
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-javadoc-plugin</artifactId>
-				<version>3.2.0</version>
+				<version>3.3.1</version>
 				<executions>
 					<execution>
 						<id>javadocs</id>
@@ -65,8 +65,9 @@
 					</execution>
 				</executions>
 				<configuration>
-					<source>1.8</source>
+					<release>11</release>
 					<stylesheetfile>../para-core/src/main/javadoc/stylesheet.css</stylesheetfile>
+					<failOnError>false</failOnError>
 					<show>public</show>
 					<aggregate>true</aggregate>
 					<quiet>true</quiet>
@@ -86,12 +87,12 @@
 				<dependency>
 					<groupId>com.erudika</groupId>
 					<artifactId>para-dao-sql</artifactId>
-					<version>1.40.3</version>
+					<version>1.42.1</version>
 				</dependency>
 				<dependency>
 					<groupId>com.erudika</groupId>
 					<artifactId>para-search-lucene</artifactId>
-					<version>1.40.1</version>
+					<version>1.42.1</version>
 				</dependency>
 			</dependencies>
 		</profile>
diff --git a/para-jar/src/main/java/com/erudika/para/Run.java b/para-jar/src/main/java/com/erudika/para/jar/Run.java
similarity index 91%
rename from para-jar/src/main/java/com/erudika/para/Run.java
rename to para-jar/src/main/java/com/erudika/para/jar/Run.java
index 898a4097..04ba5e1e 100644
--- a/para-jar/src/main/java/com/erudika/para/Run.java
+++ b/para-jar/src/main/java/com/erudika/para/jar/Run.java
@@ -15,7 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para;
+package com.erudika.para.jar;
+
+import com.erudika.para.server.ParaServer;
 
 /**
  * @author Alex Bogdanovski [alex@erudika.com]
diff --git a/para-jar/src/main/java/com/erudika/para/package-info.java b/para-jar/src/main/java/com/erudika/para/jar/package-info.java
similarity index 82%
rename from para-jar/src/main/java/com/erudika/para/package-info.java
rename to para-jar/src/main/java/com/erudika/para/jar/package-info.java
index 97f0ac19..9b072885 100644
--- a/para-jar/src/main/java/com/erudika/para/package-info.java
+++ b/para-jar/src/main/java/com/erudika/para/jar/package-info.java
@@ -2,4 +2,4 @@
  * Para JAR package. This is here to prevent an error during releases to Maven Central.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para;
+package com.erudika.para.jar;
diff --git a/para-server/pom.xml b/para-server/pom.xml
index 7a5a2e76..f3edf06e 100644
--- a/para-server/pom.xml
+++ b/para-server/pom.xml
@@ -4,7 +4,7 @@
 	<parent>
 		<groupId>com.erudika</groupId>
 		<artifactId>para-parent</artifactId>
-		<version>1.42.1</version>
+		<version>1.42.2</version>
 	</parent>
 
 	<artifactId>para-server</artifactId>
@@ -28,6 +28,12 @@
 			<groupId>org.springframework.security</groupId>
 			<artifactId>spring-security-core</artifactId>
 			<version>${springSecVer}</version>
+			<exclusions>
+				<exclusion>
+					<groupId>org.springframework</groupId>
+					<artifactId>spring-jcl</artifactId>
+				</exclusion>
+			</exclusions>
 		</dependency>
 		<dependency>
 			<groupId>org.springframework.security</groupId>
@@ -67,6 +73,10 @@
 					<groupId>org.hibernate</groupId>
 					<artifactId>hibernate-validator</artifactId>
 				</exclusion>
+				<exclusion>
+					<groupId>org.apache.logging.log4j</groupId>
+					<artifactId>log4j-to-slf4j</artifactId>
+				</exclusion>
 			</exclusions>
 		</dependency>
 		<dependency>
@@ -109,7 +119,7 @@
 		<dependency>
 			<groupId>com.unboundid</groupId>
 			<artifactId>unboundid-ldapsdk</artifactId>
-			<version>5.1.4</version>
+			<version>6.0.3</version>
 		</dependency>
 
 		<!-- SAML -->
@@ -123,7 +133,7 @@
 		<dependency>
 			<groupId>com.github.ben-manes.caffeine</groupId>
 			<artifactId>caffeine</artifactId>
-			<version>2.9.3</version>
+			<version>3.0.5</version>
 		</dependency>
 
 		<!-- JERSEY -->
@@ -216,11 +226,11 @@
 			<version>4.0.1</version>
 			<!--<scope>provided</scope>-->
 		</dependency>
-		<dependency>
+<!--		<dependency>
 			<groupId>org.glassfish.jaxb</groupId>
 			<artifactId>jaxb-runtime</artifactId>
 			<version>2.3.5</version>
-		</dependency>
+		</dependency>-->
 		<dependency>
 			<groupId>com.nimbusds</groupId>
 			<artifactId>nimbus-jose-jwt</artifactId>
@@ -247,7 +257,7 @@
 		<dependency>
 			<groupId>com.erudika</groupId>
 			<artifactId>para-search-lucene</artifactId>
-			<version>1.39.1</version>
+			<version>1.42.1</version>
 			<scope>test</scope>
 		</dependency>
 		<dependency>
@@ -394,7 +404,14 @@
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-checkstyle-plugin</artifactId>
-				<version>3.1.0</version>
+				<version>3.1.2</version>
+				<dependencies>
+					<dependency>
+						<groupId>com.puppycrawl.tools</groupId>
+						<artifactId>checkstyle</artifactId>
+						<version>9.2</version>
+					</dependency>
+				</dependencies>
 				<executions>
 					<execution>
 						<id>validate-server</id>
@@ -417,7 +434,7 @@
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-javadoc-plugin</artifactId>
-				<version>3.2.0</version>
+				<version>3.3.1</version>
 				<executions>
 					<execution>
 						<id>javadocs</id>
@@ -427,7 +444,7 @@
 					</execution>
 				</executions>
 				<configuration>
-					<source>1.8</source>
+					<release>11</release>
 					<stylesheetfile>../para-core/src/main/javadoc/stylesheet.css</stylesheetfile>
 					<show>public</show>
 					<aggregate>true</aggregate>
diff --git a/para-server/src/main/java/com/erudika/para/ParaServer.java b/para-server/src/main/java/com/erudika/para/server/ParaServer.java
similarity index 92%
rename from para-server/src/main/java/com/erudika/para/ParaServer.java
rename to para-server/src/main/java/com/erudika/para/server/ParaServer.java
index dc0c381b..974f70ca 100644
--- a/para-server/src/main/java/com/erudika/para/ParaServer.java
+++ b/para-server/src/main/java/com/erudika/para/server/ParaServer.java
@@ -15,26 +15,28 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para;
+package com.erudika.para.server;
 
+import com.erudika.para.core.listeners.WebhookIOListener;
+import com.erudika.para.core.utils.Para;
 import ch.qos.logback.access.jetty.RequestLogImpl;
-import com.erudika.para.aop.AOPModule;
-import com.erudika.para.cache.CacheModule;
-import com.erudika.para.email.EmailModule;
-import com.erudika.para.metrics.MetricsUtils;
-import com.erudika.para.persistence.PersistenceModule;
-import com.erudika.para.queue.QueueModule;
-import com.erudika.para.rest.Api1;
-import com.erudika.para.rest.CustomResourceHandler;
-import com.erudika.para.search.SearchModule;
-import com.erudika.para.security.JWTRestfulAuthFilter;
-import com.erudika.para.security.SecurityModule;
-import com.erudika.para.storage.StorageModule;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.HealthUtils;
-import com.erudika.para.utils.filters.CORSFilter;
-import com.erudika.para.utils.filters.ErrorFilter;
-import com.erudika.para.utils.filters.GZipServletFilter;
+import com.erudika.para.server.aop.AOPModule;
+import com.erudika.para.server.cache.CacheModule;
+import com.erudika.para.server.email.EmailModule;
+import com.erudika.para.server.metrics.MetricsUtils;
+import com.erudika.para.server.persistence.PersistenceModule;
+import com.erudika.para.server.queue.QueueModule;
+import com.erudika.para.server.rest.Api1;
+import com.erudika.para.core.rest.CustomResourceHandler;
+import com.erudika.para.server.search.SearchModule;
+import com.erudika.para.server.security.JWTRestfulAuthFilter;
+import com.erudika.para.server.security.SecurityModule;
+import com.erudika.para.server.storage.StorageModule;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.server.utils.HealthUtils;
+import com.erudika.para.server.utils.filters.CORSFilter;
+import com.erudika.para.server.utils.filters.ErrorFilter;
+import com.erudika.para.server.utils.filters.GZipServletFilter;
 import com.google.inject.Guice;
 import com.google.inject.Injector;
 import com.google.inject.Module;
@@ -198,7 +200,7 @@ public static <T> T getInstance(Class<T> type) {
 	}
 
 	/**
-	 * Try loading external {@link com.erudika.para.rest.CustomResourceHandler} classes. These will handle custom API
+	 * Try loading external {@link com.erudika.para.core.rest.CustomResourceHandler} classes. These will handle custom API
 	 * requests. via {@link java.util.ServiceLoader#load(java.lang.Class)}.
 	 *
 	 * @return a loaded list of ServletContextListener class.
diff --git a/para-server/src/main/java/com/erudika/para/aop/AOPModule.java b/para-server/src/main/java/com/erudika/para/server/aop/AOPModule.java
similarity index 92%
rename from para-server/src/main/java/com/erudika/para/aop/AOPModule.java
rename to para-server/src/main/java/com/erudika/para/server/aop/AOPModule.java
index e1d2f458..f43054df 100644
--- a/para-server/src/main/java/com/erudika/para/aop/AOPModule.java
+++ b/para-server/src/main/java/com/erudika/para/server/aop/AOPModule.java
@@ -15,10 +15,10 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.aop;
+package com.erudika.para.server.aop;
 
-import com.erudika.para.persistence.DAO;
-import com.erudika.para.search.Search;
+import com.erudika.para.core.persistence.DAO;
+import com.erudika.para.core.search.Search;
 import com.google.inject.AbstractModule;
 import com.google.inject.matcher.Matchers;
 
diff --git a/para-server/src/main/java/com/erudika/para/aop/AOPUtils.java b/para-server/src/main/java/com/erudika/para/server/aop/AOPUtils.java
similarity index 97%
rename from para-server/src/main/java/com/erudika/para/aop/AOPUtils.java
rename to para-server/src/main/java/com/erudika/para/server/aop/AOPUtils.java
index cb114ead..abbbb3f5 100644
--- a/para-server/src/main/java/com/erudika/para/aop/AOPUtils.java
+++ b/para-server/src/main/java/com/erudika/para/server/aop/AOPUtils.java
@@ -15,11 +15,11 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.aop;
+package com.erudika.para.server.aop;
 
 import com.erudika.para.core.ParaObject;
 import com.erudika.para.core.Sysprop;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Utils;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.LinkedList;
diff --git a/para-server/src/main/java/com/erudika/para/aop/IndexAndCacheAspect.java b/para-server/src/main/java/com/erudika/para/server/aop/IndexAndCacheAspect.java
similarity index 95%
rename from para-server/src/main/java/com/erudika/para/aop/IndexAndCacheAspect.java
rename to para-server/src/main/java/com/erudika/para/server/aop/IndexAndCacheAspect.java
index dd862a0f..3b5d5fc5 100644
--- a/para-server/src/main/java/com/erudika/para/aop/IndexAndCacheAspect.java
+++ b/para-server/src/main/java/com/erudika/para/server/aop/IndexAndCacheAspect.java
@@ -15,20 +15,20 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.aop;
+package com.erudika.para.server.aop;
 
-import com.erudika.para.IOListener;
-import com.erudika.para.Para;
-import com.erudika.para.annotations.Cached;
-import com.erudika.para.annotations.Indexed;
-import com.erudika.para.cache.Cache;
+import com.erudika.para.core.listeners.IOListener;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.core.annotations.Cached;
+import com.erudika.para.core.annotations.Indexed;
+import com.erudika.para.core.cache.Cache;
 import com.erudika.para.core.ParaObject;
-import com.erudika.para.metrics.Metrics;
-import com.erudika.para.persistence.DAO;
-import com.erudika.para.search.Search;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
-import com.erudika.para.validation.ValidationUtils;
+import com.erudika.para.core.metrics.Metrics;
+import com.erudika.para.core.persistence.DAO;
+import com.erudika.para.core.search.Search;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
+import com.erudika.para.core.validation.ValidationUtils;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
@@ -47,12 +47,12 @@
 
 /**
  * This is the core method interceptor which enables caching and indexing.
- * It listens for calls to annotated {@link com.erudika.para.persistence.DAO} methods
+ * It listens for calls to annotated {@link com.erudika.para.core.persistence.DAO} methods
  * and adds searching and caching functionality to them. This technique allows us to control
  * the caching and searching centrally for all implementations
- * of the {@link com.erudika.para.persistence.DAO} interface.
+ * of the {@link com.erudika.para.core.persistence.DAO} interface.
  * @author Alex Bogdanovski [alex@erudika.com]
- * @see com.erudika.para.persistence.DAO
+ * @see com.erudika.para.core.persistence.DAO
  */
 @SuppressWarnings("unchecked")
 public class IndexAndCacheAspect implements MethodInterceptor {
diff --git a/para-server/src/main/java/com/erudika/para/aop/SearchQueryAspect.java b/para-server/src/main/java/com/erudika/para/server/aop/SearchQueryAspect.java
similarity index 90%
rename from para-server/src/main/java/com/erudika/para/aop/SearchQueryAspect.java
rename to para-server/src/main/java/com/erudika/para/server/aop/SearchQueryAspect.java
index 543deff9..6a44f9f2 100644
--- a/para-server/src/main/java/com/erudika/para/aop/SearchQueryAspect.java
+++ b/para-server/src/main/java/com/erudika/para/server/aop/SearchQueryAspect.java
@@ -15,14 +15,14 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.aop;
+package com.erudika.para.server.aop;
 
-import com.erudika.para.IOListener;
-import com.erudika.para.Para;
-import com.erudika.para.annotations.Measured;
-import com.erudika.para.metrics.Metrics;
-import static com.erudika.para.metrics.Metrics.time;
-import com.erudika.para.search.Search;
+import com.erudika.para.core.listeners.IOListener;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.core.annotations.Measured;
+import com.erudika.para.core.metrics.Metrics;
+import static com.erudika.para.core.metrics.Metrics.time;
+import com.erudika.para.core.search.Search;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.Set;
diff --git a/para-server/src/main/java/com/erudika/para/aop/package-info.java b/para-server/src/main/java/com/erudika/para/server/aop/package-info.java
similarity index 78%
rename from para-server/src/main/java/com/erudika/para/aop/package-info.java
rename to para-server/src/main/java/com/erudika/para/server/aop/package-info.java
index a6f5d8e0..884d5b97 100644
--- a/para-server/src/main/java/com/erudika/para/aop/package-info.java
+++ b/para-server/src/main/java/com/erudika/para/server/aop/package-info.java
@@ -2,5 +2,5 @@
  * The AOP module - method interceptors for adding functionality through AOP.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.aop;
+package com.erudika.para.server.aop;
 
diff --git a/para-server/src/main/java/com/erudika/para/cache/CacheModule.java b/para-server/src/main/java/com/erudika/para/server/cache/CacheModule.java
similarity index 92%
rename from para-server/src/main/java/com/erudika/para/cache/CacheModule.java
rename to para-server/src/main/java/com/erudika/para/server/cache/CacheModule.java
index 10820e61..13a09bf8 100644
--- a/para-server/src/main/java/com/erudika/para/cache/CacheModule.java
+++ b/para-server/src/main/java/com/erudika/para/server/cache/CacheModule.java
@@ -15,10 +15,11 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.cache;
+package com.erudika.para.server.cache;
 
-import com.erudika.para.Para;
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.cache.Cache;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.core.utils.Config;
 import com.google.inject.AbstractModule;
 import java.util.ServiceLoader;
 import org.apache.commons.lang3.StringUtils;
diff --git a/para-server/src/main/java/com/erudika/para/cache/CaffeineCache.java b/para-server/src/main/java/com/erudika/para/server/cache/CaffeineCache.java
similarity index 97%
rename from para-server/src/main/java/com/erudika/para/cache/CaffeineCache.java
rename to para-server/src/main/java/com/erudika/para/server/cache/CaffeineCache.java
index 9d0c4ac6..798de71f 100644
--- a/para-server/src/main/java/com/erudika/para/cache/CaffeineCache.java
+++ b/para-server/src/main/java/com/erudika/para/server/cache/CaffeineCache.java
@@ -15,10 +15,11 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.cache;
+package com.erudika.para.server.cache;
 
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.cache.Cache;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.Expiry;
 import java.util.Collections;
diff --git a/para-core/src/main/java/com/erudika/para/cache/package-info.java b/para-server/src/main/java/com/erudika/para/server/cache/package-info.java
similarity index 72%
rename from para-core/src/main/java/com/erudika/para/cache/package-info.java
rename to para-server/src/main/java/com/erudika/para/server/cache/package-info.java
index f6eea50d..0439d71b 100644
--- a/para-core/src/main/java/com/erudika/para/cache/package-info.java
+++ b/para-server/src/main/java/com/erudika/para/server/cache/package-info.java
@@ -2,5 +2,5 @@
  * The cache module - handles object caching.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.cache;
+package com.erudika.para.server.cache;
 
diff --git a/para-server/src/main/java/com/erudika/para/email/AWSEmailer.java b/para-server/src/main/java/com/erudika/para/server/email/AWSEmailer.java
similarity index 94%
rename from para-server/src/main/java/com/erudika/para/email/AWSEmailer.java
rename to para-server/src/main/java/com/erudika/para/server/email/AWSEmailer.java
index 63858fb5..0ef325d4 100644
--- a/para-server/src/main/java/com/erudika/para/email/AWSEmailer.java
+++ b/para-server/src/main/java/com/erudika/para/server/email/AWSEmailer.java
@@ -15,10 +15,11 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.email;
+package com.erudika.para.server.email;
 
-import com.erudika.para.Para;
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.email.Emailer;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.core.utils.Config;
 import java.util.Iterator;
 import java.util.List;
 import javax.inject.Singleton;
diff --git a/para-server/src/main/java/com/erudika/para/email/EmailModule.java b/para-server/src/main/java/com/erudika/para/server/email/EmailModule.java
similarity index 90%
rename from para-server/src/main/java/com/erudika/para/email/EmailModule.java
rename to para-server/src/main/java/com/erudika/para/server/email/EmailModule.java
index eb3044e5..410cf541 100644
--- a/para-server/src/main/java/com/erudika/para/email/EmailModule.java
+++ b/para-server/src/main/java/com/erudika/para/server/email/EmailModule.java
@@ -15,9 +15,10 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.email;
+package com.erudika.para.server.email;
 
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.email.Emailer;
+import com.erudika.para.core.utils.Config;
 import com.google.inject.AbstractModule;
 
 /**
diff --git a/para-server/src/main/java/com/erudika/para/email/JavaMailEmailer.java b/para-server/src/main/java/com/erudika/para/server/email/JavaMailEmailer.java
similarity index 95%
rename from para-server/src/main/java/com/erudika/para/email/JavaMailEmailer.java
rename to para-server/src/main/java/com/erudika/para/server/email/JavaMailEmailer.java
index a5e46f4a..524937b4 100644
--- a/para-server/src/main/java/com/erudika/para/email/JavaMailEmailer.java
+++ b/para-server/src/main/java/com/erudika/para/server/email/JavaMailEmailer.java
@@ -15,9 +15,10 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.email;
+package com.erudika.para.server.email;
 
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.email.Emailer;
+import com.erudika.para.core.utils.Config;
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.ExecutorService;
diff --git a/para-server/src/main/java/com/erudika/para/email/NoopEmailer.java b/para-server/src/main/java/com/erudika/para/server/email/NoopEmailer.java
similarity index 93%
rename from para-server/src/main/java/com/erudika/para/email/NoopEmailer.java
rename to para-server/src/main/java/com/erudika/para/server/email/NoopEmailer.java
index 2b158f79..b3791ff7 100644
--- a/para-server/src/main/java/com/erudika/para/email/NoopEmailer.java
+++ b/para-server/src/main/java/com/erudika/para/server/email/NoopEmailer.java
@@ -15,8 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.email;
+package com.erudika.para.server.email;
 
+import com.erudika.para.core.email.Emailer;
 import java.util.List;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
diff --git a/para-core/src/main/java/com/erudika/para/email/package-info.java b/para-server/src/main/java/com/erudika/para/server/email/package-info.java
similarity index 70%
rename from para-core/src/main/java/com/erudika/para/email/package-info.java
rename to para-server/src/main/java/com/erudika/para/server/email/package-info.java
index 573a5dcb..09d9b8c5 100644
--- a/para-core/src/main/java/com/erudika/para/email/package-info.java
+++ b/para-server/src/main/java/com/erudika/para/server/email/package-info.java
@@ -2,5 +2,5 @@
  * The email module - sends emails.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.email;
+package com.erudika.para.server.email;
 
diff --git a/para-server/src/main/java/com/erudika/para/metrics/MetricsUtils.java b/para-server/src/main/java/com/erudika/para/server/metrics/MetricsUtils.java
similarity index 96%
rename from para-server/src/main/java/com/erudika/para/metrics/MetricsUtils.java
rename to para-server/src/main/java/com/erudika/para/server/metrics/MetricsUtils.java
index 447a8215..a68aee7b 100644
--- a/para-server/src/main/java/com/erudika/para/metrics/MetricsUtils.java
+++ b/para-server/src/main/java/com/erudika/para/server/metrics/MetricsUtils.java
@@ -15,24 +15,25 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.metrics;
+package com.erudika.para.server.metrics;
 
+import com.erudika.para.core.metrics.Metrics;
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.SharedMetricRegistries;
 import com.codahale.metrics.Slf4jReporter;
 import com.codahale.metrics.graphite.Graphite;
 import com.codahale.metrics.graphite.GraphiteReporter;
 import com.codahale.metrics.jmx.JmxReporter;
-import com.erudika.para.InitializeListener;
-import com.erudika.para.Para;
+import com.erudika.para.core.listeners.InitializeListener;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
-import com.erudika.para.rest.CustomResourceHandler;
-import com.erudika.para.rest.RestUtils;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.HealthUtils;
-import com.erudika.para.utils.RegistryUtils;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.rest.CustomResourceHandler;
+import com.erudika.para.server.rest.RestUtils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.server.utils.HealthUtils;
+import com.erudika.para.core.utils.RegistryUtils;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -41,8 +42,8 @@
 import java.util.HashMap;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
-import static com.erudika.para.Para.getCustomResourceHandlers;
-import static com.erudika.para.metrics.Metrics.SYSTEM_METRICS_NAME;
+import static com.erudika.para.core.utils.Para.getCustomResourceHandlers;
+import static com.erudika.para.core.metrics.Metrics.SYSTEM_METRICS_NAME;
 import java.util.ArrayList;
 import java.util.Objects;
 
diff --git a/para-server/src/main/java/com/erudika/para/package-info.java b/para-server/src/main/java/com/erudika/para/server/package-info.java
similarity index 74%
rename from para-server/src/main/java/com/erudika/para/package-info.java
rename to para-server/src/main/java/com/erudika/para/server/package-info.java
index a56ffb06..ae496dc1 100644
--- a/para-server/src/main/java/com/erudika/para/package-info.java
+++ b/para-server/src/main/java/com/erudika/para/server/package-info.java
@@ -2,4 +2,4 @@
  * Contains the main ParaServer class.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para;
+package com.erudika.para.server;
diff --git a/para-server/src/main/java/com/erudika/para/persistence/AWSDynamoDAO.java b/para-server/src/main/java/com/erudika/para/server/persistence/AWSDynamoDAO.java
similarity index 93%
rename from para-server/src/main/java/com/erudika/para/persistence/AWSDynamoDAO.java
rename to para-server/src/main/java/com/erudika/para/server/persistence/AWSDynamoDAO.java
index 85439d5b..3658fc80 100644
--- a/para-server/src/main/java/com/erudika/para/persistence/AWSDynamoDAO.java
+++ b/para-server/src/main/java/com/erudika/para/server/persistence/AWSDynamoDAO.java
@@ -15,25 +15,26 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.persistence;
+package com.erudika.para.server.persistence;
 
-import com.erudika.para.annotations.Locked;
-import com.erudika.para.Para;
+import com.erudika.para.core.persistence.DAO;
+import com.erudika.para.core.annotations.Locked;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.ParaObject;
-import static com.erudika.para.persistence.AWSDynamoUtils.batchGet;
-import static com.erudika.para.persistence.AWSDynamoUtils.batchWrite;
-import static com.erudika.para.persistence.AWSDynamoUtils.fromRow;
-import static com.erudika.para.persistence.AWSDynamoUtils.getKeyForAppid;
-import static com.erudika.para.persistence.AWSDynamoUtils.getTableNameForAppid;
-import static com.erudika.para.persistence.AWSDynamoUtils.isSharedAppid;
-import static com.erudika.para.persistence.AWSDynamoUtils.readPageFromSharedTable;
-import static com.erudika.para.persistence.AWSDynamoUtils.readPageFromTable;
-import static com.erudika.para.persistence.AWSDynamoUtils.throwIfNecessary;
-import static com.erudika.para.persistence.AWSDynamoUtils.toRow;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import static com.erudika.para.server.persistence.AWSDynamoUtils.batchGet;
+import static com.erudika.para.server.persistence.AWSDynamoUtils.batchWrite;
+import static com.erudika.para.server.persistence.AWSDynamoUtils.fromRow;
+import static com.erudika.para.server.persistence.AWSDynamoUtils.getKeyForAppid;
+import static com.erudika.para.server.persistence.AWSDynamoUtils.getTableNameForAppid;
+import static com.erudika.para.server.persistence.AWSDynamoUtils.isSharedAppid;
+import static com.erudika.para.server.persistence.AWSDynamoUtils.readPageFromSharedTable;
+import static com.erudika.para.server.persistence.AWSDynamoUtils.readPageFromTable;
+import static com.erudika.para.server.persistence.AWSDynamoUtils.throwIfNecessary;
+import static com.erudika.para.server.persistence.AWSDynamoUtils.toRow;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
diff --git a/para-server/src/main/java/com/erudika/para/persistence/AWSDynamoUtils.java b/para-server/src/main/java/com/erudika/para/server/persistence/AWSDynamoUtils.java
similarity index 99%
rename from para-server/src/main/java/com/erudika/para/persistence/AWSDynamoUtils.java
rename to para-server/src/main/java/com/erudika/para/server/persistence/AWSDynamoUtils.java
index ee31c0b3..87723ebe 100644
--- a/para-server/src/main/java/com/erudika/para/persistence/AWSDynamoUtils.java
+++ b/para-server/src/main/java/com/erudika/para/server/persistence/AWSDynamoUtils.java
@@ -15,14 +15,14 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.persistence;
+package com.erudika.para.server.persistence;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.ParaObject;
 import com.erudika.para.core.utils.ParaObjectUtils;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
 import java.lang.annotation.Annotation;
 import java.net.URI;
 import java.util.Collections;
diff --git a/para-server/src/main/java/com/erudika/para/persistence/PersistenceModule.java b/para-server/src/main/java/com/erudika/para/server/persistence/PersistenceModule.java
similarity index 91%
rename from para-server/src/main/java/com/erudika/para/persistence/PersistenceModule.java
rename to para-server/src/main/java/com/erudika/para/server/persistence/PersistenceModule.java
index b53779c6..cac8ddec 100644
--- a/para-server/src/main/java/com/erudika/para/persistence/PersistenceModule.java
+++ b/para-server/src/main/java/com/erudika/para/server/persistence/PersistenceModule.java
@@ -15,10 +15,12 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.persistence;
+package com.erudika.para.server.persistence;
 
-import com.erudika.para.Para;
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.persistence.MockDAO;
+import com.erudika.para.core.persistence.DAO;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.core.utils.Config;
 import com.google.inject.AbstractModule;
 import java.util.ServiceLoader;
 import org.apache.commons.lang3.StringUtils;
diff --git a/para-server/src/main/java/com/erudika/para/persistence/package-info.java b/para-server/src/main/java/com/erudika/para/server/persistence/package-info.java
similarity index 75%
rename from para-server/src/main/java/com/erudika/para/persistence/package-info.java
rename to para-server/src/main/java/com/erudika/para/server/persistence/package-info.java
index b8ca726e..1ad7e702 100644
--- a/para-server/src/main/java/com/erudika/para/persistence/package-info.java
+++ b/para-server/src/main/java/com/erudika/para/server/persistence/package-info.java
@@ -2,5 +2,5 @@
  * The persistence module - handles data store communications and object persistence.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.persistence;
+package com.erudika.para.server.persistence;
 
diff --git a/para-server/src/main/java/com/erudika/para/queue/AWSQueue.java b/para-server/src/main/java/com/erudika/para/server/queue/AWSQueue.java
similarity index 94%
rename from para-server/src/main/java/com/erudika/para/queue/AWSQueue.java
rename to para-server/src/main/java/com/erudika/para/server/queue/AWSQueue.java
index 6e92060a..2a589a91 100644
--- a/para-server/src/main/java/com/erudika/para/queue/AWSQueue.java
+++ b/para-server/src/main/java/com/erudika/para/server/queue/AWSQueue.java
@@ -15,9 +15,10 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.queue;
+package com.erudika.para.server.queue;
 
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.queue.Queue;
+import com.erudika.para.core.utils.Config;
 import java.util.Collections;
 import java.util.List;
 import javax.inject.Singleton;
diff --git a/para-server/src/main/java/com/erudika/para/queue/AWSQueueUtils.java b/para-server/src/main/java/com/erudika/para/server/queue/AWSQueueUtils.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/queue/AWSQueueUtils.java
rename to para-server/src/main/java/com/erudika/para/server/queue/AWSQueueUtils.java
index 51b7d690..9b542423 100644
--- a/para-server/src/main/java/com/erudika/para/queue/AWSQueueUtils.java
+++ b/para-server/src/main/java/com/erudika/para/server/queue/AWSQueueUtils.java
@@ -15,11 +15,11 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.queue;
+package com.erudika.para.server.queue;
 
-import com.erudika.para.DestroyListener;
-import com.erudika.para.Para;
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.listeners.DestroyListener;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.core.utils.Config;
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.List;
diff --git a/para-server/src/main/java/com/erudika/para/queue/LocalQueue.java b/para-server/src/main/java/com/erudika/para/server/queue/LocalQueue.java
similarity index 92%
rename from para-server/src/main/java/com/erudika/para/queue/LocalQueue.java
rename to para-server/src/main/java/com/erudika/para/server/queue/LocalQueue.java
index fdbf0ca5..275c45b3 100644
--- a/para-server/src/main/java/com/erudika/para/queue/LocalQueue.java
+++ b/para-server/src/main/java/com/erudika/para/server/queue/LocalQueue.java
@@ -15,11 +15,13 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.queue;
+package com.erudika.para.server.queue;
 
-import com.erudika.para.DestroyListener;
-import com.erudika.para.Para;
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.queue.MockQueue;
+import com.erudika.para.core.queue.Queue;
+import com.erudika.para.core.listeners.DestroyListener;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.core.utils.Config;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.ConcurrentLinkedQueue;
diff --git a/para-server/src/main/java/com/erudika/para/queue/QueueModule.java b/para-server/src/main/java/com/erudika/para/server/queue/QueueModule.java
similarity index 93%
rename from para-server/src/main/java/com/erudika/para/queue/QueueModule.java
rename to para-server/src/main/java/com/erudika/para/server/queue/QueueModule.java
index 9b6e45ea..83c17514 100644
--- a/para-server/src/main/java/com/erudika/para/queue/QueueModule.java
+++ b/para-server/src/main/java/com/erudika/para/server/queue/QueueModule.java
@@ -15,10 +15,11 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.queue;
+package com.erudika.para.server.queue;
 
-import com.erudika.para.Para;
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.queue.Queue;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.core.utils.Config;
 import com.google.inject.AbstractModule;
 import java.util.ServiceLoader;
 import org.apache.commons.lang3.StringUtils;
diff --git a/para-server/src/main/java/com/erudika/para/queue/River.java b/para-server/src/main/java/com/erudika/para/server/queue/River.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/queue/River.java
rename to para-server/src/main/java/com/erudika/para/server/queue/River.java
index 189a84ce..b9cbd75c 100644
--- a/para-server/src/main/java/com/erudika/para/queue/River.java
+++ b/para-server/src/main/java/com/erudika/para/server/queue/River.java
@@ -15,18 +15,18 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.queue;
+package com.erudika.para.server.queue;
 
-import com.erudika.para.Para;
-import com.erudika.para.annotations.Locked;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.core.annotations.Locked;
 import com.erudika.para.core.App;
 import com.erudika.para.core.ParaObject;
 import com.erudika.para.core.Sysprop;
 import com.erudika.para.core.Webhook;
 import com.erudika.para.core.utils.ParaObjectUtils;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.HealthUtils;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.server.utils.HealthUtils;
+import com.erudika.para.core.utils.Utils;
 import com.fasterxml.jackson.databind.ObjectReader;
 import java.util.ArrayList;
 import java.util.Collections;
diff --git a/para-server/src/main/java/com/erudika/para/queue/package-info.java b/para-server/src/main/java/com/erudika/para/server/queue/package-info.java
similarity index 70%
rename from para-server/src/main/java/com/erudika/para/queue/package-info.java
rename to para-server/src/main/java/com/erudika/para/server/queue/package-info.java
index 4d454a12..4af02dff 100644
--- a/para-server/src/main/java/com/erudika/para/queue/package-info.java
+++ b/para-server/src/main/java/com/erudika/para/server/queue/package-info.java
@@ -2,5 +2,5 @@
  * The queue module - handles queues.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.queue;
+package com.erudika.para.server.queue;
 
diff --git a/para-server/src/main/java/com/erudika/para/rest/Api1.java b/para-server/src/main/java/com/erudika/para/server/rest/Api1.java
similarity index 95%
rename from para-server/src/main/java/com/erudika/para/rest/Api1.java
rename to para-server/src/main/java/com/erudika/para/server/rest/Api1.java
index 52db51ae..83b7d9a5 100644
--- a/para-server/src/main/java/com/erudika/para/rest/Api1.java
+++ b/para-server/src/main/java/com/erudika/para/server/rest/Api1.java
@@ -15,42 +15,44 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.rest;
+package com.erudika.para.server.rest;
 
-import static com.erudika.para.Para.getCustomResourceHandlers;
-import static com.erudika.para.Para.getDAO;
-import static com.erudika.para.Para.getSearch;
-import static com.erudika.para.Para.getVersion;
+import com.erudika.para.core.rest.GenericExceptionMapper;
+import com.erudika.para.core.rest.CustomResourceHandler;
+import static com.erudika.para.core.utils.Para.getCustomResourceHandlers;
+import static com.erudika.para.core.utils.Para.getDAO;
+import static com.erudika.para.core.utils.Para.getSearch;
+import static com.erudika.para.core.utils.Para.getVersion;
 
 import com.erudika.para.core.App;
 import com.erudika.para.core.utils.CoreUtils;
 import com.erudika.para.core.ParaObject;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.core.User;
-import static com.erudika.para.rest.RestUtils.getBatchCreateResponse;
-import static com.erudika.para.rest.RestUtils.getBatchDeleteResponse;
-import static com.erudika.para.rest.RestUtils.getBatchReadResponse;
-import static com.erudika.para.rest.RestUtils.getBatchUpdateResponse;
-import static com.erudika.para.rest.RestUtils.getCreateResponse;
-import static com.erudika.para.rest.RestUtils.getDeleteResponse;
-import static com.erudika.para.rest.RestUtils.getEntity;
-import static com.erudika.para.rest.RestUtils.getOverwriteResponse;
-import static com.erudika.para.rest.RestUtils.getReadResponse;
-import static com.erudika.para.rest.RestUtils.getStatusResponse;
-import static com.erudika.para.rest.RestUtils.getUpdateResponse;
-import static com.erudika.para.rest.RestUtils.pathParam;
-import static com.erudika.para.rest.RestUtils.queryParam;
-import static com.erudika.para.rest.RestUtils.queryParams;
-
-import com.erudika.para.security.SecurityUtils;
-import static com.erudika.para.security.SecurityUtils.getPrincipalApp;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.HealthUtils;
-import com.erudika.para.utils.HumanTime;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
-import com.erudika.para.utils.filters.FieldFilter;
-import com.erudika.para.validation.Constraint;
+import static com.erudika.para.server.rest.RestUtils.getBatchCreateResponse;
+import static com.erudika.para.server.rest.RestUtils.getBatchDeleteResponse;
+import static com.erudika.para.server.rest.RestUtils.getBatchReadResponse;
+import static com.erudika.para.server.rest.RestUtils.getBatchUpdateResponse;
+import static com.erudika.para.server.rest.RestUtils.getCreateResponse;
+import static com.erudika.para.server.rest.RestUtils.getDeleteResponse;
+import static com.erudika.para.server.rest.RestUtils.getEntity;
+import static com.erudika.para.server.rest.RestUtils.getOverwriteResponse;
+import static com.erudika.para.server.rest.RestUtils.getReadResponse;
+import static com.erudika.para.server.rest.RestUtils.getStatusResponse;
+import static com.erudika.para.server.rest.RestUtils.getUpdateResponse;
+import static com.erudika.para.server.rest.RestUtils.pathParam;
+import static com.erudika.para.server.rest.RestUtils.queryParam;
+import static com.erudika.para.server.rest.RestUtils.queryParams;
+
+import com.erudika.para.server.security.SecurityUtils;
+import static com.erudika.para.server.security.SecurityUtils.getPrincipalApp;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.server.utils.HealthUtils;
+import com.erudika.para.core.utils.HumanTime;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
+import com.erudika.para.server.utils.filters.FieldFilter;
+import com.erudika.para.core.validation.Constraint;
 import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -74,10 +76,10 @@
 import org.glassfish.jersey.server.model.Resource;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import static com.erudika.para.Para.newApp;
-import static com.erudika.para.Para.setup;
+import static com.erudika.para.core.utils.Para.newApp;
+import static com.erudika.para.core.utils.Para.setup;
 import com.erudika.para.core.Sysprop;
-import com.erudika.para.metrics.Metrics;
+import com.erudika.para.core.metrics.Metrics;
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.MapperFeature;
diff --git a/para-server/src/main/java/com/erudika/para/rest/RestUtils.java b/para-server/src/main/java/com/erudika/para/server/rest/RestUtils.java
similarity index 97%
rename from para-server/src/main/java/com/erudika/para/rest/RestUtils.java
rename to para-server/src/main/java/com/erudika/para/server/rest/RestUtils.java
index 6cc16712..e0af187e 100644
--- a/para-server/src/main/java/com/erudika/para/rest/RestUtils.java
+++ b/para-server/src/main/java/com/erudika/para/server/rest/RestUtils.java
@@ -15,27 +15,28 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.rest;
+package com.erudika.para.server.rest;
 
-import com.erudika.para.Para;
-import com.erudika.para.annotations.Locked;
+import com.erudika.para.core.rest.GenericExceptionMapper;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.core.annotations.Locked;
 import com.erudika.para.core.App;
 import com.erudika.para.core.utils.CoreUtils;
 import com.erudika.para.core.ParaObject;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.core.User;
 import com.erudika.para.core.Votable;
-import com.erudika.para.metrics.Metrics;
-import static com.erudika.para.security.SecurityUtils.checkIfUserCanModifyObject;
-import static com.erudika.para.security.SecurityUtils.checkImplicitAppPermissions;
-import static com.erudika.para.security.SecurityUtils.getAuthenticatedUser;
-import static com.erudika.para.security.SecurityUtils.getPrincipalApp;
-import static com.erudika.para.security.SecurityUtils.isNotAnApp;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
-import static com.erudika.para.validation.ValidationUtils.isValidObject;
-import static com.erudika.para.validation.ValidationUtils.validateObject;
+import com.erudika.para.core.metrics.Metrics;
+import static com.erudika.para.server.security.SecurityUtils.checkIfUserCanModifyObject;
+import static com.erudika.para.server.security.SecurityUtils.checkImplicitAppPermissions;
+import static com.erudika.para.server.security.SecurityUtils.getAuthenticatedUser;
+import static com.erudika.para.server.security.SecurityUtils.getPrincipalApp;
+import static com.erudika.para.server.security.SecurityUtils.isNotAnApp;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
+import static com.erudika.para.core.validation.ValidationUtils.isValidObject;
+import static com.erudika.para.core.validation.ValidationUtils.validateObject;
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import java.io.IOException;
diff --git a/para-server/src/main/java/com/erudika/para/rest/package-info.java b/para-server/src/main/java/com/erudika/para/server/rest/package-info.java
similarity index 75%
rename from para-server/src/main/java/com/erudika/para/rest/package-info.java
rename to para-server/src/main/java/com/erudika/para/server/rest/package-info.java
index 22cacda9..201eea69 100644
--- a/para-server/src/main/java/com/erudika/para/rest/package-info.java
+++ b/para-server/src/main/java/com/erudika/para/server/rest/package-info.java
@@ -2,5 +2,5 @@
  * The REST API module - provides a RESTful facade to clients.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.rest;
+package com.erudika.para.server.rest;
 
diff --git a/para-server/src/main/java/com/erudika/para/search/SearchModule.java b/para-server/src/main/java/com/erudika/para/server/search/SearchModule.java
similarity index 89%
rename from para-server/src/main/java/com/erudika/para/search/SearchModule.java
rename to para-server/src/main/java/com/erudika/para/server/search/SearchModule.java
index f6ef0421..04c6ba01 100644
--- a/para-server/src/main/java/com/erudika/para/search/SearchModule.java
+++ b/para-server/src/main/java/com/erudika/para/server/search/SearchModule.java
@@ -15,10 +15,12 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.search;
+package com.erudika.para.server.search;
 
-import com.erudika.para.Para;
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.search.Search;
+import com.erudika.para.core.search.MockSearch;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.core.utils.Config;
 import com.google.inject.AbstractModule;
 import java.util.ServiceLoader;
 
diff --git a/para-server/src/main/java/com/erudika/para/search/package-info.java b/para-server/src/main/java/com/erudika/para/server/search/package-info.java
similarity index 76%
rename from para-server/src/main/java/com/erudika/para/search/package-info.java
rename to para-server/src/main/java/com/erudika/para/server/search/package-info.java
index db8ffcf1..bc75def0 100644
--- a/para-server/src/main/java/com/erudika/para/search/package-info.java
+++ b/para-server/src/main/java/com/erudika/para/server/search/package-info.java
@@ -2,5 +2,5 @@
  * The search module - manages indexing operations and enables search.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.search;
+package com.erudika.para.server.search;
 
diff --git a/para-server/src/main/java/com/erudika/para/security/AjaxRequestMatcher.java b/para-server/src/main/java/com/erudika/para/server/security/AjaxRequestMatcher.java
similarity index 91%
rename from para-server/src/main/java/com/erudika/para/security/AjaxRequestMatcher.java
rename to para-server/src/main/java/com/erudika/para/server/security/AjaxRequestMatcher.java
index 00986e62..18d71d63 100644
--- a/para-server/src/main/java/com/erudika/para/security/AjaxRequestMatcher.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/AjaxRequestMatcher.java
@@ -15,10 +15,10 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
-import com.erudika.para.utils.HttpUtils;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.utils.HttpUtils;
+import com.erudika.para.core.utils.Utils;
 import javax.servlet.http.HttpServletRequest;
 import javax.ws.rs.core.HttpHeaders;
 import org.springframework.security.web.util.matcher.RequestMatcher;
diff --git a/para-server/src/main/java/com/erudika/para/security/AppAuthentication.java b/para-server/src/main/java/com/erudika/para/server/security/AppAuthentication.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/security/AppAuthentication.java
rename to para-server/src/main/java/com/erudika/para/server/security/AppAuthentication.java
index 2e747f59..12b94ce6 100644
--- a/para-server/src/main/java/com/erudika/para/security/AppAuthentication.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/AppAuthentication.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
 import com.erudika.para.core.App;
 import java.util.Collection;
diff --git a/para-server/src/main/java/com/erudika/para/security/AuthenticatedUserDetails.java b/para-server/src/main/java/com/erudika/para/server/security/AuthenticatedUserDetails.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/security/AuthenticatedUserDetails.java
rename to para-server/src/main/java/com/erudika/para/server/security/AuthenticatedUserDetails.java
index df05a99e..5f74cb0f 100644
--- a/para-server/src/main/java/com/erudika/para/security/AuthenticatedUserDetails.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/AuthenticatedUserDetails.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
 import com.erudika.para.core.App;
 import com.erudika.para.core.User;
diff --git a/para-server/src/main/java/com/erudika/para/security/CachedCsrfTokenRepository.java b/para-server/src/main/java/com/erudika/para/server/security/CachedCsrfTokenRepository.java
similarity index 97%
rename from para-server/src/main/java/com/erudika/para/security/CachedCsrfTokenRepository.java
rename to para-server/src/main/java/com/erudika/para/server/security/CachedCsrfTokenRepository.java
index a912601f..986b1354 100644
--- a/para-server/src/main/java/com/erudika/para/security/CachedCsrfTokenRepository.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/CachedCsrfTokenRepository.java
@@ -15,12 +15,12 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
-import com.erudika.para.cache.Cache;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.HttpUtils;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.cache.Cache;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.server.utils.HttpUtils;
+import com.erudika.para.core.utils.Utils;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import javax.inject.Inject;
diff --git a/para-server/src/main/java/com/erudika/para/security/CsrfProtectionRequestMatcher.java b/para-server/src/main/java/com/erudika/para/server/security/CsrfProtectionRequestMatcher.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/security/CsrfProtectionRequestMatcher.java
rename to para-server/src/main/java/com/erudika/para/server/security/CsrfProtectionRequestMatcher.java
index f3fce43e..20c380c9 100644
--- a/para-server/src/main/java/com/erudika/para/security/CsrfProtectionRequestMatcher.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/CsrfProtectionRequestMatcher.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
 import java.util.regex.Pattern;
 import javax.servlet.http.HttpServletRequest;
diff --git a/para-server/src/main/java/com/erudika/para/security/IgnoredRequestMatcher.java b/para-server/src/main/java/com/erudika/para/server/security/IgnoredRequestMatcher.java
similarity index 95%
rename from para-server/src/main/java/com/erudika/para/security/IgnoredRequestMatcher.java
rename to para-server/src/main/java/com/erudika/para/server/security/IgnoredRequestMatcher.java
index 42cbc330..bc764411 100644
--- a/para-server/src/main/java/com/erudika/para/security/IgnoredRequestMatcher.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/IgnoredRequestMatcher.java
@@ -15,9 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.utils.Config;
 import com.typesafe.config.ConfigList;
 import com.typesafe.config.ConfigValue;
 import java.util.ArrayList;
diff --git a/para-server/src/main/java/com/erudika/para/security/JWTAuthentication.java b/para-server/src/main/java/com/erudika/para/server/security/JWTAuthentication.java
similarity index 97%
rename from para-server/src/main/java/com/erudika/para/security/JWTAuthentication.java
rename to para-server/src/main/java/com/erudika/para/server/security/JWTAuthentication.java
index a6bf6674..2970dcb0 100644
--- a/para-server/src/main/java/com/erudika/para/security/JWTAuthentication.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/JWTAuthentication.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
 import com.erudika.para.core.App;
 import com.nimbusds.jwt.SignedJWT;
diff --git a/para-server/src/main/java/com/erudika/para/security/JWTAuthenticationProvider.java b/para-server/src/main/java/com/erudika/para/server/security/JWTAuthenticationProvider.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/security/JWTAuthenticationProvider.java
rename to para-server/src/main/java/com/erudika/para/server/security/JWTAuthenticationProvider.java
index 160e0865..01eea2cf 100644
--- a/para-server/src/main/java/com/erudika/para/security/JWTAuthenticationProvider.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/JWTAuthenticationProvider.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
 import com.erudika.para.core.App;
 import com.erudika.para.core.User;
diff --git a/para-server/src/main/java/com/erudika/para/security/JWTRestfulAuthFilter.java b/para-server/src/main/java/com/erudika/para/server/security/JWTRestfulAuthFilter.java
similarity index 94%
rename from para-server/src/main/java/com/erudika/para/security/JWTRestfulAuthFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/JWTRestfulAuthFilter.java
index 3c0c261b..b7e0d39b 100644
--- a/para-server/src/main/java/com/erudika/para/security/JWTRestfulAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/JWTRestfulAuthFilter.java
@@ -15,27 +15,27 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
-
-import com.erudika.para.security.filters.PasswordAuthFilter;
-import com.erudika.para.security.filters.GoogleAuthFilter;
-import com.erudika.para.security.filters.TwitterAuthFilter;
-import com.erudika.para.security.filters.MicrosoftAuthFilter;
-import com.erudika.para.security.filters.GitHubAuthFilter;
-import com.erudika.para.security.filters.LinkedInAuthFilter;
-import com.erudika.para.security.filters.GenericOAuth2Filter;
-import com.erudika.para.security.filters.FacebookAuthFilter;
-import com.erudika.para.Para;
+package com.erudika.para.server.security;
+
+import com.erudika.para.server.security.filters.PasswordAuthFilter;
+import com.erudika.para.server.security.filters.GoogleAuthFilter;
+import com.erudika.para.server.security.filters.TwitterAuthFilter;
+import com.erudika.para.server.security.filters.MicrosoftAuthFilter;
+import com.erudika.para.server.security.filters.GitHubAuthFilter;
+import com.erudika.para.server.security.filters.LinkedInAuthFilter;
+import com.erudika.para.server.security.filters.GenericOAuth2Filter;
+import com.erudika.para.server.security.filters.FacebookAuthFilter;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.utils.CoreUtils;
 import com.erudika.para.core.User;
-import com.erudika.para.rest.RestUtils;
-import com.erudika.para.security.filters.AmazonAuthFilter;
-import com.erudika.para.security.filters.LdapAuthFilter;
-import com.erudika.para.security.filters.PasswordlessAuthFilter;
-import com.erudika.para.security.filters.SlackAuthFilter;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.rest.RestUtils;
+import com.erudika.para.server.security.filters.AmazonAuthFilter;
+import com.erudika.para.server.security.filters.LdapAuthFilter;
+import com.erudika.para.server.security.filters.PasswordlessAuthFilter;
+import com.erudika.para.server.security.filters.SlackAuthFilter;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import com.nimbusds.jwt.SignedJWT;
 import java.io.IOException;
 import java.text.ParseException;
diff --git a/para-server/src/main/java/com/erudika/para/security/LDAPAuthentication.java b/para-server/src/main/java/com/erudika/para/server/security/LDAPAuthentication.java
similarity index 97%
rename from para-server/src/main/java/com/erudika/para/security/LDAPAuthentication.java
rename to para-server/src/main/java/com/erudika/para/server/security/LDAPAuthentication.java
index be7e8ef7..122c25b4 100644
--- a/para-server/src/main/java/com/erudika/para/security/LDAPAuthentication.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/LDAPAuthentication.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
 import com.erudika.para.core.App;
 import java.util.Map;
diff --git a/para-server/src/main/java/com/erudika/para/security/LDAPAuthenticationProvider.java b/para-server/src/main/java/com/erudika/para/server/security/LDAPAuthenticationProvider.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/security/LDAPAuthenticationProvider.java
rename to para-server/src/main/java/com/erudika/para/server/security/LDAPAuthenticationProvider.java
index 09b06142..33e1131b 100644
--- a/para-server/src/main/java/com/erudika/para/security/LDAPAuthenticationProvider.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/LDAPAuthenticationProvider.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
 import java.util.Map;
 import org.apache.commons.lang3.StringUtils;
diff --git a/para-server/src/main/java/com/erudika/para/security/LDAPAuthenticator.java b/para-server/src/main/java/com/erudika/para/server/security/LDAPAuthenticator.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/security/LDAPAuthenticator.java
rename to para-server/src/main/java/com/erudika/para/server/security/LDAPAuthenticator.java
index b86a4c53..7e1c21ff 100644
--- a/para-server/src/main/java/com/erudika/para/security/LDAPAuthenticator.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/LDAPAuthenticator.java
@@ -15,9 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Utils;
 import java.util.Arrays;
 import java.util.Map;
 import org.apache.commons.lang3.StringUtils;
diff --git a/para-server/src/main/java/com/erudika/para/security/OAuth1HmacSigner.java b/para-server/src/main/java/com/erudika/para/server/security/OAuth1HmacSigner.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/security/OAuth1HmacSigner.java
rename to para-server/src/main/java/com/erudika/para/server/security/OAuth1HmacSigner.java
index b6b73837..1c327233 100644
--- a/para-server/src/main/java/com/erudika/para/security/OAuth1HmacSigner.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/OAuth1HmacSigner.java
@@ -15,10 +15,10 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.net.URI;
diff --git a/para-server/src/main/java/com/erudika/para/security/RestAuthFilter.java b/para-server/src/main/java/com/erudika/para/server/security/RestAuthFilter.java
similarity index 96%
rename from para-server/src/main/java/com/erudika/para/security/RestAuthFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/RestAuthFilter.java
index 6a4e6882..a1c49259 100644
--- a/para-server/src/main/java/com/erudika/para/security/RestAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/RestAuthFilter.java
@@ -15,16 +15,16 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.User;
-import com.erudika.para.rest.RestUtils;
-import com.erudika.para.rest.Signer;
-import com.erudika.para.utils.BufferedRequestWrapper;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.rest.RestUtils;
+import com.erudika.para.core.rest.Signer;
+import com.erudika.para.server.utils.BufferedRequestWrapper;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import java.io.IOException;
 import java.util.Date;
 import javax.servlet.FilterChain;
diff --git a/para-server/src/main/java/com/erudika/para/security/RestRequestMatcher.java b/para-server/src/main/java/com/erudika/para/server/security/RestRequestMatcher.java
similarity index 97%
rename from para-server/src/main/java/com/erudika/para/security/RestRequestMatcher.java
rename to para-server/src/main/java/com/erudika/para/server/security/RestRequestMatcher.java
index 40f624ba..c8e187ef 100644
--- a/para-server/src/main/java/com/erudika/para/security/RestRequestMatcher.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/RestRequestMatcher.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
 import javax.servlet.http.HttpServletRequest;
 import org.springframework.security.web.util.matcher.RegexRequestMatcher;
diff --git a/para-server/src/main/java/com/erudika/para/security/SecurityConfig.java b/para-server/src/main/java/com/erudika/para/server/security/SecurityConfig.java
similarity index 91%
rename from para-server/src/main/java/com/erudika/para/security/SecurityConfig.java
rename to para-server/src/main/java/com/erudika/para/server/security/SecurityConfig.java
index d986ee32..49a4d00a 100644
--- a/para-server/src/main/java/com/erudika/para/security/SecurityConfig.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/SecurityConfig.java
@@ -15,24 +15,24 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
-
-import com.erudika.para.security.filters.GoogleAuthFilter;
-import com.erudika.para.security.filters.PasswordAuthFilter;
-import com.erudika.para.security.filters.TwitterAuthFilter;
-import com.erudika.para.security.filters.MicrosoftAuthFilter;
-import com.erudika.para.security.filters.GitHubAuthFilter;
-import com.erudika.para.security.filters.LinkedInAuthFilter;
-import com.erudika.para.security.filters.GenericOAuth2Filter;
-import com.erudika.para.security.filters.FacebookAuthFilter;
-import static com.erudika.para.ParaServer.getInstance;
-import com.erudika.para.security.filters.AmazonAuthFilter;
-import com.erudika.para.security.filters.LdapAuthFilter;
-import com.erudika.para.security.filters.PasswordlessAuthFilter;
-import com.erudika.para.security.filters.SAMLAuthFilter;
-import com.erudika.para.security.filters.SAMLMetadataFilter;
-import com.erudika.para.security.filters.SlackAuthFilter;
-import com.erudika.para.utils.Config;
+package com.erudika.para.server.security;
+
+import com.erudika.para.server.security.filters.GoogleAuthFilter;
+import com.erudika.para.server.security.filters.PasswordAuthFilter;
+import com.erudika.para.server.security.filters.TwitterAuthFilter;
+import com.erudika.para.server.security.filters.MicrosoftAuthFilter;
+import com.erudika.para.server.security.filters.GitHubAuthFilter;
+import com.erudika.para.server.security.filters.LinkedInAuthFilter;
+import com.erudika.para.server.security.filters.GenericOAuth2Filter;
+import com.erudika.para.server.security.filters.FacebookAuthFilter;
+import static com.erudika.para.server.ParaServer.getInstance;
+import com.erudika.para.server.security.filters.AmazonAuthFilter;
+import com.erudika.para.server.security.filters.LdapAuthFilter;
+import com.erudika.para.server.security.filters.PasswordlessAuthFilter;
+import com.erudika.para.server.security.filters.SAMLAuthFilter;
+import com.erudika.para.server.security.filters.SAMLMetadataFilter;
+import com.erudika.para.server.security.filters.SlackAuthFilter;
+import com.erudika.para.core.utils.Config;
 import com.typesafe.config.ConfigList;
 import com.typesafe.config.ConfigObject;
 import com.typesafe.config.ConfigValue;
diff --git a/para-server/src/main/java/com/erudika/para/security/SecurityModule.java b/para-server/src/main/java/com/erudika/para/server/security/SecurityModule.java
similarity index 92%
rename from para-server/src/main/java/com/erudika/para/security/SecurityModule.java
rename to para-server/src/main/java/com/erudika/para/server/security/SecurityModule.java
index bbd53414..f42f4690 100644
--- a/para-server/src/main/java/com/erudika/para/security/SecurityModule.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/SecurityModule.java
@@ -15,24 +15,24 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
-
-import com.erudika.para.security.filters.GoogleAuthFilter;
-import com.erudika.para.security.filters.PasswordAuthFilter;
-import com.erudika.para.security.filters.TwitterAuthFilter;
-import com.erudika.para.security.filters.MicrosoftAuthFilter;
-import com.erudika.para.security.filters.GitHubAuthFilter;
-import com.erudika.para.security.filters.LinkedInAuthFilter;
-import com.erudika.para.security.filters.GenericOAuth2Filter;
-import com.erudika.para.security.filters.FacebookAuthFilter;
-import com.erudika.para.cache.Cache;
-import com.erudika.para.security.filters.AmazonAuthFilter;
-import com.erudika.para.security.filters.LdapAuthFilter;
-import com.erudika.para.security.filters.PasswordlessAuthFilter;
-import com.erudika.para.security.filters.SAMLAuthFilter;
-import com.erudika.para.security.filters.SAMLMetadataFilter;
-import com.erudika.para.security.filters.SlackAuthFilter;
-import com.erudika.para.utils.Config;
+package com.erudika.para.server.security;
+
+import com.erudika.para.server.security.filters.GoogleAuthFilter;
+import com.erudika.para.server.security.filters.PasswordAuthFilter;
+import com.erudika.para.server.security.filters.TwitterAuthFilter;
+import com.erudika.para.server.security.filters.MicrosoftAuthFilter;
+import com.erudika.para.server.security.filters.GitHubAuthFilter;
+import com.erudika.para.server.security.filters.LinkedInAuthFilter;
+import com.erudika.para.server.security.filters.GenericOAuth2Filter;
+import com.erudika.para.server.security.filters.FacebookAuthFilter;
+import com.erudika.para.core.cache.Cache;
+import com.erudika.para.server.security.filters.AmazonAuthFilter;
+import com.erudika.para.server.security.filters.LdapAuthFilter;
+import com.erudika.para.server.security.filters.PasswordlessAuthFilter;
+import com.erudika.para.server.security.filters.SAMLAuthFilter;
+import com.erudika.para.server.security.filters.SAMLMetadataFilter;
+import com.erudika.para.server.security.filters.SlackAuthFilter;
+import com.erudika.para.core.utils.Config;
 import com.google.inject.AbstractModule;
 import com.google.inject.Provides;
 
diff --git a/para-server/src/main/java/com/erudika/para/security/SecurityUtils.java b/para-server/src/main/java/com/erudika/para/server/security/SecurityUtils.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/security/SecurityUtils.java
rename to para-server/src/main/java/com/erudika/para/server/security/SecurityUtils.java
index 83e12411..b8c9ab6f 100644
--- a/para-server/src/main/java/com/erudika/para/security/SecurityUtils.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/SecurityUtils.java
@@ -15,18 +15,18 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.ParaObject;
 import com.erudika.para.core.User;
 import com.erudika.para.core.utils.CoreUtils;
-import com.erudika.para.rest.Signer;
-import com.erudika.para.security.filters.SAMLAuthFilter;
-import com.erudika.para.utils.BufferedRequestWrapper;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.rest.Signer;
+import com.erudika.para.server.security.filters.SAMLAuthFilter;
+import com.erudika.para.server.utils.BufferedRequestWrapper;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import com.nimbusds.jose.JOSEException;
 import com.nimbusds.jose.JWSAlgorithm;
 import com.nimbusds.jose.JWSHeader;
diff --git a/para-server/src/main/java/com/erudika/para/security/SimpleAccessDeniedHandler.java b/para-server/src/main/java/com/erudika/para/server/security/SimpleAccessDeniedHandler.java
similarity index 95%
rename from para-server/src/main/java/com/erudika/para/security/SimpleAccessDeniedHandler.java
rename to para-server/src/main/java/com/erudika/para/server/security/SimpleAccessDeniedHandler.java
index 5920f27c..defa74bf 100644
--- a/para-server/src/main/java/com/erudika/para/security/SimpleAccessDeniedHandler.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/SimpleAccessDeniedHandler.java
@@ -15,9 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
-import com.erudika.para.rest.RestUtils;
+import com.erudika.para.server.rest.RestUtils;
 import java.io.IOException;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
diff --git a/para-server/src/main/java/com/erudika/para/security/SimpleAuthenticationEntryPoint.java b/para-server/src/main/java/com/erudika/para/server/security/SimpleAuthenticationEntryPoint.java
similarity index 96%
rename from para-server/src/main/java/com/erudika/para/security/SimpleAuthenticationEntryPoint.java
rename to para-server/src/main/java/com/erudika/para/server/security/SimpleAuthenticationEntryPoint.java
index aee8a974..1692df3b 100644
--- a/para-server/src/main/java/com/erudika/para/security/SimpleAuthenticationEntryPoint.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/SimpleAuthenticationEntryPoint.java
@@ -15,9 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
-import com.erudika.para.rest.RestUtils;
+import com.erudika.para.server.rest.RestUtils;
 import java.io.IOException;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
diff --git a/para-server/src/main/java/com/erudika/para/security/SimpleAuthenticationFailureHandler.java b/para-server/src/main/java/com/erudika/para/server/security/SimpleAuthenticationFailureHandler.java
similarity index 94%
rename from para-server/src/main/java/com/erudika/para/security/SimpleAuthenticationFailureHandler.java
rename to para-server/src/main/java/com/erudika/para/server/security/SimpleAuthenticationFailureHandler.java
index 7cad8c24..e11f2876 100644
--- a/para-server/src/main/java/com/erudika/para/security/SimpleAuthenticationFailureHandler.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/SimpleAuthenticationFailureHandler.java
@@ -15,12 +15,12 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
-import com.erudika.para.rest.RestUtils;
-import com.erudika.para.utils.Config;
+import com.erudika.para.server.rest.RestUtils;
+import com.erudika.para.core.utils.Config;
 import java.io.IOException;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
diff --git a/para-server/src/main/java/com/erudika/para/security/SimpleAuthenticationSuccessHandler.java b/para-server/src/main/java/com/erudika/para/server/security/SimpleAuthenticationSuccessHandler.java
similarity index 93%
rename from para-server/src/main/java/com/erudika/para/security/SimpleAuthenticationSuccessHandler.java
rename to para-server/src/main/java/com/erudika/para/server/security/SimpleAuthenticationSuccessHandler.java
index 9a6f4fe2..bb80aec3 100644
--- a/para-server/src/main/java/com/erudika/para/security/SimpleAuthenticationSuccessHandler.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/SimpleAuthenticationSuccessHandler.java
@@ -15,15 +15,15 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.User;
-import com.erudika.para.rest.RestUtils;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.HttpUtils;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.rest.RestUtils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.server.utils.HttpUtils;
+import com.erudika.para.core.utils.Utils;
 import com.nimbusds.jwt.SignedJWT;
 import java.io.IOException;
 import javax.servlet.ServletException;
diff --git a/para-server/src/main/java/com/erudika/para/security/SimpleRememberMeServices.java b/para-server/src/main/java/com/erudika/para/server/security/SimpleRememberMeServices.java
similarity index 95%
rename from para-server/src/main/java/com/erudika/para/security/SimpleRememberMeServices.java
rename to para-server/src/main/java/com/erudika/para/server/security/SimpleRememberMeServices.java
index a7f8019a..eb170b30 100644
--- a/para-server/src/main/java/com/erudika/para/security/SimpleRememberMeServices.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/SimpleRememberMeServices.java
@@ -16,13 +16,13 @@
  * For issues and patches go to: https://github.com/erudika
  */
 
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
 import com.erudika.para.core.App;
 import com.erudika.para.core.User;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.HttpUtils;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.server.utils.HttpUtils;
+import com.erudika.para.core.utils.Utils;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.springframework.security.core.Authentication;
diff --git a/para-server/src/main/java/com/erudika/para/security/SimpleRequestCache.java b/para-server/src/main/java/com/erudika/para/server/security/SimpleRequestCache.java
similarity index 94%
rename from para-server/src/main/java/com/erudika/para/security/SimpleRequestCache.java
rename to para-server/src/main/java/com/erudika/para/server/security/SimpleRequestCache.java
index 460d4cbc..08d6da84 100644
--- a/para-server/src/main/java/com/erudika/para/security/SimpleRequestCache.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/SimpleRequestCache.java
@@ -15,11 +15,11 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.HttpUtils;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.server.utils.HttpUtils;
+import com.erudika.para.core.utils.Utils;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.springframework.security.web.PortResolver;
diff --git a/para-server/src/main/java/com/erudika/para/security/SimpleUserService.java b/para-server/src/main/java/com/erudika/para/server/security/SimpleUserService.java
similarity index 97%
rename from para-server/src/main/java/com/erudika/para/security/SimpleUserService.java
rename to para-server/src/main/java/com/erudika/para/server/security/SimpleUserService.java
index c7b88796..d72cb10f 100644
--- a/para-server/src/main/java/com/erudika/para/security/SimpleUserService.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/SimpleUserService.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
 import com.erudika.para.core.User;
 import org.apache.commons.lang3.StringUtils;
diff --git a/para-server/src/main/java/com/erudika/para/security/UserAuthentication.java b/para-server/src/main/java/com/erudika/para/server/security/UserAuthentication.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/security/UserAuthentication.java
rename to para-server/src/main/java/com/erudika/para/server/security/UserAuthentication.java
index d382defd..f3666e8d 100644
--- a/para-server/src/main/java/com/erudika/para/security/UserAuthentication.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/UserAuthentication.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
 import java.util.Collection;
 import java.util.Collections;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/AmazonAuthFilter.java b/para-server/src/main/java/com/erudika/para/server/security/filters/AmazonAuthFilter.java
similarity index 95%
rename from para-server/src/main/java/com/erudika/para/security/filters/AmazonAuthFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/AmazonAuthFilter.java
index 756f2496..aae1bf05 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/AmazonAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/AmazonAuthFilter.java
@@ -15,17 +15,17 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.core.User;
-import com.erudika.para.security.AuthenticatedUserDetails;
-import com.erudika.para.security.SecurityUtils;
-import com.erudika.para.security.UserAuthentication;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.security.AuthenticatedUserDetails;
+import com.erudika.para.server.security.SecurityUtils;
+import com.erudika.para.server.security.UserAuthentication;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import com.fasterxml.jackson.databind.ObjectReader;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/FacebookAuthFilter.java b/para-server/src/main/java/com/erudika/para/server/security/filters/FacebookAuthFilter.java
similarity index 96%
rename from para-server/src/main/java/com/erudika/para/security/filters/FacebookAuthFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/FacebookAuthFilter.java
index c6fd3b22..a607da7d 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/FacebookAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/FacebookAuthFilter.java
@@ -15,17 +15,17 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.core.User;
-import com.erudika.para.security.AuthenticatedUserDetails;
-import com.erudika.para.security.SecurityUtils;
-import com.erudika.para.security.UserAuthentication;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.security.AuthenticatedUserDetails;
+import com.erudika.para.server.security.SecurityUtils;
+import com.erudika.para.server.security.UserAuthentication;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectReader;
 import java.io.IOException;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/GenericOAuth2Filter.java b/para-server/src/main/java/com/erudika/para/server/security/filters/GenericOAuth2Filter.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/security/filters/GenericOAuth2Filter.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/GenericOAuth2Filter.java
index 9a2d03e5..cb1a6d59 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/GenericOAuth2Filter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/GenericOAuth2Filter.java
@@ -15,17 +15,17 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.core.User;
-import com.erudika.para.security.AuthenticatedUserDetails;
-import com.erudika.para.security.SecurityUtils;
-import com.erudika.para.security.UserAuthentication;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.security.AuthenticatedUserDetails;
+import com.erudika.para.server.security.SecurityUtils;
+import com.erudika.para.server.security.UserAuthentication;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectReader;
 import java.io.IOException;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/GitHubAuthFilter.java b/para-server/src/main/java/com/erudika/para/server/security/filters/GitHubAuthFilter.java
similarity index 96%
rename from para-server/src/main/java/com/erudika/para/security/filters/GitHubAuthFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/GitHubAuthFilter.java
index 92056b76..e70dc6da 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/GitHubAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/GitHubAuthFilter.java
@@ -15,17 +15,17 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.core.User;
-import com.erudika.para.security.AuthenticatedUserDetails;
-import com.erudika.para.security.SecurityUtils;
-import com.erudika.para.security.UserAuthentication;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.security.AuthenticatedUserDetails;
+import com.erudika.para.server.security.SecurityUtils;
+import com.erudika.para.server.security.UserAuthentication;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import com.fasterxml.jackson.databind.MappingIterator;
 import com.fasterxml.jackson.databind.ObjectReader;
 import java.io.IOException;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/GoogleAuthFilter.java b/para-server/src/main/java/com/erudika/para/server/security/filters/GoogleAuthFilter.java
similarity index 95%
rename from para-server/src/main/java/com/erudika/para/security/filters/GoogleAuthFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/GoogleAuthFilter.java
index d5a9820e..04d4a53f 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/GoogleAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/GoogleAuthFilter.java
@@ -15,17 +15,17 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.core.User;
-import com.erudika.para.security.AuthenticatedUserDetails;
-import com.erudika.para.security.SecurityUtils;
-import com.erudika.para.security.UserAuthentication;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.security.AuthenticatedUserDetails;
+import com.erudika.para.server.security.SecurityUtils;
+import com.erudika.para.server.security.UserAuthentication;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import com.fasterxml.jackson.databind.ObjectReader;
 import java.io.IOException;
 import java.util.Map;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/LdapAuthFilter.java b/para-server/src/main/java/com/erudika/para/server/security/filters/LdapAuthFilter.java
similarity index 95%
rename from para-server/src/main/java/com/erudika/para/security/filters/LdapAuthFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/LdapAuthFilter.java
index 71a1027f..91da547e 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/LdapAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/LdapAuthFilter.java
@@ -15,18 +15,18 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.User;
 import com.erudika.para.core.utils.CoreUtils;
-import com.erudika.para.security.AuthenticatedUserDetails;
-import com.erudika.para.security.LDAPAuthentication;
-import com.erudika.para.security.SecurityUtils;
-import com.erudika.para.security.UserAuthentication;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.security.AuthenticatedUserDetails;
+import com.erudika.para.server.security.LDAPAuthentication;
+import com.erudika.para.server.security.SecurityUtils;
+import com.erudika.para.server.security.UserAuthentication;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import java.io.IOException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/LinkedInAuthFilter.java b/para-server/src/main/java/com/erudika/para/server/security/filters/LinkedInAuthFilter.java
similarity index 96%
rename from para-server/src/main/java/com/erudika/para/security/filters/LinkedInAuthFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/LinkedInAuthFilter.java
index f67e9c42..140cefd4 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/LinkedInAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/LinkedInAuthFilter.java
@@ -15,17 +15,17 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.core.User;
-import com.erudika.para.security.AuthenticatedUserDetails;
-import com.erudika.para.security.SecurityUtils;
-import com.erudika.para.security.UserAuthentication;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.security.AuthenticatedUserDetails;
+import com.erudika.para.server.security.SecurityUtils;
+import com.erudika.para.server.security.UserAuthentication;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectReader;
 import java.io.IOException;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/MicrosoftAuthFilter.java b/para-server/src/main/java/com/erudika/para/server/security/filters/MicrosoftAuthFilter.java
similarity index 96%
rename from para-server/src/main/java/com/erudika/para/security/filters/MicrosoftAuthFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/MicrosoftAuthFilter.java
index 33156b33..ccb82fb6 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/MicrosoftAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/MicrosoftAuthFilter.java
@@ -15,17 +15,17 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.core.User;
-import com.erudika.para.security.AuthenticatedUserDetails;
-import com.erudika.para.security.SecurityUtils;
-import com.erudika.para.security.UserAuthentication;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.security.AuthenticatedUserDetails;
+import com.erudika.para.server.security.SecurityUtils;
+import com.erudika.para.server.security.UserAuthentication;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import com.fasterxml.jackson.databind.ObjectReader;
 import java.io.IOException;
 import java.util.Map;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/PasswordAuthFilter.java b/para-server/src/main/java/com/erudika/para/server/security/filters/PasswordAuthFilter.java
similarity index 93%
rename from para-server/src/main/java/com/erudika/para/security/filters/PasswordAuthFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/PasswordAuthFilter.java
index 5b93aabf..31039532 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/PasswordAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/PasswordAuthFilter.java
@@ -15,15 +15,15 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.User;
-import com.erudika.para.security.AuthenticatedUserDetails;
-import com.erudika.para.security.SecurityUtils;
-import com.erudika.para.security.UserAuthentication;
-import com.erudika.para.utils.Config;
+import com.erudika.para.server.security.AuthenticatedUserDetails;
+import com.erudika.para.server.security.SecurityUtils;
+import com.erudika.para.server.security.UserAuthentication;
+import com.erudika.para.core.utils.Config;
 import java.io.IOException;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/PasswordlessAuthFilter.java b/para-server/src/main/java/com/erudika/para/server/security/filters/PasswordlessAuthFilter.java
similarity index 95%
rename from para-server/src/main/java/com/erudika/para/security/filters/PasswordlessAuthFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/PasswordlessAuthFilter.java
index a3f31a35..fcd8339a 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/PasswordlessAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/PasswordlessAuthFilter.java
@@ -15,16 +15,16 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.User;
 import com.erudika.para.core.utils.CoreUtils;
-import com.erudika.para.security.AuthenticatedUserDetails;
-import com.erudika.para.security.SecurityUtils;
-import com.erudika.para.security.UserAuthentication;
-import com.erudika.para.utils.Config;
+import com.erudika.para.server.security.AuthenticatedUserDetails;
+import com.erudika.para.server.security.SecurityUtils;
+import com.erudika.para.server.security.UserAuthentication;
+import com.erudika.para.core.utils.Config;
 import com.nimbusds.jwt.SignedJWT;
 import java.io.IOException;
 import java.text.ParseException;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/SAMLAuthFilter.java b/para-server/src/main/java/com/erudika/para/server/security/filters/SAMLAuthFilter.java
similarity index 97%
rename from para-server/src/main/java/com/erudika/para/security/filters/SAMLAuthFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/SAMLAuthFilter.java
index fbe859ac..b7546467 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/SAMLAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/SAMLAuthFilter.java
@@ -15,16 +15,16 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.User;
-import com.erudika.para.security.AuthenticatedUserDetails;
-import com.erudika.para.security.SecurityUtils;
-import com.erudika.para.security.UserAuthentication;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.security.AuthenticatedUserDetails;
+import com.erudika.para.server.security.SecurityUtils;
+import com.erudika.para.server.security.UserAuthentication;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import com.onelogin.saml2.Auth;
 import com.onelogin.saml2.exception.SettingsException;
 import static com.onelogin.saml2.settings.IdPMetadataParser.parseRemoteXML;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/SAMLMetadataFilter.java b/para-server/src/main/java/com/erudika/para/server/security/filters/SAMLMetadataFilter.java
similarity index 95%
rename from para-server/src/main/java/com/erudika/para/security/filters/SAMLMetadataFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/SAMLMetadataFilter.java
index ebee4c57..5e602c64 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/SAMLMetadataFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/SAMLMetadataFilter.java
@@ -15,12 +15,12 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import com.onelogin.saml2.exception.SettingsException;
 import com.onelogin.saml2.settings.Saml2Settings;
 import com.onelogin.saml2.settings.SettingsBuilder;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/SlackAuthFilter.java b/para-server/src/main/java/com/erudika/para/server/security/filters/SlackAuthFilter.java
similarity index 96%
rename from para-server/src/main/java/com/erudika/para/security/filters/SlackAuthFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/SlackAuthFilter.java
index 2ddde915..e45c7dc9 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/SlackAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/SlackAuthFilter.java
@@ -15,17 +15,17 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.core.User;
-import com.erudika.para.security.AuthenticatedUserDetails;
-import com.erudika.para.security.SecurityUtils;
-import com.erudika.para.security.UserAuthentication;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.security.AuthenticatedUserDetails;
+import com.erudika.para.server.security.SecurityUtils;
+import com.erudika.para.server.security.UserAuthentication;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import com.fasterxml.jackson.databind.ObjectReader;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/TwitterAuthFilter.java b/para-server/src/main/java/com/erudika/para/server/security/filters/TwitterAuthFilter.java
similarity index 96%
rename from para-server/src/main/java/com/erudika/para/security/filters/TwitterAuthFilter.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/TwitterAuthFilter.java
index ac187743..ac4e991f 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/TwitterAuthFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/TwitterAuthFilter.java
@@ -15,18 +15,18 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
-import com.erudika.para.Para;
+import com.erudika.para.core.utils.Para;
 import com.erudika.para.core.App;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.core.User;
-import com.erudika.para.security.AuthenticatedUserDetails;
-import com.erudika.para.security.OAuth1HmacSigner;
-import com.erudika.para.security.SecurityUtils;
-import com.erudika.para.security.UserAuthentication;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.server.security.AuthenticatedUserDetails;
+import com.erudika.para.server.security.OAuth1HmacSigner;
+import com.erudika.para.server.security.SecurityUtils;
+import com.erudika.para.server.security.UserAuthentication;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
 import com.fasterxml.jackson.databind.ObjectReader;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
diff --git a/para-server/src/main/java/com/erudika/para/security/filters/package-info.java b/para-server/src/main/java/com/erudika/para/server/security/filters/package-info.java
similarity index 73%
rename from para-server/src/main/java/com/erudika/para/security/filters/package-info.java
rename to para-server/src/main/java/com/erudika/para/server/security/filters/package-info.java
index e4f6dd69..fe84382b 100644
--- a/para-server/src/main/java/com/erudika/para/security/filters/package-info.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/filters/package-info.java
@@ -2,5 +2,5 @@
  * Authentication filters - these handle social login and external authentication.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.security.filters;
+package com.erudika.para.server.security.filters;
 
diff --git a/para-server/src/main/java/com/erudika/para/security/package-info.java b/para-server/src/main/java/com/erudika/para/server/security/package-info.java
similarity index 71%
rename from para-server/src/main/java/com/erudika/para/security/package-info.java
rename to para-server/src/main/java/com/erudika/para/server/security/package-info.java
index 8b2ed40a..311c5026 100644
--- a/para-server/src/main/java/com/erudika/para/security/package-info.java
+++ b/para-server/src/main/java/com/erudika/para/server/security/package-info.java
@@ -2,5 +2,5 @@
  * The security module - handles authentication.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.security;
+package com.erudika.para.server.security;
 
diff --git a/para-server/src/main/java/com/erudika/para/storage/AWSFileStore.java b/para-server/src/main/java/com/erudika/para/server/storage/AWSFileStore.java
similarity index 96%
rename from para-server/src/main/java/com/erudika/para/storage/AWSFileStore.java
rename to para-server/src/main/java/com/erudika/para/server/storage/AWSFileStore.java
index 195d5f89..a3175ac5 100644
--- a/para-server/src/main/java/com/erudika/para/storage/AWSFileStore.java
+++ b/para-server/src/main/java/com/erudika/para/server/storage/AWSFileStore.java
@@ -15,9 +15,10 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.storage;
+package com.erudika.para.server.storage;
 
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.storage.FileStore;
+import com.erudika.para.core.utils.Config;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/para-server/src/main/java/com/erudika/para/storage/LocalFileStore.java b/para-server/src/main/java/com/erudika/para/server/storage/LocalFileStore.java
similarity index 96%
rename from para-server/src/main/java/com/erudika/para/storage/LocalFileStore.java
rename to para-server/src/main/java/com/erudika/para/server/storage/LocalFileStore.java
index 1ed258ea..9f730c20 100644
--- a/para-server/src/main/java/com/erudika/para/storage/LocalFileStore.java
+++ b/para-server/src/main/java/com/erudika/para/server/storage/LocalFileStore.java
@@ -15,9 +15,10 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.storage;
+package com.erudika.para.server.storage;
 
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.storage.FileStore;
+import com.erudika.para.core.utils.Config;
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
 import java.io.File;
diff --git a/para-server/src/main/java/com/erudika/para/storage/StorageModule.java b/para-server/src/main/java/com/erudika/para/server/storage/StorageModule.java
similarity index 92%
rename from para-server/src/main/java/com/erudika/para/storage/StorageModule.java
rename to para-server/src/main/java/com/erudika/para/server/storage/StorageModule.java
index 4fe08c3e..28401f1a 100644
--- a/para-server/src/main/java/com/erudika/para/storage/StorageModule.java
+++ b/para-server/src/main/java/com/erudika/para/server/storage/StorageModule.java
@@ -15,10 +15,11 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.storage;
+package com.erudika.para.server.storage;
 
-import com.erudika.para.Para;
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.storage.FileStore;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.core.utils.Config;
 import com.google.inject.AbstractModule;
 import java.util.ServiceLoader;
 import org.apache.commons.lang3.StringUtils;
diff --git a/para-core/src/main/java/com/erudika/para/storage/package-info.java b/para-server/src/main/java/com/erudika/para/server/storage/package-info.java
similarity index 71%
rename from para-core/src/main/java/com/erudika/para/storage/package-info.java
rename to para-server/src/main/java/com/erudika/para/server/storage/package-info.java
index de81a8bc..f338ccc5 100644
--- a/para-core/src/main/java/com/erudika/para/storage/package-info.java
+++ b/para-server/src/main/java/com/erudika/para/server/storage/package-info.java
@@ -2,5 +2,5 @@
  * The storage module - saves and loads files.
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-package com.erudika.para.storage;
+package com.erudika.para.server.storage;
 
diff --git a/para-server/src/main/java/com/erudika/para/utils/BufferedRequestWrapper.java b/para-server/src/main/java/com/erudika/para/server/utils/BufferedRequestWrapper.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/utils/BufferedRequestWrapper.java
rename to para-server/src/main/java/com/erudika/para/server/utils/BufferedRequestWrapper.java
index 035ff64e..549b8989 100644
--- a/para-server/src/main/java/com/erudika/para/utils/BufferedRequestWrapper.java
+++ b/para-server/src/main/java/com/erudika/para/server/utils/BufferedRequestWrapper.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.server.utils;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
diff --git a/para-server/src/main/java/com/erudika/para/utils/BufferedServletInputStream.java b/para-server/src/main/java/com/erudika/para/server/utils/BufferedServletInputStream.java
similarity index 97%
rename from para-server/src/main/java/com/erudika/para/utils/BufferedServletInputStream.java
rename to para-server/src/main/java/com/erudika/para/server/utils/BufferedServletInputStream.java
index 275bcb6c..4c9d2600 100644
--- a/para-server/src/main/java/com/erudika/para/utils/BufferedServletInputStream.java
+++ b/para-server/src/main/java/com/erudika/para/server/utils/BufferedServletInputStream.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.server.utils;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
diff --git a/para-server/src/main/java/com/erudika/para/utils/GZipResponseUtil.java b/para-server/src/main/java/com/erudika/para/server/utils/GZipResponseUtil.java
similarity index 99%
rename from para-server/src/main/java/com/erudika/para/utils/GZipResponseUtil.java
rename to para-server/src/main/java/com/erudika/para/server/utils/GZipResponseUtil.java
index 2fdef315..0b9aa2ef 100644
--- a/para-server/src/main/java/com/erudika/para/utils/GZipResponseUtil.java
+++ b/para-server/src/main/java/com/erudika/para/server/utils/GZipResponseUtil.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.server.utils;
 
 import java.util.Collection;
 import javax.servlet.ServletException;
diff --git a/para-server/src/main/java/com/erudika/para/utils/GZipServletOutputStream.java b/para-server/src/main/java/com/erudika/para/server/utils/GZipServletOutputStream.java
similarity index 97%
rename from para-server/src/main/java/com/erudika/para/utils/GZipServletOutputStream.java
rename to para-server/src/main/java/com/erudika/para/server/utils/GZipServletOutputStream.java
index 7c537355..0a8f21c3 100644
--- a/para-server/src/main/java/com/erudika/para/utils/GZipServletOutputStream.java
+++ b/para-server/src/main/java/com/erudika/para/server/utils/GZipServletOutputStream.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.server.utils;
 
 import javax.servlet.ServletOutputStream;
 import java.io.IOException;
diff --git a/para-server/src/main/java/com/erudika/para/utils/GZipServletResponseWrapper.java b/para-server/src/main/java/com/erudika/para/server/utils/GZipServletResponseWrapper.java
similarity index 99%
rename from para-server/src/main/java/com/erudika/para/utils/GZipServletResponseWrapper.java
rename to para-server/src/main/java/com/erudika/para/server/utils/GZipServletResponseWrapper.java
index 86d59ce9..33457c82 100644
--- a/para-server/src/main/java/com/erudika/para/utils/GZipServletResponseWrapper.java
+++ b/para-server/src/main/java/com/erudika/para/server/utils/GZipServletResponseWrapper.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.server.utils;
 
 import javax.servlet.ServletOutputStream;
 import javax.servlet.http.HttpServletResponse;
diff --git a/para-server/src/main/java/com/erudika/para/utils/HealthUtils.java b/para-server/src/main/java/com/erudika/para/server/utils/HealthUtils.java
similarity index 94%
rename from para-server/src/main/java/com/erudika/para/utils/HealthUtils.java
rename to para-server/src/main/java/com/erudika/para/server/utils/HealthUtils.java
index 61d35fb7..1b77b5f5 100644
--- a/para-server/src/main/java/com/erudika/para/utils/HealthUtils.java
+++ b/para-server/src/main/java/com/erudika/para/server/utils/HealthUtils.java
@@ -1,8 +1,9 @@
-package com.erudika.para.utils;
+package com.erudika.para.server.utils;
 
-import com.erudika.para.InitializeListener;
-import com.erudika.para.Para;
-import com.erudika.para.ParaServer;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.listeners.InitializeListener;
+import com.erudika.para.server.ParaServer;
 import com.erudika.para.core.App;
 import java.util.ArrayList;
 import java.util.List;
diff --git a/para-server/src/main/java/com/erudika/para/utils/HttpUtils.java b/para-server/src/main/java/com/erudika/para/server/utils/HttpUtils.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/utils/HttpUtils.java
rename to para-server/src/main/java/com/erudika/para/server/utils/HttpUtils.java
index d7da9efb..87e0ab32 100644
--- a/para-server/src/main/java/com/erudika/para/utils/HttpUtils.java
+++ b/para-server/src/main/java/com/erudika/para/server/utils/HttpUtils.java
@@ -15,8 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.server.utils;
 
+import com.erudika.para.core.utils.Config;
 import java.util.TimeZone;
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
diff --git a/para-server/src/main/java/com/erudika/para/utils/filters/CORSFilter.java b/para-server/src/main/java/com/erudika/para/server/utils/filters/CORSFilter.java
similarity index 99%
rename from para-server/src/main/java/com/erudika/para/utils/filters/CORSFilter.java
rename to para-server/src/main/java/com/erudika/para/server/utils/filters/CORSFilter.java
index 95c528ac..07d344d1 100644
--- a/para-server/src/main/java/com/erudika/para/utils/filters/CORSFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/utils/filters/CORSFilter.java
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package com.erudika.para.utils.filters;
+package com.erudika.para.server.utils.filters;
 
 import java.io.IOException;
 import java.net.URI;
diff --git a/para-server/src/main/java/com/erudika/para/utils/filters/CachingHttpHeadersFilter.java b/para-server/src/main/java/com/erudika/para/server/utils/filters/CachingHttpHeadersFilter.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/utils/filters/CachingHttpHeadersFilter.java
rename to para-server/src/main/java/com/erudika/para/server/utils/filters/CachingHttpHeadersFilter.java
index cc91f878..9a2b4c5b 100644
--- a/para-server/src/main/java/com/erudika/para/utils/filters/CachingHttpHeadersFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/utils/filters/CachingHttpHeadersFilter.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils.filters;
+package com.erudika.para.server.utils.filters;
 
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
diff --git a/para-server/src/main/java/com/erudika/para/utils/filters/ErrorFilter.java b/para-server/src/main/java/com/erudika/para/server/utils/filters/ErrorFilter.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/utils/filters/ErrorFilter.java
rename to para-server/src/main/java/com/erudika/para/server/utils/filters/ErrorFilter.java
index c417d5f6..c3bc0674 100644
--- a/para-server/src/main/java/com/erudika/para/utils/filters/ErrorFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/utils/filters/ErrorFilter.java
@@ -16,7 +16,7 @@
  * For issues and patches go to: https://github.com/erudika
  */
 
-package com.erudika.para.utils.filters;
+package com.erudika.para.server.utils.filters;
 
 import java.io.IOException;
 import javax.servlet.Filter;
diff --git a/para-server/src/main/java/com/erudika/para/utils/filters/FieldFilter.java b/para-server/src/main/java/com/erudika/para/server/utils/filters/FieldFilter.java
similarity index 98%
rename from para-server/src/main/java/com/erudika/para/utils/filters/FieldFilter.java
rename to para-server/src/main/java/com/erudika/para/server/utils/filters/FieldFilter.java
index 269ffa5c..511f43fd 100644
--- a/para-server/src/main/java/com/erudika/para/utils/filters/FieldFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/utils/filters/FieldFilter.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils.filters;
+package com.erudika.para.server.utils.filters;
 
 import com.erudika.para.core.ParaObject;
 import com.fasterxml.jackson.annotation.JsonIgnore;
diff --git a/para-server/src/main/java/com/erudika/para/utils/filters/GZipServletFilter.java b/para-server/src/main/java/com/erudika/para/server/utils/filters/GZipServletFilter.java
similarity index 96%
rename from para-server/src/main/java/com/erudika/para/utils/filters/GZipServletFilter.java
rename to para-server/src/main/java/com/erudika/para/server/utils/filters/GZipServletFilter.java
index 9a7c3b1b..9452aa13 100644
--- a/para-server/src/main/java/com/erudika/para/utils/filters/GZipServletFilter.java
+++ b/para-server/src/main/java/com/erudika/para/server/utils/filters/GZipServletFilter.java
@@ -15,10 +15,10 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils.filters;
+package com.erudika.para.server.utils.filters;
 
-import com.erudika.para.utils.GZipResponseUtil;
-import com.erudika.para.utils.GZipServletResponseWrapper;
+import com.erudika.para.server.utils.GZipResponseUtil;
+import com.erudika.para.server.utils.GZipServletResponseWrapper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import javax.servlet.http.HttpServletRequest;
diff --git a/para-server/src/main/java/com/erudika/para/server/utils/filters/package-info.java b/para-server/src/main/java/com/erudika/para/server/utils/filters/package-info.java
new file mode 100644
index 00000000..b0cf6164
--- /dev/null
+++ b/para-server/src/main/java/com/erudika/para/server/utils/filters/package-info.java
@@ -0,0 +1,4 @@
+/**
+ * Various servlet filters.
+ */
+package com.erudika.para.server.utils.filters;
diff --git a/para-server/src/main/java/com/erudika/para/utils/filters/package-info.java b/para-server/src/main/java/com/erudika/para/utils/filters/package-info.java
deleted file mode 100644
index aa1c5561..00000000
--- a/para-server/src/main/java/com/erudika/para/utils/filters/package-info.java
+++ /dev/null
@@ -1,4 +0,0 @@
-/**
- * Various servlet filters.
- */
-package com.erudika.para.utils.filters;
diff --git a/para-server/src/test/java/com/erudika/para/aop/AspectsIT.java b/para-server/src/test/java/com/erudika/para/aop/AspectsIT.java
deleted file mode 100644
index 3063de96..00000000
--- a/para-server/src/test/java/com/erudika/para/aop/AspectsIT.java
+++ /dev/null
@@ -1,437 +0,0 @@
-/*
- * Copyright 2013-2021 Erudika. https://erudika.com
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- * For issues and patches go to: https://github.com/erudika
- */
-package com.erudika.para.aop;
-
-import com.erudika.para.Para;
-import com.erudika.para.ParaServer;
-import com.erudika.para.cache.Cache;
-import com.erudika.para.cache.MockCache;
-import com.erudika.para.core.utils.CoreUtils;
-import com.erudika.para.core.Sysprop;
-import com.erudika.para.core.Tag;
-import com.erudika.para.core.User;
-import com.erudika.para.persistence.DAO;
-import com.erudika.para.persistence.MockDAO;
-import com.erudika.para.search.LuceneSearch;
-import com.erudika.para.search.Search;
-import com.erudika.para.utils.Utils;
-import com.google.inject.Binder;
-import com.google.inject.Module;
-import com.google.inject.util.Modules;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import org.junit.AfterClass;
-import static org.junit.Assert.*;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- *
- * @author Alex Bogdanovski [alex@erudika.com]
- */
-public class AspectsIT {
-
-	private static final Logger logger = LoggerFactory.getLogger(AspectsIT.class);
-	private static Sysprop s0;
-	private static Sysprop s1;
-	private static Sysprop s2;
-
-	@BeforeClass
-	public static void setUpClass() throws Exception {
-		System.setProperty("para.env", "embedded");
-		System.setProperty("para.print_logo", "false");
-		System.setProperty("para.app_name", "para-test");
-		System.setProperty("para.cluster_name", "para-test");
-		System.setProperty("para.cache_enabled", "true");
-		ParaServer.initialize(Modules.override(ParaServer.getCoreModules()).with(new Module() {
-			public void configure(Binder binder) {
-				binder.bind(DAO.class).to(MockDAO.class).asEagerSingleton();
-				binder.bind(Cache.class).to(MockCache.class).asEagerSingleton();
-				binder.bind(Search.class).to(LuceneSearch.class).asEagerSingleton();
-			}
-		}));
-
-//		ElasticSearchUtils.createIndex(Config.getRootAppIdentifier());
-
-		s0 = new Sysprop("s111");
-		s0.setName("John Doe");
-		s0.setTimestamp(Utils.timestamp());
-		s0.setTags(CoreUtils.getInstance().addTags(s0.getTags(), "one", "two", "three"));
-
-		s1 = new Sysprop("s222");
-		s1.setName("Joe Black");
-		s1.setTimestamp(Utils.timestamp());
-		s1.setTags(CoreUtils.getInstance().addTags(s1.getTags(), "two", "four", "three"));
-
-		s2 = new Sysprop("s333");
-		s2.setName("Ann Smith");
-		s2.setTimestamp(Utils.timestamp());
-		s2.setTags(CoreUtils.getInstance().addTags(s2.getTags(), "four", "five", "three"));
-
-		CoreUtils.getInstance().setDao(Para.getDAO());
-		CoreUtils.getInstance().setCache(Para.getCache());
-		CoreUtils.getInstance().setSearch(Para.getSearch());
-	}
-
-	@AfterClass
-	public static void tearDownClass() throws Exception {
-		Para.getDAO().deleteAll(Arrays.asList(s0, s1, s2));
-		Para.destroy();
-	}
-
-	@Test
-	public void test() throws InterruptedException {
-		DAO d = Para.getDAO();
-		Search s = Para.getSearch();
-		Cache c = Para.getCache();
-		System.setProperty("para.cache_enabled", "true");
-
-		assertNotNull(s0.create());
-		assertNotNull(d.read(s0.getId()));
-
-		User uB = new User("invalid");
-		uB.setIdentifier(null); // no identifier (username)
-		uB.setPassword("badpass");
-		uB.create();
-		assertNull(d.read(uB.getId()));
-		assertNull(s.findById(uB.getId()));
-		assertNull(c.get(uB.getId()));
-
-		uB.setEmail("tes1@test.com");
-		uB.setIdentifier(uB.getEmail());
-		uB.create();
-		assertNotNull(d.read(uB.getId()));
-		assertNotNull(s.findById(uB.getId()));
-		assertNotNull(c.get(uB.getId()));
-
-		logger.debug("---- cache remove -----");
-		c.remove(uB.getId());
-		assertNotNull(d.read(uB.getId()));
-		assertTrue(c.contains(uB.getId()));
-		logger.debug("---------");
-
-		uB.delete();
-		assertNull(d.read(uB.getId()));
-		assertNull(s.findById(uB.getId()));
-		assertNull(c.get(uB.getId()));
-
-		ArrayList<Sysprop> list = new ArrayList<>();
-		list.add(s0);
-		list.add(s1);
-		list.add(s2);
-
-		d.createAll(list);
-		assertNotNull(d.read(s0.getId()));
-		assertNotNull(s.findById(s0.getId()));
-		assertNotNull(c.get(s0.getId()));
-
-		assertNotNull(d.read(s1.getId()));
-		assertNotNull(s.findById(s1.getId()));
-		assertNotNull(c.get(s1.getId()));
-
-		assertNotNull(d.read(s2.getId()));
-		assertNotNull(s.findById(s2.getId()));
-		assertNotNull(c.get(s2.getId()));
-
-		logger.debug("---- read all from cache ----");
-		Map<String, User> map = d.readAll(Arrays.asList(s0.getId(), s1.getId(), s2.getId()), true);
-		assertTrue(map.containsKey(s0.getId()));
-		assertTrue(map.containsKey(s1.getId()));
-		assertTrue(map.containsKey(s2.getId()));
-
-		logger.debug("---- cache remove ----");
-		c.remove(s1.getId());
-		c.remove(s2.getId());
-		d.readAll(Arrays.asList(s0.getId(), s1.getId(), s2.getId()), true);
-		assertTrue(c.contains(s1.getId()));
-		assertTrue(c.contains(s2.getId()));
-
-		logger.debug("---- delete all ----");
-		d.deleteAll(list);
-		Thread.sleep(500);
-		assertNull(d.read(s0.getId()));
-		assertNull(s.findById(s0.getId()));
-		assertNull(c.get(s0.getId()));
-
-		assertNull(d.read(s1.getId()));
-		assertNull(s.findById(s1.getId()));
-		assertNull(c.get(s1.getId()));
-
-		assertNull(d.read(s2.getId()));
-		assertNull(s.findById(s2.getId()));
-		assertNull(c.get(s2.getId()));
-
-		// Removed in v1.18 - this will cause unexpected behavior in the future.
-		// These "special" classes are not documented and this is the wrong
-		// place to filter them out.
-
-		// test skipping special classes calling batch methods
-//		App app1 = new App("app1");
-//		User user1 = new User("user1");
-//		user1.setName("John Doe");
-//		user1.setGroups(User.Groups.USERS.toString());
-//		user1.setEmail("john1@asd.com");
-//		user1.setIdentifier(user1.getEmail());
-//		user1.setTimestamp(Utils.timestamp());
-//		user1.setPassword("123456");
-//		Tag t1 = new Tag("testtag123");
-//
-//		// test that Apps and Users are removed from batch operations
-//		ArrayList<ParaObject> list1 = new ArrayList<ParaObject>();
-//		list1.add(app1);
-//		list1.add(user1);
-//		list1.add(t1);
-//		Para.getDAO().createAll(list1);
-//
-//		System.setProperty("para.cache_enabled", "false");
-//		assertNull(Para.getDAO().read(app1.getId()));
-//		assertNull(Para.getDAO().read(user1.getId()));
-//		assertNotNull(Para.getDAO().read(t1.getId()));
-//
-//		assertNull(Para.getSearch().findById(app1.getId()));
-//		assertNull(Para.getSearch().findById(user1.getId()));
-//		assertNotNull(Para.getSearch().findById(t1.getId()));
-//
-//		System.setProperty("para.cache_enabled", "true");
-//		assertFalse(Para.getCache().contains(app1.getId()));
-//		assertFalse(Para.getCache().contains(user1.getId()));
-//		assertTrue(Para.getCache().contains(t1.getId()));
-	}
-
-	@Test
-	public void testFlags() throws InterruptedException {
-		// default - store=true, index=true, cache=true
-		Tag t1 = new Tag("tag1");
-		Sysprop o11 = new Sysprop("obj11");
-		Sysprop o12 = new Sysprop("obj12");
-		Para.getDAO().create(t1);
-		Para.getDAO().createAll(new LinkedList<>(Arrays.asList(o11, o12)));
-
-		assertNotNull(Para.getDAO().read(t1.getId()));
-		assertNotNull(Para.getDAO().read(o11.getId()));
-		assertNotNull(Para.getDAO().read(o12.getId()));
-		assertNotNull(Para.getSearch().findById(t1.getId()));
-		assertNotNull(Para.getSearch().findById(o11.getId()));
-		assertNotNull(Para.getSearch().findById(o12.getId()));
-		assertNotNull(Para.getCache().get(t1.getId()));
-		assertNotNull(Para.getCache().get(o11.getId()));
-		assertNotNull(Para.getCache().get(o12.getId()));
-		Para.getDAO().deleteAll(Arrays.asList(t1, o11, o12));
-		assertNull(Para.getDAO().read(t1.getId()));
-		assertNull(Para.getDAO().read(o11.getId()));
-		assertNull(Para.getDAO().read(o12.getId()));
-		assertNull(Para.getSearch().findById(t1.getId()));
-		assertNull(Para.getSearch().findById(o11.getId()));
-		assertNull(Para.getSearch().findById(o12.getId()));
-		assertNull(Para.getCache().get(t1.getId()));
-		assertNull(Para.getCache().get(o11.getId()));
-		assertNull(Para.getCache().get(o12.getId()));
-		// special case - readAll should always return an empty list and never null
-		Map<String, ?> deleted = Para.getDAO().readAll(Arrays.asList(t1.getId(), o11.getId(), o12.getId()), true);
-		assertNotNull(deleted);
-		assertTrue(deleted.isEmpty());
-
-		// not in DB - store=false, index=true, cache=true
-		Tag t2 = new Tag("tag2");
-		Sysprop o21 = new Sysprop("obj21");
-		Sysprop o22 = new Sysprop("obj22");
-		t2.setStored(false);
-		o21.setStored(false);
-		o22.setStored(false);
-		Para.getDAO().create(t2);
-		Para.getDAO().createAll(new LinkedList<>(Arrays.asList(o21, o22)));
-
-		System.setProperty("para.cache_enabled", "false");
-		assertNull(Para.getDAO().read(t2.getId()));
-		assertNull(Para.getDAO().read(o21.getId()));
-		assertNull(Para.getDAO().read(o22.getId()));
-		assertNotNull(Para.getSearch().findById(t2.getId()));
-		assertNotNull(Para.getSearch().findById(o21.getId()));
-		assertNotNull(Para.getSearch().findById(o22.getId()));
-		System.setProperty("para.cache_enabled", "true");
-		assertNotNull(Para.getCache().get(t2.getId()));
-		assertNotNull(Para.getCache().get(o21.getId()));
-		assertNotNull(Para.getCache().get(o22.getId()));
-		Para.getDAO().deleteAll(Arrays.asList(t2, o21, o22));
-		assertNull(Para.getDAO().read(t2.getId()));
-		assertNull(Para.getDAO().read(o21.getId()));
-		assertNull(Para.getDAO().read(o22.getId()));
-		assertNull(Para.getSearch().findById(t2.getId()));
-		assertNull(Para.getSearch().findById(o21.getId()));
-		assertNull(Para.getSearch().findById(o22.getId()));
-		assertNull(Para.getCache().get(t2.getId()));
-		assertNull(Para.getCache().get(o21.getId()));
-		assertNull(Para.getCache().get(o22.getId()));
-
-		// in memory - store=false, index=false, cache=true
-		Tag t3 = new Tag("tag3");
-		Sysprop o31 = new Sysprop("obj31");
-		Sysprop o32 = new Sysprop("obj32");
-		t3.setStored(false);
-		t3.setIndexed(false);
-		o31.setStored(false);
-		o31.setIndexed(false);
-		o32.setStored(false);
-		o32.setIndexed(false);
-		Para.getDAO().create(t3);
-		Para.getDAO().createAll(new LinkedList<>(Arrays.asList(o31, o32)));
-
-		System.setProperty("para.cache_enabled", "false");
-		assertNull(Para.getDAO().read(t3.getId()));
-		assertNull(Para.getDAO().read(o31.getId()));
-		assertNull(Para.getDAO().read(o32.getId()));
-		assertNull(Para.getSearch().findById(t3.getId()));
-		assertNull(Para.getSearch().findById(o31.getId()));
-		assertNull(Para.getSearch().findById(o32.getId()));
-		System.setProperty("para.cache_enabled", "true");
-		assertNotNull(Para.getCache().get(t3.getId()));
-		assertNotNull(Para.getCache().get(o31.getId()));
-		assertNotNull(Para.getCache().get(o32.getId()));
-		Para.getDAO().deleteAll(Arrays.asList(t3, o31, o32));
-		assertNull(Para.getDAO().read(t3.getId()));
-		assertNull(Para.getDAO().read(o31.getId()));
-		assertNull(Para.getDAO().read(o32.getId()));
-		assertNull(Para.getSearch().findById(t3.getId()));
-		assertNull(Para.getSearch().findById(o31.getId()));
-		assertNull(Para.getSearch().findById(o32.getId()));
-		assertNull(Para.getCache().get(t3.getId()));
-		assertNull(Para.getCache().get(o31.getId()));
-		assertNull(Para.getCache().get(o32.getId()));
-
-		// not cached - store=true, index=true, cache=false
-		Tag t4 = new Tag("tag4");
-		Sysprop o41 = new Sysprop("obj41");
-		Sysprop o42 = new Sysprop("obj42");
-		t4.setCached(false);
-		o41.setCached(false);
-		o42.setCached(false);
-		Para.getDAO().create(t4);
-		Para.getDAO().createAll(new LinkedList<>(Arrays.asList(o41, o42)));
-
-		System.setProperty("para.cache_enabled", "false");
-		assertNotNull(Para.getDAO().read(t4.getId()));
-		assertNotNull(Para.getDAO().read(o41.getId()));
-		assertNotNull(Para.getDAO().read(o42.getId()));
-		assertNotNull(Para.getSearch().findById(t4.getId()));
-		assertNotNull(Para.getSearch().findById(o41.getId()));
-		assertNotNull(Para.getSearch().findById(o42.getId()));
-		System.setProperty("para.cache_enabled", "true");
-		assertNull(Para.getCache().get(t4.getId()));
-		assertNull(Para.getCache().get(o41.getId()));
-		assertNull(Para.getCache().get(o42.getId()));
-		Para.getDAO().deleteAll(Arrays.asList(t4, o41, o42));
-		assertNull(Para.getDAO().read(t4.getId()));
-		assertNull(Para.getDAO().read(o41.getId()));
-		assertNull(Para.getDAO().read(o42.getId()));
-		assertNull(Para.getSearch().findById(t4.getId()));
-		assertNull(Para.getSearch().findById(o41.getId()));
-		assertNull(Para.getSearch().findById(o42.getId()));
-		assertNull(Para.getCache().get(t4.getId()));
-		assertNull(Para.getCache().get(o41.getId()));
-		assertNull(Para.getCache().get(o42.getId()));
-
-		// only in DB - store=true, index=false, cache=false
-		Tag t5 = new Tag("tag5");
-		Sysprop o51 = new Sysprop("obj51");
-		Sysprop o52 = new Sysprop("obj52");
-		t5.setIndexed(false);
-		t5.setCached(false);
-		o51.setIndexed(false);
-		o51.setCached(false);
-		o52.setIndexed(false);
-		o52.setCached(false);
-		Para.getDAO().create(t5);
-		Para.getDAO().createAll(new LinkedList<>(Arrays.asList(o51, o52)));
-
-		System.setProperty("para.cache_enabled", "false");
-		assertNotNull(Para.getDAO().read(t5.getId()));
-		assertNotNull(Para.getDAO().read(o51.getId()));
-		assertNotNull(Para.getDAO().read(o52.getId()));
-		assertNull(Para.getSearch().findById(t5.getId()));
-		assertNull(Para.getSearch().findById(o51.getId()));
-		assertNull(Para.getSearch().findById(o52.getId()));
-		System.setProperty("para.cache_enabled", "true");
-		assertNull(Para.getCache().get(t5.getId()));
-		assertNull(Para.getCache().get(o51.getId()));
-		assertNull(Para.getCache().get(o52.getId()));
-		Para.getDAO().deleteAll(Arrays.asList(t5, o51, o52));
-		assertNull(Para.getDAO().read(t5.getId()));
-		assertNull(Para.getDAO().read(o51.getId()));
-		assertNull(Para.getDAO().read(o52.getId()));
-		assertNull(Para.getSearch().findById(t5.getId()));
-		assertNull(Para.getSearch().findById(o51.getId()));
-		assertNull(Para.getSearch().findById(o52.getId()));
-		assertNull(Para.getCache().get(t5.getId()));
-		assertNull(Para.getCache().get(o51.getId()));
-		assertNull(Para.getCache().get(o52.getId()));
-
-		// only in index - store=false, index=true, cache=false
-		Tag t6 = new Tag("tag6");
-		Sysprop o61 = new Sysprop("obj61");
-		Sysprop o62 = new Sysprop("obj62");
-		o61.addProperty("dont_lose_this", o61.getId());
-		o62.addProperty("dont_lose_this", o62.getId());
-		t6.setStored(false);
-		t6.setCached(false);
-		o61.setStored(false);
-		o61.setCached(false);
-		o62.setStored(false);
-		o62.setCached(false);
-		Para.getDAO().create(t6);
-		Para.getDAO().createAll(new LinkedList<>(Arrays.asList(o61, o62)));
-		Thread.sleep(1000);
-
-		System.setProperty("para.cache_enabled", "false");
-		assertNull(Para.getDAO().read(t6.getId()));
-		assertNull(Para.getDAO().read(o61.getId()));
-		assertNull(Para.getDAO().read(o62.getId()));
-		assertNotNull(Para.getSearch().findById(t6.getId()));
-		assertNotNull(Para.getSearch().findById(o61.getId()));
-		assertNotNull(Para.getSearch().findById(o62.getId()));
-		// special case: read_from_index (query multiple objects)
-		List<?> results = Para.getSearch().findByIds(Arrays.asList(o61.getId(), o62.getId()));
-		assertNotNull(results);
-		assertFalse(results.isEmpty());
-		assertEquals(2, results.size());
-		Sysprop first = ((Sysprop) results.get(0));
-		Sysprop second = ((Sysprop) results.get(1));
-		assertEquals(first.getId(), first.getProperty("dont_lose_this"));
-		assertEquals(second.getId(), second.getProperty("dont_lose_this"));
-
-		System.setProperty("para.cache_enabled", "true");
-		assertNull(Para.getCache().get(t6.getId()));
-		assertNull(Para.getCache().get(o61.getId()));
-		assertNull(Para.getCache().get(o62.getId()));
-		Para.getDAO().deleteAll(Arrays.asList(t6, o61, o62));
-		assertNull(Para.getDAO().read(t6.getId()));
-		assertNull(Para.getDAO().read(o61.getId()));
-		assertNull(Para.getDAO().read(o62.getId()));
-		assertNull(Para.getSearch().findById(t6.getId()));
-		assertNull(Para.getSearch().findById(o61.getId()));
-		assertNull(Para.getSearch().findById(o62.getId()));
-		assertNull(Para.getCache().get(t6.getId()));
-		assertNull(Para.getCache().get(o61.getId()));
-		assertNull(Para.getCache().get(o62.getId()));
-	}
-
-}
\ No newline at end of file
diff --git a/para-server/src/test/java/com/erudika/para/client/ConcurrentParaClientIT.java b/para-server/src/test/java/com/erudika/para/client/ConcurrentParaClientIT.java
index ad1a2752..f4482fef 100644
--- a/para-server/src/test/java/com/erudika/para/client/ConcurrentParaClientIT.java
+++ b/para-server/src/test/java/com/erudika/para/client/ConcurrentParaClientIT.java
@@ -17,97 +17,76 @@
  */
 package com.erudika.para.client;
 
-import com.anarsoft.vmlens.concurrent.junit.ConcurrentTestRunner;
-import com.anarsoft.vmlens.concurrent.junit.ThreadCount;
-import com.erudika.para.Para;
-import com.erudika.para.ParaServer;
-import com.erudika.para.core.App;
-import com.erudika.para.core.ParaObject;
-import com.erudika.para.core.Sysprop;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import org.junit.After;
-import org.junit.AfterClass;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 /**
  *
  * @author Alex Bogdanovski [alex@erudika.com]
  */
-@RunWith(ConcurrentTestRunner.class)
+//@RunWith(ConcurrentTestRunner.class)
 public class ConcurrentParaClientIT {
 
-	private static final Logger logger = LoggerFactory.getLogger(ConcurrentParaClientIT.class);
-	private static final String ROOT_APP_NAME = "para-concurrent-test";
-	private static final String TEST_APP_NAME = "para-concurrent-test-app";
-	private static final String catsType = "cat";
-	private static final int TOTAL_THREADS = 20;
-	private static final int BATCH_SIZE = 1000;
-	private static final int TOTAL = TOTAL_THREADS * BATCH_SIZE;
-	private static ParaClient pc;
-
-	@BeforeClass
-	public static void setUpClass() throws InterruptedException, IOException {
-		System.setProperty("para.env", "embedded");
-		System.setProperty("para.print_logo", "false");
-		System.setProperty("para.app_name", ROOT_APP_NAME);
-		System.setProperty("para.search", "LuceneSearch");
-		System.setProperty("server.port", "8181");
-		String endpoint = "http://localhost:8181";
-		ParaServer.main(new String[0]);
-
-		App rootApp = Para.getDAO().read(App.id(ROOT_APP_NAME));
-		if (rootApp == null) {
-			rootApp = new App(ROOT_APP_NAME);
-			rootApp.setName(ROOT_APP_NAME);
-			rootApp.setSharingIndex(false);
-		} else {
-			rootApp.resetSecret();
-		}
-		rootApp.create();
-
-		Map<String, String> creds = Para.newApp(TEST_APP_NAME, "Child app with routing", false, false);
-
-		pc = new ParaClient(App.id(TEST_APP_NAME), creds.get("secretKey"));
-		pc.setEndpoint(endpoint);
-		assertNotNull(pc.me());
-	}
-
-	@Test
-	@ThreadCount(TOTAL_THREADS)
-	public void testBatchWrite() throws InterruptedException {
-		ArrayList<ParaObject> cats = new ArrayList<ParaObject>();
-		for (int i = 0; i < BATCH_SIZE; i++) {
-			Sysprop s = new Sysprop();
-			s.setType(catsType);
-			s.addProperty("createTime", System.currentTimeMillis());
-			cats.add(s);
-		}
-
-		List<ParaObject> created = pc.createAll(cats);
-		logger.info("Created {} objects from thread {}.", created.size(), Thread.currentThread().getId());
-	}
-
-	@After
-	public void tearDown() {
-		int total = pc.getCount(catsType).intValue();
-		assertEquals(TOTAL, total);
-		logger.info("Total concurrently created objects: {}", total);
-	}
-
-	@AfterClass
-	public static void tearDownClass() throws InterruptedException {
-		System.setProperty("server.port", "8080");
-		new App(TEST_APP_NAME).delete();
-		Para.destroy();
-		pc.close();
-	}
+//	private static final Logger logger = LoggerFactory.getLogger(ConcurrentParaClientIT.class);
+//	private static final String ROOT_APP_NAME = "para-concurrent-test";
+//	private static final String TEST_APP_NAME = "para-concurrent-test-app";
+//	private static final String catsType = "cat";
+//	private static final int TOTAL_THREADS = 20;
+//	private static final int BATCH_SIZE = 1000;
+//	private static final int TOTAL = TOTAL_THREADS * BATCH_SIZE;
+//	private static ParaClient pc;
+//
+//	@BeforeClass
+//	public static void setUpClass() throws InterruptedException, IOException {
+//		System.setProperty("para.env", "embedded");
+//		System.setProperty("para.print_logo", "false");
+//		System.setProperty("para.app_name", ROOT_APP_NAME);
+//		System.setProperty("para.search", "LuceneSearch");
+//		System.setProperty("server.port", "8181");
+//		String endpoint = "http://localhost:8181";
+//		ParaServer.main(new String[0]);
+//
+//		App rootApp = Para.getDAO().read(App.id(ROOT_APP_NAME));
+//		if (rootApp == null) {
+//			rootApp = new App(ROOT_APP_NAME);
+//			rootApp.setName(ROOT_APP_NAME);
+//			rootApp.setSharingIndex(false);
+//		} else {
+//			rootApp.resetSecret();
+//		}
+//		rootApp.create();
+//
+//		Map<String, String> creds = Para.newApp(TEST_APP_NAME, "Child app with routing", false, false);
+//
+//		pc = new ParaClient(App.id(TEST_APP_NAME), creds.get("secretKey"));
+//		pc.setEndpoint(endpoint);
+//		assertNotNull(pc.me());
+//	}
+//
+//	@Test
+//	@ThreadCount(TOTAL_THREADS)
+//	public void testBatchWrite() throws InterruptedException {
+//		ArrayList<ParaObject> cats = new ArrayList<ParaObject>();
+//		for (int i = 0; i < BATCH_SIZE; i++) {
+//			Sysprop s = new Sysprop();
+//			s.setType(catsType);
+//			s.addProperty("createTime", System.currentTimeMillis());
+//			cats.add(s);
+//		}
+//
+//		List<ParaObject> created = pc.createAll(cats);
+//		logger.info("Created {} objects from thread {}.", created.size(), Thread.currentThread().getId());
+//	}
+//
+//	@After
+//	public void tearDown() {
+//		int total = pc.getCount(catsType).intValue();
+//		assertEquals(TOTAL, total);
+//		logger.info("Total concurrently created objects: {}", total);
+//	}
+//
+//	@AfterClass
+//	public static void tearDownClass() throws InterruptedException {
+//		System.setProperty("server.port", "8080");
+//		new App(TEST_APP_NAME).delete();
+//		Para.destroy();
+//		pc.close();
+//	}
 }
diff --git a/para-server/src/test/java/com/erudika/para/client/ParaClientIT.java b/para-server/src/test/java/com/erudika/para/client/ParaClientIT.java
index f35dbb12..5cbf0d47 100644
--- a/para-server/src/test/java/com/erudika/para/client/ParaClientIT.java
+++ b/para-server/src/test/java/com/erudika/para/client/ParaClientIT.java
@@ -17,1085 +17,1031 @@
  */
 package com.erudika.para.client;
 
-import com.erudika.para.Para;
-import com.erudika.para.ParaServer;
-import com.erudika.para.core.Address;
-import com.erudika.para.core.App;
-import com.erudika.para.core.App.AllowedMethods;
-import static com.erudika.para.core.App.AllowedMethods.GET;
-import static com.erudika.para.core.App.AllowedMethods.OWN;
-import static com.erudika.para.core.App.AllowedMethods.PATCH;
-import static com.erudika.para.core.App.AllowedMethods.POST;
-import static com.erudika.para.core.App.AllowedMethods.PUT;
-import static com.erudika.para.core.App.AllowedMethods.READ;
-import static com.erudika.para.core.App.AllowedMethods.READ_AND_WRITE;
-import static com.erudika.para.core.App.AllowedMethods.READ_WRITE;
-import static com.erudika.para.core.App.AllowedMethods.WRITE;
-import com.erudika.para.core.utils.CoreUtils;
-import com.erudika.para.core.ParaObject;
-import com.erudika.para.core.Sysprop;
-import com.erudika.para.core.Tag;
-import com.erudika.para.core.User;
-import com.erudika.para.core.Votable;
-import com.erudika.para.core.Vote;
-import com.erudika.para.security.AuthenticatedUserDetails;
-import com.erudika.para.security.filters.FacebookAuthFilter;
-import com.erudika.para.security.SecurityModule;
-import com.erudika.para.security.UserAuthentication;
-import com.erudika.para.utils.Config;
-import static com.erudika.para.validation.Constraint.*;
-import com.erudika.para.utils.HumanTime;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
-import com.google.inject.util.Modules;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.EnumSet;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import org.junit.AfterClass;
-import static org.junit.Assert.*;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.anyString;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.when;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.boot.Banner;
-import org.springframework.boot.SpringApplication;
-import org.springframework.boot.WebApplicationType;
-
 /**
  *
  * @author Alex Bogdanovski [alex@erudika.com]
  */
 public class ParaClientIT {
 
-	private static final Logger logger = LoggerFactory.getLogger(ParaClientIT.class);
-	private static ParaClient pc;
-	private static ParaClient pc2;
-	private static ParaClient pcc;
-	private static final String catsType = "cat";
-	private static final String dogsType = "dog";
-	private static final String batsType = "bat";
-	private static final String APP_NAME = "para-test";
-	private static final String APP_NAME_CHILD = "para-test-child";
-
-	protected static Sysprop u;
-	protected static Sysprop u1;
-	protected static Sysprop u2;
-	protected static Tag t;
-	protected static Sysprop s1;
-	protected static Sysprop s2;
-	protected static Sysprop s3;
-	protected static Address a1;
-	protected static Address a2;
-	protected static User fbUser;
-
-	@BeforeClass
-	public static void setUpClass() throws InterruptedException, IOException {
-		System.setProperty("para.env", "embedded");
-		System.setProperty("para.print_logo", "false");
-		System.setProperty("para.app_name", APP_NAME);
-		System.setProperty("para.cluster_name", "para-test");
-		System.setProperty("para.search", "LuceneSearch");
-		String endpoint = "http://localhost:8080";
-
-		fbUser = new User("fbUser_1");
-		fbUser.setEmail("test@user.com");
-		fbUser.setIdentifier("fb:1234");
-		fbUser.setGroups("users");
-		fbUser.setActive(true);
-		fbUser.setAppid(APP_NAME);
-
-		UserAuthentication ua = new UserAuthentication(new AuthenticatedUserDetails(fbUser));
-		SpringApplication app = new SpringApplication(ParaServer.class);
-		app.setWebApplicationType(WebApplicationType.SERVLET);
-		app.setBannerMode(Banner.Mode.OFF);
-		SecurityModule secMod = new SecurityModule();
-		FacebookAuthFilter fbaf = new FacebookAuthFilter("/");
-		fbaf = spy(fbaf);
-		when(fbaf.getOrCreateUser((App) any(), anyString())).thenReturn(ua);
-		secMod.setFacebookFilter(fbaf);
-		ParaServer.initialize(Modules.override(ParaServer.getCoreModules()).with(secMod));
-		app.run();
-
-		CoreUtils.getInstance().setDao(Para.getDAO());
-		CoreUtils.getInstance().setSearch(Para.getSearch());
-
-		ParaClient temp = new ParaClient("x", "x");
-		temp.setEndpoint(endpoint);
-
-		assertNull(temp.me());
-		assertTrue(temp.newId().isEmpty());
-
-		App rootApp = Para.getDAO().read(App.id(APP_NAME));
-		if (rootApp == null) {
-			rootApp = new App(APP_NAME);
-			rootApp.setName(APP_NAME);
-			rootApp.setSharingIndex(false);
-			rootApp.create();
-		} else {
-			rootApp.resetSecret();
-			rootApp.create();
-		}
-
-		Map<String, String> creds = Para.newApp(APP_NAME_CHILD, "Child app with routing", false, false);
-
-		pc = new ParaClient(App.id(APP_NAME), rootApp.getSecret());
-		pc.setEndpoint(endpoint);
-		pc2 = new ParaClient(App.id(APP_NAME), rootApp.getSecret());
-		pc2.setEndpoint(endpoint);
-		pcc = new ParaClient(App.id(APP_NAME_CHILD), creds.get("secretKey"));
-		pcc.setEndpoint(endpoint);
-		logger.info("accessKey: {}, secretKey: {}", rootApp.getId(), rootApp.getSecret());
-
-		u = new Sysprop("c111");
-		u.setName("John Doe");
-		u.setTimestamp(Utils.timestamp());
-		u.setTags(CoreUtils.getInstance().addTags(u.getTags(), "one", "two", "three"));
-
-		u1 = new Sysprop("c222");
-		u1.setName("Joe Black");
-		u1.setTimestamp(Utils.timestamp());
-		u1.setTags(CoreUtils.getInstance().addTags(u1.getTags(), "two", "four", "three"));
-
-		u2 = new Sysprop("c333");
-		u2.setName("Ann Smith");
-		u2.setTimestamp(Utils.timestamp());
-		u2.setTags(CoreUtils.getInstance().addTags(u2.getTags(), "four", "five", "three"));
-
-		t = new Tag("test");
-		t.setCount(3);
-		t.setTimestamp(Utils.timestamp());
-
-		a1 = new Address("adr1");
-		a1.setName("Place 1");
-		a1.setAddress("NYC");
-		a1.setCountry("US");
-		a1.setLatlng("40.67,-73.94");
-		a1.setParentid(u.getId());
-		a1.setCreatorid(u.getId());
-
-		a2 = new Address("adr2");
-		a2.setName("Place 2");
-		a2.setAddress("NYC");
-		a2.setCountry("US");
-		a2.setLatlng("40.69,-73.95");
-		a2.setParentid(t.getId());
-		a2.setCreatorid(t.getId());
-
-		s1 = new Sysprop("s1");
-		s1.addProperty("text", "This is a little test sentence. Testing, one, two, three.");
-		s1.setTimestamp(Utils.timestamp());
-
-		s2 = new Sysprop("s2");
-		s2.addProperty("text", "We are testing this thing. This sentence is a test. One, two.");
-		s2.setTimestamp(Utils.timestamp());
-
-		s3 = new Sysprop("уникод");
-		s3.setType("тип");
-		s3.setTimestamp(Utils.timestamp());
-
-		assertNotNull(fbUser.create());
-		pc.createAll(Arrays.asList(u, u1, u2, t, s1, s2, s3, a1, a2));
-//		Thread.sleep(1000);
-	}
-
-	@AfterClass
-	public static void tearDownClass() {
-		System.setProperty("para.clients_can_access_root_app", "false");
-		Para.getDAO().delete(new App(APP_NAME_CHILD));
-		Para.getDAO().delete(new App(APP_NAME));
-		Para.getDAO().deleteAll(Arrays.asList(u, u1, u2, t, s1, s2, a1, a2, fbUser));
-		Para.destroy();
-	}
-
-	@Test
-	public void testCRUD() {
-		assertNull(pc.create(null));
-
-		Tag tag1 = new Tag("test1");
-		tag1.setVersion(1L); // enable optimistic locking
-		Tag t1 = pc.create(tag1);
-		User ux = null;
-		try {
-			// validation fails
-			ux = pc.create(new User("u1"));
-		} catch (Exception e) {}
-
-		assertNotNull(t1);
-		assertNull(ux);
-
-		assertNull(pc.read(null, null));
-		assertNull(pc.read("", ""));
-
-		Tag trID = pc.read(t1.getId());
-		assertNotNull(trID);
-		assertNotNull(trID.getTimestamp());
-		assertEquals(t1.getTag(), trID.getTag());
-
-		Tag tr = pc.read(t1.getType(), t1.getId());
-		assertNotNull(tr);
-		assertNotNull(tr.getTimestamp());
-		assertEquals(t1.getTag(), tr.getTag());
-		assertEquals(t1.getVersion(), tr.getVersion());
-
-		// Not all DAOs support this, therefore we skip these tests
-//		tr.setCount(15);
-//		tr.setVersion(-1L);
-//		Tag tu = pc.update(tr);
-//		assertNotNull(tu);
-//		assertNotEquals(Long.valueOf(-1), tu.getVersion());
-//		tr.setVersion(5L);
-//		tu = pc.update(tr);
-//		assertNotEquals(Long.valueOf(5), tu.getVersion());
-
-//		assertNull(pc.update(new Tag("null")));
-//		assertEquals(tu.getCount(), tr.getCount());
-//		assertNotNull(tu.getUpdated());
+//	private static final Logger logger = LoggerFactory.getLogger(ParaClientIT.class);
+//	private static ParaClient pc;
+//	private static ParaClient pc2;
+//	private static ParaClient pcc;
+//	private static final String catsType = "cat";
+//	private static final String dogsType = "dog";
+//	private static final String batsType = "bat";
+//	private static final String APP_NAME = "para-test";
+//	private static final String APP_NAME_CHILD = "para-test-child";
 //
-//		tu.setVersion(0L); // disable optimistic locking
-//		assertEquals(Long.valueOf(0L), pc.create(tu).getVersion()); // overwrite to disable locking
-
-		Sysprop s = new Sysprop();
-		s.setType(dogsType);
-		s.addProperty("foo", "bark!");
-		s = pc.create(s);
-
-		Sysprop dog = pc.read(dogsType, s.getId());
-		assertTrue(dog.hasProperty("foo"));
-		assertEquals("bark!", dog.getProperty("foo"));
-
-		pc.delete(t1);
-		pc.delete(dog);
-		assertNull(pc.read(tr.getType(), tr.getId()));
-
-		// app must not overwrite itself
-		assertNull(pc.create(new App(APP_NAME)));
-		// app can read itself
-		assertNotNull(pc.read(Utils.type(App.class), APP_NAME));
-	}
-
-	@Test
-	public void testBatchCRUD() throws InterruptedException {
-		ArrayList<Sysprop> dogs = new ArrayList<>();
-		for (int i = 0; i < 3; i++) {
-			Sysprop s = new Sysprop();
-			s.setType(dogsType);
-			s.addProperty("foo", "bark!");
-			dogs.add(s);
-		}
-
-		assertTrue(pc.createAll(null).isEmpty());
-		List<Sysprop> l1 = pc.createAll(dogs);
-		assertEquals(3, l1.size());
-		assertNotNull(l1.get(0).getId());
-
-		assertTrue(pc.readAll(null).isEmpty());
-		ArrayList<String> nl = new ArrayList<>(3);
-		assertTrue(pc.readAll(nl).isEmpty());
-		nl.add(l1.get(0).getId());
-		nl.add(l1.get(1).getId());
-		nl.add(l1.get(2).getId());
-		List<Sysprop> l2 = pc.readAll(nl);
-		assertEquals(3, l2.size());
-		assertEquals(l1.get(0).getId(), l2.get(0).getId());
-		assertEquals(l1.get(1).getId(), l2.get(1).getId());
-		assertTrue(l2.get(0).hasProperty("foo"));
-		assertEquals("bark!", l2.get(0).getProperty("foo"));
-
-		assertTrue(pc.updateAll(null).isEmpty());
-
-		Sysprop part1 = new Sysprop(l1.get(0).getId());
-		Sysprop part2 = new Sysprop(l1.get(1).getId());
-		Sysprop part3 = new Sysprop(l1.get(2).getId());
-		part1.setType(dogsType);
-		part2.setType(dogsType);
-		part3.setType(dogsType);
-
-		part1.addProperty("custom", "prop");
-		part1.setName("NewName1");
-		part2.setName("NewName2");
-		part3.setName("NewName3");
-
-		List<Sysprop> l3 = pc.updateAll(Arrays.asList(part1, part2, part3));
-
-		assertTrue(l3.get(0).hasProperty("custom"));
-		assertEquals(dogsType, l3.get(0).getType());
-		assertEquals(dogsType, l3.get(1).getType());
-		assertEquals(dogsType, l3.get(2).getType());
-
-		assertEquals(part1.getName(), l3.get(0).getName());
-		assertEquals(part2.getName(), l3.get(1).getName());
-		assertEquals(part3.getName(), l3.get(2).getName());
-
-		pc.deleteAll(nl);
-//		Thread.sleep(1000);
-
-		List<Sysprop> l4 = pc.list(dogsType);
-		assertTrue(l4.isEmpty());
-
-		assertTrue(pc.getApp().getDatatypes().containsValue(dogsType));
-	}
-
-	@Test
-	public void testBatchCRUDForChildApp() throws InterruptedException {
-		ArrayList<Sysprop> articles = new ArrayList<>();
-		for (int i = 0; i < 3; i++) {
-			Sysprop s = new Sysprop();
-			s.setType("article");
-			// DO NOT SET appid, must be always set automatically on the server
-			// depending on which app is currently in context (i.e. making the requests)
-			s.addProperty("text", "a b c");
-			articles.add(s);
-		}
-
-		Para.getDAO().deleteAll(pcc.findQuery("article", "*"));
-		List<Sysprop> l1 = pcc.createAll(articles);
-		assertEquals(3, l1.size());
-		assertNotNull(l1.get(0).getId());
-		assertNotNull(l1.get(1).getId());
-		assertNotNull(l1.get(2).getId());
-		assertTrue(l1.get(0).hasProperty("text"));
-		assertEquals("a b c", l1.get(0).getProperty("text"));
-
-		assertEquals(APP_NAME_CHILD, l1.get(0).getAppid());
-		assertEquals(APP_NAME_CHILD, l1.get(1).getAppid());
-		assertEquals(APP_NAME_CHILD, l1.get(2).getAppid());
-
-		// test if appid is set on partial update
-		// test if old data is not lost on partial update
-		// test if new custom properties are merged with old ones in case of partial update
-		Sysprop part1 = new Sysprop(l1.get(0).getId());
-		Sysprop part2 = new Sysprop(l1.get(1).getId());
-		Sysprop part3 = new Sysprop(l1.get(2).getId());
-		// DO NOT SET appid - should work without it in partial updateAll()
-		part1.setType("update_must_not_change_type");
-		part2.setType("update_must_not_change_type");
-		part3.setType("update_must_not_change_type");
-
-		part1.addProperty("text2", "d e f");
-		part2.addProperty("text2", "d e f");
-		part2.setName("NewName2");
-		part3.setName("NewName3");
-
-		List<Sysprop> lu = pcc.updateAll(Arrays.asList(part1, part2, part3));
-		assertEquals(3, lu.size());
-		List<Sysprop> l2 = pcc.readAll(Arrays.asList(part1.getId(), part2.getId(), part3.getId()));
-		assertEquals(3, l2.size());
-		assertTrue(l2.get(0).hasProperty("text"));
-		assertTrue(l2.get(1).hasProperty("text"));
-		assertTrue(l2.get(2).hasProperty("text"));
-		assertTrue(l2.get(0).hasProperty("text2"));
-		assertTrue(l2.get(1).hasProperty("text2"));
-		assertEquals(2, l2.get(0).getProperties().size());
-		assertEquals("a b c", l2.get(0).getProperty("text"));
-		assertEquals(part2.getName(), l2.get(1).getName());
-		assertEquals(part3.getName(), l2.get(2).getName());
-		assertEquals("article", l2.get(0).getType());
-		assertEquals("article", l2.get(1).getType());
-		assertEquals("article", l2.get(2).getType());
-		assertEquals(APP_NAME_CHILD, l2.get(0).getAppid());
-		assertEquals(APP_NAME_CHILD, l2.get(1).getAppid());
-		assertEquals(APP_NAME_CHILD, l2.get(2).getAppid());
-
-		// test if objects are validated on updateAll()
-		pcc.addValidationConstraint("article", "text", required());
-		part1.addProperty("text", "");
-		part2.addProperty("text", "");
-		List<Sysprop> lu2 = pcc.updateAll(Arrays.asList(part1, part2));
-		assertTrue(lu2.isEmpty());
-		Para.getDAO().deleteAll(l1);
-		pcc.deleteAll(Arrays.asList(part1.getId(), part2.getId(), part3.getId()));
-	}
-
-	@Test
-	public void testCRUDWithNonStandardIDs() throws InterruptedException {
-		String id1 = "test/123/file.txt";
-		String id2 = "file.txt?/!./=-+)))(*&^%+$#@><`~±_|'";
-		String type1 = "type?/!./=-+)))(*&^%+$#@><`~±_|'";	// # should be removed
-		String type2 = "___ type 123  +__";
-		Sysprop so1 = new Sysprop(id1);
-		Sysprop so2 = new Sysprop(id2);
-		so1.setType(type1);
-		so2.setType(type2);
-		Sysprop obj1 = pc.create(so1);
-		Sysprop obj2 = pc.create(so2);
-		assertNotNull(obj1);
-		assertNotNull(obj2);
-		Sysprop sr1 = pc.read(so1.getId());
-		Sysprop sr2 = pc.read(so2.getId());
-		assertNotNull(sr1);
-		assertNotNull(sr2);
-		assertNotNull(sr1.getTimestamp());
-		assertNotNull(sr2.getTimestamp());
-		assertEquals(id1, sr1.getId());
-		assertEquals(id2, sr2.getId());
-		assertNotNull(pc.read(obj1.getType(), obj1.getId()));
-		assertNotNull(pc.read(obj2.getType(), obj2.getId()));
-		so1.setName("test name");
-		Sysprop su = pc.update(so1);
-		assertNotNull(su);
-		assertEquals(so1.getName(), su.getName());
-		assertNotNull(su.getUpdated());
-		pc.delete(so1);
-		pc.delete(so2);
-		assertNull(pc.read(so1.getId()));
-		assertNull(pc.read(so2.getId()));
-		assertNull(pc.read(so1.getType(), so1.getId()));
-		assertNull(pc.read(so2.getType(), so2.getId()));
-
-		pc.createAll(Arrays.asList(sr1, sr2));
-		List<Sysprop> srl = pc.readAll(Arrays.asList(id1, id2));
-		assertEquals(2, srl.size());
-		assertEquals(id1, srl.get(0).getId());
-		assertEquals(id2, srl.get(1).getId());
-		pc.deleteAll(Arrays.asList(id1, id2));
-		assertTrue(pc.readAll(Arrays.asList(id1, id2)).isEmpty());
-
-		// test unicode ids
-		assertNotNull(pc.read(s3.getId()));
-		s3.addProperty("text", "текст");
-		pc.update(s3);
-		assertEquals("текст", ((Sysprop) pc.read(s3.getId())).getProperty("text"));
-
-		pc.link(s3, t.getId());
-		assertTrue(pc.isLinked(s3, t.getType(), t.getId()));
-		assertEquals(1, pc.countLinks(s3, t.getType()).intValue());
-		pc.unlink(s3, t.getType(), t.getId());
-		assertTrue(pc.getLinkedObjects(s3, t.getType()).isEmpty());
-		assertTrue(pc.voteUp(s3, u1.getId()));
-
-		pc.delete(s3);
-		assertNull(pc.read(s3.getId()));
-	}
-
-	@Test
-	public void testList() throws InterruptedException {
-		ArrayList<ParaObject> cats = new ArrayList<>();
-		for (int i = 0; i < 3; i++) {
-			Sysprop s = new Sysprop(catsType + i);
-			s.setType(catsType);
-			cats.add(s);
-		}
-		pc.createAll(cats);
-//		Thread.sleep(1000);
-
-		assertTrue(pc.list(null).isEmpty());
-		assertTrue(pc.list("").isEmpty());
-
-		List<Sysprop> list1 = pc.list(catsType);
-		assertFalse(list1.isEmpty());
-		assertEquals(3, list1.size());
-		assertEquals(Sysprop.class, list1.get(0).getClass());
-
-		List<Sysprop> list2 = pc.list(catsType, new Pager(2));
-		assertFalse(list2.isEmpty());
-		assertEquals(2, list2.size());
-
-		ArrayList<String> nl = new ArrayList<>(3);
-		nl.add(cats.get(0).getId());
-		nl.add(cats.get(1).getId());
-		nl.add(cats.get(2).getId());
-		pc.deleteAll(nl);
-
-		assertTrue(pc.getApp().getDatatypes().containsValue(catsType));
-	}
-
-
-	@Test
-	public void testSearch() throws InterruptedException {
-		assertNull(pc.findById(null));
-		assertNull(pc.findById(""));
-		assertNotNull(pc.findById(u.getId()));
-		assertNotNull(pc.findById(t.getId()));
-
-		assertTrue(pc.findByIds(null).isEmpty());
-		List<?> res1 = pc.findByIds(Arrays.asList(u.getId(), u1.getId(), u2.getId()));
-		assertEquals(3, res1.size());
-
-		Sysprop withRouting1 = new Sysprop("routed_object1");
-		Sysprop withRouting2 = new Sysprop("routed_object2");
-		Para.getDAO().deleteAll(Arrays.asList(withRouting1, withRouting2));
-		withRouting1.setAppid(APP_NAME_CHILD);
-		withRouting2.setAppid(APP_NAME_CHILD);
-		pcc.createAll(Arrays.asList(withRouting1, withRouting2));
-
-//		Thread.sleep(1000);
-
-		assertEquals(2, pcc.findByIds(Arrays.asList(withRouting1.getId(), withRouting2.getId())).size());
-		Para.getDAO().deleteAll(APP_NAME_CHILD, Arrays.asList(withRouting1, withRouting2));
-
-		assertTrue(pc.findNearby(null, null, 100, 1, 1).isEmpty());
-		assertFalse(pc.findNearby(u.getType(), "*", 10, 40.60, -73.90).isEmpty());
-		assertFalse(pc.findNearby(t.getType(), "*", 10, 40.62, -73.91).isEmpty());
-
-		assertTrue(pc.findPrefix(null, null, "").isEmpty());
-		assertTrue(pc.findPrefix("", "null", "xx").isEmpty());
-		assertFalse(pc.findPrefix(u.getType(), Config._NAME, "Ann").isEmpty());
-
-		assertFalse(pc.findQuery(null, null).isEmpty());
-		assertFalse(pc.findQuery("", "*").isEmpty());
-		assertEquals(2, pc.findQuery(a1.getType(), "country:US").size());
-		//assertFalse(pc.findQuery(u.getType(), "Ann*").isEmpty());
-		assertTrue(pc.findQuery(null, "*").size() > 4);
-
-		Pager p = new Pager();
-		assertEquals(0, p.getCount());
-		List<?> res = pc.findQuery(u.getType(), "*", p);
-		assertEquals(res.size(), p.getCount());
-		assertTrue(p.getCount() > 0);
-
-		assertTrue(pc.findSimilar(t.getType(), "", null, null).isEmpty());
-		assertTrue(pc.findSimilar(t.getType(), "", new String[0], "").isEmpty());
-		res = pc.findSimilar(s1.getType(), s1.getId(), new String[]{"properties.text"}, (String) s1.getProperty("text"));
-		assertFalse(res.isEmpty());
-		assertEquals(s2, res.get(0));
-
-		int i0 = pc.findTagged(u.getType(), null).size();
-		int i1 = pc.findTagged(u.getType(), new String[]{"two"}).size();
-		int i2 = pc.findTagged(u.getType(), new String[]{"one", "two"}).size();
-		int i3 = pc.findTagged(u.getType(), new String[]{"three"}).size();
-		int i4 = pc.findTagged(u.getType(), new String[]{"four", "three"}).size();
-		int i5 = pc.findTagged(u.getType(), new String[]{"five", "three"}).size();
-		int i6 = pc.findTagged(t.getType(), new String[]{"four", "three"}).size();
-
-		assertEquals(0, i0);
-		assertEquals(2, i1);
-		assertEquals(1, i2);
-		assertEquals(3, i3);
-		assertEquals(2, i4);
-		assertEquals(1, i5);
-		assertEquals(0, i6);
-
-		assertFalse(pc.findTags(null).isEmpty());
-		assertFalse(pc.findTags("").isEmpty());
-		assertTrue(pc.findTags("unknown").isEmpty());
-		assertTrue(pc.findTags(t.getTag()).size() >= 1);
-
-		assertEquals(3, pc.findTermInList(u.getType(), Config._ID,
-				Arrays.asList(u.getId(), u1.getId(), u2.getId(), "xxx", "yyy")).size());
-
-		// many terms
-		Map<String, Object> terms = new HashMap<>();
-//		terms.put(Config._TYPE, u.getType());
-		terms.put(Config._ID, u.getId());
-
-		Map<String, Object> terms1 = new HashMap<>();
-		terms1.put(Config._TYPE, null);
-		terms1.put(Config._ID, " ");
-
-		Map<String, Object> terms2 = new HashMap<>();
-		terms2.put(" ", "bad");
-		terms2.put("", "");
-
-		assertEquals(1, pc.findTerms(u.getType(), terms, true).size());
-		assertTrue(pc.findTerms(u.getType(), terms1, true).isEmpty());
-		assertTrue(pc.findTerms(u.getType(), terms2, true).isEmpty());
-
-		// single term
-		assertTrue(pc.findTerms(null, null, true).isEmpty());
-		assertTrue(pc.findTerms(u.getType(), Collections.singletonMap("", null), true).isEmpty());
-		assertTrue(pc.findTerms(u.getType(), Collections.singletonMap("", ""), true).isEmpty());
-		assertTrue(pc.findTerms(u.getType(), Collections.singletonMap("term", null), true).isEmpty());
-		assertTrue(pc.findTerms(u.getType(), Collections.singletonMap(Config._TYPE, u.getType()), true).size() >= 2);
-		assertTrue(pc.findTerms(u.getType(), Collections.singletonMap(Config._NAME, "Ann Smith"), true).size() >= 1);
-		// "name" field is not analyzed, see https://github.com/Erudika/para/issues/13
-		assertTrue(pc.findTerms(u.getType(), Collections.singletonMap(Config._NAME, "ann smith"), true).isEmpty());
-//		assertFalse(pc.findQuery(u.getType(), "\"Ann Smith\"").isEmpty());
-
-		assertTrue(pc.findWildcard(u.getType(), null, null).isEmpty());
-		assertTrue(pc.findWildcard(u.getType(), "", "").isEmpty());
-		assertFalse(pc.findWildcard(u.getType(), Config._NAME, "An*").isEmpty());
-
-		assertTrue(pc.getCount(null).intValue() > 4);
-		assertNotEquals(0, pc.getCount("").intValue());
-		assertEquals(0, pc.getCount("test").intValue());
-		assertTrue(pc.getCount(u.getType()).intValue() >= 3);
-
-		assertEquals(0L, pc.getCount(null, null).intValue());
-		assertEquals(0L, pc.getCount(u.getType(), Collections.singletonMap(Config._ID, " ")).intValue());
-		assertEquals(1L, pc.getCount(u.getType(), Collections.singletonMap(Config._ID, u.getId())).intValue());
-		assertTrue(pc.getCount(null, Collections.singletonMap(Config._TYPE, u.getType())).intValue() > 1);
-	}
-
-	@Test
-	public void testLinks() throws InterruptedException {
-		assertNotNull(pc.link(u, t.getId()));
-		assertNotNull(pc.link(u, u2.getId()));
-
-		assertFalse(pc.isLinked(u, null));
-		assertTrue(pc.isLinked(u, t));
-		assertTrue(pc.isLinked(u, u2));
-
-//		Thread.sleep(1000);
-
-		assertEquals(1, pc.getLinkedObjects(u, Utils.type(Tag.class)).size());
-		assertEquals(1, pc.getLinkedObjects(u, Utils.type(Sysprop.class)).size());
-
-		assertEquals(0, pc.countLinks(u, null).intValue());
-		assertEquals(1, pc.countLinks(u, Utils.type(Tag.class)).intValue());
-		assertEquals(1, pc.countLinks(u, Utils.type(Sysprop.class)).intValue());
-
-		pc.unlinkAll(u);
-
-		assertFalse(pc.isLinked(u, t));
-		assertFalse(pc.isLinked(u, u2));
-
-		Sysprop second1 = new Sysprop("secondLink1");
-		Sysprop second2 = new Sysprop("secondLink2");
-		Sysprop second3 = new Sysprop("secondLink3");
-		second1.addProperty("text", "hello from the other side");
-		second2.addProperty("text", "hello kitty");
-		second3.setName("gordon");
-
-		Sysprop child1 = new Sysprop("child1");
-		Sysprop child2 = new Sysprop("child2");
-		Sysprop child3 = new Sysprop("child3");
-		child1.setParentid(u.getId());
-		child2.setParentid(u.getId());
-		child3.setParentid(u.getId());
-		child1.addProperty("text", "hello from the other side");
-		child2.addProperty("text", "hello kitty");
-		child3.setName("gordon");
-
-		pc.createAll(Arrays.asList(second1, second2, second3, child1, child2, child3));
-
-//		Thread.sleep(1000);
-
-		assertNotNull(pc.link(u, second1.getId()));
-		assertNotNull(pc.link(u, second2.getId()));
-		assertNotNull(pc.link(u, second3.getId()));
-
-//		Thread.sleep(1000);
-
-		// test linked objects search
-		assertTrue(pc.findLinkedObjects(u, second1.getType(), Config._NAME, null).size() >= 3);
-
-		List<Sysprop> found1 = pc.findLinkedObjects(u, second1.getType(), Config._NAME, "gord*");
-		assertFalse(found1.isEmpty());
-		assertTrue(found1.get(0).getId().equals(second3.getId()));
-
-		List<Sysprop> found2 = pc.findLinkedObjects(u, second1.getType(), "properties.text", "kitt*");
-		assertFalse(found2.isEmpty());
-		assertTrue(found2.get(0).getId().equals(second2.getId()));
-
-		List<Sysprop> found3 = pc.findLinkedObjects(u, second1.getType(), "properties.text", "hello");
-		assertEquals(2, found3.size());
-		assertTrue(found3.get(0).getId().equals(second1.getId()) || found3.get(1).getId().equals(second1.getId()));
-		assertTrue(found3.get(0).getId().equals(second2.getId()) || found3.get(1).getId().equals(second2.getId()));
-
-		// test children search
-		assertEquals(3, pc.findChildren(u, child1.getType(), null).size());
-
-		List<Sysprop> result1 = pc.findChildren(u, child1.getType(), "gord*");
-		assertFalse(result1.isEmpty());
-		assertTrue(result1.get(0).getId().equals(child3.getId()));
-
-		List<Sysprop> result2 = pc.findChildren(u, child1.getType(), "kitt*");
-		assertFalse(result2.isEmpty());
-		assertTrue(result2.get(0).getId().equals(child2.getId()));
-
-		List<Sysprop> result3 = pc.findChildren(u, child1.getType(), "hello");
-		assertEquals(2, result3.size());
-		assertTrue(result3.get(0).getId().equals(child1.getId()) || result3.get(1).getId().equals(child1.getId()));
-		assertTrue(result3.get(0).getId().equals(child2.getId()) || result3.get(1).getId().equals(child2.getId()));
-
-		pc.unlinkAll(u);
-		pc.deleteAll(Arrays.asList(second1.getId(), second2.getId(), second3.getId(),
-				child1.getId(), child2.getId(), child3.getId()));
-	}
-
-	@Test
-	public void testUtils() {
-		String id1 = pc.newId();
-		String id2 = pc.newId();
-		assertNotNull(id1);
-		assertFalse(id1.isEmpty());
-		assertNotEquals(id1, id2);
-
-		final Long ts = pc.getTimestamp();
-		assertNotNull(ts);
-		assertNotEquals(0, ts.intValue());
-
-		String date1 = pc.formatDate("MM dd yyyy", Locale.US);
-		String date2 = Utils.formatDate("MM dd yyyy", Locale.US);
-		assertEquals(date1, date2);
-
-		String ns1 = pc.noSpaces(" test  123		test ", "");
-		String ns2 = Utils.noSpaces(" test  123		test ", "");
-		assertEquals(ns1, ns2);
-
-		String st1 = pc.stripAndTrim(" %^&*( cool )		@!");
-		String st2 = Utils.stripAndTrim(" %^&*( cool )		@!");
-		assertEquals(st1, st2);
-
-		String md1 = pc.markdownToHtml("**test** #hello");
-		String md2 = Utils.markdownToHtml("**test** #hello");
-		assertEquals(md1, md2);
-
-		String ht1 = pc.approximately(15000);
-		String ht2 = HumanTime.approximately(15000);
-		assertEquals(ht1, ht2);
-	}
-
-	@Test
-	public void testMisc() {
-		Map<String, String> types = pc.types();
-		assertNotNull(types);
-		assertFalse(types.isEmpty());
-		assertTrue(types.containsKey(new User().getPlural()));
-
-		assertEquals(App.id(APP_NAME), pc.me().getId());
-	}
-
-	@Test
-	public void testValidationConstraints() {
-		// Validations
-		String kittenType = "kitten";
-		Map<String, ?> constraints = pc.validationConstraints();
-		assertNotNull(constraints);
-		assertFalse(constraints.isEmpty());
-		assertTrue(constraints.containsKey("app"));
-		assertTrue(constraints.containsKey("user"));
-
-		Map<String, Map<String, Map<String, Map<String, ?>>>> constraint = pc.validationConstraints("app");
-		assertFalse(constraint.isEmpty());
-		assertTrue(constraint.containsKey("app"));
-		assertEquals(1, constraint.size());
-
- 		pc.addValidationConstraint(kittenType, "paws", required());
-		constraint = pc.validationConstraints(kittenType);
-		assertNotNull(constraint);
-		assertNotNull(constraint.get(kittenType));
-		assertTrue(constraint.get(kittenType).containsKey("paws"));
-
-		Sysprop ct = new Sysprop("felix");
-		pc.delete(ct);
-		pc.delete(new Vote(u.getId(), ct.getId(), Votable.VoteValue.UP));
-		pc.delete(new Vote(u.getId(), ct.getId(), Votable.VoteValue.DOWN));
-		ct.setType(kittenType);
-		Sysprop ct2 = null;
-		try {
-			// validation fails
-			ct2 = pc.create(ct);
-		} catch (Exception e) {}
-
-		assertNull(ct2);
-		ct.addProperty("paws", "4");
-		assertNotNull(pc.create(ct));
-
-		pc.removeValidationConstraint(kittenType, "paws", "required");
-		constraint = pc.validationConstraints(kittenType);
-		assertFalse(constraint.containsKey(kittenType));
-
-		Integer votes = ct.getVotes() + 1;
-		assertTrue(pc.voteUp(ct, u.getId()));
-		assertEquals(votes, pc.read(ct.getId()).getVotes());
-		assertFalse(pc.voteUp(ct, u.getId()));
-		votes -= 1;
-		assertTrue(pc.voteDown(ct, u.getId()));
-		assertEquals(votes, pc.read(ct.getId()).getVotes());
-		votes -= 1;
-		assertTrue(pc.voteDown(ct, u.getId()));
-		assertFalse(pc.voteDown(ct, u.getId()));
-		assertEquals(votes, pc.read(ct.getId()).getVotes());
-		Para.getDAO().delete(ct);
-		Para.getDAO().delete(new Vote(u.getId(), ct.getId(), Votable.VoteValue.UP));
-	}
-
-	@Test
-	public void testResourcePermissions() {
-		// Permissions
-		Map<String, Map<String, List<String>>> permits = pc.resourcePermissions();
-		assertNotNull(permits);
-
-		assertTrue(pc.grantResourcePermission(null, dogsType, EnumSet.noneOf(AllowedMethods.class)).isEmpty());
-		assertTrue(pc.grantResourcePermission(" ", "", EnumSet.noneOf(AllowedMethods.class)).isEmpty());
-
-		pc.grantResourcePermission(u1.getId(), dogsType, READ);
-		permits = pc.resourcePermissions(u1.getId());
-		assertTrue(permits.containsKey(u1.getId()));
-		assertTrue(permits.get(u1.getId()).containsKey(dogsType));
-		assertTrue(pc.isAllowedTo(u1.getId(), dogsType, GET.toString()));
-		assertFalse(pc.isAllowedTo(u1.getId(), dogsType, POST.toString()));
-
-		permits = pc.resourcePermissions();
-		assertTrue(permits.containsKey(u1.getId()));
-		assertTrue(permits.get(u1.getId()).containsKey(dogsType));
-
-		pc.revokeResourcePermission(u1.getId(), dogsType);
-		permits = pc.resourcePermissions(u1.getId());
-		assertFalse(permits.get(u1.getId()).containsKey(dogsType));
-		assertFalse(pc.isAllowedTo(u1.getId(), dogsType, GET.toString()));
-		assertFalse(pc.isAllowedTo(u1.getId(), dogsType, POST.toString()));
-
-		pc.grantResourcePermission(u2.getId(), App.ALLOW_ALL, WRITE);
-		assertTrue(pc.isAllowedTo(u2.getId(), dogsType, PUT.toString()));
-		assertTrue(pc.isAllowedTo(u2.getId(), dogsType, PATCH.toString()));
-
-		pc.revokeAllResourcePermissions(u2.getId());
-		permits = pc.resourcePermissions();
-		assertFalse(pc.isAllowedTo(u2.getId(), dogsType, PUT.toString()));
-		assertFalse(permits.containsKey(u2.getId()));
-//		assertTrue(permits.get(u2.getId()).isEmpty());
-
-		pc.grantResourcePermission(u1.getId(), dogsType, WRITE);
-		pc.grantResourcePermission(App.ALLOW_ALL, catsType, WRITE);
-		pc.grantResourcePermission(App.ALLOW_ALL, App.ALLOW_ALL, READ);
-		// user-specific permissions are in effect
-		assertTrue(pc.isAllowedTo(u1.getId(), dogsType, PUT.toString()));
-		assertFalse(pc.isAllowedTo(u1.getId(), dogsType, GET.toString()));
-		assertTrue(pc.isAllowedTo(u1.getId(), catsType, PUT.toString()));
-		assertTrue(pc.isAllowedTo(u1.getId(), catsType, GET.toString()));
-
-		pc.revokeAllResourcePermissions(u1.getId());
-		// user-specific permissions not found so check wildcard
-		assertFalse(pc.isAllowedTo(u1.getId(), dogsType, PUT.toString()));
-		assertTrue(pc.isAllowedTo(u1.getId(), dogsType, GET.toString()));
-		assertTrue(pc.isAllowedTo(u1.getId(), catsType, PUT.toString()));
-		assertTrue(pc.isAllowedTo(u1.getId(), catsType, GET.toString()));
-
-		pc.revokeResourcePermission(App.ALLOW_ALL, catsType);
-		// resource-specific permissions not found so check wildcard
-		assertFalse(pc.isAllowedTo(u1.getId(), dogsType, PUT.toString()));
-		assertFalse(pc.isAllowedTo(u1.getId(), catsType, PUT.toString()));
-		assertTrue(pc.isAllowedTo(u1.getId(), dogsType, GET.toString()));
-		assertTrue(pc.isAllowedTo(u1.getId(), catsType, GET.toString()));
-		assertTrue(pc.isAllowedTo(u2.getId(), dogsType, GET.toString()));
-		assertTrue(pc.isAllowedTo(u2.getId(), catsType, GET.toString()));
-
-		pc.revokeAllResourcePermissions(App.ALLOW_ALL);
-		pc.revokeAllResourcePermissions(u1.getId());
-	}
-
-	@Test
-	public void testAppSettings() {
-		Map<String, Object> settings = pc.appSettings();
-		assertNotNull(settings);
-		assertTrue(settings.isEmpty());
-
-		pc.addAppSetting("", null);
-		pc.addAppSetting(" ", " ");
-		pc.addAppSetting(null, " ");
-		pc.addAppSetting("prop1", 1);
-		pc.addAppSetting("prop2", true);
-		pc.addAppSetting("prop3", "string");
-
-		settings = pc.appSettings();
-		assertEquals(3, settings.size());
-		assertEquals(settings, pc.appSettings(null));
-		assertEquals(1, settings.get("prop1"));
-		assertEquals(true, settings.get("prop2"));
-		assertEquals("string", settings.get("prop3"));
-
-		pc.removeAppSetting("prop3");
-		pc.removeAppSetting(" ");
-		pc.removeAppSetting(null);
-
-		settings = pc.appSettings();
-		assertFalse(settings.containsKey("prop3"));
-		assertEquals(2, settings.size());
-		pc.removeAppSetting("prop2");
-		pc.removeAppSetting("prop1");
-
-		pc.addAppSetting("propZ", 1);
-		Map<String, Object> newSettings = new HashMap<>();
-		newSettings.put("propX", "X");
-		newSettings.put("propY", "Y");
-		pc.setAppSettings(newSettings);
-		settings = pc.appSettings();
-		assertEquals(2, settings.size());
-		assertFalse(settings.containsKey("propZ"));
-		assertTrue(settings.containsKey("propX"));
-		assertTrue(settings.containsKey("propY"));
-		newSettings.clear();
-		pc.setAppSettings(newSettings);
-		settings = pc.appSettings();
-		assertTrue(settings.isEmpty());
-	}
-
-	@Test
-	public void testAccessTokens() throws IOException, InterruptedException {
-		assertNotNull(fbUser);
-		assertNull(pc2.getAccessToken());
-
-		// fails with google+ - service not mocked
-		User failsNotMocked = pc2.signIn("google", "test_token");
-		assertNull(failsNotMocked);
-
-		// should fail to create user for root app
-		System.setProperty("para.clients_can_access_root_app", "false");
-		User notSignedIn = pc2.signIn("facebook", "test_token");
-//		Thread.sleep(500);
-		logger.info(pc2.getAccessToken());
-		assertNull(notSignedIn);
-		assertNull(pc2.getAccessToken());
-
-		// then allow clients to modify root app
-		System.setProperty("para.clients_can_access_root_app", "true");
-		User signedIn = pc2.signIn("facebook", "test_token");
-		logger.info(pc2.getAccessToken());
-		assertNotNull(signedIn);
-		assertNotNull(pc2.getAccessToken());
-		assertEquals(fbUser.getId(), signedIn.getId());
-		assertTrue(signedIn.getActive());
-
-		// test without permissions - signed in but you can't access anything yet
-		pc2.revokeAllResourcePermissions(fbUser.getId());
-		ParaObject me = pc2.me();
-		assertNotNull(me);
-		assertEquals("user", me.getType());
-		assertTrue(pc2.newId().isEmpty());
-		assertTrue(pc2.getTimestamp() == 0L);
-
-		// test with permissions - logout first to use app credentials (full access)
-		pc2.signOut();
-		pc2.grantResourcePermission(fbUser.getId(), App.ALLOW_ALL, READ_AND_WRITE);
-		signedIn = pc2.signIn("facebook", "test_token");
-		logger.info(pc2.getAccessToken());
-//		Thread.sleep(800);
-		assertNotNull(signedIn);
-		assertNotNull(pc2.getAccessToken());
-		me = pc2.me();
-		assertNotNull(me);
-		assertFalse(pc2.newId().isEmpty());
-		assertEquals(signedIn.getName(), me.getName());
-//		Thread.sleep(500);
-
-		// now switch back to App access
-		pc2.signOut();
-		assertNull(pc2.getAccessToken());
-		me = pc2.me(); // app
-		assertNotNull(me);
-		assertEquals("app", me.getType());
-		assertFalse(pc2.newId().isEmpty());
-		signedIn = pc2.signIn("facebook", "test_token");
-		logger.info(pc2.getAccessToken());
-//		Thread.sleep(500);
-		me = pc2.me(); // user
-		assertNotNull(me);
-		assertEquals("user", me.getType());
-		assertEquals(signedIn.getId(), me.getId());
-
-		assertNull(pc2.newKeys()); // users can't change API keys!
-
-		// test revoke tokens
-		pc2.revokeAllTokens();
-		assertTrue(pc2.newId().isEmpty());
-		assertTrue(pc2.getTimestamp() == 0L);
-		assertNull(pc2.me());
-
-		pc2.signOut();
-
-		// test anonymous permissions
-		String utilsPath = "utils/timestamp";
-		ParaClient guest = new ParaClient(App.id(APP_NAME), null);
-		guest.setEndpoint(pc2.getEndpoint());
-		assertFalse(guest.getTimestamp() > 0);
-		assertFalse(guest.isAllowedTo(App.ALLOW_ALL, utilsPath, GET.toString()));
-		pc2.grantResourcePermission(App.ALLOW_ALL, utilsPath, READ, true);
-		assertTrue(guest.getTimestamp() > 0);
-	}
-
-	@Test
-	public void testOwnersPermissions() throws InterruptedException {
-		// test user should be able to login twice - first time the object is created, second time password is checked
-		String emailInactive = "test2@user.com";
-		String emailPassFail = emailInactive + "::123456";
-		String emailPassPass = "test3@user.com::123456";
-		String emailPassPass2 = "test4@user.com::123456";
-		assertNull(pc2.signIn("password", emailPassFail)); // unverified email - user is created but not active
-		List<User> failed = pc2.findTerms(fbUser.getType(), Collections.singletonMap(Config._EMAIL, emailInactive), true);
-		assertFalse(failed.isEmpty());
-		assertEquals(emailInactive, failed.get(0).getEmail());
-		pc2.delete(failed.get(0));
-
-		System.setProperty("para.security.allow_unverified_emails", "true"); // allow it
-		User newUser = pc2.signIn("password", emailPassPass);
-		User newUser2 = pc2.signIn("password", emailPassPass2);
-		assertNotNull(newUser);
-		assertNotNull(newUser2);
-		pc2.signOut();
-		assertNotNull(pc2.signIn("password", emailPassPass));
-		pc2.signOut();
-
-		// test permissions with/without signed in user
-		assertTrue(pc2.isAllowedTo(newUser.getId(), newUser.getObjectURI(), GET.toString()));
-		assertNotNull(pc2.signIn("password", emailPassPass));
-		assertTrue(pc2.isAllowedTo(newUser.getId(), newUser.getObjectURI(), GET.toString()));
-		assertFalse(pc2.isAllowedTo(newUser.getId(), newUser.getObjectURI() + "x", GET.toString()));
-		assertNotNull(pc2.read(newUser.getId())); // can read self
-		pc2.signOut();
-
-		// test implicit user permissions - read/update/delete own object (children)
-		assertFalse(pc2.isAllowedTo(newUser.getId(), "todo", POST.toString())); // can't create yet
-		pc2.grantResourcePermission(newUser.getId(), "todo", EnumSet.of(READ_WRITE, OWN)); // can only manage own TODOs
-		pc2.grantResourcePermission(newUser.getId(), "todo/*", EnumSet.of(READ_WRITE, OWN)); // can only manage own TODOs
-		pc2.signIn("password", emailPassPass);
-		assertTrue(pc2.isAllowedTo(newUser.getId(), "todo", POST.toString()));
-		Sysprop todo = new Sysprop("todo_id");
-		todo.setType("todo");
-		// test if creatorid is set correctly
-		todo.setCreatorid("invalid_user_id"); // must be corrected by the server
-		todo.setName("[] buy milk");
-		todo = pc2.create(todo);
-//		Thread.sleep(1000);
-		assertNotNull(todo);
-		assertFalse(todo.getId().equals("todo_id"));
-		assertNotNull(pc2.read(todo.getType(), todo.getId()));
-		assertEquals(1, pc2.findQuery("todo", "*").size()); // user only sees own TODO
-		assertEquals(newUser.getId(), todo.getCreatorid());
-		pc2.signOut();
-
-		// one user must not be able to overwrite another user's TODOs (custom ids)
-		pc2.grantResourcePermission(newUser2.getId(), "todo", EnumSet.of(READ_WRITE, OWN)); // can only manage own TODOs
-		pc2.grantResourcePermission(newUser2.getId(), "todo/*", EnumSet.of(READ_WRITE, OWN)); // can only manage own TODOs
-		pc2.signIn("password", emailPassPass2);
-		assertTrue(pc2.list("todo").isEmpty());
-		assertNull(pc2.read(todo.getId()));
-		Sysprop todo2 = new Sysprop("todo_id2");
-		todo2.setType("todo");
-		todo2.setName("[] buy eggs");
-		todo2 = pc2.create(todo2);
-//		Thread.sleep(1000);
-		assertNotNull(todo2);
-		assertFalse(todo2.getId().equals("todo_id2"));
-		assertNotNull(pc2.read(todo2.getType(), todo2.getId()));
-		assertEquals(1, pc2.findQuery("todo", "*").size());
-		assertEquals(newUser2.getId(), todo2.getCreatorid());
-		pc2.signOut();
-		// app can see all TODOs
-		assertEquals(2, pc2.list("todo").size());
-
-		pc.delete(todo);
-		pc.delete(todo2);
-		pc.delete(newUser);
-		pc.delete(newUser2);
-
-		// an app should be able to update and delete itself
-		String appId = "para-child-app-test";
-		Map<String, String> creds = Para.newApp(appId, "Child app", false, false);
-		ParaClient pclient = new ParaClient(App.id(appId), creds.get("secretKey"));
-		pclient.setEndpoint(pc.getEndpoint());
-
-		App app = pclient.me();
-		assertNotNull(app);
-		assertEquals(appId, app.getAppIdentifier());
-
-		app.setName("Child application");
-		pclient.update(app);
-		app = pclient.me();
-		assertEquals("Child application", app.getName());
-
-		pclient.delete(app);
-		assertNull(pclient.read(App.id(appId)));
-	}
+//	protected static Sysprop u;
+//	protected static Sysprop u1;
+//	protected static Sysprop u2;
+//	protected static Tag t;
+//	protected static Sysprop s1;
+//	protected static Sysprop s2;
+//	protected static Sysprop s3;
+//	protected static Address a1;
+//	protected static Address a2;
+//	protected static User fbUser;
+//
+//	@BeforeClass
+//	public static void setUpClass() throws InterruptedException, IOException {
+//		System.setProperty("para.env", "embedded");
+//		System.setProperty("para.print_logo", "false");
+//		System.setProperty("para.app_name", APP_NAME);
+//		System.setProperty("para.cluster_name", "para-test");
+//		System.setProperty("para.search", "LuceneSearch");
+//		String endpoint = "http://localhost:8080";
+//
+//		fbUser = new User("fbUser_1");
+//		fbUser.setEmail("test@user.com");
+//		fbUser.setIdentifier("fb:1234");
+//		fbUser.setGroups("users");
+//		fbUser.setActive(true);
+//		fbUser.setAppid(APP_NAME);
+//
+//		UserAuthentication ua = new UserAuthentication(new AuthenticatedUserDetails(fbUser));
+//		SpringApplication app = new SpringApplication(ParaServer.class);
+//		app.setWebApplicationType(WebApplicationType.SERVLET);
+//		app.setBannerMode(Banner.Mode.OFF);
+//		SecurityModule secMod = new SecurityModule();
+//		FacebookAuthFilter fbaf = new FacebookAuthFilter("/");
+//		fbaf = spy(fbaf);
+//		when(fbaf.getOrCreateUser((App) any(), anyString())).thenReturn(ua);
+//		secMod.setFacebookFilter(fbaf);
+//		ParaServer.initialize(Modules.override(ParaServer.getCoreModules()).with(secMod));
+//		app.run();
+//
+//		CoreUtils.getInstance().setDao(Para.getDAO());
+//		CoreUtils.getInstance().setSearch(Para.getSearch());
+//
+//		ParaClient temp = new ParaClient("x", "x");
+//		temp.setEndpoint(endpoint);
+//
+//		assertNull(temp.me());
+//		assertTrue(temp.newId().isEmpty());
+//
+//		App rootApp = Para.getDAO().read(App.id(APP_NAME));
+//		if (rootApp == null) {
+//			rootApp = new App(APP_NAME);
+//			rootApp.setName(APP_NAME);
+//			rootApp.setSharingIndex(false);
+//			rootApp.create();
+//		} else {
+//			rootApp.resetSecret();
+//			rootApp.create();
+//		}
+//
+//		Map<String, String> creds = Para.newApp(APP_NAME_CHILD, "Child app with routing", false, false);
+//
+//		pc = new ParaClient(App.id(APP_NAME), rootApp.getSecret());
+//		pc.setEndpoint(endpoint);
+//		pc2 = new ParaClient(App.id(APP_NAME), rootApp.getSecret());
+//		pc2.setEndpoint(endpoint);
+//		pcc = new ParaClient(App.id(APP_NAME_CHILD), creds.get("secretKey"));
+//		pcc.setEndpoint(endpoint);
+//		logger.info("accessKey: {}, secretKey: {}", rootApp.getId(), rootApp.getSecret());
+//
+//		u = new Sysprop("c111");
+//		u.setName("John Doe");
+//		u.setTimestamp(Utils.timestamp());
+//		u.setTags(CoreUtils.getInstance().addTags(u.getTags(), "one", "two", "three"));
+//
+//		u1 = new Sysprop("c222");
+//		u1.setName("Joe Black");
+//		u1.setTimestamp(Utils.timestamp());
+//		u1.setTags(CoreUtils.getInstance().addTags(u1.getTags(), "two", "four", "three"));
+//
+//		u2 = new Sysprop("c333");
+//		u2.setName("Ann Smith");
+//		u2.setTimestamp(Utils.timestamp());
+//		u2.setTags(CoreUtils.getInstance().addTags(u2.getTags(), "four", "five", "three"));
+//
+//		t = new Tag("test");
+//		t.setCount(3);
+//		t.setTimestamp(Utils.timestamp());
+//
+//		a1 = new Address("adr1");
+//		a1.setName("Place 1");
+//		a1.setAddress("NYC");
+//		a1.setCountry("US");
+//		a1.setLatlng("40.67,-73.94");
+//		a1.setParentid(u.getId());
+//		a1.setCreatorid(u.getId());
+//
+//		a2 = new Address("adr2");
+//		a2.setName("Place 2");
+//		a2.setAddress("NYC");
+//		a2.setCountry("US");
+//		a2.setLatlng("40.69,-73.95");
+//		a2.setParentid(t.getId());
+//		a2.setCreatorid(t.getId());
+//
+//		s1 = new Sysprop("s1");
+//		s1.addProperty("text", "This is a little test sentence. Testing, one, two, three.");
+//		s1.setTimestamp(Utils.timestamp());
+//
+//		s2 = new Sysprop("s2");
+//		s2.addProperty("text", "We are testing this thing. This sentence is a test. One, two.");
+//		s2.setTimestamp(Utils.timestamp());
+//
+//		s3 = new Sysprop("уникод");
+//		s3.setType("тип");
+//		s3.setTimestamp(Utils.timestamp());
+//
+//		assertNotNull(fbUser.create());
+//		pc.createAll(Arrays.asList(u, u1, u2, t, s1, s2, s3, a1, a2));
+////		Thread.sleep(1000);
+//	}
+//
+//	@AfterClass
+//	public static void tearDownClass() {
+//		System.setProperty("para.clients_can_access_root_app", "false");
+//		Para.getDAO().delete(new App(APP_NAME_CHILD));
+//		Para.getDAO().delete(new App(APP_NAME));
+//		Para.getDAO().deleteAll(Arrays.asList(u, u1, u2, t, s1, s2, a1, a2, fbUser));
+//		Para.destroy();
+//	}
+//
+//	@Test
+//	public void testCRUD() {
+//		assertNull(pc.create(null));
+//
+//		Tag tag1 = new Tag("test1");
+//		tag1.setVersion(1L); // enable optimistic locking
+//		Tag t1 = pc.create(tag1);
+//		User ux = null;
+//		try {
+//			// validation fails
+//			ux = pc.create(new User("u1"));
+//		} catch (Exception e) {}
+//
+//		assertNotNull(t1);
+//		assertNull(ux);
+//
+//		assertNull(pc.read(null, null));
+//		assertNull(pc.read("", ""));
+//
+//		Tag trID = pc.read(t1.getId());
+//		assertNotNull(trID);
+//		assertNotNull(trID.getTimestamp());
+//		assertEquals(t1.getTag(), trID.getTag());
+//
+//		Tag tr = pc.read(t1.getType(), t1.getId());
+//		assertNotNull(tr);
+//		assertNotNull(tr.getTimestamp());
+//		assertEquals(t1.getTag(), tr.getTag());
+//		assertEquals(t1.getVersion(), tr.getVersion());
+//
+//		// Not all DAOs support this, therefore we skip these tests
+////		tr.setCount(15);
+////		tr.setVersion(-1L);
+////		Tag tu = pc.update(tr);
+////		assertNotNull(tu);
+////		assertNotEquals(Long.valueOf(-1), tu.getVersion());
+////		tr.setVersion(5L);
+////		tu = pc.update(tr);
+////		assertNotEquals(Long.valueOf(5), tu.getVersion());
+//
+////		assertNull(pc.update(new Tag("null")));
+////		assertEquals(tu.getCount(), tr.getCount());
+////		assertNotNull(tu.getUpdated());
+////
+////		tu.setVersion(0L); // disable optimistic locking
+////		assertEquals(Long.valueOf(0L), pc.create(tu).getVersion()); // overwrite to disable locking
+//
+//		Sysprop s = new Sysprop();
+//		s.setType(dogsType);
+//		s.addProperty("foo", "bark!");
+//		s = pc.create(s);
+//
+//		Sysprop dog = pc.read(dogsType, s.getId());
+//		assertTrue(dog.hasProperty("foo"));
+//		assertEquals("bark!", dog.getProperty("foo"));
+//
+//		pc.delete(t1);
+//		pc.delete(dog);
+//		assertNull(pc.read(tr.getType(), tr.getId()));
+//
+//		// app must not overwrite itself
+//		assertNull(pc.create(new App(APP_NAME)));
+//		// app can read itself
+//		assertNotNull(pc.read(Utils.type(App.class), APP_NAME));
+//	}
+//
+//	@Test
+//	public void testBatchCRUD() throws InterruptedException {
+//		ArrayList<Sysprop> dogs = new ArrayList<>();
+//		for (int i = 0; i < 3; i++) {
+//			Sysprop s = new Sysprop();
+//			s.setType(dogsType);
+//			s.addProperty("foo", "bark!");
+//			dogs.add(s);
+//		}
+//
+//		assertTrue(pc.createAll(null).isEmpty());
+//		List<Sysprop> l1 = pc.createAll(dogs);
+//		assertEquals(3, l1.size());
+//		assertNotNull(l1.get(0).getId());
+//
+//		assertTrue(pc.readAll(null).isEmpty());
+//		ArrayList<String> nl = new ArrayList<>(3);
+//		assertTrue(pc.readAll(nl).isEmpty());
+//		nl.add(l1.get(0).getId());
+//		nl.add(l1.get(1).getId());
+//		nl.add(l1.get(2).getId());
+//		List<Sysprop> l2 = pc.readAll(nl);
+//		assertEquals(3, l2.size());
+//		assertEquals(l1.get(0).getId(), l2.get(0).getId());
+//		assertEquals(l1.get(1).getId(), l2.get(1).getId());
+//		assertTrue(l2.get(0).hasProperty("foo"));
+//		assertEquals("bark!", l2.get(0).getProperty("foo"));
+//
+//		assertTrue(pc.updateAll(null).isEmpty());
+//
+//		Sysprop part1 = new Sysprop(l1.get(0).getId());
+//		Sysprop part2 = new Sysprop(l1.get(1).getId());
+//		Sysprop part3 = new Sysprop(l1.get(2).getId());
+//		part1.setType(dogsType);
+//		part2.setType(dogsType);
+//		part3.setType(dogsType);
+//
+//		part1.addProperty("custom", "prop");
+//		part1.setName("NewName1");
+//		part2.setName("NewName2");
+//		part3.setName("NewName3");
+//
+//		List<Sysprop> l3 = pc.updateAll(Arrays.asList(part1, part2, part3));
+//
+//		assertTrue(l3.get(0).hasProperty("custom"));
+//		assertEquals(dogsType, l3.get(0).getType());
+//		assertEquals(dogsType, l3.get(1).getType());
+//		assertEquals(dogsType, l3.get(2).getType());
+//
+//		assertEquals(part1.getName(), l3.get(0).getName());
+//		assertEquals(part2.getName(), l3.get(1).getName());
+//		assertEquals(part3.getName(), l3.get(2).getName());
+//
+//		pc.deleteAll(nl);
+////		Thread.sleep(1000);
+//
+//		List<Sysprop> l4 = pc.list(dogsType);
+//		assertTrue(l4.isEmpty());
+//
+//		assertTrue(pc.getApp().getDatatypes().containsValue(dogsType));
+//	}
+//
+//	@Test
+//	public void testBatchCRUDForChildApp() throws InterruptedException {
+//		ArrayList<Sysprop> articles = new ArrayList<>();
+//		for (int i = 0; i < 3; i++) {
+//			Sysprop s = new Sysprop();
+//			s.setType("article");
+//			// DO NOT SET appid, must be always set automatically on the server
+//			// depending on which app is currently in context (i.e. making the requests)
+//			s.addProperty("text", "a b c");
+//			articles.add(s);
+//		}
+//
+//		Para.getDAO().deleteAll(pcc.findQuery("article", "*"));
+//		List<Sysprop> l1 = pcc.createAll(articles);
+//		assertEquals(3, l1.size());
+//		assertNotNull(l1.get(0).getId());
+//		assertNotNull(l1.get(1).getId());
+//		assertNotNull(l1.get(2).getId());
+//		assertTrue(l1.get(0).hasProperty("text"));
+//		assertEquals("a b c", l1.get(0).getProperty("text"));
+//
+//		assertEquals(APP_NAME_CHILD, l1.get(0).getAppid());
+//		assertEquals(APP_NAME_CHILD, l1.get(1).getAppid());
+//		assertEquals(APP_NAME_CHILD, l1.get(2).getAppid());
+//
+//		// test if appid is set on partial update
+//		// test if old data is not lost on partial update
+//		// test if new custom properties are merged with old ones in case of partial update
+//		Sysprop part1 = new Sysprop(l1.get(0).getId());
+//		Sysprop part2 = new Sysprop(l1.get(1).getId());
+//		Sysprop part3 = new Sysprop(l1.get(2).getId());
+//		// DO NOT SET appid - should work without it in partial updateAll()
+//		part1.setType("update_must_not_change_type");
+//		part2.setType("update_must_not_change_type");
+//		part3.setType("update_must_not_change_type");
+//
+//		part1.addProperty("text2", "d e f");
+//		part2.addProperty("text2", "d e f");
+//		part2.setName("NewName2");
+//		part3.setName("NewName3");
+//
+//		List<Sysprop> lu = pcc.updateAll(Arrays.asList(part1, part2, part3));
+//		assertEquals(3, lu.size());
+//		List<Sysprop> l2 = pcc.readAll(Arrays.asList(part1.getId(), part2.getId(), part3.getId()));
+//		assertEquals(3, l2.size());
+//		assertTrue(l2.get(0).hasProperty("text"));
+//		assertTrue(l2.get(1).hasProperty("text"));
+//		assertTrue(l2.get(2).hasProperty("text"));
+//		assertTrue(l2.get(0).hasProperty("text2"));
+//		assertTrue(l2.get(1).hasProperty("text2"));
+//		assertEquals(2, l2.get(0).getProperties().size());
+//		assertEquals("a b c", l2.get(0).getProperty("text"));
+//		assertEquals(part2.getName(), l2.get(1).getName());
+//		assertEquals(part3.getName(), l2.get(2).getName());
+//		assertEquals("article", l2.get(0).getType());
+//		assertEquals("article", l2.get(1).getType());
+//		assertEquals("article", l2.get(2).getType());
+//		assertEquals(APP_NAME_CHILD, l2.get(0).getAppid());
+//		assertEquals(APP_NAME_CHILD, l2.get(1).getAppid());
+//		assertEquals(APP_NAME_CHILD, l2.get(2).getAppid());
+//
+//		// test if objects are validated on updateAll()
+//		pcc.addValidationConstraint("article", "text", required());
+//		part1.addProperty("text", "");
+//		part2.addProperty("text", "");
+//		List<Sysprop> lu2 = pcc.updateAll(Arrays.asList(part1, part2));
+//		assertTrue(lu2.isEmpty());
+//		Para.getDAO().deleteAll(l1);
+//		pcc.deleteAll(Arrays.asList(part1.getId(), part2.getId(), part3.getId()));
+//	}
+//
+//	@Test
+//	public void testCRUDWithNonStandardIDs() throws InterruptedException {
+//		String id1 = "test/123/file.txt";
+//		String id2 = "file.txt?/!./=-+)))(*&^%+$#@><`~±_|'";
+//		String type1 = "type?/!./=-+)))(*&^%+$#@><`~±_|'";	// # should be removed
+//		String type2 = "___ type 123  +__";
+//		Sysprop so1 = new Sysprop(id1);
+//		Sysprop so2 = new Sysprop(id2);
+//		so1.setType(type1);
+//		so2.setType(type2);
+//		Sysprop obj1 = pc.create(so1);
+//		Sysprop obj2 = pc.create(so2);
+//		assertNotNull(obj1);
+//		assertNotNull(obj2);
+//		Sysprop sr1 = pc.read(so1.getId());
+//		Sysprop sr2 = pc.read(so2.getId());
+//		assertNotNull(sr1);
+//		assertNotNull(sr2);
+//		assertNotNull(sr1.getTimestamp());
+//		assertNotNull(sr2.getTimestamp());
+//		assertEquals(id1, sr1.getId());
+//		assertEquals(id2, sr2.getId());
+//		assertNotNull(pc.read(obj1.getType(), obj1.getId()));
+//		assertNotNull(pc.read(obj2.getType(), obj2.getId()));
+//		so1.setName("test name");
+//		Sysprop su = pc.update(so1);
+//		assertNotNull(su);
+//		assertEquals(so1.getName(), su.getName());
+//		assertNotNull(su.getUpdated());
+//		pc.delete(so1);
+//		pc.delete(so2);
+//		assertNull(pc.read(so1.getId()));
+//		assertNull(pc.read(so2.getId()));
+//		assertNull(pc.read(so1.getType(), so1.getId()));
+//		assertNull(pc.read(so2.getType(), so2.getId()));
+//
+//		pc.createAll(Arrays.asList(sr1, sr2));
+//		List<Sysprop> srl = pc.readAll(Arrays.asList(id1, id2));
+//		assertEquals(2, srl.size());
+//		assertEquals(id1, srl.get(0).getId());
+//		assertEquals(id2, srl.get(1).getId());
+//		pc.deleteAll(Arrays.asList(id1, id2));
+//		assertTrue(pc.readAll(Arrays.asList(id1, id2)).isEmpty());
+//
+//		// test unicode ids
+//		assertNotNull(pc.read(s3.getId()));
+//		s3.addProperty("text", "текст");
+//		pc.update(s3);
+//		assertEquals("текст", ((Sysprop) pc.read(s3.getId())).getProperty("text"));
+//
+//		pc.link(s3, t.getId());
+//		assertTrue(pc.isLinked(s3, t.getType(), t.getId()));
+//		assertEquals(1, pc.countLinks(s3, t.getType()).intValue());
+//		pc.unlink(s3, t.getType(), t.getId());
+//		assertTrue(pc.getLinkedObjects(s3, t.getType()).isEmpty());
+//		assertTrue(pc.voteUp(s3, u1.getId()));
+//
+//		pc.delete(s3);
+//		assertNull(pc.read(s3.getId()));
+//	}
+//
+//	@Test
+//	public void testList() throws InterruptedException {
+//		ArrayList<ParaObject> cats = new ArrayList<>();
+//		for (int i = 0; i < 3; i++) {
+//			Sysprop s = new Sysprop(catsType + i);
+//			s.setType(catsType);
+//			cats.add(s);
+//		}
+//		pc.createAll(cats);
+////		Thread.sleep(1000);
+//
+//		assertTrue(pc.list(null).isEmpty());
+//		assertTrue(pc.list("").isEmpty());
+//
+//		List<Sysprop> list1 = pc.list(catsType);
+//		assertFalse(list1.isEmpty());
+//		assertEquals(3, list1.size());
+//		assertEquals(Sysprop.class, list1.get(0).getClass());
+//
+//		List<Sysprop> list2 = pc.list(catsType, new Pager(2));
+//		assertFalse(list2.isEmpty());
+//		assertEquals(2, list2.size());
+//
+//		ArrayList<String> nl = new ArrayList<>(3);
+//		nl.add(cats.get(0).getId());
+//		nl.add(cats.get(1).getId());
+//		nl.add(cats.get(2).getId());
+//		pc.deleteAll(nl);
+//
+//		assertTrue(pc.getApp().getDatatypes().containsValue(catsType));
+//	}
+//
+//
+//	@Test
+//	public void testSearch() throws InterruptedException {
+//		assertNull(pc.findById(null));
+//		assertNull(pc.findById(""));
+//		assertNotNull(pc.findById(u.getId()));
+//		assertNotNull(pc.findById(t.getId()));
+//
+//		assertTrue(pc.findByIds(null).isEmpty());
+//		List<?> res1 = pc.findByIds(Arrays.asList(u.getId(), u1.getId(), u2.getId()));
+//		assertEquals(3, res1.size());
+//
+//		Sysprop withRouting1 = new Sysprop("routed_object1");
+//		Sysprop withRouting2 = new Sysprop("routed_object2");
+//		Para.getDAO().deleteAll(Arrays.asList(withRouting1, withRouting2));
+//		withRouting1.setAppid(APP_NAME_CHILD);
+//		withRouting2.setAppid(APP_NAME_CHILD);
+//		pcc.createAll(Arrays.asList(withRouting1, withRouting2));
+//
+////		Thread.sleep(1000);
+//
+//		assertEquals(2, pcc.findByIds(Arrays.asList(withRouting1.getId(), withRouting2.getId())).size());
+//		Para.getDAO().deleteAll(APP_NAME_CHILD, Arrays.asList(withRouting1, withRouting2));
+//
+//		assertTrue(pc.findNearby(null, null, 100, 1, 1).isEmpty());
+//		assertFalse(pc.findNearby(u.getType(), "*", 10, 40.60, -73.90).isEmpty());
+//		assertFalse(pc.findNearby(t.getType(), "*", 10, 40.62, -73.91).isEmpty());
+//
+//		assertTrue(pc.findPrefix(null, null, "").isEmpty());
+//		assertTrue(pc.findPrefix("", "null", "xx").isEmpty());
+//		assertFalse(pc.findPrefix(u.getType(), Config._NAME, "Ann").isEmpty());
+//
+//		assertFalse(pc.findQuery(null, null).isEmpty());
+//		assertFalse(pc.findQuery("", "*").isEmpty());
+//		assertEquals(2, pc.findQuery(a1.getType(), "country:US").size());
+//		//assertFalse(pc.findQuery(u.getType(), "Ann*").isEmpty());
+//		assertTrue(pc.findQuery(null, "*").size() > 4);
+//
+//		Pager p = new Pager();
+//		assertEquals(0, p.getCount());
+//		List<?> res = pc.findQuery(u.getType(), "*", p);
+//		assertEquals(res.size(), p.getCount());
+//		assertTrue(p.getCount() > 0);
+//
+//		assertTrue(pc.findSimilar(t.getType(), "", null, null).isEmpty());
+//		assertTrue(pc.findSimilar(t.getType(), "", new String[0], "").isEmpty());
+//		res = pc.findSimilar(s1.getType(), s1.getId(), new String[]{"properties.text"}, (String) s1.getProperty("text"));
+//		assertFalse(res.isEmpty());
+//		assertEquals(s2, res.get(0));
+//
+//		int i0 = pc.findTagged(u.getType(), null).size();
+//		int i1 = pc.findTagged(u.getType(), new String[]{"two"}).size();
+//		int i2 = pc.findTagged(u.getType(), new String[]{"one", "two"}).size();
+//		int i3 = pc.findTagged(u.getType(), new String[]{"three"}).size();
+//		int i4 = pc.findTagged(u.getType(), new String[]{"four", "three"}).size();
+//		int i5 = pc.findTagged(u.getType(), new String[]{"five", "three"}).size();
+//		int i6 = pc.findTagged(t.getType(), new String[]{"four", "three"}).size();
+//
+//		assertEquals(0, i0);
+//		assertEquals(2, i1);
+//		assertEquals(1, i2);
+//		assertEquals(3, i3);
+//		assertEquals(2, i4);
+//		assertEquals(1, i5);
+//		assertEquals(0, i6);
+//
+//		assertFalse(pc.findTags(null).isEmpty());
+//		assertFalse(pc.findTags("").isEmpty());
+//		assertTrue(pc.findTags("unknown").isEmpty());
+//		assertTrue(pc.findTags(t.getTag()).size() >= 1);
+//
+//		assertEquals(3, pc.findTermInList(u.getType(), Config._ID,
+//				Arrays.asList(u.getId(), u1.getId(), u2.getId(), "xxx", "yyy")).size());
+//
+//		// many terms
+//		Map<String, Object> terms = new HashMap<>();
+////		terms.put(Config._TYPE, u.getType());
+//		terms.put(Config._ID, u.getId());
+//
+//		Map<String, Object> terms1 = new HashMap<>();
+//		terms1.put(Config._TYPE, null);
+//		terms1.put(Config._ID, " ");
+//
+//		Map<String, Object> terms2 = new HashMap<>();
+//		terms2.put(" ", "bad");
+//		terms2.put("", "");
+//
+//		assertEquals(1, pc.findTerms(u.getType(), terms, true).size());
+//		assertTrue(pc.findTerms(u.getType(), terms1, true).isEmpty());
+//		assertTrue(pc.findTerms(u.getType(), terms2, true).isEmpty());
+//
+//		// single term
+//		assertTrue(pc.findTerms(null, null, true).isEmpty());
+//		assertTrue(pc.findTerms(u.getType(), Collections.singletonMap("", null), true).isEmpty());
+//		assertTrue(pc.findTerms(u.getType(), Collections.singletonMap("", ""), true).isEmpty());
+//		assertTrue(pc.findTerms(u.getType(), Collections.singletonMap("term", null), true).isEmpty());
+//		assertTrue(pc.findTerms(u.getType(), Collections.singletonMap(Config._TYPE, u.getType()), true).size() >= 2);
+//		assertTrue(pc.findTerms(u.getType(), Collections.singletonMap(Config._NAME, "Ann Smith"), true).size() >= 1);
+//		// "name" field is not analyzed, see https://github.com/Erudika/para/issues/13
+//		assertTrue(pc.findTerms(u.getType(), Collections.singletonMap(Config._NAME, "ann smith"), true).isEmpty());
+////		assertFalse(pc.findQuery(u.getType(), "\"Ann Smith\"").isEmpty());
+//
+//		assertTrue(pc.findWildcard(u.getType(), null, null).isEmpty());
+//		assertTrue(pc.findWildcard(u.getType(), "", "").isEmpty());
+//		assertFalse(pc.findWildcard(u.getType(), Config._NAME, "An*").isEmpty());
+//
+//		assertTrue(pc.getCount(null).intValue() > 4);
+//		assertNotEquals(0, pc.getCount("").intValue());
+//		assertEquals(0, pc.getCount("test").intValue());
+//		assertTrue(pc.getCount(u.getType()).intValue() >= 3);
+//
+//		assertEquals(0L, pc.getCount(null, null).intValue());
+//		assertEquals(0L, pc.getCount(u.getType(), Collections.singletonMap(Config._ID, " ")).intValue());
+//		assertEquals(1L, pc.getCount(u.getType(), Collections.singletonMap(Config._ID, u.getId())).intValue());
+//		assertTrue(pc.getCount(null, Collections.singletonMap(Config._TYPE, u.getType())).intValue() > 1);
+//	}
+//
+//	@Test
+//	public void testLinks() throws InterruptedException {
+//		assertNotNull(pc.link(u, t.getId()));
+//		assertNotNull(pc.link(u, u2.getId()));
+//
+//		assertFalse(pc.isLinked(u, null));
+//		assertTrue(pc.isLinked(u, t));
+//		assertTrue(pc.isLinked(u, u2));
+//
+////		Thread.sleep(1000);
+//
+//		assertEquals(1, pc.getLinkedObjects(u, Utils.type(Tag.class)).size());
+//		assertEquals(1, pc.getLinkedObjects(u, Utils.type(Sysprop.class)).size());
+//
+//		assertEquals(0, pc.countLinks(u, null).intValue());
+//		assertEquals(1, pc.countLinks(u, Utils.type(Tag.class)).intValue());
+//		assertEquals(1, pc.countLinks(u, Utils.type(Sysprop.class)).intValue());
+//
+//		pc.unlinkAll(u);
+//
+//		assertFalse(pc.isLinked(u, t));
+//		assertFalse(pc.isLinked(u, u2));
+//
+//		Sysprop second1 = new Sysprop("secondLink1");
+//		Sysprop second2 = new Sysprop("secondLink2");
+//		Sysprop second3 = new Sysprop("secondLink3");
+//		second1.addProperty("text", "hello from the other side");
+//		second2.addProperty("text", "hello kitty");
+//		second3.setName("gordon");
+//
+//		Sysprop child1 = new Sysprop("child1");
+//		Sysprop child2 = new Sysprop("child2");
+//		Sysprop child3 = new Sysprop("child3");
+//		child1.setParentid(u.getId());
+//		child2.setParentid(u.getId());
+//		child3.setParentid(u.getId());
+//		child1.addProperty("text", "hello from the other side");
+//		child2.addProperty("text", "hello kitty");
+//		child3.setName("gordon");
+//
+//		pc.createAll(Arrays.asList(second1, second2, second3, child1, child2, child3));
+//
+////		Thread.sleep(1000);
+//
+//		assertNotNull(pc.link(u, second1.getId()));
+//		assertNotNull(pc.link(u, second2.getId()));
+//		assertNotNull(pc.link(u, second3.getId()));
+//
+////		Thread.sleep(1000);
+//
+//		// test linked objects search
+//		assertTrue(pc.findLinkedObjects(u, second1.getType(), Config._NAME, null).size() >= 3);
+//
+//		List<Sysprop> found1 = pc.findLinkedObjects(u, second1.getType(), Config._NAME, "gord*");
+//		assertFalse(found1.isEmpty());
+//		assertTrue(found1.get(0).getId().equals(second3.getId()));
+//
+//		List<Sysprop> found2 = pc.findLinkedObjects(u, second1.getType(), "properties.text", "kitt*");
+//		assertFalse(found2.isEmpty());
+//		assertTrue(found2.get(0).getId().equals(second2.getId()));
+//
+//		List<Sysprop> found3 = pc.findLinkedObjects(u, second1.getType(), "properties.text", "hello");
+//		assertEquals(2, found3.size());
+//		assertTrue(found3.get(0).getId().equals(second1.getId()) || found3.get(1).getId().equals(second1.getId()));
+//		assertTrue(found3.get(0).getId().equals(second2.getId()) || found3.get(1).getId().equals(second2.getId()));
+//
+//		// test children search
+//		assertEquals(3, pc.findChildren(u, child1.getType(), null).size());
+//
+//		List<Sysprop> result1 = pc.findChildren(u, child1.getType(), "gord*");
+//		assertFalse(result1.isEmpty());
+//		assertTrue(result1.get(0).getId().equals(child3.getId()));
+//
+//		List<Sysprop> result2 = pc.findChildren(u, child1.getType(), "kitt*");
+//		assertFalse(result2.isEmpty());
+//		assertTrue(result2.get(0).getId().equals(child2.getId()));
+//
+//		List<Sysprop> result3 = pc.findChildren(u, child1.getType(), "hello");
+//		assertEquals(2, result3.size());
+//		assertTrue(result3.get(0).getId().equals(child1.getId()) || result3.get(1).getId().equals(child1.getId()));
+//		assertTrue(result3.get(0).getId().equals(child2.getId()) || result3.get(1).getId().equals(child2.getId()));
+//
+//		pc.unlinkAll(u);
+//		pc.deleteAll(Arrays.asList(second1.getId(), second2.getId(), second3.getId(),
+//				child1.getId(), child2.getId(), child3.getId()));
+//	}
+//
+//	@Test
+//	public void testUtils() {
+//		String id1 = pc.newId();
+//		String id2 = pc.newId();
+//		assertNotNull(id1);
+//		assertFalse(id1.isEmpty());
+//		assertNotEquals(id1, id2);
+//
+//		final Long ts = pc.getTimestamp();
+//		assertNotNull(ts);
+//		assertNotEquals(0, ts.intValue());
+//
+//		String date1 = pc.formatDate("MM dd yyyy", Locale.US);
+//		String date2 = Utils.formatDate("MM dd yyyy", Locale.US);
+//		assertEquals(date1, date2);
+//
+//		String ns1 = pc.noSpaces(" test  123		test ", "");
+//		String ns2 = Utils.noSpaces(" test  123		test ", "");
+//		assertEquals(ns1, ns2);
+//
+//		String st1 = pc.stripAndTrim(" %^&*( cool )		@!");
+//		String st2 = Utils.stripAndTrim(" %^&*( cool )		@!");
+//		assertEquals(st1, st2);
+//
+//		String md1 = pc.markdownToHtml("**test** #hello");
+//		String md2 = Utils.markdownToHtml("**test** #hello");
+//		assertEquals(md1, md2);
+//
+//		String ht1 = pc.approximately(15000);
+//		String ht2 = HumanTime.approximately(15000);
+//		assertEquals(ht1, ht2);
+//	}
+//
+//	@Test
+//	public void testMisc() {
+//		Map<String, String> types = pc.types();
+//		assertNotNull(types);
+//		assertFalse(types.isEmpty());
+//		assertTrue(types.containsKey(new User().getPlural()));
+//
+//		assertEquals(App.id(APP_NAME), pc.me().getId());
+//	}
+//
+//	@Test
+//	public void testValidationConstraints() {
+//		// Validations
+//		String kittenType = "kitten";
+//		Map<String, ?> constraints = pc.validationConstraints();
+//		assertNotNull(constraints);
+//		assertFalse(constraints.isEmpty());
+//		assertTrue(constraints.containsKey("app"));
+//		assertTrue(constraints.containsKey("user"));
+//
+//		Map<String, Map<String, Map<String, Map<String, ?>>>> constraint = pc.validationConstraints("app");
+//		assertFalse(constraint.isEmpty());
+//		assertTrue(constraint.containsKey("app"));
+//		assertEquals(1, constraint.size());
+//
+// 		pc.addValidationConstraint(kittenType, "paws", required());
+//		constraint = pc.validationConstraints(kittenType);
+//		assertNotNull(constraint);
+//		assertNotNull(constraint.get(kittenType));
+//		assertTrue(constraint.get(kittenType).containsKey("paws"));
+//
+//		Sysprop ct = new Sysprop("felix");
+//		pc.delete(ct);
+//		pc.delete(new Vote(u.getId(), ct.getId(), Votable.VoteValue.UP));
+//		pc.delete(new Vote(u.getId(), ct.getId(), Votable.VoteValue.DOWN));
+//		ct.setType(kittenType);
+//		Sysprop ct2 = null;
+//		try {
+//			// validation fails
+//			ct2 = pc.create(ct);
+//		} catch (Exception e) {}
+//
+//		assertNull(ct2);
+//		ct.addProperty("paws", "4");
+//		assertNotNull(pc.create(ct));
+//
+//		pc.removeValidationConstraint(kittenType, "paws", "required");
+//		constraint = pc.validationConstraints(kittenType);
+//		assertFalse(constraint.containsKey(kittenType));
+//
+//		Integer votes = ct.getVotes() + 1;
+//		assertTrue(pc.voteUp(ct, u.getId()));
+//		assertEquals(votes, pc.read(ct.getId()).getVotes());
+//		assertFalse(pc.voteUp(ct, u.getId()));
+//		votes -= 1;
+//		assertTrue(pc.voteDown(ct, u.getId()));
+//		assertEquals(votes, pc.read(ct.getId()).getVotes());
+//		votes -= 1;
+//		assertTrue(pc.voteDown(ct, u.getId()));
+//		assertFalse(pc.voteDown(ct, u.getId()));
+//		assertEquals(votes, pc.read(ct.getId()).getVotes());
+//		Para.getDAO().delete(ct);
+//		Para.getDAO().delete(new Vote(u.getId(), ct.getId(), Votable.VoteValue.UP));
+//	}
+//
+//	@Test
+//	public void testResourcePermissions() {
+//		// Permissions
+//		Map<String, Map<String, List<String>>> permits = pc.resourcePermissions();
+//		assertNotNull(permits);
+//
+//		assertTrue(pc.grantResourcePermission(null, dogsType, EnumSet.noneOf(AllowedMethods.class)).isEmpty());
+//		assertTrue(pc.grantResourcePermission(" ", "", EnumSet.noneOf(AllowedMethods.class)).isEmpty());
+//
+//		pc.grantResourcePermission(u1.getId(), dogsType, READ);
+//		permits = pc.resourcePermissions(u1.getId());
+//		assertTrue(permits.containsKey(u1.getId()));
+//		assertTrue(permits.get(u1.getId()).containsKey(dogsType));
+//		assertTrue(pc.isAllowedTo(u1.getId(), dogsType, GET.toString()));
+//		assertFalse(pc.isAllowedTo(u1.getId(), dogsType, POST.toString()));
+//
+//		permits = pc.resourcePermissions();
+//		assertTrue(permits.containsKey(u1.getId()));
+//		assertTrue(permits.get(u1.getId()).containsKey(dogsType));
+//
+//		pc.revokeResourcePermission(u1.getId(), dogsType);
+//		permits = pc.resourcePermissions(u1.getId());
+//		assertFalse(permits.get(u1.getId()).containsKey(dogsType));
+//		assertFalse(pc.isAllowedTo(u1.getId(), dogsType, GET.toString()));
+//		assertFalse(pc.isAllowedTo(u1.getId(), dogsType, POST.toString()));
+//
+//		pc.grantResourcePermission(u2.getId(), App.ALLOW_ALL, WRITE);
+//		assertTrue(pc.isAllowedTo(u2.getId(), dogsType, PUT.toString()));
+//		assertTrue(pc.isAllowedTo(u2.getId(), dogsType, PATCH.toString()));
+//
+//		pc.revokeAllResourcePermissions(u2.getId());
+//		permits = pc.resourcePermissions();
+//		assertFalse(pc.isAllowedTo(u2.getId(), dogsType, PUT.toString()));
+//		assertFalse(permits.containsKey(u2.getId()));
+////		assertTrue(permits.get(u2.getId()).isEmpty());
+//
+//		pc.grantResourcePermission(u1.getId(), dogsType, WRITE);
+//		pc.grantResourcePermission(App.ALLOW_ALL, catsType, WRITE);
+//		pc.grantResourcePermission(App.ALLOW_ALL, App.ALLOW_ALL, READ);
+//		// user-specific permissions are in effect
+//		assertTrue(pc.isAllowedTo(u1.getId(), dogsType, PUT.toString()));
+//		assertFalse(pc.isAllowedTo(u1.getId(), dogsType, GET.toString()));
+//		assertTrue(pc.isAllowedTo(u1.getId(), catsType, PUT.toString()));
+//		assertTrue(pc.isAllowedTo(u1.getId(), catsType, GET.toString()));
+//
+//		pc.revokeAllResourcePermissions(u1.getId());
+//		// user-specific permissions not found so check wildcard
+//		assertFalse(pc.isAllowedTo(u1.getId(), dogsType, PUT.toString()));
+//		assertTrue(pc.isAllowedTo(u1.getId(), dogsType, GET.toString()));
+//		assertTrue(pc.isAllowedTo(u1.getId(), catsType, PUT.toString()));
+//		assertTrue(pc.isAllowedTo(u1.getId(), catsType, GET.toString()));
+//
+//		pc.revokeResourcePermission(App.ALLOW_ALL, catsType);
+//		// resource-specific permissions not found so check wildcard
+//		assertFalse(pc.isAllowedTo(u1.getId(), dogsType, PUT.toString()));
+//		assertFalse(pc.isAllowedTo(u1.getId(), catsType, PUT.toString()));
+//		assertTrue(pc.isAllowedTo(u1.getId(), dogsType, GET.toString()));
+//		assertTrue(pc.isAllowedTo(u1.getId(), catsType, GET.toString()));
+//		assertTrue(pc.isAllowedTo(u2.getId(), dogsType, GET.toString()));
+//		assertTrue(pc.isAllowedTo(u2.getId(), catsType, GET.toString()));
+//
+//		pc.revokeAllResourcePermissions(App.ALLOW_ALL);
+//		pc.revokeAllResourcePermissions(u1.getId());
+//	}
+//
+//	@Test
+//	public void testAppSettings() {
+//		Map<String, Object> settings = pc.appSettings();
+//		assertNotNull(settings);
+//		assertTrue(settings.isEmpty());
+//
+//		pc.addAppSetting("", null);
+//		pc.addAppSetting(" ", " ");
+//		pc.addAppSetting(null, " ");
+//		pc.addAppSetting("prop1", 1);
+//		pc.addAppSetting("prop2", true);
+//		pc.addAppSetting("prop3", "string");
+//
+//		settings = pc.appSettings();
+//		assertEquals(3, settings.size());
+//		assertEquals(settings, pc.appSettings(null));
+//		assertEquals(1, settings.get("prop1"));
+//		assertEquals(true, settings.get("prop2"));
+//		assertEquals("string", settings.get("prop3"));
+//
+//		pc.removeAppSetting("prop3");
+//		pc.removeAppSetting(" ");
+//		pc.removeAppSetting(null);
+//
+//		settings = pc.appSettings();
+//		assertFalse(settings.containsKey("prop3"));
+//		assertEquals(2, settings.size());
+//		pc.removeAppSetting("prop2");
+//		pc.removeAppSetting("prop1");
+//
+//		pc.addAppSetting("propZ", 1);
+//		Map<String, Object> newSettings = new HashMap<>();
+//		newSettings.put("propX", "X");
+//		newSettings.put("propY", "Y");
+//		pc.setAppSettings(newSettings);
+//		settings = pc.appSettings();
+//		assertEquals(2, settings.size());
+//		assertFalse(settings.containsKey("propZ"));
+//		assertTrue(settings.containsKey("propX"));
+//		assertTrue(settings.containsKey("propY"));
+//		newSettings.clear();
+//		pc.setAppSettings(newSettings);
+//		settings = pc.appSettings();
+//		assertTrue(settings.isEmpty());
+//	}
+//
+//	@Test
+//	public void testAccessTokens() throws IOException, InterruptedException {
+//		assertNotNull(fbUser);
+//		assertNull(pc2.getAccessToken());
+//
+//		// fails with google+ - service not mocked
+//		User failsNotMocked = pc2.signIn("google", "test_token");
+//		assertNull(failsNotMocked);
+//
+//		// should fail to create user for root app
+//		System.setProperty("para.clients_can_access_root_app", "false");
+//		User notSignedIn = pc2.signIn("facebook", "test_token");
+////		Thread.sleep(500);
+//		logger.info(pc2.getAccessToken());
+//		assertNull(notSignedIn);
+//		assertNull(pc2.getAccessToken());
+//
+//		// then allow clients to modify root app
+//		System.setProperty("para.clients_can_access_root_app", "true");
+//		User signedIn = pc2.signIn("facebook", "test_token");
+//		logger.info(pc2.getAccessToken());
+//		assertNotNull(signedIn);
+//		assertNotNull(pc2.getAccessToken());
+//		assertEquals(fbUser.getId(), signedIn.getId());
+//		assertTrue(signedIn.getActive());
+//
+//		// test without permissions - signed in but you can't access anything yet
+//		pc2.revokeAllResourcePermissions(fbUser.getId());
+//		ParaObject me = pc2.me();
+//		assertNotNull(me);
+//		assertEquals("user", me.getType());
+//		assertTrue(pc2.newId().isEmpty());
+//		assertTrue(pc2.getTimestamp() == 0L);
+//
+//		// test with permissions - logout first to use app credentials (full access)
+//		pc2.signOut();
+//		pc2.grantResourcePermission(fbUser.getId(), App.ALLOW_ALL, READ_AND_WRITE);
+//		signedIn = pc2.signIn("facebook", "test_token");
+//		logger.info(pc2.getAccessToken());
+////		Thread.sleep(800);
+//		assertNotNull(signedIn);
+//		assertNotNull(pc2.getAccessToken());
+//		me = pc2.me();
+//		assertNotNull(me);
+//		assertFalse(pc2.newId().isEmpty());
+//		assertEquals(signedIn.getName(), me.getName());
+////		Thread.sleep(500);
+//
+//		// now switch back to App access
+//		pc2.signOut();
+//		assertNull(pc2.getAccessToken());
+//		me = pc2.me(); // app
+//		assertNotNull(me);
+//		assertEquals("app", me.getType());
+//		assertFalse(pc2.newId().isEmpty());
+//		signedIn = pc2.signIn("facebook", "test_token");
+//		logger.info(pc2.getAccessToken());
+////		Thread.sleep(500);
+//		me = pc2.me(); // user
+//		assertNotNull(me);
+//		assertEquals("user", me.getType());
+//		assertEquals(signedIn.getId(), me.getId());
+//
+//		assertNull(pc2.newKeys()); // users can't change API keys!
+//
+//		// test revoke tokens
+//		pc2.revokeAllTokens();
+//		assertTrue(pc2.newId().isEmpty());
+//		assertTrue(pc2.getTimestamp() == 0L);
+//		assertNull(pc2.me());
+//
+//		pc2.signOut();
+//
+//		// test anonymous permissions
+//		String utilsPath = "utils/timestamp";
+//		ParaClient guest = new ParaClient(App.id(APP_NAME), null);
+//		guest.setEndpoint(pc2.getEndpoint());
+//		assertFalse(guest.getTimestamp() > 0);
+//		assertFalse(guest.isAllowedTo(App.ALLOW_ALL, utilsPath, GET.toString()));
+//		pc2.grantResourcePermission(App.ALLOW_ALL, utilsPath, READ, true);
+//		assertTrue(guest.getTimestamp() > 0);
+//	}
+//
+//	@Test
+//	public void testOwnersPermissions() throws InterruptedException {
+//		// test user should be able to login twice - first time the object is created, second time password is checked
+//		String emailInactive = "test2@user.com";
+//		String emailPassFail = emailInactive + "::123456";
+//		String emailPassPass = "test3@user.com::123456";
+//		String emailPassPass2 = "test4@user.com::123456";
+//		assertNull(pc2.signIn("password", emailPassFail)); // unverified email - user is created but not active
+//		List<User> failed = pc2.findTerms(fbUser.getType(), Collections.singletonMap(Config._EMAIL, emailInactive), true);
+//		assertFalse(failed.isEmpty());
+//		assertEquals(emailInactive, failed.get(0).getEmail());
+//		pc2.delete(failed.get(0));
+//
+//		System.setProperty("para.security.allow_unverified_emails", "true"); // allow it
+//		User newUser = pc2.signIn("password", emailPassPass);
+//		User newUser2 = pc2.signIn("password", emailPassPass2);
+//		assertNotNull(newUser);
+//		assertNotNull(newUser2);
+//		pc2.signOut();
+//		assertNotNull(pc2.signIn("password", emailPassPass));
+//		pc2.signOut();
+//
+//		// test permissions with/without signed in user
+//		assertTrue(pc2.isAllowedTo(newUser.getId(), newUser.getObjectURI(), GET.toString()));
+//		assertNotNull(pc2.signIn("password", emailPassPass));
+//		assertTrue(pc2.isAllowedTo(newUser.getId(), newUser.getObjectURI(), GET.toString()));
+//		assertFalse(pc2.isAllowedTo(newUser.getId(), newUser.getObjectURI() + "x", GET.toString()));
+//		assertNotNull(pc2.read(newUser.getId())); // can read self
+//		pc2.signOut();
+//
+//		// test implicit user permissions - read/update/delete own object (children)
+//		assertFalse(pc2.isAllowedTo(newUser.getId(), "todo", POST.toString())); // can't create yet
+//		pc2.grantResourcePermission(newUser.getId(), "todo", EnumSet.of(READ_WRITE, OWN)); // can only manage own TODOs
+//		pc2.grantResourcePermission(newUser.getId(), "todo/*", EnumSet.of(READ_WRITE, OWN)); // can only manage own TODOs
+//		pc2.signIn("password", emailPassPass);
+//		assertTrue(pc2.isAllowedTo(newUser.getId(), "todo", POST.toString()));
+//		Sysprop todo = new Sysprop("todo_id");
+//		todo.setType("todo");
+//		// test if creatorid is set correctly
+//		todo.setCreatorid("invalid_user_id"); // must be corrected by the server
+//		todo.setName("[] buy milk");
+//		todo = pc2.create(todo);
+////		Thread.sleep(1000);
+//		assertNotNull(todo);
+//		assertFalse(todo.getId().equals("todo_id"));
+//		assertNotNull(pc2.read(todo.getType(), todo.getId()));
+//		assertEquals(1, pc2.findQuery("todo", "*").size()); // user only sees own TODO
+//		assertEquals(newUser.getId(), todo.getCreatorid());
+//		pc2.signOut();
+//
+//		// one user must not be able to overwrite another user's TODOs (custom ids)
+//		pc2.grantResourcePermission(newUser2.getId(), "todo", EnumSet.of(READ_WRITE, OWN)); // can only manage own TODOs
+//		pc2.grantResourcePermission(newUser2.getId(), "todo/*", EnumSet.of(READ_WRITE, OWN)); // can only manage own TODOs
+//		pc2.signIn("password", emailPassPass2);
+//		assertTrue(pc2.list("todo").isEmpty());
+//		assertNull(pc2.read(todo.getId()));
+//		Sysprop todo2 = new Sysprop("todo_id2");
+//		todo2.setType("todo");
+//		todo2.setName("[] buy eggs");
+//		todo2 = pc2.create(todo2);
+////		Thread.sleep(1000);
+//		assertNotNull(todo2);
+//		assertFalse(todo2.getId().equals("todo_id2"));
+//		assertNotNull(pc2.read(todo2.getType(), todo2.getId()));
+//		assertEquals(1, pc2.findQuery("todo", "*").size());
+//		assertEquals(newUser2.getId(), todo2.getCreatorid());
+//		pc2.signOut();
+//		// app can see all TODOs
+//		assertEquals(2, pc2.list("todo").size());
+//
+//		pc.delete(todo);
+//		pc.delete(todo2);
+//		pc.delete(newUser);
+//		pc.delete(newUser2);
+//
+//		// an app should be able to update and delete itself
+//		String appId = "para-child-app-test";
+//		Map<String, String> creds = Para.newApp(appId, "Child app", false, false);
+//		ParaClient pclient = new ParaClient(App.id(appId), creds.get("secretKey"));
+//		pclient.setEndpoint(pc.getEndpoint());
+//
+//		App app = pclient.me();
+//		assertNotNull(app);
+//		assertEquals(appId, app.getAppIdentifier());
+//
+//		app.setName("Child application");
+//		pclient.update(app);
+//		app = pclient.me();
+//		assertEquals("Child application", app.getName());
+//
+//		pclient.delete(app);
+//		assertNull(pclient.read(App.id(appId)));
+//	}
 }
diff --git a/para-server/src/test/java/com/erudika/para/core/AppTest.java b/para-server/src/test/java/com/erudika/para/core/AppTest.java
index 67dcfe4f..e9f25708 100644
--- a/para-server/src/test/java/com/erudika/para/core/AppTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/AppTest.java
@@ -34,8 +34,8 @@
 import static com.erudika.para.core.App.AllowedMethods.READ_WRITE;
 import static com.erudika.para.core.App.AllowedMethods.WRITE;
 import static com.erudika.para.core.App.AllowedMethods.WRITE_ONLY;
-import com.erudika.para.utils.Config;
-import static com.erudika.para.validation.Constraint.url;
+import com.erudika.para.core.utils.Config;
+import static com.erudika.para.core.validation.Constraint.url;
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.EnumSet;
diff --git a/para-server/src/test/java/com/erudika/para/core/LinkerTest.java b/para-server/src/test/java/com/erudika/para/core/LinkerTest.java
index 875d57ec..209f2670 100644
--- a/para-server/src/test/java/com/erudika/para/core/LinkerTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/LinkerTest.java
@@ -17,7 +17,7 @@
  */
 package com.erudika.para.core;
 
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Utils;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
diff --git a/para-server/src/test/java/com/erudika/para/core/ParaObjectTest.java b/para-server/src/test/java/com/erudika/para/core/ParaObjectTest.java
index f940b356..754bfd3a 100644
--- a/para-server/src/test/java/com/erudika/para/core/ParaObjectTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/ParaObjectTest.java
@@ -18,10 +18,10 @@
 package com.erudika.para.core;
 
 import com.erudika.para.core.utils.CoreUtils;
-import com.erudika.para.persistence.DAO;
-import com.erudika.para.persistence.MockDAO;
-import com.erudika.para.search.Search;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.persistence.DAO;
+import com.erudika.para.core.persistence.MockDAO;
+import com.erudika.para.core.search.Search;
+import com.erudika.para.core.utils.Utils;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
diff --git a/para-server/src/test/java/com/erudika/para/core/ParaObjectUtilsTest.java b/para-server/src/test/java/com/erudika/para/core/ParaObjectUtilsTest.java
index b62d99e7..c71f0d8d 100644
--- a/para-server/src/test/java/com/erudika/para/core/ParaObjectUtilsTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/ParaObjectUtilsTest.java
@@ -17,14 +17,14 @@
  */
 package com.erudika.para.core;
 
-import com.erudika.para.annotations.Stored;
+import com.erudika.para.core.annotations.Stored;
 import static com.erudika.para.core.utils.ParaObjectUtils.getAnnotatedFields;
 import static com.erudika.para.core.utils.ParaObjectUtils.getAppidFromAuthHeader;
 import static com.erudika.para.core.utils.ParaObjectUtils.getCoreTypes;
 import static com.erudika.para.core.utils.ParaObjectUtils.setAnnotatedFields;
-import com.erudika.para.utils.Cat;
-import com.erudika.para.utils.CatDeserializer;
-import com.erudika.para.utils.CatSerializer;
+import com.erudika.para.core.utils.Cat;
+import com.erudika.para.core.utils.CatDeserializer;
+import com.erudika.para.core.utils.CatSerializer;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import java.net.URI;
diff --git a/para-server/src/test/java/com/erudika/para/core/SyspropTest.java b/para-server/src/test/java/com/erudika/para/core/SyspropTest.java
index 3b290b61..ed53d061 100644
--- a/para-server/src/test/java/com/erudika/para/core/SyspropTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/SyspropTest.java
@@ -18,7 +18,7 @@
 package com.erudika.para.core;
 
 import com.erudika.para.core.utils.CoreUtils;
-import com.erudika.para.persistence.DAO;
+import com.erudika.para.core.persistence.DAO;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
diff --git a/para-server/src/test/java/com/erudika/para/core/TagTest.java b/para-server/src/test/java/com/erudika/para/core/TagTest.java
index 04d8add4..36e7261a 100644
--- a/para-server/src/test/java/com/erudika/para/core/TagTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/TagTest.java
@@ -17,8 +17,8 @@
  */
 package com.erudika.para.core;
 
-import com.erudika.para.persistence.DAO;
-import com.erudika.para.persistence.MockDAO;
+import com.erudika.para.core.persistence.DAO;
+import com.erudika.para.core.persistence.MockDAO;
 import org.junit.Test;
 import static org.junit.Assert.*;
 import org.junit.Before;
diff --git a/para-server/src/test/java/com/erudika/para/core/UserTest.java b/para-server/src/test/java/com/erudika/para/core/UserTest.java
index f364e13d..388dea00 100644
--- a/para-server/src/test/java/com/erudika/para/core/UserTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/UserTest.java
@@ -19,12 +19,12 @@
 
 import com.erudika.para.core.User.Groups;
 import com.erudika.para.core.utils.CoreUtils;
-import com.erudika.para.persistence.DAO;
-import com.erudika.para.search.Search;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
-import com.erudika.para.validation.ValidationUtils;
+import com.erudika.para.core.persistence.DAO;
+import com.erudika.para.core.search.Search;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
+import com.erudika.para.core.validation.ValidationUtils;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
diff --git a/para-server/src/test/java/com/erudika/para/core/VoteTest.java b/para-server/src/test/java/com/erudika/para/core/VoteTest.java
index 93189203..1a5e5b6d 100644
--- a/para-server/src/test/java/com/erudika/para/core/VoteTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/VoteTest.java
@@ -18,7 +18,7 @@
 package com.erudika.para.core;
 
 import com.erudika.para.core.utils.CoreUtils;
-import com.erudika.para.persistence.DAO;
+import com.erudika.para.core.persistence.DAO;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
diff --git a/para-server/src/test/java/com/erudika/para/utils/Cat.java b/para-server/src/test/java/com/erudika/para/core/utils/Cat.java
similarity index 98%
rename from para-server/src/test/java/com/erudika/para/utils/Cat.java
rename to para-server/src/test/java/com/erudika/para/core/utils/Cat.java
index 8d567299..dd0d1cab 100644
--- a/para-server/src/test/java/com/erudika/para/utils/Cat.java
+++ b/para-server/src/test/java/com/erudika/para/core/utils/Cat.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
 
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.fasterxml.jackson.core.JsonProcessingException;
diff --git a/para-server/src/test/java/com/erudika/para/utils/CatDeserializer.java b/para-server/src/test/java/com/erudika/para/core/utils/CatDeserializer.java
similarity index 97%
rename from para-server/src/test/java/com/erudika/para/utils/CatDeserializer.java
rename to para-server/src/test/java/com/erudika/para/core/utils/CatDeserializer.java
index 9e8ff4ae..5ed557cf 100644
--- a/para-server/src/test/java/com/erudika/para/utils/CatDeserializer.java
+++ b/para-server/src/test/java/com/erudika/para/core/utils/CatDeserializer.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
 
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.core.JsonProcessingException;
diff --git a/para-server/src/test/java/com/erudika/para/utils/CatSerializer.java b/para-server/src/test/java/com/erudika/para/core/utils/CatSerializer.java
similarity index 97%
rename from para-server/src/test/java/com/erudika/para/utils/CatSerializer.java
rename to para-server/src/test/java/com/erudika/para/core/utils/CatSerializer.java
index b602f796..d5c87d7a 100644
--- a/para-server/src/test/java/com/erudika/para/utils/CatSerializer.java
+++ b/para-server/src/test/java/com/erudika/para/core/utils/CatSerializer.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
diff --git a/para-server/src/test/java/com/erudika/para/utils/ConfigTest.java b/para-server/src/test/java/com/erudika/para/core/utils/ConfigTest.java
similarity index 94%
rename from para-server/src/test/java/com/erudika/para/utils/ConfigTest.java
rename to para-server/src/test/java/com/erudika/para/core/utils/ConfigTest.java
index e9cd669d..cb144e62 100644
--- a/para-server/src/test/java/com/erudika/para/utils/ConfigTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/utils/ConfigTest.java
@@ -15,8 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
 
+import com.erudika.para.core.utils.Config;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
diff --git a/para-server/src/test/java/com/erudika/para/utils/HumanTimeTest.java b/para-server/src/test/java/com/erudika/para/core/utils/HumanTimeTest.java
similarity index 98%
rename from para-server/src/test/java/com/erudika/para/utils/HumanTimeTest.java
rename to para-server/src/test/java/com/erudika/para/core/utils/HumanTimeTest.java
index 3bd88cdf..e37fe17a 100644
--- a/para-server/src/test/java/com/erudika/para/utils/HumanTimeTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/utils/HumanTimeTest.java
@@ -19,8 +19,9 @@
  * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  *
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
 
+import com.erudika.para.core.utils.HumanTime;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
diff --git a/para-server/src/test/java/com/erudika/para/utils/IdGenTest.java b/para-server/src/test/java/com/erudika/para/core/utils/IdGenTest.java
similarity index 95%
rename from para-server/src/test/java/com/erudika/para/utils/IdGenTest.java
rename to para-server/src/test/java/com/erudika/para/core/utils/IdGenTest.java
index 11fbbdea..6453c302 100644
--- a/para-server/src/test/java/com/erudika/para/utils/IdGenTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/utils/IdGenTest.java
@@ -15,8 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
 
+import com.erudika.para.core.utils.Utils;
 import com.anarsoft.vmlens.concurrent.junit.ConcurrentTestRunner;
 import com.anarsoft.vmlens.concurrent.junit.ThreadCount;
 import java.util.ArrayList;
diff --git a/para-server/src/test/java/com/erudika/para/utils/OAuth1HmacSignerTest.java b/para-server/src/test/java/com/erudika/para/core/utils/OAuth1HmacSignerTest.java
similarity index 96%
rename from para-server/src/test/java/com/erudika/para/utils/OAuth1HmacSignerTest.java
rename to para-server/src/test/java/com/erudika/para/core/utils/OAuth1HmacSignerTest.java
index 4bf60eff..260e10af 100644
--- a/para-server/src/test/java/com/erudika/para/utils/OAuth1HmacSignerTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/utils/OAuth1HmacSignerTest.java
@@ -15,9 +15,10 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
 
-import com.erudika.para.security.OAuth1HmacSigner;
+import com.erudika.para.core.utils.Utils;
+import com.erudika.para.server.security.OAuth1HmacSigner;
 import java.util.Collections;
 import java.util.Map;
 import java.util.TreeMap;
diff --git a/para-server/src/test/java/com/erudika/para/utils/UtilsTest.java b/para-server/src/test/java/com/erudika/para/core/utils/UtilsTest.java
similarity index 98%
rename from para-server/src/test/java/com/erudika/para/utils/UtilsTest.java
rename to para-server/src/test/java/com/erudika/para/core/utils/UtilsTest.java
index 753e315e..88a42ba4 100644
--- a/para-server/src/test/java/com/erudika/para/utils/UtilsTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/utils/UtilsTest.java
@@ -15,16 +15,18 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
 
-import com.erudika.para.annotations.Locked;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Utils;
+import com.erudika.para.core.annotations.Locked;
 import com.erudika.para.core.App;
 import com.erudika.para.core.ParaObject;
 import com.erudika.para.core.Sysprop;
 import com.erudika.para.core.Tag;
 import com.erudika.para.core.User;
 import com.erudika.para.core.Votable;
-import static com.erudika.para.utils.Utils.*;
+import static com.erudika.para.core.utils.Utils.*;
 import static com.erudika.para.core.utils.ParaObjectUtils.*;
 import java.util.ArrayList;
 import java.util.Arrays;
diff --git a/para-server/src/test/java/com/erudika/para/utils/ValidationUtilsTest.java b/para-server/src/test/java/com/erudika/para/core/utils/ValidationUtilsTest.java
similarity index 98%
rename from para-server/src/test/java/com/erudika/para/utils/ValidationUtilsTest.java
rename to para-server/src/test/java/com/erudika/para/core/utils/ValidationUtilsTest.java
index 3beeacf7..0ec4e383 100644
--- a/para-server/src/test/java/com/erudika/para/utils/ValidationUtilsTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/utils/ValidationUtilsTest.java
@@ -15,14 +15,15 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.utils;
+package com.erudika.para.core.utils;
 
+import com.erudika.para.core.utils.Config;
 import com.erudika.para.core.App;
 import com.erudika.para.core.Sysprop;
 import com.erudika.para.core.Tag;
 import com.erudika.para.core.User;
-import static com.erudika.para.validation.ValidationUtils.*;
-import static com.erudika.para.validation.Constraint.*;
+import static com.erudika.para.core.validation.ValidationUtils.*;
+import static com.erudika.para.core.validation.Constraint.*;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
diff --git a/para-server/src/test/java/com/erudika/para/email/EmailerTest.java b/para-server/src/test/java/com/erudika/para/email/EmailerTest.java
index 7d422e1d..e7636d0c 100644
--- a/para-server/src/test/java/com/erudika/para/email/EmailerTest.java
+++ b/para-server/src/test/java/com/erudika/para/email/EmailerTest.java
@@ -17,6 +17,7 @@
  */
 package com.erudika.para.email;
 
+import com.erudika.para.core.email.Emailer;
 import java.util.ArrayList;
 import java.util.Collections;
 import static org.junit.Assert.*;
diff --git a/para-server/src/test/java/com/erudika/para/email/MockEmailer.java b/para-server/src/test/java/com/erudika/para/email/MockEmailer.java
index cdd97e5b..acf87357 100644
--- a/para-server/src/test/java/com/erudika/para/email/MockEmailer.java
+++ b/para-server/src/test/java/com/erudika/para/email/MockEmailer.java
@@ -17,6 +17,7 @@
  */
 package com.erudika.para.email;
 
+import com.erudika.para.core.email.Emailer;
 import java.util.List;
 import org.apache.commons.lang3.StringUtils;
 
diff --git a/para-server/src/test/java/com/erudika/para/i18n/CurrencyUtilsTest.java b/para-server/src/test/java/com/erudika/para/i18n/CurrencyUtilsTest.java
index bb27d72f..a8566824 100644
--- a/para-server/src/test/java/com/erudika/para/i18n/CurrencyUtilsTest.java
+++ b/para-server/src/test/java/com/erudika/para/i18n/CurrencyUtilsTest.java
@@ -17,6 +17,7 @@
  */
 package com.erudika.para.i18n;
 
+import com.erudika.para.core.i18n.CurrencyUtils;
 import java.util.Locale;
 import org.junit.Test;
 import static org.junit.Assert.*;
diff --git a/para-server/src/test/java/com/erudika/para/rest/RestUtilsTest.java b/para-server/src/test/java/com/erudika/para/rest/RestUtilsTest.java
index 252890ca..a3577ca0 100644
--- a/para-server/src/test/java/com/erudika/para/rest/RestUtilsTest.java
+++ b/para-server/src/test/java/com/erudika/para/rest/RestUtilsTest.java
@@ -17,22 +17,23 @@
  */
 package com.erudika.para.rest;
 
-import com.erudika.para.Para;
-import com.erudika.para.ParaServer;
-import com.erudika.para.cache.Cache;
-import com.erudika.para.cache.MockCache;
+import com.erudika.para.core.rest.GenericExceptionMapper;
+import com.erudika.para.core.utils.Para;
+import com.erudika.para.server.ParaServer;
+import com.erudika.para.core.cache.Cache;
+import com.erudika.para.core.cache.MockCache;
 import com.erudika.para.core.App;
 import com.erudika.para.core.utils.ParaObjectUtils;
 import com.erudika.para.core.Sysprop;
 import com.erudika.para.core.Tag;
 import com.erudika.para.core.utils.CoreUtils;
-import com.erudika.para.persistence.DAO;
-import com.erudika.para.persistence.MockDAO;
-import com.erudika.para.queue.Queue;
-import static com.erudika.para.rest.RestUtils.*;
-import com.erudika.para.search.Search;
-import com.erudika.para.storage.FileStore;
-import com.erudika.para.utils.Config;
+import com.erudika.para.core.persistence.DAO;
+import com.erudika.para.core.persistence.MockDAO;
+import com.erudika.para.core.queue.Queue;
+import static com.erudika.para.server.rest.RestUtils.*;
+import com.erudika.para.core.search.Search;
+import com.erudika.para.core.storage.FileStore;
+import com.erudika.para.core.utils.Config;
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.google.inject.Binder;
 import com.google.inject.Module;
diff --git a/para-server/src/test/java/com/erudika/para/search/SearchTest.java b/para-server/src/test/java/com/erudika/para/search/SearchTest.java
index 6246b33f..3fbce77b 100644
--- a/para-server/src/test/java/com/erudika/para/search/SearchTest.java
+++ b/para-server/src/test/java/com/erudika/para/search/SearchTest.java
@@ -17,6 +17,7 @@
  */
 package com.erudika.para.search;
 
+import com.erudika.para.core.search.Search;
 import com.erudika.para.core.Address;
 import com.erudika.para.core.App;
 import com.erudika.para.core.Linker;
@@ -25,9 +26,9 @@
 import com.erudika.para.core.Sysprop;
 import com.erudika.para.core.Tag;
 import com.erudika.para.core.User;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
diff --git a/para-server/src/test/java/com/erudika/para/security/LdapAuthTest.java b/para-server/src/test/java/com/erudika/para/security/LdapAuthTest.java
index 0f9914b5..debde4cc 100644
--- a/para-server/src/test/java/com/erudika/para/security/LdapAuthTest.java
+++ b/para-server/src/test/java/com/erudika/para/security/LdapAuthTest.java
@@ -17,6 +17,8 @@
  */
 package com.erudika.para.security;
 
+import com.erudika.para.server.security.SecurityUtils;
+import com.erudika.para.server.security.LDAPAuthenticator;
 import com.erudika.para.core.App;
 import com.unboundid.ldap.listener.InMemoryDirectoryServer;
 import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
diff --git a/para-server/src/test/java/com/erudika/para/aop/AOPUtilsTest.java b/para-server/src/test/java/com/erudika/para/server/aop/AOPUtilsTest.java
similarity index 95%
rename from para-server/src/test/java/com/erudika/para/aop/AOPUtilsTest.java
rename to para-server/src/test/java/com/erudika/para/server/aop/AOPUtilsTest.java
index f597e069..18ac7a93 100644
--- a/para-server/src/test/java/com/erudika/para/aop/AOPUtilsTest.java
+++ b/para-server/src/test/java/com/erudika/para/server/aop/AOPUtilsTest.java
@@ -15,18 +15,18 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.aop;
+package com.erudika.para.server.aop;
 
 import com.erudika.para.core.ParaObject;
 import com.erudika.para.core.Sysprop;
 import com.erudika.para.core.Tag;
-import com.erudika.para.persistence.DAO;
-import com.erudika.para.persistence.MockDAO;
-import com.erudika.para.search.Search;
+import com.erudika.para.core.persistence.DAO;
+import com.erudika.para.core.persistence.MockDAO;
+import com.erudika.para.core.search.Search;
 import java.util.ArrayList;
 import java.util.List;
-import static com.erudika.para.aop.AOPUtils.*;
-import com.erudika.para.utils.Utils;
+import static com.erudika.para.server.aop.AOPUtils.*;
+import com.erudika.para.core.utils.Utils;
 import org.junit.Test;
 import static org.junit.Assert.*;
 import static org.mockito.ArgumentMatchers.any;
diff --git a/para-server/src/test/java/com/erudika/para/server/aop/AspectsIT.java b/para-server/src/test/java/com/erudika/para/server/aop/AspectsIT.java
new file mode 100644
index 00000000..fe057ffd
--- /dev/null
+++ b/para-server/src/test/java/com/erudika/para/server/aop/AspectsIT.java
@@ -0,0 +1,409 @@
+/*
+ * Copyright 2013-2021 Erudika. https://erudika.com
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * For issues and patches go to: https://github.com/erudika
+ */
+package com.erudika.para.server.aop;
+
+/**
+ *
+ * @author Alex Bogdanovski [alex@erudika.com]
+ */
+public class AspectsIT {
+
+//	private static final Logger logger = LoggerFactory.getLogger(AspectsIT.class);
+//	private static Sysprop s0;
+//	private static Sysprop s1;
+//	private static Sysprop s2;
+//
+//	@BeforeClass
+//	public static void setUpClass() throws Exception {
+//		System.setProperty("para.env", "embedded");
+//		System.setProperty("para.print_logo", "false");
+//		System.setProperty("para.app_name", "para-test");
+//		System.setProperty("para.cluster_name", "para-test");
+//		System.setProperty("para.cache_enabled", "true");
+//		ParaServer.initialize(Modules.override(ParaServer.getCoreModules()).with(new Module() {
+//			public void configure(Binder binder) {
+//				binder.bind(DAO.class).to(MockDAO.class).asEagerSingleton();
+//				binder.bind(Cache.class).to(MockCache.class).asEagerSingleton();
+//				binder.bind(Search.class).to(LuceneSearch.class).asEagerSingleton();
+//			}
+//		}));
+//
+////		ElasticSearchUtils.createIndex(Config.getRootAppIdentifier());
+//
+//		s0 = new Sysprop("s111");
+//		s0.setName("John Doe");
+//		s0.setTimestamp(Utils.timestamp());
+//		s0.setTags(CoreUtils.getInstance().addTags(s0.getTags(), "one", "two", "three"));
+//
+//		s1 = new Sysprop("s222");
+//		s1.setName("Joe Black");
+//		s1.setTimestamp(Utils.timestamp());
+//		s1.setTags(CoreUtils.getInstance().addTags(s1.getTags(), "two", "four", "three"));
+//
+//		s2 = new Sysprop("s333");
+//		s2.setName("Ann Smith");
+//		s2.setTimestamp(Utils.timestamp());
+//		s2.setTags(CoreUtils.getInstance().addTags(s2.getTags(), "four", "five", "three"));
+//
+//		CoreUtils.getInstance().setDao(Para.getDAO());
+//		CoreUtils.getInstance().setCache(Para.getCache());
+//		CoreUtils.getInstance().setSearch(Para.getSearch());
+//	}
+//
+//	@AfterClass
+//	public static void tearDownClass() throws Exception {
+//		Para.getDAO().deleteAll(Arrays.asList(s0, s1, s2));
+//		Para.destroy();
+//	}
+//
+//	@Test
+//	public void test() throws InterruptedException {
+//		DAO d = Para.getDAO();
+//		Search s = Para.getSearch();
+//		Cache c = Para.getCache();
+//		System.setProperty("para.cache_enabled", "true");
+//
+//		assertNotNull(s0.create());
+//		assertNotNull(d.read(s0.getId()));
+//
+//		User uB = new User("invalid");
+//		uB.setIdentifier(null); // no identifier (username)
+//		uB.setPassword("badpass");
+//		uB.create();
+//		assertNull(d.read(uB.getId()));
+//		assertNull(s.findById(uB.getId()));
+//		assertNull(c.get(uB.getId()));
+//
+//		uB.setEmail("tes1@test.com");
+//		uB.setIdentifier(uB.getEmail());
+//		uB.create();
+//		assertNotNull(d.read(uB.getId()));
+//		assertNotNull(s.findById(uB.getId()));
+//		assertNotNull(c.get(uB.getId()));
+//
+//		logger.debug("---- cache remove -----");
+//		c.remove(uB.getId());
+//		assertNotNull(d.read(uB.getId()));
+//		assertTrue(c.contains(uB.getId()));
+//		logger.debug("---------");
+//
+//		uB.delete();
+//		assertNull(d.read(uB.getId()));
+//		assertNull(s.findById(uB.getId()));
+//		assertNull(c.get(uB.getId()));
+//
+//		ArrayList<Sysprop> list = new ArrayList<>();
+//		list.add(s0);
+//		list.add(s1);
+//		list.add(s2);
+//
+//		d.createAll(list);
+//		assertNotNull(d.read(s0.getId()));
+//		assertNotNull(s.findById(s0.getId()));
+//		assertNotNull(c.get(s0.getId()));
+//
+//		assertNotNull(d.read(s1.getId()));
+//		assertNotNull(s.findById(s1.getId()));
+//		assertNotNull(c.get(s1.getId()));
+//
+//		assertNotNull(d.read(s2.getId()));
+//		assertNotNull(s.findById(s2.getId()));
+//		assertNotNull(c.get(s2.getId()));
+//
+//		logger.debug("---- read all from cache ----");
+//		Map<String, User> map = d.readAll(Arrays.asList(s0.getId(), s1.getId(), s2.getId()), true);
+//		assertTrue(map.containsKey(s0.getId()));
+//		assertTrue(map.containsKey(s1.getId()));
+//		assertTrue(map.containsKey(s2.getId()));
+//
+//		logger.debug("---- cache remove ----");
+//		c.remove(s1.getId());
+//		c.remove(s2.getId());
+//		d.readAll(Arrays.asList(s0.getId(), s1.getId(), s2.getId()), true);
+//		assertTrue(c.contains(s1.getId()));
+//		assertTrue(c.contains(s2.getId()));
+//
+//		logger.debug("---- delete all ----");
+//		d.deleteAll(list);
+//		Thread.sleep(500);
+//		assertNull(d.read(s0.getId()));
+//		assertNull(s.findById(s0.getId()));
+//		assertNull(c.get(s0.getId()));
+//
+//		assertNull(d.read(s1.getId()));
+//		assertNull(s.findById(s1.getId()));
+//		assertNull(c.get(s1.getId()));
+//
+//		assertNull(d.read(s2.getId()));
+//		assertNull(s.findById(s2.getId()));
+//		assertNull(c.get(s2.getId()));
+//
+//		// Removed in v1.18 - this will cause unexpected behavior in the future.
+//		// These "special" classes are not documented and this is the wrong
+//		// place to filter them out.
+//
+//		// test skipping special classes calling batch methods
+////		App app1 = new App("app1");
+////		User user1 = new User("user1");
+////		user1.setName("John Doe");
+////		user1.setGroups(User.Groups.USERS.toString());
+////		user1.setEmail("john1@asd.com");
+////		user1.setIdentifier(user1.getEmail());
+////		user1.setTimestamp(Utils.timestamp());
+////		user1.setPassword("123456");
+////		Tag t1 = new Tag("testtag123");
+////
+////		// test that Apps and Users are removed from batch operations
+////		ArrayList<ParaObject> list1 = new ArrayList<ParaObject>();
+////		list1.add(app1);
+////		list1.add(user1);
+////		list1.add(t1);
+////		Para.getDAO().createAll(list1);
+////
+////		System.setProperty("para.cache_enabled", "false");
+////		assertNull(Para.getDAO().read(app1.getId()));
+////		assertNull(Para.getDAO().read(user1.getId()));
+////		assertNotNull(Para.getDAO().read(t1.getId()));
+////
+////		assertNull(Para.getSearch().findById(app1.getId()));
+////		assertNull(Para.getSearch().findById(user1.getId()));
+////		assertNotNull(Para.getSearch().findById(t1.getId()));
+////
+////		System.setProperty("para.cache_enabled", "true");
+////		assertFalse(Para.getCache().contains(app1.getId()));
+////		assertFalse(Para.getCache().contains(user1.getId()));
+////		assertTrue(Para.getCache().contains(t1.getId()));
+//	}
+//
+//	@Test
+//	public void testFlags() throws InterruptedException {
+//		// default - store=true, index=true, cache=true
+//		Tag t1 = new Tag("tag1");
+//		Sysprop o11 = new Sysprop("obj11");
+//		Sysprop o12 = new Sysprop("obj12");
+//		Para.getDAO().create(t1);
+//		Para.getDAO().createAll(new LinkedList<>(Arrays.asList(o11, o12)));
+//
+//		assertNotNull(Para.getDAO().read(t1.getId()));
+//		assertNotNull(Para.getDAO().read(o11.getId()));
+//		assertNotNull(Para.getDAO().read(o12.getId()));
+//		assertNotNull(Para.getSearch().findById(t1.getId()));
+//		assertNotNull(Para.getSearch().findById(o11.getId()));
+//		assertNotNull(Para.getSearch().findById(o12.getId()));
+//		assertNotNull(Para.getCache().get(t1.getId()));
+//		assertNotNull(Para.getCache().get(o11.getId()));
+//		assertNotNull(Para.getCache().get(o12.getId()));
+//		Para.getDAO().deleteAll(Arrays.asList(t1, o11, o12));
+//		assertNull(Para.getDAO().read(t1.getId()));
+//		assertNull(Para.getDAO().read(o11.getId()));
+//		assertNull(Para.getDAO().read(o12.getId()));
+//		assertNull(Para.getSearch().findById(t1.getId()));
+//		assertNull(Para.getSearch().findById(o11.getId()));
+//		assertNull(Para.getSearch().findById(o12.getId()));
+//		assertNull(Para.getCache().get(t1.getId()));
+//		assertNull(Para.getCache().get(o11.getId()));
+//		assertNull(Para.getCache().get(o12.getId()));
+//		// special case - readAll should always return an empty list and never null
+//		Map<String, ?> deleted = Para.getDAO().readAll(Arrays.asList(t1.getId(), o11.getId(), o12.getId()), true);
+//		assertNotNull(deleted);
+//		assertTrue(deleted.isEmpty());
+//
+//		// not in DB - store=false, index=true, cache=true
+//		Tag t2 = new Tag("tag2");
+//		Sysprop o21 = new Sysprop("obj21");
+//		Sysprop o22 = new Sysprop("obj22");
+//		t2.setStored(false);
+//		o21.setStored(false);
+//		o22.setStored(false);
+//		Para.getDAO().create(t2);
+//		Para.getDAO().createAll(new LinkedList<>(Arrays.asList(o21, o22)));
+//
+//		System.setProperty("para.cache_enabled", "false");
+//		assertNull(Para.getDAO().read(t2.getId()));
+//		assertNull(Para.getDAO().read(o21.getId()));
+//		assertNull(Para.getDAO().read(o22.getId()));
+//		assertNotNull(Para.getSearch().findById(t2.getId()));
+//		assertNotNull(Para.getSearch().findById(o21.getId()));
+//		assertNotNull(Para.getSearch().findById(o22.getId()));
+//		System.setProperty("para.cache_enabled", "true");
+//		assertNotNull(Para.getCache().get(t2.getId()));
+//		assertNotNull(Para.getCache().get(o21.getId()));
+//		assertNotNull(Para.getCache().get(o22.getId()));
+//		Para.getDAO().deleteAll(Arrays.asList(t2, o21, o22));
+//		assertNull(Para.getDAO().read(t2.getId()));
+//		assertNull(Para.getDAO().read(o21.getId()));
+//		assertNull(Para.getDAO().read(o22.getId()));
+//		assertNull(Para.getSearch().findById(t2.getId()));
+//		assertNull(Para.getSearch().findById(o21.getId()));
+//		assertNull(Para.getSearch().findById(o22.getId()));
+//		assertNull(Para.getCache().get(t2.getId()));
+//		assertNull(Para.getCache().get(o21.getId()));
+//		assertNull(Para.getCache().get(o22.getId()));
+//
+//		// in memory - store=false, index=false, cache=true
+//		Tag t3 = new Tag("tag3");
+//		Sysprop o31 = new Sysprop("obj31");
+//		Sysprop o32 = new Sysprop("obj32");
+//		t3.setStored(false);
+//		t3.setIndexed(false);
+//		o31.setStored(false);
+//		o31.setIndexed(false);
+//		o32.setStored(false);
+//		o32.setIndexed(false);
+//		Para.getDAO().create(t3);
+//		Para.getDAO().createAll(new LinkedList<>(Arrays.asList(o31, o32)));
+//
+//		System.setProperty("para.cache_enabled", "false");
+//		assertNull(Para.getDAO().read(t3.getId()));
+//		assertNull(Para.getDAO().read(o31.getId()));
+//		assertNull(Para.getDAO().read(o32.getId()));
+//		assertNull(Para.getSearch().findById(t3.getId()));
+//		assertNull(Para.getSearch().findById(o31.getId()));
+//		assertNull(Para.getSearch().findById(o32.getId()));
+//		System.setProperty("para.cache_enabled", "true");
+//		assertNotNull(Para.getCache().get(t3.getId()));
+//		assertNotNull(Para.getCache().get(o31.getId()));
+//		assertNotNull(Para.getCache().get(o32.getId()));
+//		Para.getDAO().deleteAll(Arrays.asList(t3, o31, o32));
+//		assertNull(Para.getDAO().read(t3.getId()));
+//		assertNull(Para.getDAO().read(o31.getId()));
+//		assertNull(Para.getDAO().read(o32.getId()));
+//		assertNull(Para.getSearch().findById(t3.getId()));
+//		assertNull(Para.getSearch().findById(o31.getId()));
+//		assertNull(Para.getSearch().findById(o32.getId()));
+//		assertNull(Para.getCache().get(t3.getId()));
+//		assertNull(Para.getCache().get(o31.getId()));
+//		assertNull(Para.getCache().get(o32.getId()));
+//
+//		// not cached - store=true, index=true, cache=false
+//		Tag t4 = new Tag("tag4");
+//		Sysprop o41 = new Sysprop("obj41");
+//		Sysprop o42 = new Sysprop("obj42");
+//		t4.setCached(false);
+//		o41.setCached(false);
+//		o42.setCached(false);
+//		Para.getDAO().create(t4);
+//		Para.getDAO().createAll(new LinkedList<>(Arrays.asList(o41, o42)));
+//
+//		System.setProperty("para.cache_enabled", "false");
+//		assertNotNull(Para.getDAO().read(t4.getId()));
+//		assertNotNull(Para.getDAO().read(o41.getId()));
+//		assertNotNull(Para.getDAO().read(o42.getId()));
+//		assertNotNull(Para.getSearch().findById(t4.getId()));
+//		assertNotNull(Para.getSearch().findById(o41.getId()));
+//		assertNotNull(Para.getSearch().findById(o42.getId()));
+//		System.setProperty("para.cache_enabled", "true");
+//		assertNull(Para.getCache().get(t4.getId()));
+//		assertNull(Para.getCache().get(o41.getId()));
+//		assertNull(Para.getCache().get(o42.getId()));
+//		Para.getDAO().deleteAll(Arrays.asList(t4, o41, o42));
+//		assertNull(Para.getDAO().read(t4.getId()));
+//		assertNull(Para.getDAO().read(o41.getId()));
+//		assertNull(Para.getDAO().read(o42.getId()));
+//		assertNull(Para.getSearch().findById(t4.getId()));
+//		assertNull(Para.getSearch().findById(o41.getId()));
+//		assertNull(Para.getSearch().findById(o42.getId()));
+//		assertNull(Para.getCache().get(t4.getId()));
+//		assertNull(Para.getCache().get(o41.getId()));
+//		assertNull(Para.getCache().get(o42.getId()));
+//
+//		// only in DB - store=true, index=false, cache=false
+//		Tag t5 = new Tag("tag5");
+//		Sysprop o51 = new Sysprop("obj51");
+//		Sysprop o52 = new Sysprop("obj52");
+//		t5.setIndexed(false);
+//		t5.setCached(false);
+//		o51.setIndexed(false);
+//		o51.setCached(false);
+//		o52.setIndexed(false);
+//		o52.setCached(false);
+//		Para.getDAO().create(t5);
+//		Para.getDAO().createAll(new LinkedList<>(Arrays.asList(o51, o52)));
+//
+//		System.setProperty("para.cache_enabled", "false");
+//		assertNotNull(Para.getDAO().read(t5.getId()));
+//		assertNotNull(Para.getDAO().read(o51.getId()));
+//		assertNotNull(Para.getDAO().read(o52.getId()));
+//		assertNull(Para.getSearch().findById(t5.getId()));
+//		assertNull(Para.getSearch().findById(o51.getId()));
+//		assertNull(Para.getSearch().findById(o52.getId()));
+//		System.setProperty("para.cache_enabled", "true");
+//		assertNull(Para.getCache().get(t5.getId()));
+//		assertNull(Para.getCache().get(o51.getId()));
+//		assertNull(Para.getCache().get(o52.getId()));
+//		Para.getDAO().deleteAll(Arrays.asList(t5, o51, o52));
+//		assertNull(Para.getDAO().read(t5.getId()));
+//		assertNull(Para.getDAO().read(o51.getId()));
+//		assertNull(Para.getDAO().read(o52.getId()));
+//		assertNull(Para.getSearch().findById(t5.getId()));
+//		assertNull(Para.getSearch().findById(o51.getId()));
+//		assertNull(Para.getSearch().findById(o52.getId()));
+//		assertNull(Para.getCache().get(t5.getId()));
+//		assertNull(Para.getCache().get(o51.getId()));
+//		assertNull(Para.getCache().get(o52.getId()));
+//
+//		// only in index - store=false, index=true, cache=false
+//		Tag t6 = new Tag("tag6");
+//		Sysprop o61 = new Sysprop("obj61");
+//		Sysprop o62 = new Sysprop("obj62");
+//		o61.addProperty("dont_lose_this", o61.getId());
+//		o62.addProperty("dont_lose_this", o62.getId());
+//		t6.setStored(false);
+//		t6.setCached(false);
+//		o61.setStored(false);
+//		o61.setCached(false);
+//		o62.setStored(false);
+//		o62.setCached(false);
+//		Para.getDAO().create(t6);
+//		Para.getDAO().createAll(new LinkedList<>(Arrays.asList(o61, o62)));
+//		Thread.sleep(1000);
+//
+//		System.setProperty("para.cache_enabled", "false");
+//		assertNull(Para.getDAO().read(t6.getId()));
+//		assertNull(Para.getDAO().read(o61.getId()));
+//		assertNull(Para.getDAO().read(o62.getId()));
+//		assertNotNull(Para.getSearch().findById(t6.getId()));
+//		assertNotNull(Para.getSearch().findById(o61.getId()));
+//		assertNotNull(Para.getSearch().findById(o62.getId()));
+//		// special case: read_from_index (query multiple objects)
+//		List<?> results = Para.getSearch().findByIds(Arrays.asList(o61.getId(), o62.getId()));
+//		assertNotNull(results);
+//		assertFalse(results.isEmpty());
+//		assertEquals(2, results.size());
+//		Sysprop first = ((Sysprop) results.get(0));
+//		Sysprop second = ((Sysprop) results.get(1));
+//		assertEquals(first.getId(), first.getProperty("dont_lose_this"));
+//		assertEquals(second.getId(), second.getProperty("dont_lose_this"));
+//
+//		System.setProperty("para.cache_enabled", "true");
+//		assertNull(Para.getCache().get(t6.getId()));
+//		assertNull(Para.getCache().get(o61.getId()));
+//		assertNull(Para.getCache().get(o62.getId()));
+//		Para.getDAO().deleteAll(Arrays.asList(t6, o61, o62));
+//		assertNull(Para.getDAO().read(t6.getId()));
+//		assertNull(Para.getDAO().read(o61.getId()));
+//		assertNull(Para.getDAO().read(o62.getId()));
+//		assertNull(Para.getSearch().findById(t6.getId()));
+//		assertNull(Para.getSearch().findById(o61.getId()));
+//		assertNull(Para.getSearch().findById(o62.getId()));
+//		assertNull(Para.getCache().get(t6.getId()));
+//		assertNull(Para.getCache().get(o61.getId()));
+//		assertNull(Para.getCache().get(o62.getId()));
+//	}
+
+}
\ No newline at end of file
diff --git a/para-server/src/test/java/com/erudika/para/cache/CacheTest.java b/para-server/src/test/java/com/erudika/para/server/cache/CacheTest.java
similarity index 98%
rename from para-server/src/test/java/com/erudika/para/cache/CacheTest.java
rename to para-server/src/test/java/com/erudika/para/server/cache/CacheTest.java
index b97ac593..06821cd9 100644
--- a/para-server/src/test/java/com/erudika/para/cache/CacheTest.java
+++ b/para-server/src/test/java/com/erudika/para/server/cache/CacheTest.java
@@ -15,8 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.cache;
+package com.erudika.para.server.cache;
 
+import com.erudika.para.core.cache.Cache;
 import com.erudika.para.core.User;
 import java.util.ArrayList;
 import java.util.HashMap;
diff --git a/para-server/src/test/java/com/erudika/para/cache/CaffeineCacheTest.java b/para-server/src/test/java/com/erudika/para/server/cache/CaffeineCacheTest.java
similarity index 97%
rename from para-server/src/test/java/com/erudika/para/cache/CaffeineCacheTest.java
rename to para-server/src/test/java/com/erudika/para/server/cache/CaffeineCacheTest.java
index d6c8020f..c017e4bc 100644
--- a/para-server/src/test/java/com/erudika/para/cache/CaffeineCacheTest.java
+++ b/para-server/src/test/java/com/erudika/para/server/cache/CaffeineCacheTest.java
@@ -15,8 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.cache;
+package com.erudika.para.server.cache;
 
+import com.erudika.para.server.cache.CaffeineCache;
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.Expiry;
 import java.util.concurrent.TimeUnit;
diff --git a/para-server/src/test/java/com/erudika/para/cache/FakeTicker.java b/para-server/src/test/java/com/erudika/para/server/cache/FakeTicker.java
similarity index 98%
rename from para-server/src/test/java/com/erudika/para/cache/FakeTicker.java
rename to para-server/src/test/java/com/erudika/para/server/cache/FakeTicker.java
index 47c54d06..ebf4d9e7 100644
--- a/para-server/src/test/java/com/erudika/para/cache/FakeTicker.java
+++ b/para-server/src/test/java/com/erudika/para/server/cache/FakeTicker.java
@@ -15,7 +15,7 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.cache;
+package com.erudika.para.server.cache;
 
 import com.github.benmanes.caffeine.cache.Ticker;
 import java.util.concurrent.TimeUnit;
diff --git a/para-server/src/test/java/com/erudika/para/cache/MockCacheTest.java b/para-server/src/test/java/com/erudika/para/server/cache/MockCacheTest.java
similarity index 90%
rename from para-server/src/test/java/com/erudika/para/cache/MockCacheTest.java
rename to para-server/src/test/java/com/erudika/para/server/cache/MockCacheTest.java
index bdf6b5d1..c63227b7 100644
--- a/para-server/src/test/java/com/erudika/para/cache/MockCacheTest.java
+++ b/para-server/src/test/java/com/erudika/para/server/cache/MockCacheTest.java
@@ -15,7 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.cache;
+package com.erudika.para.server.cache;
+
+import com.erudika.para.core.cache.MockCache;
 
 /**
  *
diff --git a/para-server/src/test/java/com/erudika/para/persistence/AWSDynamoDAOIT.java b/para-server/src/test/java/com/erudika/para/server/persistence/AWSDynamoDAOIT.java
similarity index 97%
rename from para-server/src/test/java/com/erudika/para/persistence/AWSDynamoDAOIT.java
rename to para-server/src/test/java/com/erudika/para/server/persistence/AWSDynamoDAOIT.java
index 278ad221..4d1b807f 100644
--- a/para-server/src/test/java/com/erudika/para/persistence/AWSDynamoDAOIT.java
+++ b/para-server/src/test/java/com/erudika/para/server/persistence/AWSDynamoDAOIT.java
@@ -15,13 +15,15 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.persistence;
+package com.erudika.para.server.persistence;
 
+import com.erudika.para.server.persistence.AWSDynamoUtils;
+import com.erudika.para.server.persistence.AWSDynamoDAO;
 import com.erudika.para.core.App;
 import com.erudika.para.core.Sysprop;
-import com.erudika.para.utils.Config;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.utils.Config;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Map;
diff --git a/para-server/src/test/java/com/erudika/para/persistence/DAOTest.java b/para-server/src/test/java/com/erudika/para/server/persistence/DAOTest.java
similarity index 97%
rename from para-server/src/test/java/com/erudika/para/persistence/DAOTest.java
rename to para-server/src/test/java/com/erudika/para/server/persistence/DAOTest.java
index af7a8d4e..9ab07cfe 100644
--- a/para-server/src/test/java/com/erudika/para/persistence/DAOTest.java
+++ b/para-server/src/test/java/com/erudika/para/server/persistence/DAOTest.java
@@ -15,16 +15,17 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.persistence;
+package com.erudika.para.server.persistence;
 
+import com.erudika.para.core.persistence.DAO;
 import com.erudika.para.core.App;
 import com.erudika.para.core.Sysprop;
 import com.erudika.para.core.Tag;
 import com.erudika.para.core.User;
 import com.erudika.para.core.utils.CoreUtils;
-import com.erudika.para.search.Search;
-import com.erudika.para.utils.Pager;
-import com.erudika.para.utils.Utils;
+import com.erudika.para.core.search.Search;
+import com.erudika.para.core.utils.Pager;
+import com.erudika.para.core.utils.Utils;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Map;
diff --git a/para-server/src/test/java/com/erudika/para/persistence/MockDAOTest.java b/para-server/src/test/java/com/erudika/para/server/persistence/MockDAOTest.java
similarity index 89%
rename from para-server/src/test/java/com/erudika/para/persistence/MockDAOTest.java
rename to para-server/src/test/java/com/erudika/para/server/persistence/MockDAOTest.java
index b28ba8be..e06a894e 100644
--- a/para-server/src/test/java/com/erudika/para/persistence/MockDAOTest.java
+++ b/para-server/src/test/java/com/erudika/para/server/persistence/MockDAOTest.java
@@ -15,7 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.persistence;
+package com.erudika.para.server.persistence;
+
+import com.erudika.para.core.persistence.MockDAO;
 
 /**
  *
diff --git a/para-server/src/test/java/com/erudika/para/queue/AWSQueueIT.java b/para-server/src/test/java/com/erudika/para/server/queue/AWSQueueIT.java
similarity index 91%
rename from para-server/src/test/java/com/erudika/para/queue/AWSQueueIT.java
rename to para-server/src/test/java/com/erudika/para/server/queue/AWSQueueIT.java
index 700a0cc3..80f02518 100644
--- a/para-server/src/test/java/com/erudika/para/queue/AWSQueueIT.java
+++ b/para-server/src/test/java/com/erudika/para/server/queue/AWSQueueIT.java
@@ -15,9 +15,11 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.queue;
+package com.erudika.para.server.queue;
 
-import static com.erudika.para.queue.QueueTest.q;
+import com.erudika.para.server.queue.AWSQueue;
+import com.erudika.para.server.queue.AWSQueueUtils;
+import static com.erudika.para.server.queue.QueueTest.q;
 import java.util.ArrayList;
 import java.util.List;
 import org.elasticmq.rest.sqs.SQSRestServer;
diff --git a/para-server/src/test/java/com/erudika/para/queue/MockQueueTest.java b/para-server/src/test/java/com/erudika/para/server/queue/MockQueueTest.java
similarity index 90%
rename from para-server/src/test/java/com/erudika/para/queue/MockQueueTest.java
rename to para-server/src/test/java/com/erudika/para/server/queue/MockQueueTest.java
index 9eb2ca84..34d0e124 100644
--- a/para-server/src/test/java/com/erudika/para/queue/MockQueueTest.java
+++ b/para-server/src/test/java/com/erudika/para/server/queue/MockQueueTest.java
@@ -15,7 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.queue;
+package com.erudika.para.server.queue;
+
+import com.erudika.para.core.queue.MockQueue;
 
 /**
  *
diff --git a/para-server/src/test/java/com/erudika/para/queue/QueueTest.java b/para-server/src/test/java/com/erudika/para/server/queue/QueueTest.java
similarity index 94%
rename from para-server/src/test/java/com/erudika/para/queue/QueueTest.java
rename to para-server/src/test/java/com/erudika/para/server/queue/QueueTest.java
index ea7b44a0..874fd00c 100644
--- a/para-server/src/test/java/com/erudika/para/queue/QueueTest.java
+++ b/para-server/src/test/java/com/erudika/para/server/queue/QueueTest.java
@@ -15,8 +15,9 @@
  *
  * For issues and patches go to: https://github.com/erudika
  */
-package com.erudika.para.queue;
+package com.erudika.para.server.queue;
 
+import com.erudika.para.core.queue.Queue;
 import org.junit.Test;
 import static org.junit.Assert.*;
 import org.junit.Ignore;
diff --git a/para-server/src/test/java/com/erudika/para/utils/filters/CORSFilterTest.java b/para-server/src/test/java/com/erudika/para/utils/filters/CORSFilterTest.java
index 7334163a..c9ed5165 100644
--- a/para-server/src/test/java/com/erudika/para/utils/filters/CORSFilterTest.java
+++ b/para-server/src/test/java/com/erudika/para/utils/filters/CORSFilterTest.java
@@ -15,6 +15,7 @@
  */
 package com.erudika.para.utils.filters;
 
+import com.erudika.para.server.utils.filters.CORSFilter;
 import java.io.IOException;
 import java.util.LinkedHashSet;
 import java.util.Set;
diff --git a/para-server/src/test/java/com/erudika/para/utils/filters/MockHttpServletRequest.java b/para-server/src/test/java/com/erudika/para/utils/filters/MockHttpServletRequest.java
index 0782acf7..87bd1adc 100644
--- a/para-server/src/test/java/com/erudika/para/utils/filters/MockHttpServletRequest.java
+++ b/para-server/src/test/java/com/erudika/para/utils/filters/MockHttpServletRequest.java
@@ -15,6 +15,7 @@
  */
 package com.erudika.para.utils.filters;
 
+import com.erudika.para.server.utils.filters.CORSFilter;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
diff --git a/para-server/src/test/java/com/erudika/para/utils/filters/TestConfigs.java b/para-server/src/test/java/com/erudika/para/utils/filters/TestConfigs.java
index 106cc124..ebd20e8d 100644
--- a/para-server/src/test/java/com/erudika/para/utils/filters/TestConfigs.java
+++ b/para-server/src/test/java/com/erudika/para/utils/filters/TestConfigs.java
@@ -15,6 +15,7 @@
  */
 package com.erudika.para.utils.filters;
 
+import com.erudika.para.server.utils.filters.CORSFilter;
 import java.util.Enumeration;
 
 import javax.servlet.FilterConfig;
diff --git a/para-war/pom.xml b/para-war/pom.xml
index db9571c4..cc0e39d1 100644
--- a/para-war/pom.xml
+++ b/para-war/pom.xml
@@ -4,7 +4,7 @@
 	<parent>
 		<groupId>com.erudika</groupId>
 		<artifactId>para-parent</artifactId>
-		<version>1.42.1</version>
+		<version>1.42.2</version>
 	</parent>
 
 	<artifactId>para-war</artifactId>
@@ -21,12 +21,12 @@
 		<dependency>
 			<groupId>com.erudika</groupId>
 			<artifactId>para-dao-sql</artifactId>
-			<version>1.40.3</version>
+			<version>1.42.1</version>
 		</dependency>
 		<dependency>
 			<groupId>com.erudika</groupId>
 			<artifactId>para-search-lucene</artifactId>
-			<version>1.40.1</version>
+			<version>1.42.1</version>
 		</dependency>
 		<!-- PARA PLUGINS : END -->
 	</dependencies>
diff --git a/pom.xml b/pom.xml
index 4dcb70e4..fed2ffeb 100644
--- a/pom.xml
+++ b/pom.xml
@@ -3,7 +3,7 @@
 
 	<groupId>com.erudika</groupId>
 	<artifactId>para-parent</artifactId>
-	<version>1.42.1</version>
+	<version>1.42.2</version>
 	<packaging>pom</packaging>
 
 	<organization>
@@ -50,7 +50,7 @@
 		<connection>scm:git:https://github.com/Erudika/para.git</connection>
 		<developerConnection>scm:git:git@github.com:Erudika/para.git</developerConnection>
 		<url>https://github.com/Erudika/para</url>
-		<tag>v1.42.1</tag>
+		<tag>v1.42.2</tag>
 	</scm>
 
 	<issueManagement>
@@ -85,7 +85,7 @@
 		<jerseyVer>2.35</jerseyVer>
 		<jettyVer>9.4.44.v20210927</jettyVer>
 		<springBootVer>2.6.1</springBootVer>
-		<metricsVer>4.1.16</metricsVer>
+		<metricsVer>4.2.5</metricsVer>
 		<httpClientVer>5.1.2</httpClientVer>
 		<httpCoreVer>5.1.2</httpCoreVer>
 		<commonsCodecVer>1.15</commonsCodecVer>
@@ -150,8 +150,7 @@
 				<artifactId>maven-compiler-plugin</artifactId>
 				<version>3.8.1</version>
 				<configuration>
-					<source>1.8</source>
-					<target>1.8</target>
+					<release>11</release>
 					<compilerArgument>-Xlint:-options</compilerArgument>
 					<compilerArguments>
 						<endorseddirs>${endorsed.dir}</endorseddirs>
@@ -217,7 +216,7 @@
 					<plugin>
 						<groupId>org.apache.maven.plugins</groupId>
 						<artifactId>maven-source-plugin</artifactId>
-						<version>3.0.1</version>
+						<version>3.2.1</version>
 						<executions>
 							<execution>
 								<id>attach-sources</id>
@@ -231,7 +230,7 @@
 					<plugin>
 						<groupId>org.apache.maven.plugins</groupId>
 						<artifactId>maven-javadoc-plugin</artifactId>
-						<version>3.2.0</version>
+						<version>3.3.1</version>
 						<executions>
 							<execution>
 								<id>attach-javadocs</id>
@@ -239,7 +238,7 @@
 									<goal>jar</goal>
 								</goals>
 								<configuration>
-									<source>1.8</source>
+									<release>11</release>
 									<stylesheetfile>para-core/src/main/javadoc/stylesheet.css</stylesheetfile>
 									<show>public</show>
 									<aggregate>true</aggregate>