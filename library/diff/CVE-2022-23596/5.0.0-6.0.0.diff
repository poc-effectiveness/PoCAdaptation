diff --git a/CHANGELOG.md b/CHANGELOG.md
index 4f931f1f7..97102031f 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,24 @@
+# [6.0.0](https://github.com/junrar/junrar/compare/v5.0.0...v6.0.0) (2020-07-19)
+
+
+### Code Refactoring
+
+* exception inheritance ([aece14d](https://github.com/junrar/junrar/commit/aece14d42ec402e40f6600cbdb576b717a4220bc))
+* migrate from commons-logging to SLF4J ([e6f461b](https://github.com/junrar/junrar/commit/e6f461b60875e582ac54ee4b8b3a23744d5d97c0))
+* remove deprecated code ([99d4399](https://github.com/junrar/junrar/commit/99d43991023ca8d510663f9816a88c7796f7b210))
+
+
+### Reverts
+
+* rollback dependency-analysis plugin version ([29f8ab5](https://github.com/junrar/junrar/commit/29f8ab5ac250666823324e7b3ded5f1461b8290d))
+
+
+### BREAKING CHANGES
+
+* migrate from commons-logging to SLF4J
+* RarException has changed
+* remove ExtractArchive classes, use Junrar.extract instead
+
 # [5.0.0](https://github.com/junrar/junrar/compare/v4.0.0...v5.0.0) (2020-07-18)
 
 
diff --git a/LICENSE.md b/LICENSE
similarity index 100%
rename from LICENSE.md
rename to LICENSE
diff --git a/README.md b/README.md
index 80f2c11bd..1a7758a92 100644
--- a/README.md
+++ b/README.md
@@ -40,6 +40,8 @@ where `{version}` corresponds to version as below:
 - Java 8 Version: [![Download](https://api.bintray.com/packages/bintray/jcenter/com.github.junrar%3Ajunrar/images/download.svg) ](https://bintray.com/bintray/jcenter/com.github.junrar%3Ajunrar/_latestVersion)
 - Java 6 Compatible Version: [![Download](https://api.bintray.com/packages/bintray/jcenter/com.github.junrar%3Ajunrar/images/download.svg?version=4.0.0) ](https://bintray.com/bintray/jcenter/com.github.junrar%3Ajunrar/4.0.0/link)
 
+Apache Commons VFS support has been removed from `5.0.0`, and moved to a dedicated repo: https://github.com/junrar/commons-vfs-rar
+
 ## Usage
 
 ### Extract from a file to a directory:
diff --git a/build.gradle b/build.gradle
index 594ebb0b1..a4e3f2267 100644
--- a/build.gradle
+++ b/build.gradle
@@ -3,7 +3,7 @@ plugins {
     id 'maven-publish'
     id 'checkstyle'
     id 'jacoco'
-    id 'com.github.ben-manes.versions' version '0.28.0'
+    id 'com.github.ben-manes.versions' version '0.29.0'
     id 'com.autonomousapps.dependency-analysis' version '0.52.0'
     id 'dev.jacomet.logging-capabilities' version '0.9.0'
     id 'com.jfrog.bintray' version '1.8.5'
@@ -14,11 +14,12 @@ repositories {
 }
 
 dependencies {
-    implementation 'commons-logging:commons-logging:1.2'
+    implementation 'org.slf4j:slf4j-api:1.7.9'
 
+    testRuntimeOnly 'ch.qos.logback:logback-classic:1.2.3'
     testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
-    testImplementation 'commons-io:commons-io:1.3.2'
-    testImplementation 'org.mockito:mockito-core:2.23.4'
+    testImplementation 'commons-io:commons-io:2.7'
+    testImplementation 'org.mockito:mockito-core:3.4.4'
     testImplementation 'org.assertj:assertj-core:3.16.1'
 }
 
@@ -62,6 +63,9 @@ publishing {
                         name = 'Gauthier Roebroeck'
                     }
                 }
+                scm {
+                    url = 'https://github.com/junrar/junrar.git'
+                }
             }
         }
     }
@@ -93,6 +97,7 @@ bintray {
     key = System.getenv('BINTRAY_KEY')
     publications = ['maven']
     publish = true
+//    override = true
     pkg {
         repo = 'junrar'
         name = "${project.group}:${project.name}"
@@ -105,6 +110,7 @@ bintray {
             vcsTag = "v${project.version}"
             gpg {
                 sign = true
+                passphrase = System.getenv('GPG_PASSPHRASE')
             }
             mavenCentralSync {
                 sync = true
diff --git a/gradle.properties b/gradle.properties
index 78b9e9a14..46d5d300b 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1 +1 @@
-version=5.0.0
+version=6.0.0
diff --git a/src/main/java/com/github/junrar/Archive.java b/src/main/java/com/github/junrar/Archive.java
index 4cba461d9..c0a76b59b 100644
--- a/src/main/java/com/github/junrar/Archive.java
+++ b/src/main/java/com/github/junrar/Archive.java
@@ -18,8 +18,15 @@
  */
 package com.github.junrar;
 
+import com.github.junrar.exception.BadRarArchiveException;
+import com.github.junrar.exception.CorruptHeaderException;
+import com.github.junrar.exception.CrcErrorException;
+import com.github.junrar.exception.HeaderNotInArchiveException;
+import com.github.junrar.exception.MainHeaderNullException;
+import com.github.junrar.exception.NotRarArchiveException;
 import com.github.junrar.exception.RarException;
-import com.github.junrar.exception.RarException.RarExceptionType;
+import com.github.junrar.exception.UnsupportedRarEncryptedException;
+import com.github.junrar.exception.UnsupportedRarV5Exception;
 import com.github.junrar.impl.FileVolumeManager;
 import com.github.junrar.impl.InputStreamVolumeManager;
 import com.github.junrar.io.IReadOnlyAccess;
@@ -41,8 +48,8 @@
 import com.github.junrar.rarfile.UnrarHeadertype;
 import com.github.junrar.unpack.ComprDataIO;
 import com.github.junrar.unpack.Unpack;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.Closeable;
 import java.io.File;
@@ -65,9 +72,9 @@
  */
 public class Archive implements Closeable, Iterable<FileHeader> {
 
-    private static final Log logger = LogFactory.getLog(Archive.class);
+    private static final Logger logger = LoggerFactory.getLogger(Archive.class);
 
-    private static int MAX_HEADER_SIZE = 20971520; //20MB
+    private static final int MAX_HEADER_SIZE = 20971520; //20MB
 
     private IReadOnlyAccess rof;
 
@@ -75,7 +82,7 @@ public class Archive implements Closeable, Iterable<FileHeader> {
 
     private final ComprDataIO dataIO;
 
-    private final List<BaseBlock> headers = new ArrayList<BaseBlock>();
+    private final List<BaseBlock> headers = new ArrayList<>();
 
     private MarkHeader markHead = null;
 
@@ -123,14 +130,7 @@ public Archive(
 
         try {
             setVolume(this.volumeManager.nextArchive(this, null));
-        } catch (IOException e) {
-            try {
-                close();
-            } catch (IOException e1) {
-                logger.error("Failed to close the archive after an internal error!");
-            }
-            throw e;
-        } catch (RarException e) {
+        } catch (IOException | RarException e) {
             try {
                 close();
             } catch (IOException e1) {
@@ -168,15 +168,12 @@ private void setFile(final IReadOnlyAccess file, final long length) throws IOExc
         this.rof = file;
         try {
             readHeaders(length);
+        } catch (UnsupportedRarEncryptedException | UnsupportedRarV5Exception | CorruptHeaderException e) {
+            logger.warn("exception in archive constructor maybe file is encrypted, corrupt or support not yet implemented", e);
+            throw e;
         } catch (final Exception e) {
             logger.warn("exception in archive constructor maybe file is encrypted, corrupt or support not yet implemented", e);
-            // Rethrow unsupportedRarException and corruptHeaderException
-            if (e instanceof RarException && (((RarException) e).getType() == RarExceptionType.unsupportedRarArchive
-                || ((RarException) e).getType() == RarExceptionType.corruptHeader)) {
-                throw (RarException) e;
-            }
-            // ignore exceptions to allow extraction of working files in
-            // corrupt archive
+            // ignore exceptions to allow extraction of working files in corrupt archive
         }
         // Calculate size of packed data
         for (final BaseBlock block : this.headers) {
@@ -210,14 +207,14 @@ public IReadOnlyAccess getRof() {
      * @return returns the headers.
      */
     public List<BaseBlock> getHeaders() {
-        return new ArrayList<BaseBlock>(this.headers);
+        return new ArrayList<>(this.headers);
     }
 
     /**
      * @return returns all file headers of the archive
      */
     public List<FileHeader> getFileHeaders() {
-        final List<FileHeader> list = new ArrayList<FileHeader>();
+        final List<FileHeader> list = new ArrayList<>();
         for (final BaseBlock block : this.headers) {
             if (block.getHeaderType().equals(UnrarHeadertype.FileHeader)) {
                 list.add((FileHeader) block);
@@ -249,7 +246,7 @@ public boolean isEncrypted() throws RarException {
         if (this.newMhd != null) {
             return this.newMhd.isEncrypted();
         } else {
-            throw new RarException(RarExceptionType.mainHeaderNull);
+            throw new MainHeaderNullException();
         }
     }
 
@@ -257,7 +254,7 @@ public boolean isEncrypted() throws RarException {
      * Read the headers of the archive
      *
      * @param fileLength Length of file.
-     * @throws RarException
+     * @throws IOException, RarException
      */
     private void readHeaders(final long fileLength) throws IOException, RarException {
         this.markHead = null;
@@ -267,7 +264,7 @@ private void readHeaders(final long fileLength) throws IOException, RarException
         int toRead = 0;
         //keep track of positions already processed for
         //more robustness against corrupt files
-        final Set<Long> processedPositions = new HashSet<Long>();
+        final Set<Long> processedPositions = new HashSet<>();
         while (true) {
             int size = 0;
             long newpos = 0;
@@ -292,7 +289,7 @@ private void readHeaders(final long fileLength) throws IOException, RarException
             UnrarHeadertype headerType = block.getHeaderType();
             if (headerType == null) {
                 logger.warn("unkonwn block header!");
-                throw new RarException(RarExceptionType.corruptHeader);
+                throw new CorruptHeaderException();
             }
             switch (headerType) {
 
@@ -301,9 +298,9 @@ private void readHeaders(final long fileLength) throws IOException, RarException
                     if (!this.markHead.isSignature()) {
                         if (markHead.getVersion() == RARVersion.V5) {
                             logger.warn("Support for rar version 5 is not yet implemented!");
-                            throw new RarException(RarExceptionType.unsupportedRarArchive);
+                            throw new UnsupportedRarV5Exception();
                         } else {
-                            throw new RarException(RarException.RarExceptionType.badRarArchive);
+                            throw new BadRarArchiveException();
                         }
                     }
                     this.headers.add(this.markHead);
@@ -319,8 +316,7 @@ private void readHeaders(final long fileLength) throws IOException, RarException
                     this.headers.add(mainhead);
                     this.newMhd = mainhead;
                     if (this.newMhd.isEncrypted()) {
-                        throw new RarException(
-                            RarExceptionType.rarEncryptedException);
+                        throw new UnsupportedRarEncryptedException();
                     }
                     // mainhead.print();
                     break;
@@ -355,7 +351,7 @@ private void readHeaders(final long fileLength) throws IOException, RarException
                     newpos = commHead.getPositionInFile()
                         + commHead.getHeaderSize();
                     if (processedPositions.contains(newpos)) {
-                        throw new RarException(RarExceptionType.badRarArchive);
+                        throw new BadRarArchiveException();
                     }
                     processedPositions.add(newpos);
                     this.rof.setPosition(newpos);
@@ -405,7 +401,7 @@ private void readHeaders(final long fileLength) throws IOException, RarException
                             newpos = fh.getPositionInFile() + fh.getHeaderSize()
                                 + fh.getFullPackSize();
                             if (processedPositions.contains(newpos)) {
-                                throw new RarException(RarExceptionType.badRarArchive);
+                                throw new BadRarArchiveException();
                             }
                             processedPositions.add(newpos);
                             this.rof.setPosition(newpos);
@@ -422,7 +418,7 @@ private void readHeaders(final long fileLength) throws IOException, RarException
                             newpos = ph.getPositionInFile() + ph.getHeaderSize()
                                 + ph.getDataSize();
                             if (processedPositions.contains(newpos)) {
-                                throw new RarException(RarExceptionType.badRarArchive);
+                                throw new BadRarArchiveException();
                             }
                             processedPositions.add(newpos);
                             this.rof.setPosition(newpos);
@@ -484,7 +480,7 @@ private void readHeaders(final long fileLength) throws IOException, RarException
                         }
                         default:
                             logger.warn("Unknown Header");
-                            throw new RarException(RarExceptionType.notRarArchive);
+                            throw new NotRarArchiveException();
 
                     }
             }
@@ -497,7 +493,7 @@ private static byte[] safelyAllocate(final long len, final int maxSize) throws R
             throw new IllegalArgumentException("maxsize must be >= 0");
         }
         if (len < 0 || len > maxSize) {
-            throw new RarException(RarExceptionType.badRarArchive);
+            throw new BadRarArchiveException();
         }
         return new byte[(int) len];
     }
@@ -512,7 +508,7 @@ private static byte[] safelyAllocate(final long len, final int maxSize) throws R
      */
     public void extractFile(final FileHeader hd, final OutputStream os) throws RarException {
         if (!this.headers.contains(hd)) {
-            throw new RarException(RarExceptionType.headerNotInArchive);
+            throw new HeaderNotInArchiveException();
         }
         try {
             doExtractFile(hd, os);
@@ -535,24 +531,20 @@ public void extractFile(final FileHeader hd, final OutputStream os) throws RarEx
      * @throws RarException .
      * @throws IOException  if any IO error occur
      */
-    public InputStream getInputStream(final FileHeader hd) throws RarException,
-        IOException {
+    public InputStream getInputStream(final FileHeader hd) throws RarException, IOException {
         final PipedInputStream in = new PipedInputStream(32 * 1024);
         final PipedOutputStream out = new PipedOutputStream(in);
 
         // creates a new thread that will write data to the pipe. Data will be
         // available in another InputStream, connected to the OutputStream.
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
+        new Thread(() -> {
+            try {
+                extractFile(hd, out);
+            } catch (final RarException e) {
+            } finally {
                 try {
-                    extractFile(hd, out);
-                } catch (final RarException e) {
-                } finally {
-                    try {
-                        out.close();
-                    } catch (final IOException e) {
-                    }
+                    out.close();
+                } catch (final IOException e) {
                 }
             }
         }).start();
@@ -580,7 +572,7 @@ private void doExtractFile(FileHeader hd, final OutputStream os)
                 : ~this.dataIO.getUnpFileCRC();
             final int expectedCRC = hd.getFileCRC();
             if (actualCRC != expectedCRC) {
-                throw new RarException(RarExceptionType.crcError);
+                throw new CrcErrorException();
             }
             // if (!hd.isSplitAfter()) {
             // // Verify file CRC
diff --git a/src/main/java/com/github/junrar/ContentDescription.java b/src/main/java/com/github/junrar/ContentDescription.java
index 8981f9cca..71405fd91 100644
--- a/src/main/java/com/github/junrar/ContentDescription.java
+++ b/src/main/java/com/github/junrar/ContentDescription.java
@@ -37,10 +37,7 @@ public boolean equals(Object obj) {
         } else if (!path.equals(other.path)) {
             return false;
         }
-        if (size != other.size) {
-            return false;
-        }
-        return true;
+        return size == other.size;
     }
 
     @Override
diff --git a/src/main/java/com/github/junrar/Junrar.java b/src/main/java/com/github/junrar/Junrar.java
index 1be94494f..58864d1f4 100644
--- a/src/main/java/com/github/junrar/Junrar.java
+++ b/src/main/java/com/github/junrar/Junrar.java
@@ -3,8 +3,8 @@
 import com.github.junrar.exception.RarException;
 import com.github.junrar.impl.FileVolumeManager;
 import com.github.junrar.rarfile.FileHeader;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.File;
 import java.io.IOException;
@@ -14,11 +14,11 @@
 
 public class Junrar {
 
-    private static final Log logger = LogFactory.getLog(Junrar.class);
+    private static final Logger logger = LoggerFactory.getLogger(Junrar.class);
 
     public static List<File> extract(final String rarPath, final String destinationPath) throws IOException, RarException {
         if (rarPath == null || destinationPath == null) {
-            throw new RuntimeException("archive and destination must me set");
+            throw new RuntimeException("archive and destination must be set");
         }
         final File arch = new File(rarPath);
         final File dest = new File(destinationPath);
@@ -29,7 +29,7 @@ public static List<File> extract(final File rar, final File destinationFolder) t
         validateRarPath(rar);
         validateDestinationPath(destinationFolder);
 
-        final Archive archive = createArchiveOrThrowException(logger, rar);
+        final Archive archive = createArchiveOrThrowException(rar);
         LocalFolderExtractor lfe = new LocalFolderExtractor(destinationFolder);
         return extractArchiveTo(archive, lfe);
     }
@@ -37,7 +37,7 @@ public static List<File> extract(final File rar, final File destinationFolder) t
     public static List<File> extract(final InputStream resourceAsStream, final File destinationFolder) throws RarException, IOException {
         validateDestinationPath(destinationFolder);
 
-        final Archive arch = createArchiveOrThrowException(logger, resourceAsStream);
+        final Archive arch = createArchiveOrThrowException(resourceAsStream);
         LocalFolderExtractor lfe = new LocalFolderExtractor(destinationFolder);
         return extractArchiveTo(arch, lfe);
     }
@@ -53,13 +53,13 @@ public static List<File> extract(
     public static List<ContentDescription> getContentsDescription(final File rar) throws RarException, IOException {
         validateRarPath(rar);
 
-        final Archive arch = createArchiveOrThrowException(logger, rar);
+        final Archive arch = createArchiveOrThrowException(rar);
 
-        final List<ContentDescription> contents = new ArrayList<ContentDescription>();
+        final List<ContentDescription> contents = new ArrayList<>();
         try {
             if (arch.isEncrypted()) {
                 logger.warn("archive is encrypted cannot extract");
-                return new ArrayList<ContentDescription>();
+                return new ArrayList<>();
             }
             for (final FileHeader fileHeader : arch) {
                 contents.add(new ContentDescription(fileHeader.getFileNameString(), fileHeader.getUnpSize()));
@@ -70,30 +70,21 @@ public static List<ContentDescription> getContentsDescription(final File rar) th
         return contents;
     }
 
-    private static Archive createArchiveOrThrowException(final Log logger, final InputStream rarAsStream) throws RarException, IOException {
+    private static Archive createArchiveOrThrowException(final InputStream rarAsStream) throws RarException, IOException {
         try {
             return new Archive(rarAsStream);
-        } catch (final RarException e) {
-            logger.error(e);
+        } catch (final RarException | IOException e) {
+            Junrar.logger.error("Error while creating archive", e);
             throw e;
-        } catch (final IOException e1) {
-            logger.error(e1);
-            throw e1;
         }
     }
 
-    private static Archive createArchiveOrThrowException(
-        final Log logger,
-        final File file
-    ) throws RarException, IOException {
+    private static Archive createArchiveOrThrowException(final File file) throws RarException, IOException {
         try {
             return new Archive(new FileVolumeManager(file));
-        } catch (final RarException e) {
-            logger.error(e);
+        } catch (final RarException | IOException e) {
+            Junrar.logger.error("Error while creating archive", e);
             throw e;
-        } catch (final IOException e1) {
-            logger.error(e1);
-            throw e1;
         }
     }
 
@@ -122,14 +113,14 @@ private static List<File> extractArchiveTo(final Archive arch, final ExtractDest
         if (arch.isEncrypted()) {
             logger.warn("archive is encrypted cannot extract");
             arch.close();
-            return new ArrayList<File>();
+            return new ArrayList<>();
         }
 
-        final List<File> extractedFiles = new ArrayList<File>();
+        final List<File> extractedFiles = new ArrayList<>();
         try {
             for (final FileHeader fh : arch) {
                 try {
-                    final File file = tryToExtract(logger, destination, arch, fh);
+                    final File file = tryToExtract(destination, arch, fh);
                     if (file != null) {
                         extractedFiles.add(file);
                     }
@@ -148,17 +139,16 @@ private static List<File> extractArchiveTo(final Archive arch, final ExtractDest
     }
 
     private static File tryToExtract(
-        final Log logger,
         final ExtractDestination destination,
         final Archive arch,
         final FileHeader fileHeader
     ) throws IOException, RarException {
         final String fileNameString = fileHeader.getFileNameString();
         if (fileHeader.isEncrypted()) {
-            logger.warn("file is encrypted cannot extract: " + fileNameString);
+            Junrar.logger.warn("file is encrypted cannot extract: " + fileNameString);
             return null;
         }
-        logger.info("extracting: " + fileNameString);
+        Junrar.logger.info("extracting: " + fileNameString);
         if (fileHeader.isDirectory()) {
             return destination.createDirectory(fileHeader);
         } else {
diff --git a/src/main/java/com/github/junrar/LocalFolderExtractor.java b/src/main/java/com/github/junrar/LocalFolderExtractor.java
index 0d008e675..214c56877 100644
--- a/src/main/java/com/github/junrar/LocalFolderExtractor.java
+++ b/src/main/java/com/github/junrar/LocalFolderExtractor.java
@@ -2,8 +2,8 @@
 
 import com.github.junrar.exception.RarException;
 import com.github.junrar.rarfile.FileHeader;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -12,8 +12,8 @@
 
 public class LocalFolderExtractor implements ExtractDestination {
 
-    private File folderDestination;
-    private static final Log logger = LogFactory.getLog(LocalFolderExtractor.class);
+    private final File folderDestination;
+    private static final Logger logger = LoggerFactory.getLogger(LocalFolderExtractor.class);
 
     public LocalFolderExtractor(final File destination) {
         this.folderDestination = destination;
@@ -54,14 +54,8 @@ public File extract(
             final FileHeader fileHeader
     ) throws RarException, IOException {
         final File f = createFile(fileHeader, folderDestination);
-        OutputStream stream = null;
-        try {
-            stream = new FileOutputStream(f);
+        try (OutputStream stream = new FileOutputStream(f)) {
             arch.extractFile(fileHeader, stream);
-        } finally {
-            if (stream != null) {
-                stream.close();
-            }
         }
         return f;
     }
@@ -91,9 +85,6 @@ private File createFile(final FileHeader fh, final File destination) throws IOEx
 
     private File makeFile(final File destination, final String name) throws IOException {
         final String[] dirs = name.split("\\\\");
-        if (dirs == null) {
-            return null;
-        }
         String path = "";
         final int size = dirs.length;
         if (size == 1) {
diff --git a/src/main/java/com/github/junrar/exception/BadRarArchiveException.java b/src/main/java/com/github/junrar/exception/BadRarArchiveException.java
new file mode 100644
index 000000000..c895aab8a
--- /dev/null
+++ b/src/main/java/com/github/junrar/exception/BadRarArchiveException.java
@@ -0,0 +1,10 @@
+package com.github.junrar.exception;
+
+public class BadRarArchiveException extends RarException {
+    public BadRarArchiveException(Throwable cause) {
+        super(cause);
+    }
+
+    public BadRarArchiveException() {
+    }
+}
diff --git a/src/main/java/com/github/junrar/exception/CorruptHeaderException.java b/src/main/java/com/github/junrar/exception/CorruptHeaderException.java
new file mode 100644
index 000000000..d856488d3
--- /dev/null
+++ b/src/main/java/com/github/junrar/exception/CorruptHeaderException.java
@@ -0,0 +1,10 @@
+package com.github.junrar.exception;
+
+public class CorruptHeaderException extends RarException {
+    public CorruptHeaderException(Throwable cause) {
+        super(cause);
+    }
+
+    public CorruptHeaderException() {
+    }
+}
diff --git a/src/main/java/com/github/junrar/exception/CrcErrorException.java b/src/main/java/com/github/junrar/exception/CrcErrorException.java
new file mode 100644
index 000000000..8c8cd395f
--- /dev/null
+++ b/src/main/java/com/github/junrar/exception/CrcErrorException.java
@@ -0,0 +1,11 @@
+package com.github.junrar.exception;
+
+public class CrcErrorException extends RarException {
+    public CrcErrorException(Throwable cause) {
+        super(cause);
+    }
+
+    public CrcErrorException() {
+        super();
+    }
+}
diff --git a/src/main/java/com/github/junrar/exception/HeaderNotInArchiveException.java b/src/main/java/com/github/junrar/exception/HeaderNotInArchiveException.java
new file mode 100644
index 000000000..8e50cc089
--- /dev/null
+++ b/src/main/java/com/github/junrar/exception/HeaderNotInArchiveException.java
@@ -0,0 +1,10 @@
+package com.github.junrar.exception;
+
+public class HeaderNotInArchiveException extends RarException {
+    public HeaderNotInArchiveException(Throwable cause) {
+        super(cause);
+    }
+
+    public HeaderNotInArchiveException() {
+    }
+}
diff --git a/src/main/java/com/github/junrar/exception/MainHeaderNullException.java b/src/main/java/com/github/junrar/exception/MainHeaderNullException.java
new file mode 100644
index 000000000..6cdc85593
--- /dev/null
+++ b/src/main/java/com/github/junrar/exception/MainHeaderNullException.java
@@ -0,0 +1,10 @@
+package com.github.junrar.exception;
+
+public class MainHeaderNullException extends RarException {
+    public MainHeaderNullException(Throwable cause) {
+        super(cause);
+    }
+
+    public MainHeaderNullException() {
+    }
+}
diff --git a/src/main/java/com/github/junrar/exception/NotRarArchiveException.java b/src/main/java/com/github/junrar/exception/NotRarArchiveException.java
new file mode 100644
index 000000000..77f722c83
--- /dev/null
+++ b/src/main/java/com/github/junrar/exception/NotRarArchiveException.java
@@ -0,0 +1,10 @@
+package com.github.junrar.exception;
+
+public class NotRarArchiveException extends RarException {
+    public NotRarArchiveException(Throwable cause) {
+        super(cause);
+    }
+
+    public NotRarArchiveException() {
+    }
+}
diff --git a/src/main/java/com/github/junrar/exception/RarException.java b/src/main/java/com/github/junrar/exception/RarException.java
index c454e9457..722ee9510 100644
--- a/src/main/java/com/github/junrar/exception/RarException.java
+++ b/src/main/java/com/github/junrar/exception/RarException.java
@@ -1,77 +1,10 @@
-/*
- * Copyright (c) 2007 innoSysTec (R) GmbH, Germany. All rights reserved.
- * Original author: Edmund Wagner
- * Creation date: 30.07.2007
- *
- * Source: $HeadURL$
- * Last changed: $LastChangedDate$
- *
- * the unrar licence applies to all junrar source and binary distributions
- * you are not allowed to use this source to re-create the RAR compression algorithm
- *
- * Here some html entities which can be used for escaping javadoc tags:
- * "&":  "&#038;" or "&amp;"
- * "<":  "&#060;" or "&lt;"
- * ">":  "&#062;" or "&gt;"
- * "@":  "&#064;"
- */
 package com.github.junrar.exception;
 
-/**
- * DOCUMENT ME
- *
- * @author $LastChangedBy$
- * @version $LastChangedRevision$
- */
 public class RarException extends Exception {
-    private static final long serialVersionUID = 1L;
-    private RarExceptionType type;
-
-    public RarException(Exception e) {
-        super(RarExceptionType.unkownError.name(), e);
-        this.type = RarExceptionType.unkownError;
-    }
-
-    public RarException(Exception e, RarExceptionType type) {
-        super(type.name(), e);
-        this.type = type;
-    }
-
-    public RarException(RarException e) {
-
-        super(e.getMessage(), e);
-        this.type = e.getType();
-    }
-
-    public RarException(RarExceptionType type) {
-        super(type.name());
-        this.type = type;
-    }
-
-
-
-    public enum RarExceptionType {
-        notImplementedYet,
-        crcError,
-        notRarArchive,
-        badRarArchive,
-        unkownError,
-        headerNotInArchive,
-        corruptHeader,
-        wrongHeaderType,
-        ioError,
-        rarEncryptedException,
-        mainHeaderNull,
-        unsupportedRarArchive
-    }
-
-
-
-    public RarExceptionType getType() {
-        return type;
+    public RarException(Throwable cause) {
+        super(cause);
     }
 
-    public void setType(RarExceptionType type) {
-        this.type = type;
+    public RarException() {
     }
 }
diff --git a/src/main/java/com/github/junrar/exception/UnsupportedRarEncryptedException.java b/src/main/java/com/github/junrar/exception/UnsupportedRarEncryptedException.java
new file mode 100644
index 000000000..39b88d059
--- /dev/null
+++ b/src/main/java/com/github/junrar/exception/UnsupportedRarEncryptedException.java
@@ -0,0 +1,10 @@
+package com.github.junrar.exception;
+
+public class UnsupportedRarEncryptedException extends RarException {
+    public UnsupportedRarEncryptedException(Throwable cause) {
+        super(cause);
+    }
+
+    public UnsupportedRarEncryptedException() {
+    }
+}
diff --git a/src/main/java/com/github/junrar/exception/UnsupportedRarV5Exception.java b/src/main/java/com/github/junrar/exception/UnsupportedRarV5Exception.java
new file mode 100644
index 000000000..5c0297316
--- /dev/null
+++ b/src/main/java/com/github/junrar/exception/UnsupportedRarV5Exception.java
@@ -0,0 +1,10 @@
+package com.github.junrar.exception;
+
+public class UnsupportedRarV5Exception extends RarException {
+    public UnsupportedRarV5Exception(Throwable cause) {
+        super(cause);
+    }
+
+    public UnsupportedRarV5Exception() {
+    }
+}
diff --git a/src/main/java/com/github/junrar/extract/ExtractArchive.java b/src/main/java/com/github/junrar/extract/ExtractArchive.java
deleted file mode 100644
index 4d8d98fb5..000000000
--- a/src/main/java/com/github/junrar/extract/ExtractArchive.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.github.junrar.extract;
-
-import java.io.File;
-import java.io.IOException;
-
-import com.github.junrar.Junrar;
-import com.github.junrar.exception.RarException;
-
-/**
- * extract an archive to the given location
- *
- * @author edmund wagner
- *
- */
-public class ExtractArchive {
-
-    /**
-     * @deprecated  As of release 1.0.2, replaced by { @link #Junrar.extract(final String rarPath, final String destinationPath) }
-     *
-     * @param archive rar file path
-     * @param destination folder where the files will be extracted
-     *
-     * @throws IOException .
-     * @throws RarException .
-     */
-    @Deprecated
-    public void extractArchive(File archive, File destination) throws RarException, IOException {
-        Junrar.extract(archive, destination);
-    }
-}
diff --git a/src/main/java/com/github/junrar/impl/FileVolumeManager.java b/src/main/java/com/github/junrar/impl/FileVolumeManager.java
index 744437b50..8f2d182df 100644
--- a/src/main/java/com/github/junrar/impl/FileVolumeManager.java
+++ b/src/main/java/com/github/junrar/impl/FileVolumeManager.java
@@ -1,17 +1,15 @@
 package com.github.junrar.impl;
 
-import java.io.File;
-import java.io.IOException;
-
 import com.github.junrar.Archive;
 import com.github.junrar.Volume;
 import com.github.junrar.VolumeManager;
 import com.github.junrar.util.VolumeHelper;
 
+import java.io.File;
+
 
 /**
  * @author <a href="http://www.rogiel.com">Rogiel</a>
- *
  */
 public class FileVolumeManager implements VolumeManager {
     private final File firstVolume;
@@ -21,14 +19,13 @@ public FileVolumeManager(final File firstVolume) {
     }
 
     @Override
-    public Volume nextArchive(final Archive archive, final Volume last) throws IOException {
+    public Volume nextArchive(final Archive archive, final Volume last) {
         if (last == null) return new FileVolume(archive, this.firstVolume);
 
         final FileVolume lastFileVolume = (FileVolume) last;
         final boolean oldNumbering = !archive.getMainHeader().isNewNumbering()
-                || archive.isOldFormat();
-        final String nextName = VolumeHelper.nextVolumeName(lastFileVolume.getFile()
-                .getAbsolutePath(), oldNumbering);
+            || archive.isOldFormat();
+        final String nextName = VolumeHelper.nextVolumeName(lastFileVolume.getFile().getAbsolutePath(), oldNumbering);
         final File nextVolume = new File(nextName);
 
         return new FileVolume(archive, nextVolume);
diff --git a/src/main/java/com/github/junrar/impl/InputStreamVolume.java b/src/main/java/com/github/junrar/impl/InputStreamVolume.java
index fedcbe05f..9a976c5dc 100644
--- a/src/main/java/com/github/junrar/impl/InputStreamVolume.java
+++ b/src/main/java/com/github/junrar/impl/InputStreamVolume.java
@@ -1,13 +1,12 @@
 package com.github.junrar.impl;
 
-import java.io.IOException;
-import java.io.InputStream;
-
 import com.github.junrar.Archive;
 import com.github.junrar.Volume;
 import com.github.junrar.io.IReadOnlyAccess;
 import com.github.junrar.io.InputStreamReadOnlyAccessFile;
 
+import java.io.InputStream;
+
 public class InputStreamVolume implements Volume {
 
     private final Archive archive;
@@ -19,7 +18,7 @@ public InputStreamVolume(final Archive archive, final InputStream inputStream) {
     }
 
     @Override
-    public IReadOnlyAccess getReadOnlyAccess() throws IOException {
+    public IReadOnlyAccess getReadOnlyAccess() {
         return new InputStreamReadOnlyAccessFile(this.inputStream);
     }
 
diff --git a/src/main/java/com/github/junrar/impl/InputStreamVolumeManager.java b/src/main/java/com/github/junrar/impl/InputStreamVolumeManager.java
index 0174112e7..996a42960 100644
--- a/src/main/java/com/github/junrar/impl/InputStreamVolumeManager.java
+++ b/src/main/java/com/github/junrar/impl/InputStreamVolumeManager.java
@@ -1,12 +1,11 @@
 package com.github.junrar.impl;
 
-import java.io.IOException;
-import java.io.InputStream;
-
 import com.github.junrar.Archive;
 import com.github.junrar.Volume;
 import com.github.junrar.VolumeManager;
 
+import java.io.InputStream;
+
 public class InputStreamVolumeManager implements VolumeManager {
 
     private final InputStream is;
@@ -16,7 +15,7 @@ public InputStreamVolumeManager(final InputStream is) {
     }
 
     @Override
-    public Volume nextArchive(final Archive archive, final Volume lastVolume) throws IOException {
+    public Volume nextArchive(final Archive archive, final Volume lastVolume) {
         return new InputStreamVolume(archive, this.is);
     }
 
diff --git a/src/main/java/com/github/junrar/rarfile/BaseBlock.java b/src/main/java/com/github/junrar/rarfile/BaseBlock.java
index c27730b14..8ef46859f 100644
--- a/src/main/java/com/github/junrar/rarfile/BaseBlock.java
+++ b/src/main/java/com/github/junrar/rarfile/BaseBlock.java
@@ -19,8 +19,8 @@
 package com.github.junrar.rarfile;
 
 import com.github.junrar.io.Raw;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 
@@ -32,7 +32,7 @@
  */
 public class BaseBlock {
 
-    private static final Log logger = LogFactory.getLog(BaseBlock.class);
+    private static final Logger logger = LoggerFactory.getLogger(BaseBlock.class);
 
     public static final short BaseBlockSize = 7;
 
diff --git a/src/main/java/com/github/junrar/rarfile/BlockHeader.java b/src/main/java/com/github/junrar/rarfile/BlockHeader.java
index f3a66725b..db0571b3f 100644
--- a/src/main/java/com/github/junrar/rarfile/BlockHeader.java
+++ b/src/main/java/com/github/junrar/rarfile/BlockHeader.java
@@ -18,10 +18,9 @@
  */
 package com.github.junrar.rarfile;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
 import com.github.junrar.io.Raw;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 /**
@@ -33,7 +32,7 @@
 public class BlockHeader extends BaseBlock {
     public static final short blockHeaderSize = 4;
 
-    private static final Log logger = LogFactory.getLog(BlockHeader.class);
+    private static final Logger logger = LoggerFactory.getLogger(BlockHeader.class);
 
     private long dataSize;
     private long packSize;
diff --git a/src/main/java/com/github/junrar/rarfile/EAHeader.java b/src/main/java/com/github/junrar/rarfile/EAHeader.java
index 40c03bb29..9e730b461 100644
--- a/src/main/java/com/github/junrar/rarfile/EAHeader.java
+++ b/src/main/java/com/github/junrar/rarfile/EAHeader.java
@@ -18,10 +18,9 @@
  */
 package com.github.junrar.rarfile;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
 import com.github.junrar.io.Raw;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 /**
@@ -29,7 +28,7 @@
  *
  */
 public class EAHeader extends SubBlockHeader {
-    private static final Log logger = LogFactory.getLog(EAHeader.class);
+    private static final Logger logger = LoggerFactory.getLogger(EAHeader.class);
 
     public static final short EAHeaderSize = 10;
 
diff --git a/src/main/java/com/github/junrar/rarfile/FileHeader.java b/src/main/java/com/github/junrar/rarfile/FileHeader.java
index a5e3ad7ae..0a750cace 100644
--- a/src/main/java/com/github/junrar/rarfile/FileHeader.java
+++ b/src/main/java/com/github/junrar/rarfile/FileHeader.java
@@ -19,8 +19,8 @@
 package com.github.junrar.rarfile;
 
 import com.github.junrar.io.Raw;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.util.Calendar;
 import java.util.Date;
@@ -34,7 +34,7 @@
  */
 public class FileHeader extends BlockHeader {
 
-    private static final Log logger = LogFactory.getLog(FileHeader.class);
+    private static final Logger logger = LoggerFactory.getLogger(FileHeader.class);
 
     private static final byte SALT_SIZE = 8;
 
diff --git a/src/main/java/com/github/junrar/rarfile/MacInfoHeader.java b/src/main/java/com/github/junrar/rarfile/MacInfoHeader.java
index 96971b796..d025566dc 100644
--- a/src/main/java/com/github/junrar/rarfile/MacInfoHeader.java
+++ b/src/main/java/com/github/junrar/rarfile/MacInfoHeader.java
@@ -18,10 +18,9 @@
  */
 package com.github.junrar.rarfile;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
 import com.github.junrar.io.Raw;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 /**
@@ -29,7 +28,7 @@
  *
  */
 public class MacInfoHeader extends SubBlockHeader {
-    private static final Log logger = LogFactory.getLog(MacInfoHeader.class);
+    private static final Logger logger = LoggerFactory.getLogger(MacInfoHeader.class);
 
     public static final short MacInfoHeaderSize = 8;
 
diff --git a/src/main/java/com/github/junrar/rarfile/MainHeader.java b/src/main/java/com/github/junrar/rarfile/MainHeader.java
index dc579f415..8a9dad3f2 100644
--- a/src/main/java/com/github/junrar/rarfile/MainHeader.java
+++ b/src/main/java/com/github/junrar/rarfile/MainHeader.java
@@ -19,8 +19,8 @@
 package com.github.junrar.rarfile;
 
 import com.github.junrar.io.Raw;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 /**
@@ -30,7 +30,7 @@
  * @version $LastChangedRevision$
  */
 public class MainHeader extends BaseBlock {
-    private static final Log logger = LogFactory.getLog(MainHeader.class);
+    private static final Logger logger = LoggerFactory.getLogger(MainHeader.class);
     public static final short mainHeaderSizeWithEnc = 7;
     public static final short mainHeaderSize = 6;
     private short highPosAv;
diff --git a/src/main/java/com/github/junrar/rarfile/MarkHeader.java b/src/main/java/com/github/junrar/rarfile/MarkHeader.java
index 5e2d3b49e..0c82a4e57 100644
--- a/src/main/java/com/github/junrar/rarfile/MarkHeader.java
+++ b/src/main/java/com/github/junrar/rarfile/MarkHeader.java
@@ -18,10 +18,9 @@
  */
 package com.github.junrar.rarfile;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
 import com.github.junrar.io.Raw;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 /**
@@ -32,7 +31,7 @@
  */
 public class MarkHeader extends BaseBlock {
 
-    private Log logger = LogFactory.getLog(MarkHeader.class.getName());
+    private Logger logger = LoggerFactory.getLogger(MarkHeader.class.getName());
 
     private RARVersion version;
 
diff --git a/src/main/java/com/github/junrar/rarfile/SubBlockHeader.java b/src/main/java/com/github/junrar/rarfile/SubBlockHeader.java
index b7935ad14..b8f65062f 100644
--- a/src/main/java/com/github/junrar/rarfile/SubBlockHeader.java
+++ b/src/main/java/com/github/junrar/rarfile/SubBlockHeader.java
@@ -18,14 +18,13 @@
  */
 package com.github.junrar.rarfile;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
 import com.github.junrar.io.Raw;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 public class SubBlockHeader extends BlockHeader {
-    private static final Log logger = LogFactory.getLog(SubBlockHeader.class);
+    private static final Logger logger = LoggerFactory.getLogger(SubBlockHeader.class);
 
     public static final short SubBlockHeaderSize = 3;
 
diff --git a/src/main/java/com/github/junrar/rarfile/UnixOwnersHeader.java b/src/main/java/com/github/junrar/rarfile/UnixOwnersHeader.java
index 9df76816f..bf7e14ab6 100644
--- a/src/main/java/com/github/junrar/rarfile/UnixOwnersHeader.java
+++ b/src/main/java/com/github/junrar/rarfile/UnixOwnersHeader.java
@@ -1,12 +1,12 @@
 package com.github.junrar.rarfile;
 
 import com.github.junrar.io.Raw;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 public class UnixOwnersHeader extends SubBlockHeader {
-    private static final Log logger = LogFactory.getLog(UnixOwnersHeader.class);
+    private static final Logger logger = LoggerFactory.getLogger(UnixOwnersHeader.class);
     private int ownerNameSize;
     private int groupNameSize;
     private String owner;
diff --git a/src/main/java/com/github/junrar/testutil/ExtractArchive.java b/src/main/java/com/github/junrar/testutil/ExtractArchive.java
deleted file mode 100644
index cc9e85d4f..000000000
--- a/src/main/java/com/github/junrar/testutil/ExtractArchive.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package com.github.junrar.testutil;
-
-import java.io.IOException;
-
-import com.github.junrar.Junrar;
-import com.github.junrar.exception.RarException;
-
-/**
- * extract an archive to the given location
- *
- * @author edmund wagner
- *
- */
-public class ExtractArchive {
-
-    public static void main(String[] args) throws IOException, RarException {
-        if (args.length == 2) {
-            extractArchive(args[0], args[1]);
-        } else {
-            System.out.println("usage: java -jar extractArchive.jar <thearchive> <the destination directory>");
-        }
-    }
-
-    /**
-     * @deprecated  As of release 1.0.2, replaced by { @link #Junrar.extract(final String rarPath, final String destinationPath) }
-     *
-     * @param archive rar file path
-     * @param destination folder where the files will be extracted
-     *
-     * @throws IOException .
-     * @throws RarException .
-     */
-    @Deprecated
-    public static void extractArchive(String archive, String destination) throws IOException, RarException {
-        Junrar.extract(archive, destination);
-    }
-}
diff --git a/src/main/java/com/github/junrar/unpack/ComprDataIO.java b/src/main/java/com/github/junrar/unpack/ComprDataIO.java
index 697b28f0b..2071c3a8c 100644
--- a/src/main/java/com/github/junrar/unpack/ComprDataIO.java
+++ b/src/main/java/com/github/junrar/unpack/ComprDataIO.java
@@ -17,20 +17,20 @@
  */
 package com.github.junrar.unpack;
 
-import java.io.EOFException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-
 import com.github.junrar.Archive;
 import com.github.junrar.UnrarCallback;
 import com.github.junrar.Volume;
 import com.github.junrar.crc.RarCRC;
+import com.github.junrar.exception.CrcErrorException;
 import com.github.junrar.exception.RarException;
-import com.github.junrar.exception.RarException.RarExceptionType;
 import com.github.junrar.io.ReadOnlyAccessInputStream;
 import com.github.junrar.rarfile.FileHeader;
 
+import java.io.EOFException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
 
 /**
  * DOCUMENT ME
@@ -144,7 +144,7 @@ public int unpRead(byte[] addr, int offset, int count) throws IOException,
                 FileHeader hd = this.getSubHeader();
                 if (hd.getUnpVersion() >= 20 && hd.getFileCRC() != 0xffffffff
                         && this.getPackedCRC() != ~hd.getFileCRC()) {
-                    throw new RarException(RarExceptionType.crcError);
+                    throw new CrcErrorException();
                 }
                 UnrarCallback callback = archive.getUnrarCallback();
                 if ((callback != null)
diff --git a/src/test/java/com/github/junrar/AbnormalFilesTest.java b/src/test/java/com/github/junrar/AbnormalFilesTest.java
index 6c73a7e0c..22c678991 100644
--- a/src/test/java/com/github/junrar/AbnormalFilesTest.java
+++ b/src/test/java/com/github/junrar/AbnormalFilesTest.java
@@ -1,5 +1,7 @@
 package com.github.junrar;
 
+import com.github.junrar.exception.CorruptHeaderException;
+import com.github.junrar.exception.MainHeaderNullException;
 import com.github.junrar.exception.RarException;
 import org.apache.commons.io.FileUtils;
 import org.junit.jupiter.api.AfterEach;
@@ -34,18 +36,31 @@ public void cleanupTempDir() throws IOException {
 
     @ParameterizedTest
     @MethodSource("provideFilesAndExpectedExceptionType")
-    public void extractFile(Map.Entry<String, RarException.RarExceptionType> fileAndResult) throws Exception {
+    public void extractFile(Map.Entry<String, Class<?>> fileAndResult) throws Exception {
+        File file = new File(getClass().getResource(fileAndResult.getKey()).toURI());
+
+        Throwable thrown = catchThrowable(() -> Junrar.extract(file, tempDir));
+
+        assertThat(thrown).isInstanceOf(RarException.class);
+        assertThat(thrown).isExactlyInstanceOf(fileAndResult.getValue());
+    }
+
+    @ParameterizedTest
+    @MethodSource("provideFilesAndExpectedExceptionType")
+    public void extractFromStream(Map.Entry<String, Class<?>> fileAndResult) throws Exception {
         try (InputStream stream = getClass().getResourceAsStream(fileAndResult.getKey())) {
             Throwable thrown = catchThrowable(() -> Junrar.extract(stream, tempDir));
+
             assertThat(thrown).isInstanceOf(RarException.class);
-            assertThat(((RarException) thrown).getType()).isEqualTo(fileAndResult.getValue());
+            assertThat(thrown).isExactlyInstanceOf(fileAndResult.getValue());
         }
     }
 
-    private static Stream<Map.Entry<String, RarException.RarExceptionType>> provideFilesAndExpectedExceptionType() {
-        Map<String, RarException.RarExceptionType> map = new HashMap<>();
+    private static Stream<Map.Entry<String, Class<?>>> provideFilesAndExpectedExceptionType() {
+        Map<String, Class<?>> map = new HashMap<>();
 
-        map.put("abnormal/corrupt-header.rar", RarException.RarExceptionType.corruptHeader);
+        map.put("abnormal/corrupt-header.rar", CorruptHeaderException.class);
+        map.put("abnormal/mainHeaderNull.rar", MainHeaderNullException.class);
 
         return map.entrySet().stream();
     }
diff --git a/src/test/java/com/github/junrar/testUtil/SimpleTest.java b/src/test/java/com/github/junrar/ArchiveTest.java
similarity index 60%
rename from src/test/java/com/github/junrar/testUtil/SimpleTest.java
rename to src/test/java/com/github/junrar/ArchiveTest.java
index 4de2e003b..c9d219cae 100644
--- a/src/test/java/com/github/junrar/testUtil/SimpleTest.java
+++ b/src/test/java/com/github/junrar/ArchiveTest.java
@@ -14,26 +14,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.github.junrar.testUtil;
+package com.github.junrar;
 
-import com.github.junrar.Archive;
-import com.github.junrar.Junrar;
-import com.github.junrar.TestCommons;
-import com.github.junrar.exception.RarException;
 import com.github.junrar.impl.FileVolumeManager;
 import com.github.junrar.rarfile.FileHeader;
 import org.junit.jupiter.api.Test;
 
 import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URISyntaxException;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.catchThrowable;
 
 
-public class SimpleTest {
+public class ArchiveTest {
 
     @Test
     public void testTikaDocs() throws Exception {
@@ -48,7 +40,7 @@ public void testTikaDocs() throws Exception {
             "testXML.xml", "766"};
 
 
-        File f = new File(getClass().getResource("test-documents.rar").toURI());
+        File f = new File(getClass().getResource("tika-documents.rar").toURI());
         try (Archive archive = new Archive(new FileVolumeManager(f))) {
             FileHeader fileHeader = archive.nextFileHeader();
             int i = 0;
@@ -59,26 +51,4 @@ public void testTikaDocs() throws Exception {
             }
         }
     }
-
-    @Test
-    public void nullMainHeaderFile_throwsRarException() throws URISyntaxException, IOException {
-        final File tempDir = TestCommons.createTempDir();
-        final File f = new File(getClass().getResource("test-mainHeaderNull.rar").toURI());
-
-        Throwable thrown = catchThrowable(() -> Junrar.extract(f, tempDir));
-
-        assertThat(thrown).isInstanceOf(RarException.class);
-    }
-
-    @Test
-    public void nullMainHeaderInputStream_throwsRarException() throws IOException {
-        final File tempDir = TestCommons.createTempDir();
-        InputStream stream = getClass().getResource("test-mainHeaderNull.rar").openStream();
-
-        Throwable thrown = catchThrowable(() -> Junrar.extract(stream, tempDir));
-
-        assertThat(thrown).isInstanceOf(RarException.class);
-
-        stream.close();
-    }
 }
diff --git a/src/test/java/com/github/junrar/JunrarTest.java b/src/test/java/com/github/junrar/JunrarTest.java
index 0da816e7b..d22518ad9 100644
--- a/src/test/java/com/github/junrar/JunrarTest.java
+++ b/src/test/java/com/github/junrar/JunrarTest.java
@@ -2,7 +2,6 @@
 
 import com.github.junrar.exception.RarException;
 import com.github.junrar.impl.FileVolumeManager;
-import com.github.junrar.testUtil.JUnRarTestUtil;
 import org.apache.commons.io.FileUtils;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
@@ -11,6 +10,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.Charset;
 import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -36,7 +36,7 @@ public void extractionFromFileHappyDay() throws RarException, IOException {
         Junrar.extract(rarFileOnTemp, tempFolder);
 
         final File fooDir = new File(tempFolder, "foo");
-        String barFileContent = FileUtils.readFileToString(new File(fooDir, "bar.txt"));
+        String barFileContent = FileUtils.readFileToString(new File(fooDir, "bar.txt"), Charset.defaultCharset());
 
         assertThat(fooDir).exists();
         assertThat(barFileContent).isEqualTo("baz\n");
@@ -63,7 +63,7 @@ public void extractionFromFileWithVolumeManagerAndExtractorHappyDay() throws Rar
         Junrar.extract(new LocalFolderExtractor(tempFolder), new FileVolumeManager(rarFileOnTemp));
 
         final File fooDir = new File(tempFolder, "foo");
-        String barFileContent = FileUtils.readFileToString(new File(fooDir, "bar.txt"));
+        String barFileContent = FileUtils.readFileToString(new File(fooDir, "bar.txt"), Charset.defaultCharset());
 
         assertThat(fooDir).exists();
         assertThat(barFileContent).isEqualTo("baz\n");
@@ -71,11 +71,11 @@ public void extractionFromFileWithVolumeManagerAndExtractorHappyDay() throws Rar
 
     @Test
     public void extractionFromStreamHappyDay() throws IOException, RarException {
-        final InputStream resourceAsStream = JUnRarTestUtil.class.getResourceAsStream(TestCommons.SIMPLE_RAR_RESOURCE_PATH);
+        final InputStream resourceAsStream = JunrarTest.class.getResourceAsStream(TestCommons.SIMPLE_RAR_RESOURCE_PATH);
         Junrar.extract(resourceAsStream, tempFolder);
 
         final File fooDir = new File(tempFolder, "foo");
-        String barFileContent = FileUtils.readFileToString(new File(fooDir, "bar.txt"));
+        String barFileContent = FileUtils.readFileToString(new File(fooDir, "bar.txt"), Charset.defaultCharset());
 
         assertThat(fooDir).exists();
         assertThat(barFileContent).isEqualTo("baz\n");
@@ -83,19 +83,19 @@ public void extractionFromStreamHappyDay() throws IOException, RarException {
 
     @Test
     public void listContents() throws IOException, RarException {
-        final File testDocuments = TestCommons.writeResourceToFolder(tempFolder, "test-documents.rar");
+        final File testDocuments = TestCommons.writeResourceToFolder(tempFolder, "tika-documents.rar");
         final List<ContentDescription> contentDescriptions = Junrar.getContentsDescription(testDocuments);
 
         final ContentDescription[] expected = {
-            c("test-documents\\testEXCEL.xls", 13824),
-            c("test-documents\\testHTML.html", 167),
-            c("test-documents\\testOpenOffice2.odt", 26448),
-            c("test-documents\\testPDF.pdf", 34824),
-            c("test-documents\\testPPT.ppt", 16384),
-            c("test-documents\\testRTF.rtf", 3410),
-            c("test-documents\\testTXT.txt", 49),
-            c("test-documents\\testWORD.doc", 19456),
-            c("test-documents\\testXML.xml", 766)
+            new ContentDescription("test-documents\\testEXCEL.xls", 13824),
+            new ContentDescription("test-documents\\testHTML.html", 167),
+            new ContentDescription("test-documents\\testOpenOffice2.odt", 26448),
+            new ContentDescription("test-documents\\testPDF.pdf", 34824),
+            new ContentDescription("test-documents\\testPPT.ppt", 16384),
+            new ContentDescription("test-documents\\testRTF.rtf", 3410),
+            new ContentDescription("test-documents\\testTXT.txt", 49),
+            new ContentDescription("test-documents\\testWORD.doc", 19456),
+            new ContentDescription("test-documents\\testXML.xml", 766)
         };
 
         assertThat(contentDescriptions.toArray()).isEqualTo(expected);
@@ -121,7 +121,4 @@ public void ifIsFileInsteadOfDir_ThrowException() throws IOException {
             .hasMessageContaining("the destination must exist and point to a directory: " + rarFileOnTemp.getAbsolutePath());
     }
 
-    private static ContentDescription c(final String name, final long size) {
-        return new ContentDescription(name, size);
-    }
 }
diff --git a/src/test/java/com/github/junrar/RarVersionTest.java b/src/test/java/com/github/junrar/RarVersionTest.java
index fdd120565..6abb2b111 100644
--- a/src/test/java/com/github/junrar/RarVersionTest.java
+++ b/src/test/java/com/github/junrar/RarVersionTest.java
@@ -1,6 +1,7 @@
 package com.github.junrar;
 
 import com.github.junrar.exception.RarException;
+import com.github.junrar.exception.UnsupportedRarV5Exception;
 import org.apache.commons.io.FileUtils;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
@@ -47,7 +48,7 @@ public void extractRarV5() throws Exception {
         try (InputStream stream = getClass().getResourceAsStream("rar5.rar")) {
             Throwable thrown = catchThrowable(() -> Junrar.extract(stream, tempDir));
             assertThat(thrown).isInstanceOf(RarException.class);
-            assertThat(((RarException) thrown).getType()).isEqualTo(RarException.RarExceptionType.unsupportedRarArchive);
+            assertThat(thrown).isExactlyInstanceOf(UnsupportedRarV5Exception.class);
         }
     }
 }
diff --git a/src/test/java/com/github/junrar/ResourceReleasedTest.java b/src/test/java/com/github/junrar/ResourceReleasedTest.java
index 0b9fb22b0..6df0ad86f 100644
--- a/src/test/java/com/github/junrar/ResourceReleasedTest.java
+++ b/src/test/java/com/github/junrar/ResourceReleasedTest.java
@@ -84,14 +84,8 @@ public void extractRar4FromFile() throws IOException, RarException {
 
     @Test
     public void extractRar4FromInputStream() throws IOException, RarException {
-        InputStream input = null;
-        try {
-            input = new FileInputStream(rar4TestFile);
+        try (InputStream input = new FileInputStream(rar4TestFile)) {
             Junrar.extract(input, extractDir);
-        } finally {
-            if (input != null) {
-                input.close();
-            }
         }
     }
 
diff --git a/src/test/java/com/github/junrar/TestCommons.java b/src/test/java/com/github/junrar/TestCommons.java
index 1290d7305..82f9177ce 100644
--- a/src/test/java/com/github/junrar/TestCommons.java
+++ b/src/test/java/com/github/junrar/TestCommons.java
@@ -1,6 +1,5 @@
 package com.github.junrar;
 
-import com.github.junrar.testUtil.JUnRarTestUtil;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
 
@@ -26,7 +25,7 @@ public static File writeTestRarToFolder(File tmp) throws IOException {
     }
 
     public static File writeResourceToFolder(File destination, String resourcePath) throws IOException {
-        InputStream resourceAsStream = JUnRarTestUtil.class.getResourceAsStream(resourcePath);
+        InputStream resourceAsStream = TestCommons.class.getResourceAsStream(resourcePath);
         File testRar = new File(destination, resourcePath);
         FileUtils.writeByteArrayToFile(testRar, IOUtils.toByteArray(resourceAsStream));
         return testRar;
diff --git a/src/test/java/com/github/junrar/testUtil/JUnRarTestUtil.java b/src/test/java/com/github/junrar/testUtil/JUnRarTestUtil.java
deleted file mode 100644
index b5d25fcd3..000000000
--- a/src/test/java/com/github/junrar/testUtil/JUnRarTestUtil.java
+++ /dev/null
@@ -1,260 +0,0 @@
-/*
- * Copyright (c) 2007 innoSysTec (R) GmbH, Germany. All rights reserved.
- * Original author: EW
- * Creation date: 26.09.2007
- *
- * Source: $HeadURL$
- * Last changed: $LastChangedDate$
- *
- *
- * the unrar licence applies to all junrar source and binary distributions
- * you are not allowed to use this source to re-create the RAR compression algorithm
- *
- * Here some html entities which can be used for escaping javadoc tags:
- * "&":  "&#038;" or "&amp;"
- * "<":  "&#060;" or "&lt;"
- * ">":  "&#062;" or "&gt;"
- * "@":  "&#064;"
- */
-package com.github.junrar.testUtil;
-
-import com.github.junrar.Archive;
-import com.github.junrar.TestCommons;
-import com.github.junrar.exception.RarException;
-import com.github.junrar.exception.RarException.RarExceptionType;
-import com.github.junrar.impl.FileVolumeManager;
-import com.github.junrar.io.ReadOnlyAccessFile;
-import com.github.junrar.rarfile.FileHeader;
-import com.github.junrar.testutil.ExtractArchive;
-import org.apache.commons.io.FileUtils;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.junit.jupiter.api.AfterAll;
-import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Test;
-
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.fail;
-
-
-/**
- * DOCUMENT ME
- *
- * @author $LastChangedBy$
- * @version $LastChangedRevision$
- */
-public class JUnRarTestUtil {
-
-    private static final Log logger = LogFactory.getLog(JUnRarTestUtil.class);
-
-    /**
-     * @param args
-     */
-    private static List<String> successfulFiles = new ArrayList<String>();
-
-    private static List<String> errorFiles = new ArrayList<String>();
-
-    private static List<String> unsupportedFiles = new ArrayList<String>();
-
-    private static File tempFolder;
-    private static boolean errorsOcurred;
-
-    public static void main(String[] args) {
-        if (args.length != 1) {
-            System.out.println("JUnRar TestUtil\n usage: java -jar unrar-test.jar <directory with test files>");
-            return;
-        } else {
-            File file = new File(args[0]);
-            if (file.exists()) {
-                if (file.isDirectory()) {
-                    recurseDirectory(file);
-                } else {
-                    testFile(file);
-                }
-            }
-        }
-        printSummary();
-
-    }
-
-    @BeforeAll
-    public static void setupFunctionalTests() throws IOException {
-        tempFolder = TestCommons.createTempDir();
-    }
-
-    @Test
-    public void unrarFile_FileContentsShouldMatchExpected() throws IOException, RarException {
-        File testRar = TestCommons.writeTestRarToFolder(tempFolder);
-
-        String[] args = new String[] {tempFolder.getAbsolutePath()};
-
-        JUnRarTestUtil.errorsOcurred = false;
-
-        ExtractArchive.main(new String[] {testRar.getAbsolutePath(), tempFolder.getAbsolutePath()});
-        JUnRarTestUtil.main(args);
-
-        File fooDir = new File(tempFolder, "foo");
-        assertThat(fooDir).exists();
-
-        File barFile = new File(fooDir, "bar.txt");
-        assertThat(barFile).exists();
-
-        String barTxtContents = FileUtils.readFileToString(barFile);
-        assertThat(barTxtContents).isEqualTo("baz\n");
-
-        if (errorsOcurred) {
-            fail("Test failed, see output for details...");
-        }
-    }
-
-    @AfterAll
-    public static void tearDownFunctionalTests() throws IOException {
-        FileUtils.deleteDirectory(tempFolder);
-    }
-
-    private static void printSummary() {
-        System.out.println("\n\n\nSuccessfully tested archives:\n");
-        for (String sf : successfulFiles) {
-            System.out.println(sf);
-        }
-        System.out.println("");
-        System.out.println("Unsupported archives:\n");
-        for (String uf : unsupportedFiles) {
-            System.out.println(uf);
-        }
-        System.out.println("");
-        System.out.println("Failed archives:");
-        for (String ff : errorFiles) {
-            System.out.println(ff);
-        }
-        System.out.println("");
-        System.out.println("\n\n\nSummary\n");
-        System.out.println("tested:\t\t" + (successfulFiles.size() + unsupportedFiles.size() + errorFiles.size()));
-        System.out.println("successful:\t" + successfulFiles.size());
-        System.out.println("unsupported:\t" + unsupportedFiles.size());
-        System.out.println("failed:\t\t" + errorFiles.size());
-    }
-
-    private static void testFile(File file) {
-        if (file == null || !file.exists()) {
-            String errorMessage = "error file " + file + " does not exist";
-            error(errorMessage);
-            return;
-        }
-        logger.info(">>>>>> testing archive: " + file);
-        String s = file.toString();
-        s = s.substring(s.length() - 3);
-        if (s.equalsIgnoreCase("rar")) {
-            System.out.println(file.toString());
-            ReadOnlyAccessFile readFile = null;
-            Archive arc = null;
-            try {
-//              readFile = new ReadOnlyAccessFile(file);
-                try {
-                    arc = new Archive(new FileVolumeManager(file));
-                } catch (RarException e) {
-                    error("archive consturctor error", e);
-                    errorFiles.add(file.toString());
-                    return;
-                }
-                if (arc != null) {
-                    if (arc.isEncrypted()) {
-                        logger.warn("archive is encrypted cannot extreact");
-                        unsupportedFiles.add(file.toString());
-                        arc.close();
-                        return;
-                    }
-                    List<FileHeader> files = arc.getFileHeaders();
-                    for (FileHeader fh : files) {
-                        if (fh.isEncrypted()) {
-                            logger.warn("file is encrypted cannot extract: " + fh.getFileNameString());
-                            unsupportedFiles.add(file.toString());
-                            arc.close();
-                            return;
-                        }
-                        logger.info("extracting file: " + fh.getFileNameString());
-                        if (fh.isFileHeader() && fh.isUnicode()) {
-                            logger.info("unicode name: " + fh.getFileNameW());
-                        }
-                        logger.info("start: " + new Date());
-
-                        ByteArrayOutputStream os = new ByteArrayOutputStream();
-
-
-                        try {
-                            arc.extractFile(fh, os);
-                        } catch (RarException e) {
-                            if (e.getType().equals(RarExceptionType.notImplementedYet)) {
-                                error("error extracting unsupported file: " + fh.getFileNameString(), e);
-                                unsupportedFiles.add(file.toString());
-                                return;
-                            }
-                            error("error extracting file: " + fh.getFileNameString(), e);
-                            errorFiles.add(file.toString());
-                            arc.close();
-                            return;
-                        } finally {
-                            os.close();
-                        }
-
-                        logger.info("end: " + new Date());
-                    }
-                }
-                arc.close();
-                logger.info("successfully tested archive: " + file);
-                successfulFiles.add(file.toString());
-            } catch (Exception e) {
-                error("file: " + file + " extraction error - does the file exist?" + e);
-                errorFiles.add(file.toString());
-            } finally {
-                if (readFile != null) {
-                    try {
-                        readFile.close();
-                    } catch (IOException e) {
-                        e.printStackTrace();
-                    }
-                }
-            }
-
-        }
-    }
-
-    private static void error(String errorMessage, Exception e) {
-        JUnRarTestUtil.errorsOcurred = true;
-        logger.error(errorMessage, e);
-    }
-
-    private static void error(String errorMessage) {
-        JUnRarTestUtil.errorsOcurred = true;
-        logger.error(errorMessage);
-    }
-
-    private static void recurseDirectory(File file) {
-        if (file == null || !file.exists()) {
-            return;
-        }
-        if (file.isDirectory()) {
-            File[] files = file.listFiles();
-            if (files == null) {
-                return;
-            }
-            for (File f : files) {
-                recurseDirectory(f);
-                f = null;
-            }
-        } else {
-            testFile(file);
-            file = null;
-        }
-
-    }
-
-
-}
diff --git a/src/test/resources/com/github/junrar/testUtil/test-mainHeaderNull.rar b/src/test/resources/com/github/junrar/abnormal/mainHeaderNull.rar
similarity index 100%
rename from src/test/resources/com/github/junrar/testUtil/test-mainHeaderNull.rar
rename to src/test/resources/com/github/junrar/abnormal/mainHeaderNull.rar
diff --git a/src/test/resources/com/github/junrar/testUtil/test.rar b/src/test/resources/com/github/junrar/test.rar
similarity index 100%
rename from src/test/resources/com/github/junrar/testUtil/test.rar
rename to src/test/resources/com/github/junrar/test.rar
diff --git a/src/test/resources/com/github/junrar/testUtil/test-documents.rar b/src/test/resources/com/github/junrar/tika-documents.rar
similarity index 100%
rename from src/test/resources/com/github/junrar/testUtil/test-documents.rar
rename to src/test/resources/com/github/junrar/tika-documents.rar