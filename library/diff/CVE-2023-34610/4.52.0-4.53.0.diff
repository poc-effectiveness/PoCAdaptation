diff --git a/README.md b/README.md
index d6faa8ef..77389333 100644
--- a/README.md
+++ b/README.md
@@ -10,7 +10,7 @@ Key Features:
 - Supports polymorphic types and complex object graphs
 - Zero external dependencies (other than java-util)
 - Fully compatible with both JPMS and OSGi environments
-- Lightweight (`json-io.jar` is 255K, `java-util` is 450K)
+- Lightweight (`json-io.jar` is 255K, `java-util` is 452K)
 - Compatible with JDK 1.8 through JDK 23
 - Extensive configuration options via `ReadOptionsBuilder` and `WriteOptionsBuilder`
 - Featured on [json.org](http://json.org)
@@ -31,7 +31,7 @@ ___
 To include in your project:
 ##### Gradle
 ```groovy
-implementation 'com.cedarsoftware:json-io:4.52.0'
+implementation 'com.cedarsoftware:json-io:4.53.0'
 ```
 
 ##### Maven
@@ -39,7 +39,7 @@ implementation 'com.cedarsoftware:json-io:4.52.0'
  <dependency>
    <groupId>com.cedarsoftware</groupId>
    <artifactId>json-io</artifactId>
-   <version>4.52.0</version>
+   <version>4.53.0</version>
  </dependency>
 ```
 ___
@@ -51,18 +51,18 @@ ___
 >#### [Revision History](/changelog.md)
 
 ## Releases
->### 4.52.0 (current)
->- [ ] **Version**: [4.52.0](https://www.javadoc.io/doc/com.cedarsoftware/json-io/4.52.0/index.html)
+>### 4.53.0 (current)
+>- [ ] **Version**: [4.53.0](https://www.javadoc.io/doc/com.cedarsoftware/json-io/4.53.0/index.html)
 >- [ ] **Bundling**: Both JPMS (Java Platform Module System) and OSGi (Open Service Gateway initiative)
 >- [ ] **Maintained**: Fully
 >- [ ] **Java Package**: com.cedarsoftware.io
 >- [ ] **Java**: JDK1.8+ (Class file 52 format, includes module-info.class - multi-release JAR)
 >- [ ] **API**
->  - Static methods on [JsonIo](https://www.javadoc.io/doc/com.cedarsoftware/json-io/4.52.0/com/cedarsoftware/io/JsonIo.html): [toJson()](https://www.javadoc.io/static/com.cedarsoftware/json-io/4.52.0/com/cedarsoftware/io/JsonIo.html#toJson(java.lang.Object,com.cedarsoftware.io.WriteOptions)), [toJava()](https://www.javadoc.io/doc/com.cedarsoftware/json-io/latest/com/cedarsoftware/io/JsonIo.html#toJava(com.cedarsoftware.io.JsonObject,com.cedarsoftware.io.ReadOptions)), [formatJson()](https://www.javadoc.io/static/com.cedarsoftware/json-io/4.52.0/com/cedarsoftware/io/JsonIo.html#formatJson(java.lang.String)), [deepCopy()](https://www.javadoc.io/static/com.cedarsoftware/json-io/4.52.0/com/cedarsoftware/io/JsonIo.html#deepCopy(java.lang.Object,com.cedarsoftware.io.ReadOptions,com.cedarsoftware.io.WriteOptions))
+>  - Static methods on [JsonIo](https://www.javadoc.io/doc/com.cedarsoftware/json-io/4.53.0/com/cedarsoftware/io/JsonIo.html): [toJson()](https://www.javadoc.io/static/com.cedarsoftware/json-io/4.53.0/com/cedarsoftware/io/JsonIo.html#toJson(java.lang.Object,com.cedarsoftware.io.WriteOptions)), [toJava()](https://www.javadoc.io/doc/com.cedarsoftware/json-io/latest/com/cedarsoftware/io/JsonIo.html#toJava(com.cedarsoftware.io.JsonObject,com.cedarsoftware.io.ReadOptions)), [formatJson()](https://www.javadoc.io/static/com.cedarsoftware/json-io/4.53.0/com/cedarsoftware/io/JsonIo.html#formatJson(java.lang.String)), [deepCopy()](https://www.javadoc.io/static/com.cedarsoftware/json-io/4.53.0/com/cedarsoftware/io/JsonIo.html#deepCopy(java.lang.Object,com.cedarsoftware.io.ReadOptions,com.cedarsoftware.io.WriteOptions))
 >  - Use [ReadOptionsBuilder](/user-guide-readOptions.md) and [WriteOptionsBuilder](/user-guide-writeOptions.md) to configure `JsonIo`
->  - Use [JsonReader.ClassFactory](https://www.javadoc.io/static/com.cedarsoftware/json-io/4.52.0/com/cedarsoftware/io/JsonReader.ClassFactory.html) for difficult classes (hard to instantiate & fill)
->  - Use [JsonWriter.JsonClassWriter](https://www.javadoc.io/static/com.cedarsoftware/json-io/4.52.0/com/cedarsoftware/io/JsonWriter.JsonClassWriter.html) to customize the output JSON for a particular class
->- [ ] Updates will be 4.53.0, 4.54.0, ...
+>  - Use [JsonReader.ClassFactory](https://www.javadoc.io/static/com.cedarsoftware/json-io/4.53.0/com/cedarsoftware/io/JsonReader.ClassFactory.html) for difficult classes (hard to instantiate & fill)
+>  - Use [JsonWriter.JsonClassWriter](https://www.javadoc.io/static/com.cedarsoftware/json-io/4.53.0/com/cedarsoftware/io/JsonWriter.JsonClassWriter.html) to customize the output JSON for a particular class
+>- [ ] Updates will be 4.54.0, 4.55.0, ...
 >### 4.14.x (supported)
 >- [ ] **Version**: [4.14.3](https://www.javadoc.io/doc/com.cedarsoftware/json-io/4.14.3/index.html)
 >- [ ] **Bundling**: Both JPMS (Java Platform Module System) and OSGi (Open Service Gateway initiative)
diff --git a/changelog.md b/changelog.md
index 6c326874..faee0eea 100644
--- a/changelog.md
+++ b/changelog.md
@@ -1,4 +1,8 @@
 ### Revision History
+#### 4.53.0 Updated to use java-util 3.3.1
+* Updated [java-util](https://github.com/jdereg/java-util/blob/master/changelog.md) from `3.3.0` to `3.3.1.`
+* Removed unused ClassFactories.
+* Added `ReadOptions/WriteOptions` ability to specify `notCustmoRead/Written` classes in `notCustomRead.txt` and `notCustomWritten.txt`
 #### 4.52.0 CompactMap and CompactSet Enhancements
 * `CompactMap` and `CompactSet` JSON formats improved - match historical formats, except when using builder pattern.
 * `ByteBuffer and CharBuffer` converstions to/from `Map` added.
diff --git a/pom.xml b/pom.xml
index 170fcb42..dfa401aa 100644
--- a/pom.xml
+++ b/pom.xml
@@ -5,7 +5,7 @@
     <groupId>com.cedarsoftware</groupId>
     <artifactId>json-io</artifactId>
     <packaging>bundle</packaging>
-    <version>4.52.0</version>
+    <version>4.53.0</version>
     <description>Java JSON serialization</description>
     <url>https://github.com/jdereg/json-io</url>
 
@@ -26,7 +26,7 @@
         <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss.SSSZ</maven.build.timestamp.format>
         <!-- remove source encoding warnings from maven output -->
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-        <version.java-util>3.3.0</version.java-util>
+        <version.java-util>3.3.1</version.java-util>
         <!-- testing only -->
         <version.junit-jupiter-params>5.11.4</version.junit-jupiter-params>
         <version.assertj-core>3.27.3</version.assertj-core>
diff --git a/user-guide-readOptions.md b/user-guide-readOptions.md
index 7bd9dab1..2e8e1487 100644
--- a/user-guide-readOptions.md
+++ b/user-guide-readOptions.md
@@ -7,6 +7,9 @@ ReadOptions readOptions = new ReadOptionsBuilder()
 .feature2(args)
 .build();
 JsonIo.toJava(json, readOptions).asClass(Employee.class);
+
+// Use a TypeHolder to specify the return type
+JsonIo.toJava(json, readOptions).asType(new TypeHolder<String, List<Long>>(){});
 ```
 **Detailed Steps:**
 