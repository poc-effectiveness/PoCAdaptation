diff --git a/CHANGELOG.md b/CHANGELOG.md
index 00b5799e14..208ee2fe95 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -3,6 +3,31 @@
 
 -------------------------------------------------------------------------------------------------------------
 
+# 5.7.19 (2022-01-07)
+
+### 🐣新特性
+* 【db     】     优化Condition参数拆分（pr#2046@Github）
+* 【core   】     优化ArrayUtil.isAllEmpty性能（pr#2045@Github）
+* 【core   】     CharSequenceUtil.replace方法支持增补字符（pr#2041@Github）
+* 【extra  】     增加SshjSftp（pr#493@Gitee）
+* 【core   】     增加CheckedUtil（pr#491@Gitee）
+* 【extra  】     增加Sftp.isDir中的抛异常判断条件（issues#I4P9ED@Gitee）
+
+### 🐞Bug修复
+* 【http   】     HttpUtil重定向次数失效问题（issue#I4O28Q@Gitee）
+* 【core   】     修复UrlPath空白path多/问题（issue#I49KAL@Gitee）
+* 【core   】     修复ServletUtil写出文件时未添加双引号导致逗号等特殊符号引起的问题（issue#I4P1BF@Gitee）
+* 【core   】     NumberUtil增加equals重载解决long传入判断问题（pr#2064@Github）
+* 【core   】     修复CsvParser行号有误问题（pr#2065@Github）
+* 【http   】     修复HttpRequest.of无法自动添加http前缀问题（issue#I4PEYL@Gitee）
+* 【core   】     修复 `CharSequenceUtil.brief(str, maxLength)` 方法字符串越界问题，以及 `maxLength` 部分值时结果与预期不符的问题（pr#2068@Github）
+* 【core   】     修复NamingCase中转换下划线字母+数字转换问题（issue#2070@Github）
+* 【core   】     修复split空判断不一致问题（pr#496@Gitee）
+* 【crypto 】     修复SM2.getDHex()前导0丢失,然后导致获取密钥错误（pr#2073@Github）
+* 【core   】     修复关于Calculator.conversion()方法EmptyStackException的bug（pr#2076@Github）
+* 【core   】     修复StrUtil.subBetweenAll循环bug（issue#I4PT3M@Gitee）
+
+-------------------------------------------------------------------------------------------------------------
 # 5.7.18 (2021-12-25)
 
 ### 🐣新特性
diff --git a/README-EN.md b/README-EN.md
index 217f40400d..07ec93b86b 100644
--- a/README-EN.md
+++ b/README-EN.md
@@ -142,18 +142,18 @@ We provide the T-Shirt and Sweater with Hutool Logo, please visit the shop：
 <dependency>
     <groupId>cn.hutool</groupId>
     <artifactId>hutool-all</artifactId>
-    <version>5.7.18</version>
+    <version>5.7.19</version>
 </dependency>
 ```
 
 ### 🍐Gradle
 ```
-implementation 'cn.hutool:hutool-all:5.7.18'
+implementation 'cn.hutool:hutool-all:5.7.19'
 ```
 
 ## 📥Download
 
-- [Maven Repo](https://repo1.maven.org/maven2/cn/hutool/hutool-all/5.7.18/)
+- [Maven Repo](https://repo1.maven.org/maven2/cn/hutool/hutool-all/5.7.19/)
 
 > 🔔️note:
 > Hutool 5.x supports JDK8+ and is not tested on Android platforms, and cannot guarantee that all tool classes or tool methods are available.
diff --git a/README.md b/README.md
index ad45ac762d..aa2154e23a 100644
--- a/README.md
+++ b/README.md
@@ -142,20 +142,20 @@ Hutool的存在就是为了减少代码搜索成本，避免网络上参差不
 <dependency>
     <groupId>cn.hutool</groupId>
     <artifactId>hutool-all</artifactId>
-    <version>5.7.18</version>
+    <version>5.7.19</version>
 </dependency>
 ```
 
 ### 🍐Gradle
 ```
-implementation 'cn.hutool:hutool-all:5.7.18'
+implementation 'cn.hutool:hutool-all:5.7.19'
 ```
 
 ### 📥下载jar
 
 点击以下链接，下载`hutool-all-X.X.X.jar`即可：
 
-- [Maven中央库](https://repo1.maven.org/maven2/cn/hutool/hutool-all/5.7.18/)
+- [Maven中央库](https://repo1.maven.org/maven2/cn/hutool/hutool-all/5.7.19/)
 
 > 🔔️注意
 > Hutool 5.x支持JDK8+，对Android平台没有测试，不能保证所有工具类或工具方法可用。
diff --git a/bin/version.txt b/bin/version.txt
index ffefe41984..1ccc375768 100755
--- a/bin/version.txt
+++ b/bin/version.txt
@@ -1 +1 @@
-5.7.18
+5.7.19
diff --git a/docs/js/version.js b/docs/js/version.js
index f78027fec1..90d3c3b3aa 100644
--- a/docs/js/version.js
+++ b/docs/js/version.js
@@ -1 +1 @@
-var version = '5.7.18'
\ No newline at end of file
+var version = '5.7.19'
\ No newline at end of file
diff --git a/hutool-all/pom.xml b/hutool-all/pom.xml
index dcc47ecd8d..9dbbfdc1fa 100644
--- a/hutool-all/pom.xml
+++ b/hutool-all/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-all</artifactId>
diff --git a/hutool-aop/pom.xml b/hutool-aop/pom.xml
index 6b2b226b24..35e36768f0 100644
--- a/hutool-aop/pom.xml
+++ b/hutool-aop/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-aop</artifactId>
diff --git a/hutool-bloomFilter/pom.xml b/hutool-bloomFilter/pom.xml
index d81f5061f3..82e8163aae 100644
--- a/hutool-bloomFilter/pom.xml
+++ b/hutool-bloomFilter/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-bloomFilter</artifactId>
diff --git a/hutool-bom/pom.xml b/hutool-bom/pom.xml
index d1451a9ca4..2db026910e 100644
--- a/hutool-bom/pom.xml
+++ b/hutool-bom/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-bom</artifactId>
diff --git a/hutool-cache/pom.xml b/hutool-cache/pom.xml
index c3a0499ee2..91a94dc0d1 100644
--- a/hutool-cache/pom.xml
+++ b/hutool-cache/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-cache</artifactId>
diff --git a/hutool-captcha/pom.xml b/hutool-captcha/pom.xml
index 3706411b8f..4bd96f6e5e 100644
--- a/hutool-captcha/pom.xml
+++ b/hutool-captcha/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-captcha</artifactId>
diff --git a/hutool-core/pom.xml b/hutool-core/pom.xml
index ed67017b73..2548d3862f 100644
--- a/hutool-core/pom.xml
+++ b/hutool-core/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-core</artifactId>
diff --git a/hutool-core/src/main/java/cn/hutool/core/convert/impl/BooleanConverter.java b/hutool-core/src/main/java/cn/hutool/core/convert/impl/BooleanConverter.java
index ce4d5e5a72..caec14bdb6 100644
--- a/hutool-core/src/main/java/cn/hutool/core/convert/impl/BooleanConverter.java
+++ b/hutool-core/src/main/java/cn/hutool/core/convert/impl/BooleanConverter.java
@@ -4,7 +4,7 @@
 import cn.hutool.core.util.BooleanUtil;
 
 /**
- * 波尔转换器
+ * 布尔转换器
  *
  * <p>
  * 对象转为boolean，规则如下：
diff --git a/hutool-core/src/main/java/cn/hutool/core/exceptions/CheckedUtil.java b/hutool-core/src/main/java/cn/hutool/core/exceptions/CheckedUtil.java
new file mode 100644
index 0000000000..876dd0814b
--- /dev/null
+++ b/hutool-core/src/main/java/cn/hutool/core/exceptions/CheckedUtil.java
@@ -0,0 +1,302 @@
+package cn.hutool.core.exceptions;
+
+import cn.hutool.core.lang.func.*;
+
+import java.util.Objects;
+
+/**
+ * 方便的执行会抛出受检查类型异常的方法调用或者代码段
+ * <p>
+ * 该工具通过函数式的方式将那些需要抛出受检查异常的表达式或者代码段转化成一个 cn.hutool.core.lang.func.Func* 对象
+ * </p>
+ * <p>
+ * {@code
+ * <pre>
+ *      //代码中如果遇到一个方法调用声明了受检查异常那么我们的代码就必须这样写
+ *         Map<String, String> describedObject = null;
+ *         try {
+ *             describe = BeanUtils.describe(new Object());
+ *         } catch (IllegalAccessException e) {
+ *             throw new RuntimeException(e);
+ *         } catch (InvocationTargetException e) {
+ *             throw new RuntimeException(e);
+ *         } catch (NoSuchMethodException e) {
+ *             throw new RuntimeException(e);
+ *         }
+ *         // use describedObject ...
+ *
+ *       //上面的代码增加了异常块使得代码不那么流畅，现在可以这样写：
+ *       Map<String, String> describedObject = CheckedUtil.uncheck(BeanUtils::describe).call(new Object());
+ *       // use describedObject ...
+ *
+ *       CheckedUtil.uncheck 方法接受任意可以转化成 cn.hutool.core.lang.func.Func* 函数式接口的 Lambda 表达式。返回对应的函数式对象。
+ *       上述代码可以理解为：
+ *        Func0<Object, Map<String, String>> aFunc = CheckedUtil.uncheck(BeanUtils::describe);
+ *        Map<String, String> describedObject = aFunc.call(传入参数);
+ *        该aFunc对象代表的就是BeanUtils::describe这个表达式，且在内部转化了检查类型异常，不需要代码里面显示处理。
+ *
+ *
+ * </pre>
+ * }
+ *
+ * @author conder
+ * @since 5.7.19
+ */
+public class CheckedUtil {
+
+	/**
+	 * 接收一个可以转化成 cn.hutool.core.lang.func.Func 的Lambda表达式，当执行表达式抛出任何异常的时候，都会转化成运行时异常
+	 * 如此一来，代码中就不用显示的try-catch转化成运行时异常
+	 *
+	 * @param expression Lambda表达式
+	 * @param <P>        运行时传入的参数类型
+	 * @param <R>        最终返回的数据类型
+	 * @return cn.hutool.core.lang.func.Func
+	 */
+	public static <P, R> FuncRt<P, R> uncheck(Func<P, R> expression) {
+		return uncheck(expression, new RuntimeException());
+	}
+
+	/**
+	 * 接收一个可以转化成 cn.hutool.core.lang.func.Func0 的Lambda表达式，当执行表达式抛出任何异常的时候，都会转化成运行时异常
+	 * 如此一来，代码中就不用显示的try-catch转化成运行时异常
+	 *
+	 * @param expression 运行时传入的参数类型
+	 * @param <R>        最终返回的数据类型
+	 * @return cn.hutool.core.lang.func.Func0
+	 */
+	public static <R> Func0Rt<R> uncheck(Func0<R> expression) {
+		return uncheck(expression, new RuntimeException());
+	}
+
+	/**
+	 * 接收一个可以转化成 cn.hutool.core.lang.func.Func1 的Lambda表达式，当执行表达式抛出任何异常的时候，都会转化成运行时异常
+	 * 如此一来，代码中就不用显示的try-catch转化成运行时异常
+	 *
+	 * @param expression 运行时传入的参数类型
+	 * @param <P>        运行时传入的参数类型
+	 * @param <R>        最终返回的数据类型
+	 * @return cn.hutool.core.lang.func.Func1
+	 */
+	public static <P, R> Func1Rt<P, R> uncheck(Func1<P, R> expression) {
+		return uncheck(expression, new RuntimeException());
+	}
+
+
+	/**
+	 * 接收一个可以转化成 cn.hutool.core.lang.func.VoidFunc 的Lambda表达式，当执行表达式抛出任何异常的时候，都会转化成运行时异常
+	 * 如此一来，代码中就不用显示的try-catch转化成运行时异常
+	 *
+	 * @param expression 运行时传入的参数类型
+	 * @param <P>        运行时传入的参数类型
+	 * @return cn.hutool.core.lang.func.VoidFunc
+	 */
+	public static <P> VoidFuncRt<P> uncheck(VoidFunc<P> expression) {
+		return uncheck(expression, new RuntimeException());
+	}
+
+	/**
+	 * 接收一个可以转化成 cn.hutool.core.lang.func.VoidFunc0 的Lambda表达式，当执行表达式抛出任何异常的时候，都会转化成运行时异常
+	 * 如此一来，代码中就不用显示的try-catch转化成运行时异常
+	 *
+	 * @param expression 运行时传入的参数类型
+	 * @return cn.hutool.core.lang.func.VoidFunc0
+	 */
+	public static VoidFunc0Rt uncheck(VoidFunc0 expression) {
+		return uncheck(expression, new RuntimeException());
+	}
+
+	/**
+	 * 接收一个可以转化成 cn.hutool.core.lang.func.VoidFunc1 的Lambda表达式，当执行表达式抛出任何异常的时候，都会转化成运行时异常
+	 * 如此一来，代码中就不用显示的try-catch转化成运行时异常
+	 *
+	 * @param expression 运行时传入的参数类型
+	 * @param <P>        运行时传入的参数类型
+	 * @return cn.hutool.core.lang.func.VoidFunc1
+	 */
+	public static <P> VoidFunc1Rt<P> uncheck(VoidFunc1<P> expression) {
+		return uncheck(expression, new RuntimeException());
+	}
+
+
+	/**
+	 * 接收一个可以转化成 cn.hutool.core.lang.func.Func的Lambda表达式，和一个RuntimeException，当执行表达式抛出任何异常的时候，都会转化成运行时异常
+	 * 如此一来，代码中就不用显示的try-catch转化成运行时异常
+	 *
+	 * @param expression Lambda表达式
+	 * @param rte        期望抛出的运行时异常
+	 * @param <P>        运行时传入的参数类型
+	 * @param <R>        最终返回的数据类型
+	 * @return cn.hutool.core.lang.func.Func
+	 */
+	public static <P, R> FuncRt<P, R> uncheck(Func<P, R> expression, RuntimeException rte) {
+		Objects.requireNonNull(expression, "expression can not be null");
+		return t -> {
+			try {
+				return expression.call(t);
+			} catch (Exception e) {
+				if (rte == null) {
+					throw new RuntimeException(e);
+				} else {
+					rte.initCause(e);
+					throw rte;
+				}
+			}
+		};
+	}
+
+	/**
+	 * 接收一个可以转化成 cn.hutool.core.lang.func.Func0的Lambda表达式，和一个RuntimeException，当执行表达式抛出任何异常的时候，都会转化成运行时异常
+	 * 如此一来，代码中就不用显示的try-catch转化成运行时异常
+	 *
+	 * @param expression Lambda表达式
+	 * @param rte        期望抛出的运行时异常
+	 * @param <R>        最终返回的数据类型
+	 * @return cn.hutool.core.lang.func.Func0
+	 */
+	public static <R> Func0Rt<R> uncheck(Func0<R> expression, RuntimeException rte) {
+		Objects.requireNonNull(expression, "expression can not be null");
+		return () -> {
+			try {
+				return expression.call();
+			} catch (Exception e) {
+				if (rte == null) {
+					throw new RuntimeException(e);
+				} else {
+					rte.initCause(e);
+					throw rte;
+				}
+			}
+		};
+	}
+
+	/**
+	 * 接收一个可以转化成 cn.hutool.core.lang.func.Func1的Lambda表达式，和一个RuntimeException，当执行表达式抛出任何异常的时候，都会转化成运行时异常
+	 * 如此一来，代码中就不用显示的try-catch转化成运行时异常
+	 *
+	 * @param expression Lambda表达式
+	 * @param rte        期望抛出的运行时异常
+	 * @param <P>        运行时传入的参数类型
+	 * @param <R>        最终返回的数据类型
+	 * @return cn.hutool.core.lang.func.Func1
+	 */
+	public static <P, R> Func1Rt<P, R> uncheck(Func1<P, R> expression, RuntimeException rte) {
+		Objects.requireNonNull(expression, "expression can not be null");
+		return t -> {
+			try {
+				return expression.call(t);
+			} catch (Exception e) {
+				if (rte == null) {
+					throw new RuntimeException(e);
+				} else {
+					rte.initCause(e);
+					throw rte;
+				}
+			}
+		};
+	}
+
+	/**
+	 * 接收一个可以转化成 cn.hutool.core.lang.func.VoidFunc的Lambda表达式，和一个RuntimeException，当执行表达式抛出任何异常的时候，都会转化成运行时异常
+	 * 如此一来，代码中就不用显示的try-catch转化成运行时异常
+	 *
+	 * @param expression Lambda表达式
+	 * @param rte        期望抛出的运行时异常
+	 * @param <P>        运行时传入的参数类型
+	 * @return cn.hutool.core.lang.func.VoidFunc
+	 */
+	public static <P> VoidFuncRt<P> uncheck(VoidFunc<P> expression, RuntimeException rte) {
+		Objects.requireNonNull(expression, "expression can not be null");
+		return t -> {
+			try {
+				expression.call(t);
+			} catch (Exception e) {
+				if (rte == null) {
+					throw new RuntimeException(e);
+				} else {
+					rte.initCause(e);
+					throw rte;
+				}
+			}
+		};
+	}
+
+
+	/**
+	 * 接收一个可以转化成 cn.hutool.core.lang.func.VoidFunc0的Lambda表达式，和一个RuntimeException，当执行表达式抛出任何异常的时候，都会转化成运行时异常
+	 * 如此一来，代码中就不用显示的try-catch转化成运行时异常
+	 *
+	 * @param expression Lambda表达式
+	 * @param rte        期望抛出的运行时异常
+	 * @return cn.hutool.core.lang.func.VoidFunc0
+	 */
+	public static VoidFunc0Rt uncheck(VoidFunc0 expression, RuntimeException rte) {
+		Objects.requireNonNull(expression, "expression can not be null");
+		return () -> {
+			try {
+				expression.call();
+			} catch (Exception e) {
+				if (rte == null) {
+					throw new RuntimeException(e);
+				} else {
+					rte.initCause(e);
+					throw rte;
+				}
+			}
+		};
+	}
+
+
+	/**
+	 * 接收一个可以转化成 cn.hutool.core.lang.func.VoidFunc1的Lambda表达式，和一个RuntimeException，当执行表达式抛出任何异常的时候，都会转化成运行时异常
+	 * 如此一来，代码中就不用显示的try-catch转化成运行时异常
+	 *
+	 * @param expression Lambda表达式
+	 * @param rte        期望抛出的运行时异常
+	 * @param <P>        运行时传入的参数类型
+	 * @return cn.hutool.core.lang.func.VoidFunc1
+	 */
+	public static <P> VoidFunc1Rt<P> uncheck(VoidFunc1<P> expression, RuntimeException rte) {
+		Objects.requireNonNull(expression, "expression can not be null");
+		return t -> {
+			try {
+				expression.call(t);
+			} catch (Exception e) {
+				if (rte == null) {
+					throw new RuntimeException(e);
+				} else {
+					rte.initCause(e);
+					throw rte;
+				}
+			}
+		};
+	}
+
+	public interface FuncRt<P, R> extends Func<P, R> {
+		@SuppressWarnings("unchecked")
+		R call(P... parameters) throws RuntimeException;
+	}
+
+	public interface Func0Rt<R> extends Func0<R> {
+		R call() throws RuntimeException;
+	}
+
+	public interface Func1Rt<P, R> extends Func1<P, R> {
+		R call(P parameter) throws RuntimeException;
+	}
+
+	public interface VoidFuncRt<P> extends VoidFunc<P> {
+		@SuppressWarnings("unchecked")
+		void call(P... parameters) throws RuntimeException;
+	}
+
+	public interface VoidFunc0Rt extends VoidFunc0 {
+		void call() throws RuntimeException;
+	}
+
+	public interface VoidFunc1Rt<P> extends VoidFunc1<P> {
+		void call(P parameter) throws RuntimeException;
+	}
+
+
+}
diff --git a/hutool-core/src/main/java/cn/hutool/core/math/Calculator.java b/hutool-core/src/main/java/cn/hutool/core/math/Calculator.java
index e6963c8cf7..a2562f6d08 100644
--- a/hutool-core/src/main/java/cn/hutool/core/math/Calculator.java
+++ b/hutool-core/src/main/java/cn/hutool/core/math/Calculator.java
@@ -191,7 +191,7 @@ private static String transform(String expression) {
 				}
 			}
 		}
-		if (arr[0] == '~' || (arr.length > 1 && arr[1] == '(')) {
+		if (arr[0] == '~' && (arr.length > 1 && arr[1] == '(')) {
 			arr[0] = '-';
 			return "0" + new String(arr);
 		} else {
diff --git a/hutool-core/src/main/java/cn/hutool/core/net/url/UrlPath.java b/hutool-core/src/main/java/cn/hutool/core/net/url/UrlPath.java
index 890c14b663..0ab1bef1d5 100644
--- a/hutool-core/src/main/java/cn/hutool/core/net/url/UrlPath.java
+++ b/hutool-core/src/main/java/cn/hutool/core/net/url/UrlPath.java
@@ -105,9 +105,11 @@ public UrlPath parse(CharSequence path, Charset charset) {
 			}
 
 			path = fixPath(path);
-			final List<String> split = StrUtil.split(path, '/');
-			for (String seg : split) {
-				addInternal(URLDecoder.decodeForPath(seg, charset), false);
+			if(StrUtil.isNotEmpty(path)){
+				final List<String> split = StrUtil.split(path, '/');
+				for (String seg : split) {
+					addInternal(URLDecoder.decodeForPath(seg, charset), false);
+				}
 			}
 		}
 
@@ -132,9 +134,14 @@ public String build(Charset charset) {
 			// 在此处的Path部分特指host之后的部分，即不包含第一部分
 			builder.append(CharUtil.SLASH).append(RFC3986.SEGMENT_NZ_NC.encode(segment, charset));
 		}
-		if (withEngTag || StrUtil.isEmpty(builder)) {
+		if (StrUtil.isEmpty(builder)) {
+			// 空白追加是保证以/开头
+			builder.append(CharUtil.SLASH);
+		}else if (withEngTag && false == StrUtil.endWith(builder, CharUtil.SLASH)) {
+			// 尾部没有/则追加，否则不追加
 			builder.append(CharUtil.SLASH);
 		}
+
 		return builder.toString();
 	}
 
diff --git a/hutool-core/src/main/java/cn/hutool/core/text/CharSequenceUtil.java b/hutool-core/src/main/java/cn/hutool/core/text/CharSequenceUtil.java
index 4ef8292604..2d7bcad892 100644
--- a/hutool-core/src/main/java/cn/hutool/core/text/CharSequenceUtil.java
+++ b/hutool-core/src/main/java/cn/hutool/core/text/CharSequenceUtil.java
@@ -22,7 +22,6 @@
 import java.nio.charset.Charset;
 import java.text.MessageFormat;
 import java.text.Normalizer;
-import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
@@ -1090,7 +1089,7 @@ public static int indexOf(CharSequence str, char searchChar, int start) {
 	/**
 	 * 指定范围内查找指定字符
 	 *
-	 * @param text        字符串
+	 * @param text       字符串
 	 * @param searchChar 被查找的字符
 	 * @param start      起始位置，如果小于0，从0开始查找
 	 * @param end        终止位置，如果超过str.length()则默认查找到字符串末尾
@@ -1207,9 +1206,9 @@ public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr
 	 * 指定范围内查找字符串<br>
 	 * fromIndex 为搜索起始位置，从后往前计数
 	 *
-	 * @param text        字符串
+	 * @param text       字符串
 	 * @param searchStr  需要查找位置的字符串
-	 * @param from  起始位置，从后往前计数
+	 * @param from       起始位置，从后往前计数
 	 * @param ignoreCase 是否忽略大小写
 	 * @return 位置
 	 * @since 3.2.1
@@ -1803,10 +1802,7 @@ public static List<String> split(CharSequence str, char separator, int limit, bo
 	 * @since 5.7.14
 	 */
 	public static <R> List<R> split(CharSequence str, char separator, int limit, boolean ignoreEmpty, Function<String, R> mapping) {
-		if (null == str) {
-			return new ArrayList<>(0);
-		}
-		return StrSplitter.split(str.toString(), separator, limit, ignoreEmpty, mapping);
+		return StrSplitter.split(str, separator, limit, ignoreEmpty, mapping);
 	}
 
 	/**
@@ -1847,11 +1843,8 @@ public static List<String> split(CharSequence str, CharSequence separator, boole
 	 * @since 3.2.0
 	 */
 	public static List<String> split(CharSequence str, CharSequence separator, int limit, boolean isTrim, boolean ignoreEmpty) {
-		if (null == str) {
-			return new ArrayList<>(0);
-		}
 		final String separatorStr = (null == separator) ? null : separator.toString();
-		return StrSplitter.split(str.toString(), separatorStr, limit, isTrim, ignoreEmpty);
+		return StrSplitter.split(str, separatorStr, limit, isTrim, ignoreEmpty);
 	}
 
 	/**
@@ -1860,13 +1853,10 @@ public static List<String> split(CharSequence str, CharSequence separator, int l
 	 * @param str 字符串
 	 * @param len 每一个小节的长度
 	 * @return 截取后的字符串数组
-	 * @see StrSplitter#splitByLength(String, int)
+	 * @see StrSplitter#splitByLength(CharSequence, int)
 	 */
 	public static String[] split(CharSequence str, int len) {
-		if (null == str) {
-			return new String[]{};
-		}
-		return StrSplitter.splitByLength(str.toString(), len);
+		return StrSplitter.splitByLength(str, len);
 	}
 
 	/**
@@ -2015,9 +2005,9 @@ public static String subPreGbk(CharSequence str, int len, boolean halfUp) {
 		}
 
 		if (counterOfDoubleByte % 2 != 0) {
-			if(halfUp){
+			if (halfUp) {
 				len += 1;
-			}else{
+			} else {
 				len -= 1;
 			}
 		}
@@ -2346,7 +2336,9 @@ public static String[] subBetweenAll(CharSequence str, CharSequence prefix, Char
 			}
 		} else {
 			int suffixIndex;
-			for (String fragment : split) {
+			String fragment;
+			for (int i = 1; i < split.length; i++) {
+				fragment = split[i];
 				suffixIndex = fragment.indexOf(suffix.toString());
 				if (suffixIndex > 0) {
 					result.add(fragment.substring(0, suffixIndex));
@@ -2486,8 +2478,8 @@ public static String repeatByLength(CharSequence str, int padLen) {
 	 * StrUtil.repeatAndJoin("?", 5, null) = "?????"
 	 * </pre>
 	 *
-	 * @param str         被重复的字符串
-	 * @param count       数量
+	 * @param str       被重复的字符串
+	 * @param count     数量
 	 * @param delimiter 分界符
 	 * @return 连接后的字符串
 	 * @since 4.0.1
@@ -3538,7 +3530,7 @@ public static String replace(CharSequence str, int fromIndex, CharSequence searc
 
 		final int strLength = str.length();
 		final int searchStrLength = searchStr.length();
-		if(strLength < searchStrLength){
+		if (strLength < searchStrLength) {
 			// issue#I4M16G@Gitee
 			return str(str);
 		}
@@ -3570,7 +3562,8 @@ public static String replace(CharSequence str, int fromIndex, CharSequence searc
 	}
 
 	/**
-	 * 替换指定字符串的指定区间内字符为固定字符
+	 * 替换指定字符串的指定区间内字符为固定字符<br>
+	 * 此方法使用{@link String#codePoints()}完成拆分替换
 	 *
 	 * @param str          字符串
 	 * @param startInclude 开始位置（包含）
@@ -3583,27 +3576,29 @@ public static String replace(CharSequence str, int startInclude, int endExclude,
 		if (isEmpty(str)) {
 			return str(str);
 		}
-		final int strLength = str.length();
+		final String originalStr = str(str);
+		int[] strCodePoints = originalStr.codePoints().toArray();
+		final int strLength = strCodePoints.length;
 		if (startInclude > strLength) {
-			return str(str);
+			return originalStr;
 		}
 		if (endExclude > strLength) {
 			endExclude = strLength;
 		}
 		if (startInclude > endExclude) {
 			// 如果起始位置大于结束位置，不替换
-			return str(str);
+			return originalStr;
 		}
 
-		final char[] chars = new char[strLength];
+		final StringBuilder stringBuilder = new StringBuilder();
 		for (int i = 0; i < strLength; i++) {
 			if (i >= startInclude && i < endExclude) {
-				chars[i] = replacedChar;
+				stringBuilder.append(replacedChar);
 			} else {
-				chars[i] = str.charAt(i);
+				stringBuilder.append(new String(strCodePoints, i, 1));
 			}
 		}
-		return new String(chars);
+		return stringBuilder.toString();
 	}
 
 	/**
@@ -4198,11 +4193,17 @@ public static String concat(boolean isNullToEmpty, CharSequence... strs) {
 	 * 将给定字符串，变成 "xxx...xxx" 形式的字符串
 	 *
 	 * <ul>
-	 *     <li>abcdef 5 -》 a...f</li>
-	 *     <li>abcdef 4 -》 a..f</li>
-	 *     <li>abcdef 3 -》 a.f</li>
-	 *     <li>abcdef 2 -》 a.</li>
-	 *     <li>abcdef 1 -》 a</li>
+	 *     <li>abcdefgh  9 -》 abcdefgh</li>
+	 *     <li>abcdefgh  8 -》 abcdefgh</li>
+	 *     <li>abcdefgh  7 -》 ab...gh</li>
+	 *     <li>abcdefgh  6 -》 ab...h</li>
+	 *     <li>abcdefgh  5 -》 a...h</li>
+	 *     <li>abcdefgh  4 -》 a..h</li>
+	 *     <li>abcdefgh  3 -》 a.h</li>
+	 *     <li>abcdefgh  2 -》 a.</li>
+	 *     <li>abcdefgh  1 -》 a</li>
+	 *     <li>abcdefgh  0 -》 abcdefgh</li>
+	 *     <li>abcdefgh -1 -》 abcdefgh</li>
 	 * </ul>
 	 *
 	 * @param str       字符串
@@ -4225,14 +4226,17 @@ public static String brief(CharSequence str, int maxLength) {
 			case 2:
 				return str.charAt(0) + ".";
 			case 3:
-				return str.charAt(0) + "." + str.charAt(str.length() - 1);
+				return str.charAt(0) + "." + str.charAt(strLength - 1);
+			case 4:
+				return str.charAt(0) + ".." + str.charAt(strLength - 1);
 		}
 
-		final int w = maxLength / 2;
+		final int suffixLength = (maxLength - 3) / 2;
+		final int preLength = suffixLength + (maxLength - 3) % 2; // suffixLength 或 suffixLength + 1
 		final String str2 = str.toString();
 		return format("{}...{}",
-				str2.substring(0, maxLength - w),
-				str2.substring(strLength - w + 3));
+				str2.substring(0, preLength),
+				str2.substring(strLength - suffixLength));
 	}
 
 	/**
diff --git a/hutool-core/src/main/java/cn/hutool/core/text/NamingCase.java b/hutool-core/src/main/java/cn/hutool/core/text/NamingCase.java
index fc5a753a3c..a35d78f1ee 100644
--- a/hutool-core/src/main/java/cn/hutool/core/text/NamingCase.java
+++ b/hutool-core/src/main/java/cn/hutool/core/text/NamingCase.java
@@ -90,7 +90,7 @@ public static String toSymbolCase(CharSequence str, char symbol) {
 					} else if (Character.isLowerCase(preChar)) {
 						// 前一个为小写
 						sb.append(symbol);
-						if (null == nextChar || Character.isLowerCase(nextChar)) {
+						if (null == nextChar || Character.isLowerCase(nextChar) || CharUtil.isNumber(nextChar)) {
 							//普通首字母大写，如aBcc -> a_bcc
 							c = Character.toLowerCase(c);
 						}
diff --git a/hutool-core/src/main/java/cn/hutool/core/text/StrSplitter.java b/hutool-core/src/main/java/cn/hutool/core/text/StrSplitter.java
index eb47e76305..ce9d998d73 100644
--- a/hutool-core/src/main/java/cn/hutool/core/text/StrSplitter.java
+++ b/hutool-core/src/main/java/cn/hutool/core/text/StrSplitter.java
@@ -1,6 +1,5 @@
 package cn.hutool.core.text;
 
-import cn.hutool.core.lang.Assert;
 import cn.hutool.core.lang.PatternPool;
 import cn.hutool.core.text.finder.CharFinder;
 import cn.hutool.core.text.finder.CharMatcherFinder;
@@ -18,7 +17,6 @@
 
 /**
  * 字符串切分器，封装统一的字符串分割静态方法
- *
  * @author Looly
  * @since 5.7.0
  */
@@ -175,7 +173,8 @@ public static List<String> split(CharSequence text, char separator, int limit, b
 	}
 
 	/**
-	 * 切分字符串
+	 * 切分字符串<br>
+	 * 如果为空字符串或者null 则返回空集合
 	 *
 	 * @param <R>         切分后的元素类型
 	 * @param text        被切分的字符串
@@ -189,6 +188,9 @@ public static List<String> split(CharSequence text, char separator, int limit, b
 	 */
 	public static <R> List<R> split(CharSequence text, char separator, int limit, boolean ignoreEmpty,
 									boolean ignoreCase, Function<String, R> mapping) {
+		if (null == text) {
+			return new ArrayList<>(0);
+		}
 		final SplitIter splitIter = new SplitIter(text, new CharFinder(separator, ignoreCase), limit, ignoreEmpty);
 		return splitIter.toList(mapping);
 	}
@@ -296,7 +298,8 @@ public static List<String> splitTrimIgnoreCase(CharSequence str, String separato
 	}
 
 	/**
-	 * 切分字符串
+	 * 切分字符串<br>
+	 * 如果为空字符串或者null 则返回空集合
 	 *
 	 * @param text        被切分的字符串
 	 * @param separator   分隔符字符串
@@ -308,6 +311,9 @@ public static List<String> splitTrimIgnoreCase(CharSequence str, String separato
 	 * @since 3.2.1
 	 */
 	public static List<String> split(CharSequence text, String separator, int limit, boolean isTrim, boolean ignoreEmpty, boolean ignoreCase) {
+		if (null == text) {
+			return new ArrayList<>(0);
+		}
 		final SplitIter splitIter = new SplitIter(text, new StrFinder(separator, ignoreCase), limit, ignoreEmpty);
 		return splitIter.toList(isTrim);
 	}
@@ -331,7 +337,8 @@ public static String[] splitToArray(CharSequence str, String separator, int limi
 
 	/**
 	 * 使用空白符切分字符串<br>
-	 * 切分后的字符串两边不包含空白符，空串或空白符串并不做为元素之一
+	 * 切分后的字符串两边不包含空白符，空串或空白符串并不做为元素之一<br>
+	 * 如果为空字符串或者null 则返回空集合
 	 *
 	 * @param text  被切分的字符串
 	 * @param limit 限制分片数
@@ -339,8 +346,7 @@ public static String[] splitToArray(CharSequence str, String separator, int limi
 	 * @since 3.0.8
 	 */
 	public static List<String> split(CharSequence text, int limit) {
-
-		if (StrUtil.isEmpty(text)) {
+		if (null == text) {
 			return new ArrayList<>(0);
 		}
 		final SplitIter splitIter = new SplitIter(text, new CharMatcherFinder(CharUtil::isBlankChar), limit, true);
@@ -377,7 +383,8 @@ public static List<String> splitByRegex(String text, String separatorRegex, int
 	}
 
 	/**
-	 * 通过正则切分字符串
+	 * 通过正则切分字符串<br>
+	 * 如果为空字符串或者null 则返回空集合
 	 *
 	 * @param text             字符串
 	 * @param separatorPattern 分隔符正则{@link Pattern}
@@ -388,8 +395,7 @@ public static List<String> splitByRegex(String text, String separatorRegex, int
 	 * @since 3.0.8
 	 */
 	public static List<String> split(String text, Pattern separatorPattern, int limit, boolean isTrim, boolean ignoreEmpty) {
-		Assert.notNull(text, "Text must be not null!");
-		if (text.length() < 1) {
+		if (null == text) {
 			return new ArrayList<>(0);
 		}
 		final SplitIter splitIter = new SplitIter(text, new PatternFinder(separatorPattern), limit, ignoreEmpty);
@@ -419,7 +425,10 @@ public static String[] splitToArray(String str, Pattern separatorPattern, int li
 	 * @param len  每一个小节的长度
 	 * @return 截取后的字符串数组
 	 */
-	public static String[] splitByLength(String text, int len) {
+	public static String[] splitByLength(CharSequence text, int len) {
+		if (null == text) {
+			return new String[0];
+		}
 		SplitIter splitIter = new SplitIter(text, new LengthFinder(len), -1, false);
 		return splitIter.toArray(false);
 	}
diff --git a/hutool-core/src/main/java/cn/hutool/core/text/csv/CsvParser.java b/hutool-core/src/main/java/cn/hutool/core/text/csv/CsvParser.java
index 507c24ecbb..02feadee35 100644
--- a/hutool-core/src/main/java/cn/hutool/core/text/csv/CsvParser.java
+++ b/hutool-core/src/main/java/cn/hutool/core/text/csv/CsvParser.java
@@ -264,7 +264,7 @@ private List<String> readLine() throws IORuntimeException {
 					inQuotes = false;
 				} else {
 					// 字段内容中新行
-					if (isLineEnd(c)) {
+					if (isLineEnd(c, preChar)) {
 						inQuotesLineCount++;
 					}
 				}
@@ -350,11 +350,13 @@ private void addField(List<String> currentFields, String field) {
 
 	/**
 	 * 是否行结束符
-	 * @param c 符号
+	 *
+	 * @param c       符号
+	 * @param preChar 前一个字符
 	 * @return 是否结束
 	 * @since 5.7.4
 	 */
-	private boolean isLineEnd(char c){
+	private boolean isLineEnd(char c, int preChar) {
 		return (c == CharUtil.CR || c == CharUtil.LF) && preChar != CharUtil.CR;
 	}
 
diff --git a/hutool-core/src/main/java/cn/hutool/core/text/split/SplitIter.java b/hutool-core/src/main/java/cn/hutool/core/text/split/SplitIter.java
index 5fbf800e47..6dc1048009 100644
--- a/hutool-core/src/main/java/cn/hutool/core/text/split/SplitIter.java
+++ b/hutool-core/src/main/java/cn/hutool/core/text/split/SplitIter.java
@@ -38,7 +38,7 @@ public class SplitIter extends ComputeIter<String> implements Serializable {
 	/**
 	 * 构造
 	 *
-	 * @param text            文本
+	 * @param text            文本，不能为{@code null}
 	 * @param separatorFinder 分隔符匹配器
 	 * @param limit           限制数量，小于等于0表示无限制
 	 * @param ignoreEmpty     是否忽略""
diff --git a/hutool-core/src/main/java/cn/hutool/core/util/ArrayUtil.java b/hutool-core/src/main/java/cn/hutool/core/util/ArrayUtil.java
index adc11b2f88..b0c9cbacb0 100644
--- a/hutool-core/src/main/java/cn/hutool/core/util/ArrayUtil.java
+++ b/hutool-core/src/main/java/cn/hutool/core/util/ArrayUtil.java
@@ -1540,7 +1540,12 @@ public static boolean hasEmpty(Object... args) {
 	 * @since 4.5.18
 	 */
 	public static boolean isAllEmpty(Object... args) {
-		return emptyCount(args) == args.length;
+		for (Object obj: args) {
+			if (false == ObjectUtil.isEmpty(obj)) {
+				return false;
+			}
+		}
+		return true;
 	}
 
 	/**
diff --git a/hutool-core/src/main/java/cn/hutool/core/util/NumberUtil.java b/hutool-core/src/main/java/cn/hutool/core/util/NumberUtil.java
index a4688cb572..48e179d2ad 100644
--- a/hutool-core/src/main/java/cn/hutool/core/util/NumberUtil.java
+++ b/hutool-core/src/main/java/cn/hutool/core/util/NumberUtil.java
@@ -716,8 +716,8 @@ public static double div(Double v1, Double v2, int scale, RoundingMode roundingM
 	 * @since 3.1.0
 	 */
 	public static BigDecimal div(Number v1, Number v2, int scale, RoundingMode roundingMode) {
-		if(v1 instanceof BigDecimal && v2 instanceof BigDecimal){
-			return div((BigDecimal)v1, (BigDecimal)v2, scale, roundingMode);
+		if (v1 instanceof BigDecimal && v2 instanceof BigDecimal) {
+			return div((BigDecimal) v1, (BigDecimal) v2, scale, roundingMode);
 		}
 		return div(v1.toString(), v2.toString(), scale, roundingMode);
 	}
@@ -1833,6 +1833,19 @@ public static boolean equals(float num1, float num2) {
 		return Float.floatToIntBits(num1) == Float.floatToIntBits(num2);
 	}
 
+	/**
+	 * 比较大小，值相等 返回true<br>
+	 * 此方法修复传入long型数据由于没有本类型重载方法,导致数据精度丢失
+	 *
+	 * @param num1 数字1
+	 * @param num2 数字2
+	 * @return 是否相等
+	 * @since 5.7.19
+	 */
+	public static boolean equals(long num1, long num2) {
+		return num1 == num2;
+	}
+
 	/**
 	 * 比较大小，值相等 返回true<br>
 	 * 此方法通过调用{@link BigDecimal#compareTo(BigDecimal)}方法来判断是否相等<br>
@@ -2160,14 +2173,14 @@ public static BigDecimal toBigDecimal(Number number) {
 	 * @since 4.0.9
 	 */
 	public static BigDecimal toBigDecimal(String numberStr) {
-		if(StrUtil.isBlank(numberStr)){
+		if (StrUtil.isBlank(numberStr)) {
 			return BigDecimal.ZERO;
 		}
 
 		try {
 			// 支持类似于 1,234.55 格式的数字
 			final Number number = parseNumber(numberStr);
-			if(number instanceof BigDecimal){
+			if (number instanceof BigDecimal) {
 				return (BigDecimal) number;
 			} else {
 				return new BigDecimal(number.toString());
@@ -2513,7 +2526,7 @@ public static double parseDouble(String number) {
 	public static Number parseNumber(String numberStr) throws NumberFormatException {
 		try {
 			final NumberFormat format = NumberFormat.getInstance();
-			if(format instanceof DecimalFormat){
+			if (format instanceof DecimalFormat) {
 				// issue#1818@Github
 				// 当字符串数字超出double的长度时，会导致截断，此处使用BigDecimal接收
 				((DecimalFormat) format).setParseBigDecimal(true);
@@ -2700,9 +2713,9 @@ public static double calculate(String expression) {
 	 * @since 5.7.8
 	 */
 	public static double toDouble(Number value) {
-		if(value instanceof Float){
+		if (value instanceof Float) {
 			return Double.parseDouble(value.toString());
-		}else{
+		} else {
 			return value.doubleValue();
 		}
 	}
diff --git a/hutool-core/src/test/java/cn/hutool/core/collection/RingIndexUtilTest.java b/hutool-core/src/test/java/cn/hutool/core/collection/RingIndexUtilTest.java
index 4ff70cdd1f..7ce717aa3b 100644
--- a/hutool-core/src/test/java/cn/hutool/core/collection/RingIndexUtilTest.java
+++ b/hutool-core/src/test/java/cn/hutool/core/collection/RingIndexUtilTest.java
@@ -1,7 +1,7 @@
 package cn.hutool.core.collection;
 
-import cn.hutool.core.lang.Assert;
 import cn.hutool.core.thread.ThreadUtil;
+import org.junit.Assert;
 import org.junit.Test;
 
 import java.util.Arrays;
@@ -27,7 +27,7 @@ public void ringNextIntByObjTest() {
 		ThreadUtil.concurrencyTest(strList.size(), () -> {
 			final int index = RingIndexUtil.ringNextIntByObj(strList, atomicInteger);
 			final String s = strList.get(index);
-			Assert.notNull(s);
+			Assert.assertNotNull(s);
 		});
 	}
 
diff --git a/hutool-core/src/test/java/cn/hutool/core/date/DateUtilTest.java b/hutool-core/src/test/java/cn/hutool/core/date/DateUtilTest.java
index 8495eccd5d..6d3a2529ea 100644
--- a/hutool-core/src/test/java/cn/hutool/core/date/DateUtilTest.java
+++ b/hutool-core/src/test/java/cn/hutool/core/date/DateUtilTest.java
@@ -3,6 +3,7 @@
 import cn.hutool.core.collection.CollUtil;
 import cn.hutool.core.date.BetweenFormatter.Level;
 import cn.hutool.core.date.format.FastDateFormat;
+import cn.hutool.core.lang.Console;
 import cn.hutool.core.util.RandomUtil;
 import org.junit.Assert;
 import org.junit.Test;
@@ -991,6 +992,8 @@ public void parseSingleMonthAndDayTest() {
 		final DateTime parse = DateUtil.parse("2021-1-1");
 		Assert.assertNotNull(parse);
 		Assert.assertEquals("2021-01-01 00:00:00", parse.toString());
+
+		Console.log(DateUtil.parse("2021-1-22 00:00:00"));
 	}
 
 	@Test
diff --git a/hutool-core/src/test/java/cn/hutool/core/exceptions/CheckedUtilTest.java b/hutool-core/src/test/java/cn/hutool/core/exceptions/CheckedUtilTest.java
new file mode 100644
index 0000000000..fbfe82cb2b
--- /dev/null
+++ b/hutool-core/src/test/java/cn/hutool/core/exceptions/CheckedUtilTest.java
@@ -0,0 +1,67 @@
+package cn.hutool.core.exceptions;
+
+import cn.hutool.core.lang.func.Func1;
+import cn.hutool.core.lang.func.VoidFunc0;
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.io.File;
+import java.io.FileInputStream;
+
+/**
+ * 方便的执行会抛出受检查类型异常的方法调用或者代码段
+ * <p>
+ * 该工具通过函数式的方式将那些需要抛出受检查异常的表达式或者代码段转化成一个标准的java8 functional 对象
+ * </p>
+ *
+ * @author conder
+ */
+public class CheckedUtilTest {
+
+
+	@Test
+	public void sleepTest() {
+
+		VoidFunc0 func = () -> Thread.sleep(1000L);
+		func.callWithRuntimeException();
+
+
+	}
+
+
+	@SuppressWarnings("ConstantConditions")
+	@Test
+	public void supplierTest() {
+		File noFile = new File("./no-file");
+		try {
+			//本行代码原本需要抛出受检查异常，现在只抛出运行时异常
+			CheckedUtil.uncheck(() -> new FileInputStream(noFile)).call();
+		} catch (Exception re) {
+			Assert.assertTrue(re instanceof RuntimeException);
+		}
+
+	}
+
+	@SuppressWarnings("ConstantConditions")
+	@Test
+	public void functionTest() {
+		Func1<String, String> afunc = (funcParam) -> {
+			if (funcParam.length() > 5) {
+				throw new Exception("这是受检查异常需要屌用处显示处理");
+			}
+			return funcParam.toUpperCase();
+		};
+
+		//afunc.apply("hello world"); 直接调用需要处理异常
+
+
+		try {
+			//本行代码原本需要抛出受检查异常，现在只抛出运行时异常
+			CheckedUtil.uncheck(afunc).call("hello world");
+		} catch (Exception re) {
+			Assert.assertTrue(re instanceof RuntimeException);
+		}
+
+	}
+
+}
diff --git a/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest.java b/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest.java
index 2d04528bad..712b19b5a3 100644
--- a/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest.java
+++ b/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest.java
@@ -413,6 +413,22 @@ public void getMimeTypeTest() {
 
 		mimeType = FileUtil.getMimeType("test.js");
 		Assert.assertEquals("application/x-javascript", mimeType);
+
+		// office03
+		mimeType = FileUtil.getMimeType("test.doc");
+		Assert.assertEquals("application/msword", mimeType);
+		mimeType = FileUtil.getMimeType("test.xls");
+		Assert.assertEquals("application/vnd.ms-excel", mimeType);
+		mimeType = FileUtil.getMimeType("test.ppt");
+		Assert.assertEquals("application/vnd.ms-powerpoint", mimeType);
+
+		// office07+
+		mimeType = FileUtil.getMimeType("test.docx");
+		Assert.assertEquals("application/vnd.openxmlformats-officedocument.wordprocessingml.document", mimeType);
+		mimeType = FileUtil.getMimeType("test.xlsx");
+		Assert.assertEquals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", mimeType);
+		mimeType = FileUtil.getMimeType("test.pptx");
+		Assert.assertEquals("application/vnd.openxmlformats-officedocument.presentationml.presentation", mimeType);
 	}
 
 	@Test
diff --git a/hutool-core/src/test/java/cn/hutool/core/math/CalculatorTest.java b/hutool-core/src/test/java/cn/hutool/core/math/CalculatorTest.java
index 7c67abdbeb..a79dc6d5d7 100644
--- a/hutool-core/src/test/java/cn/hutool/core/math/CalculatorTest.java
+++ b/hutool-core/src/test/java/cn/hutool/core/math/CalculatorTest.java
@@ -1,7 +1,6 @@
 package cn.hutool.core.math;
 
 import org.junit.Assert;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class CalculatorTest {
@@ -31,10 +30,22 @@ public void conversationTest4(){
 	}
 
 	@Test
-	@Ignore
 	public void conversationTest5(){
 		// https://github.com/dromara/hutool/issues/1984
 		final double conversion = Calculator.conversion("((1/1) / (1/1) -1) * 100");
-		Assert.assertEquals((88D * 66 / 23) % 26, conversion, 2);
+		Assert.assertEquals(0, conversion, 2);
+	}
+
+	@Test
+	public void conversationTest6() {
+		final double conversion = Calculator.conversion("-((2.12-2) * 100)");
+		Assert.assertEquals(-1D * (2.12 - 2) * 100, conversion, 2);
+	}
+
+	@Test
+	public void conversationTest7() {
+		//https://gitee.com/dromara/hutool/issues/I4KONB
+		final double conversion = Calculator.conversion("((-2395+0) * 0.3+140.24+35+90)/30");
+		Assert.assertEquals(-15.11, conversion, 2);
 	}
 }
diff --git a/hutool-core/src/test/java/cn/hutool/core/net/UrlBuilderTest.java b/hutool-core/src/test/java/cn/hutool/core/net/UrlBuilderTest.java
index af4ac5d9b6..07c6e28baf 100644
--- a/hutool-core/src/test/java/cn/hutool/core/net/UrlBuilderTest.java
+++ b/hutool-core/src/test/java/cn/hutool/core/net/UrlBuilderTest.java
@@ -320,4 +320,22 @@ public void paramTest(){
 		final UrlBuilder builder = UrlBuilder.ofHttp(url);
 		Assert.assertEquals(url, builder.toString());
 	}
+
+	@Test
+	public void fragmentTest(){
+		// https://gitee.com/dromara/hutool/issues/I49KAL#note_8060874
+		String url = "https://www.hutool.cn/#/a/b?timestamp=1640391380204";
+		final UrlBuilder builder = UrlBuilder.ofHttp(url);
+
+		Assert.assertEquals(url, builder.toString());
+	}
+
+	@Test
+	public void fragmentAppendParamTest(){
+		// https://gitee.com/dromara/hutool/issues/I49KAL#note_8060874
+		String url = "https://www.hutool.cn/#/a/b";
+		final UrlBuilder builder = UrlBuilder.ofHttp(url);
+		builder.setFragment(builder.getFragment() + "?timestamp=1640391380204");
+		Assert.assertEquals("https://www.hutool.cn/#/a/b?timestamp=1640391380204", builder.toString());
+	}
 }
diff --git a/hutool-core/src/test/java/cn/hutool/core/text/NamingCaseTest.java b/hutool-core/src/test/java/cn/hutool/core/text/NamingCaseTest.java
new file mode 100644
index 0000000000..a8800578ae
--- /dev/null
+++ b/hutool-core/src/test/java/cn/hutool/core/text/NamingCaseTest.java
@@ -0,0 +1,15 @@
+package cn.hutool.core.text;
+
+import cn.hutool.core.lang.Dict;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class NamingCaseTest {
+	@Test
+	public void toUnderlineCaseTest(){
+		// https://github.com/dromara/hutool/issues/2070
+		Dict.create()
+				.set("customerNickV2", "customer_nick_v2")
+				.forEach((key, value) -> Assert.assertEquals(value, NamingCase.toUnderlineCase(key)));
+	}
+}
diff --git a/hutool-core/src/test/java/cn/hutool/core/text/csv/CsvReaderTest.java b/hutool-core/src/test/java/cn/hutool/core/text/csv/CsvReaderTest.java
index 9563ef44e6..291f8b26f3 100644
--- a/hutool-core/src/test/java/cn/hutool/core/text/csv/CsvReaderTest.java
+++ b/hutool-core/src/test/java/cn/hutool/core/text/csv/CsvReaderTest.java
@@ -10,6 +10,7 @@
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.Ignore;
+
 import java.util.List;
 import java.util.Map;
 
@@ -26,7 +27,7 @@ public void readTest() {
 	}
 
 	@Test
-	public void readMapListTest(){
+	public void readMapListTest() {
 		final CsvReader reader = CsvUtil.getReader();
 		final List<Map<String, String>> result = reader.readMapList(
 				ResourceUtil.getUtf8Reader("test_bean.csv"));
@@ -48,7 +49,7 @@ public void readMapListTest(){
 	}
 
 	@Test
-	public void readAliasMapListTest(){
+	public void readAliasMapListTest() {
 		final CsvReadConfig csvReadConfig = CsvReadConfig.defaultConfig();
 		csvReadConfig.addHeaderAlias("姓名", "name");
 
@@ -73,7 +74,7 @@ public void readAliasMapListTest(){
 	}
 
 	@Test
-	public void readBeanListTest(){
+	public void readBeanListTest() {
 		final CsvReader reader = CsvUtil.getReader();
 		final List<TestBean> result = reader.read(
 				ResourceUtil.getUtf8Reader("test_bean.csv"), TestBean.class);
@@ -95,7 +96,7 @@ public void readBeanListTest(){
 	}
 
 	@Data
-	private static class TestBean{
+	private static class TestBean {
 		@Alias("姓名")
 		private String name;
 		private String gender;
@@ -105,7 +106,7 @@ private static class TestBean{
 
 	@Test
 	@Ignore
-	public void readTest2(){
+	public void readTest2() {
 		final CsvReader reader = CsvUtil.getReader();
 		final CsvData read = reader.read(FileUtil.file("d:/test/test.csv"));
 		for (CsvRow strings : read) {
@@ -115,7 +116,7 @@ public void readTest2(){
 
 	@Test
 	@Ignore
-	public void readTest3(){
+	public void readTest3() {
 		final CsvReadConfig csvReadConfig = CsvReadConfig.defaultConfig();
 		csvReadConfig.setContainsHeader(true);
 		final CsvReader reader = CsvUtil.getReader(csvReadConfig);
@@ -126,14 +127,15 @@ public void readTest3(){
 	}
 
 	@Test
-	public void lineNoTest(){
+	public void lineNoTest() {
 		CsvReader reader = new CsvReader();
 		CsvData data = reader.read(ResourceUtil.getReader("test_lines.csv", CharsetUtil.CHARSET_UTF_8));
 		Assert.assertEquals(1, data.getRow(0).getOriginalLineNumber());
 		Assert.assertEquals("a,b,c,d", CollUtil.join(data.getRow(0), ","));
 
 		Assert.assertEquals(4, data.getRow(2).getOriginalLineNumber());
-		Assert.assertEquals("q,w,e,r,我是一段\n带换行的内容", CollUtil.join(data.getRow(2), ","));
+		Assert.assertEquals("q,w,e,r,我是一段\n带换行的内容",
+				CollUtil.join(data.getRow(2), ",").replace("\r", ""));
 
 		// 文件中第3行数据，对应原始行号是6（从0开始）
 		Assert.assertEquals(6, data.getRow(3).getOriginalLineNumber());
@@ -141,7 +143,7 @@ public void lineNoTest(){
 	}
 
 	@Test
-	public void lineLimitTest(){
+	public void lineLimitTest() {
 		// 从原始第2行开始读取
 		CsvReader reader = new CsvReader(CsvReadConfig.defaultConfig().setBeginLineNo(2));
 		CsvData data = reader.read(ResourceUtil.getReader("test_lines.csv", CharsetUtil.CHARSET_UTF_8));
@@ -150,7 +152,8 @@ public void lineLimitTest(){
 		Assert.assertEquals("1,2,3,4", CollUtil.join(data.getRow(0), ","));
 
 		Assert.assertEquals(4, data.getRow(1).getOriginalLineNumber());
-		Assert.assertEquals("q,w,e,r,我是一段\n带换行的内容", CollUtil.join(data.getRow(1), ","));
+		Assert.assertEquals("q,w,e,r,我是一段\n带换行的内容",
+				CollUtil.join(data.getRow(1), ",").replace("\r", ""));
 
 		// 文件中第3行数据，对应原始行号是6（从0开始）
 		Assert.assertEquals(6, data.getRow(2).getOriginalLineNumber());
@@ -158,13 +161,14 @@ public void lineLimitTest(){
 	}
 
 	@Test
-	public void lineLimitWithHeaderTest(){
+	public void lineLimitWithHeaderTest() {
 		// 从原始第2行开始读取
 		CsvReader reader = new CsvReader(CsvReadConfig.defaultConfig().setBeginLineNo(2).setContainsHeader(true));
 		CsvData data = reader.read(ResourceUtil.getReader("test_lines.csv", CharsetUtil.CHARSET_UTF_8));
 
 		Assert.assertEquals(4, data.getRow(0).getOriginalLineNumber());
-		Assert.assertEquals("q,w,e,r,我是一段\n带换行的内容", CollUtil.join(data.getRow(0), ","));
+		Assert.assertEquals("q,w,e,r,我是一段\n带换行的内容",
+				CollUtil.join(data.getRow(0), ",").replace("\r", ""));
 
 		// 文件中第3行数据，对应原始行号是6（从0开始）
 		Assert.assertEquals(6, data.getRow(1).getOriginalLineNumber());
@@ -172,7 +176,7 @@ public void lineLimitWithHeaderTest(){
 	}
 
 	@Test
-	public void customConfigTest(){
+	public void customConfigTest() {
 		final CsvReader reader = CsvUtil.getReader(
 				CsvReadConfig.defaultConfig()
 						.setTextDelimiter('\'')
@@ -185,7 +189,7 @@ public void customConfigTest(){
 	}
 
 	@Test
-	public void readDisableCommentTest(){
+	public void readDisableCommentTest() {
 		final CsvReader reader = CsvUtil.getReader(CsvReadConfig.defaultConfig().disableComment());
 		final CsvData read = reader.read(ResourceUtil.getUtf8Reader("test.csv"));
 		final CsvRow row = read.getRow(0);
@@ -194,7 +198,7 @@ public void readDisableCommentTest(){
 
 	@Test
 	@Ignore
-	public void streamTest(){
+	public void streamTest() {
 		final CsvReader reader = CsvUtil.getReader(ResourceUtil.getUtf8Reader("test_bean.csv"));
 		reader.stream().limit(2).forEach(Console::log);
 	}
diff --git a/hutool-core/src/test/java/cn/hutool/core/text/split/StrSpliterTest.java b/hutool-core/src/test/java/cn/hutool/core/text/split/StrSpliterTest.java
index 8f9d54cafb..8458f70f6b 100644
--- a/hutool-core/src/test/java/cn/hutool/core/text/split/StrSpliterTest.java
+++ b/hutool-core/src/test/java/cn/hutool/core/text/split/StrSpliterTest.java
@@ -60,6 +60,15 @@ public void splitEmptyTest(){
 		String str = "";
 		final String[] split = str.split(",");
 		final String[] strings = StrSplitter.splitToArray(str, ",", -1, false, false);
+		Assert.assertNotNull(strings);
 		Assert.assertArrayEquals(split, strings);
 	}
+
+	@Test
+	public void splitNullTest(){
+		String str = null;
+		final String[] strings = StrSplitter.splitToArray(str, ",", -1, false, false);
+		Assert.assertNotNull(strings);
+		Assert.assertEquals(0, strings.length);
+	}
 }
diff --git a/hutool-core/src/test/java/cn/hutool/core/thread/AsyncUtilTest.java b/hutool-core/src/test/java/cn/hutool/core/thread/AsyncUtilTest.java
index f6a00a4867..89d6640d2a 100644
--- a/hutool-core/src/test/java/cn/hutool/core/thread/AsyncUtilTest.java
+++ b/hutool-core/src/test/java/cn/hutool/core/thread/AsyncUtilTest.java
@@ -1,6 +1,6 @@
 package cn.hutool.core.thread;
 
-import cn.hutool.core.lang.Assert;
+import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;
 
@@ -33,6 +33,6 @@ public void waitAndGetTest() {
 		// 等待完成
 		AsyncUtil.waitAll(hutool, sweater, warm);
 		// 获取结果
-		Assert.isTrue("hutool卫衣真暖和".equals(AsyncUtil.get(hutool) + AsyncUtil.get(sweater) + AsyncUtil.get(warm)));
+		Assert.assertEquals("hutool卫衣真暖和", AsyncUtil.get(hutool) + AsyncUtil.get(sweater) + AsyncUtil.get(warm));
 	}
 }
diff --git a/hutool-core/src/test/java/cn/hutool/core/util/StrUtilTest.java b/hutool-core/src/test/java/cn/hutool/core/util/StrUtilTest.java
index e98ff4dbf4..ee1e1da509 100644
--- a/hutool-core/src/test/java/cn/hutool/core/util/StrUtilTest.java
+++ b/hutool-core/src/test/java/cn/hutool/core/util/StrUtilTest.java
@@ -72,6 +72,14 @@ public void splitTest() {
 		Assert.assertEquals(2, strings.length);
 	}
 
+	@Test
+	public void splitEmptyTest() {
+		String str = "";
+		List<String> split = StrUtil.split(str, ',', -1, true, true);
+		// 测试空是否被去掉
+		Assert.assertEquals(0, split.size());
+	}
+
 	@Test
 	public void splitTest2() {
 		String str = "a.b.";
@@ -81,9 +89,9 @@ public void splitTest2() {
 		Assert.assertEquals("", split.get(2));
 	}
 
-	@Test(expected = IllegalArgumentException.class)
+	@Test
 	public void splitNullTest() {
-		StrUtil.split(null, '.');
+		Assert.assertEquals(0, StrUtil.split(null, '.').size());
 	}
 
 	@Test(expected = IllegalArgumentException.class)
@@ -235,6 +243,17 @@ public void replaceTest4() {
 		Assert.assertEquals("103", result1);
 	}
 
+	@Test
+	public void replaceTest5() {
+		String a = "\uD853\uDC09秀秀";
+		String result = StrUtil.replace(a, 1, a.length(), '*');
+		Assert.assertEquals("\uD853\uDC09**", result);
+
+		String aa = "规划大师";
+		String result1 = StrUtil.replace(aa, 2, a.length(), '*');
+		Assert.assertEquals("规划**", result1);
+	}
+
 	@Test
 	public void upperFirstTest() {
 		StringBuilder sb = new StringBuilder("KEY");
@@ -402,12 +421,6 @@ public void toUnderLineCaseTest() {
 				.set("HelloWorld_test", "hello_world_test")
 				.set("H2", "H2")
 				.set("H#case", "H#case")
-				.forEach((key, value) -> Assert.assertEquals(value, StrUtil.toUnderlineCase(key)));
-	}
-
-	@Test
-	public void toUnderLineCaseTest2() {
-		Dict.create()
 				.set("PNLabel", "PN_label")
 				.forEach((key, value) -> Assert.assertEquals(value, StrUtil.toUnderlineCase(key)));
 	}
@@ -508,12 +521,28 @@ public void subBetweenAllTest3() {
 		Assert.assertEquals("abc", strings[0]);
 	}
 
+	@Test
+	public void subBetweenAllTest4() {
+		String str = "你好:1388681xxxx用户已开通,1877275xxxx用户已开通,无法发送业务开通短信";
+		String[] strings = StrUtil.subBetweenAll(str, "1877275xxxx", ",");
+		Assert.assertEquals(1, strings.length);
+		Assert.assertEquals("用户已开通", strings[0]);
+	}
+
 	@Test
 	public void briefTest() {
-		String str = RandomUtil.randomString(1000);
-		int maxLength = RandomUtil.randomInt(1000);
-		String brief = StrUtil.brief(str, maxLength);
-		Assert.assertEquals(brief.length(), maxLength);
+		// case: 1 至 str.length - 1
+		String str = RandomUtil.randomString(RandomUtil.randomInt(1, 100));
+		for (int maxLength = 1; maxLength < str.length(); maxLength++) {
+			String brief = StrUtil.brief(str, maxLength);
+			Assert.assertEquals(brief.length(), maxLength);
+		}
+
+		// case: 不会格式化的值
+		Assert.assertEquals(str, StrUtil.brief(str, 0));
+		Assert.assertEquals(str, StrUtil.brief(str, -1));
+		Assert.assertEquals(str, StrUtil.brief(str, str.length()));
+		Assert.assertEquals(str, StrUtil.brief(str, str.length() + 1));
 	}
 
 	@Test
@@ -535,8 +564,21 @@ public void briefTest2() {
 	@Test
 	public void briefTest3() {
 		String str = "123abc";
-		int maxLength = 3;
+
+		int maxLength = 6;
 		String brief = StrUtil.brief(str, maxLength);
+		Assert.assertEquals(str, brief);
+
+		maxLength = 5;
+		brief = StrUtil.brief(str, maxLength);
+		Assert.assertEquals("1...c", brief);
+
+		maxLength = 4;
+		brief = StrUtil.brief(str, maxLength);
+		Assert.assertEquals("1..c", brief);
+
+		maxLength = 3;
+		brief = StrUtil.brief(str, maxLength);
 		Assert.assertEquals("1.c", brief);
 
 		maxLength = 2;
diff --git a/hutool-cron/pom.xml b/hutool-cron/pom.xml
index 529356edb1..ba2fdbfd24 100644
--- a/hutool-cron/pom.xml
+++ b/hutool-cron/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-cron</artifactId>
diff --git a/hutool-crypto/pom.xml b/hutool-crypto/pom.xml
index 2dcf99756a..46da18d6b8 100644
--- a/hutool-crypto/pom.xml
+++ b/hutool-crypto/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-crypto</artifactId>
diff --git a/hutool-crypto/src/main/java/cn/hutool/crypto/asymmetric/SM2.java b/hutool-crypto/src/main/java/cn/hutool/crypto/asymmetric/SM2.java
index 278ecf1cca..553b9dfdb8 100644
--- a/hutool-crypto/src/main/java/cn/hutool/crypto/asymmetric/SM2.java
+++ b/hutool-crypto/src/main/java/cn/hutool/crypto/asymmetric/SM2.java
@@ -531,7 +531,7 @@ public byte[] getD() {
 	 * @since 5.7.17
 	 */
 	public String getDHex() {
-		return getDBigInteger().toString(16);
+		return String.format("%064x", new BigInteger(1, getD()));
 	}
 
 	/**
diff --git a/hutool-crypto/src/test/java/cn/hutool/crypto/test/BCUtilTest.java b/hutool-crypto/src/test/java/cn/hutool/crypto/test/BCUtilTest.java
index ce324c6c31..8a922cdef5 100644
--- a/hutool-crypto/src/test/java/cn/hutool/crypto/test/BCUtilTest.java
+++ b/hutool-crypto/src/test/java/cn/hutool/crypto/test/BCUtilTest.java
@@ -1,9 +1,9 @@
 package cn.hutool.crypto.test;
 
-import cn.hutool.core.lang.Assert;
 import cn.hutool.crypto.BCUtil;
 import org.bouncycastle.crypto.params.ECPrivateKeyParameters;
 import org.bouncycastle.crypto.params.ECPublicKeyParameters;
+import org.junit.Assert;
 import org.junit.Test;
 
 public class BCUtilTest {
@@ -17,7 +17,7 @@ public void createECPublicKeyParametersTest() {
 		String y = "F7E938B02EED7280277493B8556E5B01CB436E018A562DFDC53342BF41FDF728";
 
 		final ECPublicKeyParameters keyParameters = BCUtil.toSm2Params(x, y);
-		Assert.notNull(keyParameters);
+		Assert.assertNotNull(keyParameters);
 	}
 
 	@Test
@@ -25,6 +25,6 @@ public void createECPrivateKeyParametersTest() {
 		String privateKeyHex = "5F6CA5BB044C40ED2355F0372BF72A5B3AE6943712F9FDB7C1FFBAECC06F3829";
 
 		final ECPrivateKeyParameters keyParameters = BCUtil.toSm2Params(privateKeyHex);
-		Assert.notNull(keyParameters);
+		Assert.assertNotNull(keyParameters);
 	}
 }
diff --git a/hutool-db/pom.xml b/hutool-db/pom.xml
index 6a3699bf32..7b35e41ade 100644
--- a/hutool-db/pom.xml
+++ b/hutool-db/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-db</artifactId>
@@ -155,7 +155,7 @@
 		<dependency>
 			<groupId>com.microsoft.sqlserver</groupId>
 			<artifactId>mssql-jdbc</artifactId>
-			<version>7.4.1.jre8</version>
+			<version>9.4.1.jre8</version>
 			<scope>test</scope>
 		</dependency>
 		<dependency>
@@ -167,7 +167,7 @@
 		<dependency>
 			<groupId>com.h2database</groupId>
 			<artifactId>h2</artifactId>
-			<version>2.0.202</version>
+			<version>2.0.206</version>
 			<scope>test</scope>
 		</dependency>
 		<dependency>
diff --git a/hutool-db/src/main/java/cn/hutool/db/sql/Condition.java b/hutool-db/src/main/java/cn/hutool/db/sql/Condition.java
index 3dd6bc5ea5..cfbfcc251d 100644
--- a/hutool-db/src/main/java/cn/hutool/db/sql/Condition.java
+++ b/hutool-db/src/main/java/cn/hutool/db/sql/Condition.java
@@ -409,12 +409,15 @@ private void buildValuePartForIN(StringBuilder conditionStrBuilder, List<Object>
 		conditionStrBuilder.append(" (");
 		final Object value = this.value;
 		if (isPlaceHolder()) {
-			List<?> valuesForIn;
+			Collection<?> valuesForIn;
 			// 占位符对应值列表
-			if (value instanceof CharSequence) {
+			if (value instanceof Collection) {
+				// pr#2046@Github
+				valuesForIn = (Collection<?>) value;
+			} else if (value instanceof CharSequence) {
 				valuesForIn = StrUtil.split((CharSequence) value, ',');
 			} else {
-				valuesForIn = Arrays.asList(Convert.convert(String[].class, value));
+				valuesForIn = Arrays.asList(Convert.convert(Object[].class, value));
 			}
 			conditionStrBuilder.append(StrUtil.repeatAndJoin("?", valuesForIn.size(), ","));
 			if (null != paramValues) {
diff --git a/hutool-dfa/pom.xml b/hutool-dfa/pom.xml
index 519cbd8d34..37bd3ae428 100644
--- a/hutool-dfa/pom.xml
+++ b/hutool-dfa/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-dfa</artifactId>
diff --git a/hutool-extra/pom.xml b/hutool-extra/pom.xml
index eef9e8db7b..2fd49d2726 100644
--- a/hutool-extra/pom.xml
+++ b/hutool-extra/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-extra</artifactId>
@@ -19,13 +19,14 @@
 	<properties>
 		<!-- versions -->
 		<velocity.version>2.3</velocity.version>
-		<beetl.version>3.9.1.RELEASE</beetl.version>
+		<beetl.version>3.9.3.RELEASE</beetl.version>
 		<rythm.version>1.4.1</rythm.version>
 		<freemarker.version>2.3.31</freemarker.version>
 		<enjoy.version>4.9.16</enjoy.version>
 		<thymeleaf.version>3.0.14.RELEASE</thymeleaf.version>
 		<mail.version>1.6.2</mail.version>
 		<jsch.version>0.1.55</jsch.version>
+		<sshj.version>0.32.0</sshj.version>
 		<zxing.version>3.4.1</zxing.version>
 		<net.version>3.8.0</net.version>
 		<emoji-java.version>5.1.1</emoji-java.version>
@@ -136,6 +137,13 @@
 			<scope>compile</scope>
 			<optional>true</optional>
 		</dependency>
+		<dependency>
+			<groupId>com.hierynomus</groupId>
+			<artifactId>sshj</artifactId>
+			<version>${sshj.version}</version>
+			<scope>compile</scope>
+			<optional>true</optional>
+		</dependency>
 		<dependency>
 			<groupId>ch.ethz.ganymed</groupId>
 			<artifactId>ganymed-ssh2</artifactId>
@@ -162,7 +170,7 @@
 		<dependency>
 			<groupId>org.apache.ftpserver</groupId>
 			<artifactId>ftpserver-core</artifactId>
-			<version>1.1.1</version>
+			<version>1.1.2</version>
 			<scope>compile</scope>
 			<exclusions>
 				<exclusion>
@@ -418,7 +426,7 @@
 		<dependency>
 			<groupId>org.mvel</groupId>
 			<artifactId>mvel2</artifactId>
-			<version>2.4.13.Final</version>
+			<version>2.4.14.Final</version>
 			<scope>compile</scope>
 			<optional>true</optional>
 		</dependency>
@@ -439,7 +447,7 @@
 		<dependency>
 			<groupId>org.mozilla</groupId>
 			<artifactId>rhino</artifactId>
-			<version>1.7.13</version>
+			<version>1.7.14</version>
 			<scope>compile</scope>
 			<optional>true</optional>
 		</dependency>
diff --git a/hutool-extra/src/main/java/cn/hutool/extra/servlet/ServletUtil.java b/hutool-extra/src/main/java/cn/hutool/extra/servlet/ServletUtil.java
index e0ebb429ff..5c1391b174 100644
--- a/hutool-extra/src/main/java/cn/hutool/extra/servlet/ServletUtil.java
+++ b/hutool-extra/src/main/java/cn/hutool/extra/servlet/ServletUtil.java
@@ -553,24 +553,27 @@ public static void write(HttpServletResponse response, File file) {
 	 *
 	 * @param response    响应对象{@link HttpServletResponse}
 	 * @param in          需要返回客户端的内容
-	 * @param contentType 返回的类型
-	 *                    如：
-	 *                    1、application/pdf、
-	 *                    2、application/vnd.ms-excel、
-	 *                    3、application/msword、
-	 *                    4、application/vnd.ms-powerpoint
+	 * @param contentType 返回的类型，可以使用{@link FileUtil#getMimeType(String)}获取对应扩展名的MIME信息
+	 *                    <ul>
+	 *                      <li>application/pdf</li>
+	 *                      <li>application/vnd.ms-excel</li>
+	 *                      <li>application/msword</li>
+	 *                      <li>application/vnd.ms-powerpoint</li>
+	 *                    </ul>
 	 *                    docx、xlsx 这种 office 2007 格式 设置 MIME;网页里面docx 文件是没问题，但是下载下来了之后就变成doc格式了
-	 *                    https://blog.csdn.net/cyh2260629/article/details/73824760
-	 *                    5、MIME_EXCELX_TYPE = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
-	 *                    6、MIME_PPTX_TYPE = "application/vnd.openxmlformats-officedocument.presentationml.presentation";
-	 *                    7、MIME_WORDX_TYPE = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
-	 *                    8、MIME_STREAM_TYPE = "application/octet-stream;charset=utf-8"; #原始字节流
-	 * @param fileName    文件名
+	 *                    参考：https://my.oschina.net/shixiaobao17145/blog/32489
+	 *                    <ul>
+	 *                      <li>MIME_EXCELX_TYPE = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";</li>
+	 *                      <li>MIME_PPTX_TYPE = "application/vnd.openxmlformats-officedocument.presentationml.presentation";</li>
+	 *                      <li>MIME_WORDX_TYPE = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";</li>
+	 *                      <li>MIME_STREAM_TYPE = "application/octet-stream;charset=utf-8"; #原始字节流</li>
+	 *                    </ul>
+	 * @param fileName    文件名，自动添加双引号
 	 * @since 4.1.15
 	 */
 	public static void write(HttpServletResponse response, InputStream in, String contentType, String fileName) {
 		final String charset = ObjectUtil.defaultIfNull(response.getCharacterEncoding(), CharsetUtil.UTF_8);
-		response.setHeader("Content-Disposition", StrUtil.format("attachment;filename={}",
+		response.setHeader("Content-Disposition", StrUtil.format("attachment;filename=\"{}\"",
 				URLUtil.encode(fileName, CharsetUtil.charset(charset))));
 		response.setContentType(contentType);
 		write(response, in);
diff --git a/hutool-extra/src/main/java/cn/hutool/extra/ssh/Sftp.java b/hutool-extra/src/main/java/cn/hutool/extra/ssh/Sftp.java
index c553b33c81..60d633dca4 100644
--- a/hutool-extra/src/main/java/cn/hutool/extra/ssh/Sftp.java
+++ b/hutool-extra/src/main/java/cn/hutool/extra/ssh/Sftp.java
@@ -338,7 +338,9 @@ public boolean isDir(String dir) {
 		try {
 			sftpATTRS = this.channel.stat(dir);
 		} catch (SftpException e) {
-			if (e.getMessage().contains("No such file")) {
+			final String msg = e.getMessage();
+			// issue#I4P9ED@Gitee
+			if (msg.contains("No such file") || msg.contains("does not exist")) {
 				// 文件不存在直接返回false
 				// pr#378@Gitee
 				return false;
diff --git a/hutool-extra/src/main/java/cn/hutool/extra/ssh/SshjSftp.java b/hutool-extra/src/main/java/cn/hutool/extra/ssh/SshjSftp.java
new file mode 100644
index 0000000000..d458420c16
--- /dev/null
+++ b/hutool-extra/src/main/java/cn/hutool/extra/ssh/SshjSftp.java
@@ -0,0 +1,261 @@
+package cn.hutool.extra.ssh;
+
+import cn.hutool.core.collection.CollUtil;
+import cn.hutool.core.io.IoUtil;
+import cn.hutool.core.util.CharsetUtil;
+import cn.hutool.core.util.StrUtil;
+import cn.hutool.extra.ftp.AbstractFtp;
+import cn.hutool.extra.ftp.FtpConfig;
+import cn.hutool.extra.ftp.FtpException;
+import net.schmizz.sshj.SSHClient;
+import net.schmizz.sshj.connection.channel.direct.Session;
+import net.schmizz.sshj.sftp.RemoteResourceInfo;
+import net.schmizz.sshj.sftp.SFTPClient;
+import net.schmizz.sshj.transport.verification.PromiscuousVerifier;
+import net.schmizz.sshj.xfer.FileSystemFile;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.charset.Charset;
+import java.util.List;
+
+/**
+ * 在使用jsch 进行sftp协议下载文件时，总是中文乱码，而该框架源码又不允许设置编码。故：站在巨人的肩膀上，此类便孕育而出。
+ *
+ * <p>
+ * 基于sshj 框架适配。<br>
+ * 参考：https://github.com/hierynomus/sshj
+ * </p>
+ *
+ * @author youyongkun
+ * @since 5.7.19
+ */
+public class SshjSftp extends AbstractFtp {
+
+	private SSHClient ssh;
+	private SFTPClient sftp;
+
+	/**
+	 * 构造，使用默认端口
+	 *
+	 * @param sshHost 主机
+	 */
+	public SshjSftp(String sshHost) {
+		this(new FtpConfig(sshHost, 22, null, null, CharsetUtil.CHARSET_UTF_8));
+	}
+
+	/**
+	 * 构造
+	 *
+	 * @param sshHost 主机
+	 * @param sshUser 用户名
+	 * @param sshPass 密码
+	 */
+	public SshjSftp(String sshHost, String sshUser, String sshPass) {
+		this(new FtpConfig(sshHost, 22, sshUser, sshPass, CharsetUtil.CHARSET_UTF_8));
+	}
+
+	/**
+	 * 构造
+	 *
+	 * @param sshHost 主机
+	 * @param sshPort 端口
+	 * @param sshUser 用户名
+	 * @param sshPass 密码
+	 */
+	public SshjSftp(String sshHost, int sshPort, String sshUser, String sshPass) {
+		this(new FtpConfig(sshHost, sshPort, sshUser, sshPass, CharsetUtil.CHARSET_UTF_8));
+	}
+
+	/**
+	 * 构造
+	 *
+	 * @param sshHost 主机
+	 * @param sshPort 端口
+	 * @param sshUser 用户名
+	 * @param sshPass 密码
+	 * @param charset 编码
+	 */
+	public SshjSftp(String sshHost, int sshPort, String sshUser, String sshPass, Charset charset) {
+		this(new FtpConfig(sshHost, sshPort, sshUser, sshPass, charset));
+	}
+
+	/**
+	 * 构造
+	 *
+	 * @param config FTP配置
+	 * @since 5.3.3
+	 */
+	protected SshjSftp(FtpConfig config) {
+		super(config);
+		init();
+	}
+
+	/**
+	 * SSH 初始化并创建一个sftp客户端.
+	 *
+	 * @author youyongkun
+	 * @since 5.7.18
+	 */
+	public void init() {
+		this.ssh = new SSHClient();
+		ssh.addHostKeyVerifier(new PromiscuousVerifier());
+		try {
+			ssh.connect(ftpConfig.getHost());
+			ssh.authPassword(ftpConfig.getUser(), ftpConfig.getPassword());
+			ssh.setRemoteCharset(ftpConfig.getCharset());
+			this.sftp = ssh.newSFTPClient();
+		} catch (IOException e) {
+			throw new FtpException("sftp 初始化失败.", e);
+		}
+	}
+
+	@Override
+	public AbstractFtp reconnectIfTimeout() {
+		if (StrUtil.isBlank(this.ftpConfig.getHost())) {
+			throw new FtpException("Host is blank!");
+		}
+		try {
+			this.cd(StrUtil.SLASH);
+		} catch (FtpException e) {
+			close();
+			init();
+		}
+		return this;
+	}
+
+	@Override
+	public boolean cd(String directory) {
+		String exec = String.format("cd %s", directory);
+		command(exec);
+		String pwd = pwd();
+		return pwd.equals(directory);
+	}
+
+	@Override
+	public String pwd() {
+		return command("pwd");
+	}
+
+	@Override
+	public boolean mkdir(String dir) {
+		try {
+			sftp.mkdir(dir);
+		} catch (IOException e) {
+			throw new FtpException(e);
+		}
+		return containsFile(dir);
+	}
+
+	@Override
+	public List<String> ls(String path) {
+		List<RemoteResourceInfo> infoList;
+		try {
+			infoList = sftp.ls(path);
+		} catch (IOException e) {
+			throw new FtpException(e);
+		}
+		if (CollUtil.isNotEmpty(infoList)) {
+			return CollUtil.map(infoList, RemoteResourceInfo::getName, true);
+		}
+		return null;
+	}
+
+	@Override
+	public boolean delFile(String path) {
+		try {
+			sftp.rm(path);
+			return !containsFile(path);
+		} catch (IOException e) {
+			throw new FtpException(e);
+		}
+	}
+
+	@Override
+	public boolean delDir(String dirPath) {
+		try {
+			sftp.rmdir(dirPath);
+			return !containsFile(dirPath);
+		} catch (IOException e) {
+			throw new FtpException(e);
+		}
+	}
+
+	@Override
+	public boolean upload(String destPath, File file) {
+		try {
+			sftp.put(new FileSystemFile(file), destPath);
+			return containsFile(destPath);
+		} catch (IOException e) {
+			throw new FtpException(e);
+		}
+	}
+
+	@Override
+	public void download(String path, File outFile) {
+		try {
+			sftp.get(path, new FileSystemFile(outFile));
+		} catch (IOException e) {
+			throw new FtpException(e);
+		}
+	}
+
+	@Override
+	public void recursiveDownloadFolder(String sourcePath, File destDir) {
+		List<String> files = ls(sourcePath);
+		if (files != null && !files.isEmpty()) {
+			files.forEach(path -> download(sourcePath + "/" + path, destDir));
+		}
+	}
+
+	@Override
+	public void close() {
+		try {
+			sftp.close();
+			ssh.disconnect();
+		} catch (IOException e) {
+			throw new FtpException(e);
+		}
+	}
+
+	/**
+	 * 是否包含该文件
+	 *
+	 * @param fileDir 文件绝对路径
+	 * @return true:包含 false:不包含
+	 * @author youyongkun
+	 * @since 5.7.18
+	 */
+	public boolean containsFile(String fileDir) {
+		try {
+			sftp.lstat(fileDir);
+			return true;
+		} catch (IOException e) {
+			return false;
+		}
+	}
+
+
+	/**
+	 * 执行Linux 命令
+	 *
+	 * @param exec 命令
+	 * @return 返回响应结果.
+	 * @author youyongkun
+	 * @since 5.7.19
+	 */
+	public String command(String exec) {
+		Session session = null;
+		try {
+			session = ssh.startSession();
+			final Session.Command command = session.exec(exec);
+			InputStream inputStream = command.getInputStream();
+			return IoUtil.read(inputStream, DEFAULT_CHARSET);
+		} catch (Exception e) {
+			throw new FtpException(e);
+		} finally {
+			IoUtil.close(session);
+		}
+	}
+}
diff --git a/hutool-extra/src/test/java/cn/hutool/extra/ssh/SftpTest.java b/hutool-extra/src/test/java/cn/hutool/extra/ssh/SftpTest.java
new file mode 100644
index 0000000000..1de875877a
--- /dev/null
+++ b/hutool-extra/src/test/java/cn/hutool/extra/ssh/SftpTest.java
@@ -0,0 +1,67 @@
+package cn.hutool.extra.ssh;
+
+import cn.hutool.core.util.CharsetUtil;
+import org.junit.Before;
+import org.junit.Ignore;
+import org.junit.Test;
+
+import java.io.File;
+import java.util.List;
+
+/**
+ * 基于sshj 框架SFTP 封装测试.
+ *
+ * @author youyongkun
+ * @since 5.7.18
+ */
+public class SftpTest {
+
+	private SshjSftp sshjSftp;
+
+	@Before
+	@Ignore
+	public void init() {
+		sshjSftp = new SshjSftp("ip", 22, "test", "test", CharsetUtil.CHARSET_UTF_8);
+	}
+
+	@Test
+	@Ignore
+	public void lsTest() {
+		List<String> files = sshjSftp.ls("/");
+		if (files != null && !files.isEmpty()) {
+			files.forEach(System.out::print);
+		}
+	}
+
+	@Test
+	@Ignore
+	public void downloadTest() {
+		sshjSftp.recursiveDownloadFolder("/home/test/temp", new File("C:\\Users\\akwangl\\Downloads\\temp"));
+	}
+
+	@Test
+	@Ignore
+	public void uploadTest() {
+		sshjSftp.upload("/home/test/temp/", new File("C:\\Users\\akwangl\\Downloads\\temp\\辽宁_20190718_104324.CIME"));
+	}
+
+	@Test
+	@Ignore
+	public void mkDirTest() {
+		boolean flag = sshjSftp.mkdir("/home/test/temp");
+		System.out.println("是否创建成功: " + flag);
+	}
+
+	@Test
+	@Ignore
+	public void mkDirsTest() {
+		// 在当前目录下批量创建目录
+		sshjSftp.mkDirs("/home/test/temp");
+	}
+
+	@Test
+	@Ignore
+	public void delDirTest() {
+		sshjSftp.delDir("/home/test/temp");
+	}
+}
diff --git a/hutool-http/pom.xml b/hutool-http/pom.xml
index 8133789722..de2525d338 100644
--- a/hutool-http/pom.xml
+++ b/hutool-http/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-http</artifactId>
diff --git a/hutool-http/src/main/java/cn/hutool/http/HttpGlobalConfig.java b/hutool-http/src/main/java/cn/hutool/http/HttpGlobalConfig.java
index ae76d932d0..9180855929 100755
--- a/hutool-http/src/main/java/cn/hutool/http/HttpGlobalConfig.java
+++ b/hutool-http/src/main/java/cn/hutool/http/HttpGlobalConfig.java
@@ -20,9 +20,18 @@
 public class HttpGlobalConfig implements Serializable {
 	private static final long serialVersionUID = 1L;
 
-	protected static int timeout = -1;
+	/**
+	 * -1: 含义，永不超时。
+	 * 如果：设置timeout = 3s(3000 ms), 那一次请求最大超时：就是：6s
+	 * 官方含义：timeout of zero is interpreted as an infinite timeout. （0的超时被解释为无限超时。）
+	 * 这里实际项目一定要进行修改，防止把系统拖死.
+	 * 底层调用：{@link HttpURLConnection#setReadTimeout(int)} 同时设置: 读取超时
+	 * 底层调用：{@link HttpURLConnection#setConnectTimeout(int)} 同时设置: 连接超时
+	 */
+	private static int timeout = -1;
 	private static boolean isAllowPatch = false;
 	private static String boundary = "--------------------Hutool_" + RandomUtil.randomString(16);
+	private static int maxRedirectCount = 0;
 
 	/**
 	 * 获取全局默认的超时时长
@@ -34,7 +43,13 @@ public static int getTimeout() {
 	}
 
 	/**
-	 * 设置默认的连接和读取超时时长
+	 * 设置默认的连接和读取超时时长<br>
+	 * -1: 含义，永不超时。<br>
+	 * 如果：设置timeout = 3s(3000 ms), 那一次请求最大超时：就是：6s<br>
+	 * 官方含义：timeout of zero is interpreted as an infinite timeout. （0的超时被解释为无限超时。）<br>
+	 * 这里实际项目一定要进行修改，防止把系统拖死.<br>
+	 * 底层调用：{@link HttpURLConnection#setReadTimeout(int)} 同时设置: 读取超时<br>
+	 * 底层调用：{@link HttpURLConnection#setConnectTimeout(int)} 同时设置: 连接超时
 	 *
 	 * @param customTimeout 超时时长
 	 */
@@ -62,6 +77,28 @@ synchronized public static void setBoundary(String customBoundary) {
 		boundary = customBoundary;
 	}
 
+	/**
+	 * 获取全局默认的最大重定向次数，如设置0表示不重定向<br>
+	 * 如果设置为1，表示重定向一次，即请求两次
+	 *
+	 * @return 全局默认的最大重定向次数
+	 * @since 5.7.19
+	 */
+	public static int getMaxRedirectCount() {
+		return maxRedirectCount;
+	}
+
+	/**
+	 * 设置默认全局默认的最大重定向次数，如设置0表示不重定向<br>
+	 * 如果设置为1，表示重定向一次，即请求两次
+	 *
+	 * @param customMaxRedirectCount 全局默认的最大重定向次数
+	 * @since 5.7.19
+	 */
+	synchronized public static void setMaxRedirectCount(int customMaxRedirectCount) {
+		maxRedirectCount = customMaxRedirectCount;
+	}
+
 	/**
 	 * 获取Cookie管理器，用于自定义Cookie管理
 	 *
@@ -80,7 +117,7 @@ public static CookieManager getCookieManager() {
 	 * @since 4.5.14
 	 * @see GlobalCookieManager#setCookieManager(CookieManager)
 	 */
-	public static void setCookieManager(CookieManager customCookieManager) {
+	synchronized public static void setCookieManager(CookieManager customCookieManager) {
 		GlobalCookieManager.setCookieManager(customCookieManager);
 	}
 
@@ -90,7 +127,7 @@ public static void setCookieManager(CookieManager customCookieManager) {
 	 * @since 4.1.9
 	 * @see GlobalCookieManager#setCookieManager(CookieManager)
 	 */
-	public static void closeCookie() {
+	synchronized public static void closeCookie() {
 		GlobalCookieManager.setCookieManager(null);
 	}
 
diff --git a/hutool-http/src/main/java/cn/hutool/http/HttpRequest.java b/hutool-http/src/main/java/cn/hutool/http/HttpRequest.java
index 7f07ff7102..7c7a68e35a 100644
--- a/hutool-http/src/main/java/cn/hutool/http/HttpRequest.java
+++ b/hutool-http/src/main/java/cn/hutool/http/HttpRequest.java
@@ -148,7 +148,7 @@ public static HttpRequest of(String url) {
 	 * @since 5.7.18
 	 */
 	public static HttpRequest of(String url, Charset charset) {
-		return new HttpRequest(UrlBuilder.of(url, charset));
+		return new HttpRequest(UrlBuilder.ofHttp(url, charset));
 	}
 
 	/**
@@ -206,11 +206,11 @@ public static void closeCookie() {
 	/**
 	 * 默认连接超时
 	 */
-	private int connectionTimeout = HttpGlobalConfig.timeout;
+	private int connectionTimeout = HttpGlobalConfig.getTimeout();
 	/**
 	 * 默认读取超时
 	 */
-	private int readTimeout = HttpGlobalConfig.timeout;
+	private int readTimeout = HttpGlobalConfig.getTimeout();
 	/**
 	 * 存储表单数据
 	 */
@@ -243,7 +243,7 @@ public static void closeCookie() {
 	/**
 	 * 最大重定向次数
 	 */
-	private int maxRedirectCount;
+	private int maxRedirectCount = HttpGlobalConfig.getMaxRedirectCount();
 	/**
 	 * Chuncked块大小，0或小于0表示不设置Chuncked模式
 	 */
@@ -1131,8 +1131,8 @@ private void initConnection() {
 				.setReadTimeout(this.readTimeout)//
 				.setMethod(this.method)//
 				.setHttpsInfo(this.hostnameVerifier, this.ssf)//
-				// 定义转发
-				.setInstanceFollowRedirects(this.maxRedirectCount > 0)
+				// 关闭JDK自动转发，采用手动转发方式
+				.setInstanceFollowRedirects(false)
 				// 流方式上传数据
 				.setChunkedStreamingMode(this.blockSize)
 				// 覆盖默认Header
@@ -1174,13 +1174,8 @@ private void urlWithParamIfGet() {
 	 * @return {@link HttpResponse}，无转发返回 {@code null}
 	 */
 	private HttpResponse sendRedirectIfPossible(boolean isAsync) {
-		if (this.maxRedirectCount < 1) {
-			// 不重定向
-			return null;
-		}
-
 		// 手动实现重定向
-		if (this.httpConnection.getHttpURLConnection().getInstanceFollowRedirects()) {
+		if (this.maxRedirectCount > 0) {
 			int responseCode;
 			try {
 				responseCode = httpConnection.responseCode();
@@ -1195,6 +1190,7 @@ private HttpResponse sendRedirectIfPossible(boolean isAsync) {
 					setUrl(httpConnection.header(Header.LOCATION));
 					if (redirectCount < this.maxRedirectCount) {
 						redirectCount++;
+						// 重定向不再走过滤器
 						return doExecute(isAsync, null);
 					}
 				}
diff --git a/hutool-http/src/main/java/cn/hutool/http/HttpUtil.java b/hutool-http/src/main/java/cn/hutool/http/HttpUtil.java
index ffe7ed669e..a6904f6f4f 100644
--- a/hutool-http/src/main/java/cn/hutool/http/HttpUtil.java
+++ b/hutool-http/src/main/java/cn/hutool/http/HttpUtil.java
@@ -130,7 +130,7 @@ public static String get(String urlString, Charset customCharset) {
 	 * @return 返回内容，如果只检查状态码，正常只返回 ""，不正常返回 null
 	 */
 	public static String get(String urlString) {
-		return get(urlString, HttpGlobalConfig.timeout);
+		return get(urlString, HttpGlobalConfig.getTimeout());
 	}
 
 	/**
@@ -177,7 +177,7 @@ public static String get(String urlString, Map<String, Object> paramMap, int tim
 	 * @return 返回数据
 	 */
 	public static String post(String urlString, Map<String, Object> paramMap) {
-		return post(urlString, paramMap, HttpGlobalConfig.timeout);
+		return post(urlString, paramMap, HttpGlobalConfig.getTimeout());
 	}
 
 	/**
@@ -207,7 +207,7 @@ public static String post(String urlString, Map<String, Object> paramMap, int ti
 	 * @return 返回数据
 	 */
 	public static String post(String urlString, String body) {
-		return post(urlString, body, HttpGlobalConfig.timeout);
+		return post(urlString, body, HttpGlobalConfig.getTimeout());
 	}
 
 	/**
diff --git a/hutool-http/src/test/java/cn/hutool/http/HttpRequestTest.java b/hutool-http/src/test/java/cn/hutool/http/HttpRequestTest.java
index c1cb54e9d1..1c5e32d898 100644
--- a/hutool-http/src/test/java/cn/hutool/http/HttpRequestTest.java
+++ b/hutool-http/src/test/java/cn/hutool/http/HttpRequestTest.java
@@ -149,4 +149,23 @@ public void getWithoutEncodeTest() {
 		Console.log(execute.body());
 	}
 
+	@Test
+	@Ignore
+	public void followRedirectsTest(){
+		// 从5.7.19开始关闭JDK的自动重定向功能，改为手动重定向
+		// 当有多层重定向时，JDK的重定向会失效，或者说只有最后一个重定向有效，因此改为手动更易控制次数
+		// 此链接有两次重定向，当设置次数为1时，表示最多执行一次重定向，即请求2次
+		String url = "http://api.rosysun.cn/sjtx/?type=2";
+//		String url = "https://api.btstu.cn/sjtx/api.php?lx=b1";
+
+		// 方式1：全局设置
+		HttpGlobalConfig.setMaxRedirectCount(1);
+		HttpResponse execute = HttpRequest.get(url).execute();
+		Console.log(execute.getStatus(), execute.header(Header.LOCATION));
+
+		// 方式2，单独设置
+		execute = HttpRequest.get(url).setMaxRedirectCount(1).execute();
+		Console.log(execute.getStatus(), execute.header(Header.LOCATION));
+	}
+
 }
diff --git a/hutool-http/src/test/java/cn/hutool/http/UploadTest.java b/hutool-http/src/test/java/cn/hutool/http/UploadTest.java
index aa753956d7..6d863cdf0b 100644
--- a/hutool-http/src/test/java/cn/hutool/http/UploadTest.java
+++ b/hutool-http/src/test/java/cn/hutool/http/UploadTest.java
@@ -68,4 +68,20 @@ public void uploadTest2() {
 		HttpResponse httpResponse = httpRequest.execute();
 		Console.log(httpResponse);
 	}
+
+	@Test
+	@Ignore
+	public void smmsTest(){
+		// https://github.com/dromara/hutool/issues/2079
+		// hutool的user agent 被封了
+		String token = "test";
+		String url = "https://sm.ms/api/v2/upload";
+		String result = HttpUtil.createPost(url)
+				.header(Header.USER_AGENT, "PostmanRuntime/7.28.4")
+				.auth(token)
+				.form("smfile", FileUtil.file("d:/test/qrcodeCustom.png"))
+				.execute().body();
+
+		Console.log(result);
+	}
 }
diff --git a/hutool-json/pom.xml b/hutool-json/pom.xml
index 5a6f8e97f0..ef9c36c8aa 100644
--- a/hutool-json/pom.xml
+++ b/hutool-json/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-json</artifactId>
diff --git a/hutool-json/src/test/java/cn/hutool/json/Issue644Test.java b/hutool-json/src/test/java/cn/hutool/json/Issue644Test.java
index 83b0a2b553..6371fbe134 100644
--- a/hutool-json/src/test/java/cn/hutool/json/Issue644Test.java
+++ b/hutool-json/src/test/java/cn/hutool/json/Issue644Test.java
@@ -1,5 +1,6 @@
 package cn.hutool.json;
 
+import cn.hutool.core.date.LocalDateTimeUtil;
 import lombok.Data;
 import org.junit.Assert;
 import org.junit.Test;
@@ -19,10 +20,12 @@ public void toBeanTest(){
 		final JSONObject jsonObject = JSONUtil.parseObj(beanWithDate);
 
 		BeanWithDate beanWithDate2 = JSONUtil.toBean(jsonObject, BeanWithDate.class);
-		Assert.assertEquals(beanWithDate.getDate(), beanWithDate2.getDate());
+		Assert.assertEquals(LocalDateTimeUtil.formatNormal(beanWithDate.getDate()),
+				LocalDateTimeUtil.formatNormal(beanWithDate2.getDate()));
 
 		beanWithDate2 = JSONUtil.toBean(jsonObject.toString(), BeanWithDate.class);
-		Assert.assertEquals(beanWithDate.getDate(), beanWithDate2.getDate());
+		Assert.assertEquals(LocalDateTimeUtil.formatNormal(beanWithDate.getDate()),
+				LocalDateTimeUtil.formatNormal(beanWithDate2.getDate()));
 	}
 
 	@Data
diff --git a/hutool-json/src/test/java/cn/hutool/json/JSONUtilTest.java b/hutool-json/src/test/java/cn/hutool/json/JSONUtilTest.java
index 262094eaa5..a067554e07 100644
--- a/hutool-json/src/test/java/cn/hutool/json/JSONUtilTest.java
+++ b/hutool-json/src/test/java/cn/hutool/json/JSONUtilTest.java
@@ -1,6 +1,7 @@
 package cn.hutool.json;
 
 import cn.hutool.core.collection.CollectionUtil;
+import cn.hutool.core.collection.ListUtil;
 import cn.hutool.core.date.DateUtil;
 import cn.hutool.core.lang.Console;
 import cn.hutool.core.map.MapUtil;
@@ -224,4 +225,13 @@ public void parseBigNumberTest(){
 		String str = "{\"test\":100000054128897953e4}";
 		Assert.assertEquals("{\"test\":1000000541288979530000}", JSONUtil.parseObj(str).toString());
 	}
+
+	@Test
+	public void toXmlTest(){
+		final JSONObject obj = JSONUtil.createObj();
+		obj.set("key1", "v1")
+				.set("key2", ListUtil.of("a", "b", "c"));
+		final String xmlStr = JSONUtil.toXmlStr(obj);
+		Assert.assertEquals("<key1>v1</key1><key2>a</key2><key2>b</key2><key2>c</key2>", xmlStr);
+	}
 }
diff --git a/hutool-jwt/pom.xml b/hutool-jwt/pom.xml
index 8f140738d8..f818fc158e 100644
--- a/hutool-jwt/pom.xml
+++ b/hutool-jwt/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-jwt</artifactId>
diff --git a/hutool-log/pom.xml b/hutool-log/pom.xml
index bb0b64bb17..0d97e43625 100644
--- a/hutool-log/pom.xml
+++ b/hutool-log/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-log</artifactId>
@@ -21,11 +21,11 @@
 		<slf4j.version>1.7.32</slf4j.version>
 		<logback.version>1.3.0-alpha5</logback.version>
 		<log4j.version>1.2.17</log4j.version>
-		<log4j2.version>2.17.0</log4j2.version>
+		<log4j2.version>2.17.1</log4j2.version>
 		<commons-logging.version>1.2</commons-logging.version>
 		<tinylog.version>1.3.6</tinylog.version>
 		<jboss-logging.version>3.4.2.Final</jboss-logging.version>
-		<logtube.version>0.41.0</logtube.version>
+		<logtube.version>0.43.0</logtube.version>
 	</properties>
 
 	<dependencies>
diff --git a/hutool-poi/pom.xml b/hutool-poi/pom.xml
index 41bfe81a02..826579e9c5 100644
--- a/hutool-poi/pom.xml
+++ b/hutool-poi/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-poi</artifactId>
diff --git a/hutool-script/pom.xml b/hutool-script/pom.xml
index 39da054ed6..7a6c33e2c0 100644
--- a/hutool-script/pom.xml
+++ b/hutool-script/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-script</artifactId>
diff --git a/hutool-setting/pom.xml b/hutool-setting/pom.xml
index 586cbc1e32..cbbc6a4c9b 100644
--- a/hutool-setting/pom.xml
+++ b/hutool-setting/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-setting</artifactId>
diff --git a/hutool-setting/src/main/java/cn/hutool/setting/AbsSetting.java b/hutool-setting/src/main/java/cn/hutool/setting/AbsSetting.java
index 9b8bac3e71..729367ea6c 100644
--- a/hutool-setting/src/main/java/cn/hutool/setting/AbsSetting.java
+++ b/hutool-setting/src/main/java/cn/hutool/setting/AbsSetting.java
@@ -187,7 +187,7 @@ public Integer getInt(String key, String group, Integer defaultValue) {
 	// --------------------------------------------------------------- Get bool
 
 	/**
-	 * 获取波尔型属性值
+	 * 获取布尔型属性值
 	 *
 	 * @param key   属性名
 	 * @param group 分组名
@@ -198,7 +198,7 @@ public Boolean getBool(String key, String group) {
 	}
 
 	/**
-	 * 获取波尔型型属性值
+	 * 获取布尔型属性值
 	 *
 	 * @param key          属性名
 	 * @param group        分组名
diff --git a/hutool-socket/pom.xml b/hutool-socket/pom.xml
index cb9e97af87..1839e22bf9 100644
--- a/hutool-socket/pom.xml
+++ b/hutool-socket/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-socket</artifactId>
diff --git a/hutool-system/pom.xml b/hutool-system/pom.xml
index d8f39fe160..0e2f0ec12e 100644
--- a/hutool-system/pom.xml
+++ b/hutool-system/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>cn.hutool</groupId>
 		<artifactId>hutool-parent</artifactId>
-		<version>5.7.18</version>
+		<version>5.7.19</version>
 	</parent>
 
 	<artifactId>hutool-system</artifactId>
@@ -30,7 +30,7 @@
 		<dependency>
 			<groupId>com.github.oshi</groupId>
 			<artifactId>oshi-core</artifactId>
-			<version>5.8.6</version>
+			<version>6.0.0</version>
 			<scope>provided</scope>
 		</dependency>
 		<dependency>
diff --git a/pom.xml b/pom.xml
index b0040119fc..673cdadb7b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -8,7 +8,7 @@
 
 	<groupId>cn.hutool</groupId>
 	<artifactId>hutool-parent</artifactId>
-	<version>5.7.18</version>
+	<version>5.7.19</version>
 	<name>hutool</name>
 	<description>Hutool是一个小而全的Java工具类库，通过静态方法封装，降低相关API的学习成本，提高工作效率，使Java拥有函数式语言般的优雅，让Java语言也可以“甜甜的”。</description>
 	<url>https://github.com/dromara/hutool</url>